{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/pure/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/pure/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","path":"images/xingqiu-qrcode.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.jpg","path":"images/donate/alipayimg.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/wechatpayimg.jpg","path":"images/donate/wechatpayimg.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","path":"images/donate/wechatpayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/pure.jpg","path":"images/favatar/pure.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","path":"images/favatar/SzsFox-logo.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"d54c5e766cb346b7b7d501b31eb8ac0ea614d7cb","modified":1666238928000},{"_id":"source/_data/gallery.yml","hash":"eef9b025c2a81fdc714967d0c7b21bed9d55cff5","modified":1666019862000},{"_id":"source/_data/links.yml","hash":"34d8884af868ff933712a974b7d885f011bc459f","modified":1666076442000},{"_id":"source/404/index.md","hash":"16638b081d796638565ca462f3c87339b9a0577e","modified":1666019862000},{"_id":"source/_posts/Linux常用命令.md","hash":"a0c2b8862b2fcf8dc2fb6ddce912912a8a121a66","modified":1668682018367},{"_id":"source/_posts/Neo4j安装.md","hash":"3e3f07f8a88e508888288cbec0e42ee153a4ec64","modified":1667471737710},{"_id":"source/_posts/githuberror.md","hash":"2625d2ebd04ee1d695d9a63bcc5b37c34b913ae7","modified":1676977236000},{"_id":"source/_posts/LeetCode75.md","hash":"02f8d77613d84746952ccc912d541d94dc628fdf","modified":1677296826000},{"_id":"source/_posts/Pytorch数据集加载.md","hash":"50f6dba9b3944741cf2d3beef9b789287d5e5519","modified":1667993319538},{"_id":"source/_posts/emoji.md","hash":"0695d519c8945185b02552a3e7b5b56babb6971c","modified":1666246629000},{"_id":"source/_posts/Neo4j.md","hash":"1051fae7eb3e9ac047ab75032e9ba374db36991c","modified":1667553964829},{"_id":"source/_posts/Vscode连接阿里云.md","hash":"4f213864e43d6b4c491875537dc9cdf583abd2c2","modified":1666768308620},{"_id":"source/_posts/python100天16-30.md","hash":"87a3e7e6c335aaeee40335df348c77d16fa32cf6","modified":1676975028298},{"_id":"source/_posts/hello-gitalk.md","hash":"20bf3d26c73ee93c7adbbfb422f6ee58f0f5c3ee","modified":1666406450609},{"_id":"source/_posts/hello-hexo.md","hash":"7fd0beb0edd51c93d4c8dd831ba15ef8a80e8399","modified":1667471907726},{"_id":"source/_posts/hello-picgo.md","hash":"53d4af24b15af7ccd62f7156acf0fa6805f40d3f","modified":1666406507930},{"_id":"source/_posts/一个服务器使用多个域名.md","hash":"7383c7b6a7bb4e806bd2025ead34edda1af5469f","modified":1666770115193},{"_id":"source/_posts/cypther.md","hash":"5e112aeceeede5246e62f3e0090f1c2d0c7ea8c9","modified":1667639983134},{"_id":"source/_posts/知识图谱表示学习综述,.md","hash":"19d7d3782f805bcc708d7136e3bd68d514fcd95e","modified":1669948884830},{"_id":"source/_posts/markdown.md","hash":"ce932d95431ebf3aa24ae6bede38aa9705640f73","modified":1666246652000},{"_id":"source/_posts/python100天1-15.md","hash":"75a2c07b9dbb43ebe74869f9badf8eefbcfd22d6","modified":1677488915000},{"_id":"source/repository/index.md","hash":"bf2bec13066d7d53fc05a334876eb482e6f95825","modified":1666019862000},{"_id":"source/tags/index.md","hash":"c35ba8af5acf41102909a9f9c1349a24d89f97a6","modified":1666019862000},{"_id":"source/_posts/快速傅里叶变换(FFT)求多项式乘法.md","hash":"176b4abf7be0101c54f42912146746997ae13cbc","modified":1668833015159},{"_id":"source/_posts/第一篇博客记录.md","hash":"c82e4668d20d486ffb64406a2971f95a5212d3e1","modified":1666406411181},{"_id":"source/links/index.md","hash":"d768332d0d322fe39267dbbda05b931488c27d7e","modified":1666019862000},{"_id":"source/_posts/排序复杂度.md","hash":"2ea74b75fd6f596a1509c24fcafb43d364e9aed3","modified":1668517184578},{"_id":"source/books/index.md","hash":"d913d58987f539ac2ca4cca366ebf42f8b1a03d1","modified":1666019862000},{"_id":"source/categories/index.md","hash":"b0006184ce9570766e7c7507d20fede1079f4992","modified":1666019862000},{"_id":"themes/pure/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1666019862000},{"_id":"themes/pure/.gitignore","hash":"204766bf9e2d6fe1fce5b9b02b8edfac2d235830","modified":1666019862000},{"_id":"themes/pure/README.cn.md","hash":"c14beac2aa2b6e6deb5359600b215d0ae348c0a4","modified":1666019862000},{"_id":"themes/pure/_config.yml","hash":"93e6fcce310299bfa8faa44fd15aac324b573c17","modified":1666093081000},{"_id":"themes/pure/package.json","hash":"d5bad0f074925c46e8ee5a75d385346d2fcea850","modified":1666019862000},{"_id":"themes/pure/_config.yml.example","hash":"a3b55d01598967db40da6f740b38cdba4f17d7bc","modified":1666019862000},{"_id":"themes/pure/languages/en.yml","hash":"ed342f9158f13fafaf51baa4cc89df4d8aa31720","modified":1666019862000},{"_id":"themes/pure/languages/default.yml","hash":"ed342f9158f13fafaf51baa4cc89df4d8aa31720","modified":1666019862000},{"_id":"themes/pure/scripts/thumbnail.js","hash":"4a7385e533f3567758bc995a8be5eb3e7839ac9c","modified":1666019862000},{"_id":"themes/pure/languages/zh-CN.yml","hash":"399061d959807b41e333808b4c7851ca290a82fe","modified":1666019862000},{"_id":"themes/pure/README.md","hash":"94fe451bf920cec6152e7bf9cbff4ccf0af0febc","modified":1666019862000},{"_id":"themes/pure/languages/zh-TW.yml","hash":"387ad2ca1b2a01dac36f768a6116a2033c3ac142","modified":1666019862000},{"_id":"themes/pure/source/favicon.png","hash":"1df4f8fc92b26acd84e67f17734381b09764ec01","modified":1661996443000},{"_id":"themes/pure/layout/books.ejs","hash":"75cbd31d3551c730e8a683bd5b08562881a95b51","modified":1666019862000},{"_id":"themes/pure/layout/about.ejs","hash":"4b64515ccc801cc9eba637a1e1909c6c4dd203f6","modified":1666019862000},{"_id":"themes/pure/layout/archive.ejs","hash":"62847ac8ce2562908c01d69f7f6886e24a6ded40","modified":1666019862000},{"_id":"themes/pure/layout/categories.ejs","hash":"9cc7b5f5af40fd7ec641bf0f5a5f8f1ce1ac22d5","modified":1666019862000},{"_id":"themes/pure/layout/links.ejs","hash":"ee90a5f2a9d19bc02682ea3a59177b947f7f7284","modified":1666019862000},{"_id":"themes/pure/layout/index.ejs","hash":"44418dbf1fb82392b8e1e4cc910d16a383190433","modified":1666019862000},{"_id":"themes/pure/layout/page.ejs","hash":"fbfed3c882059e757b23ff57924400683631594b","modified":1666019862000},{"_id":"themes/pure/layout/repository.ejs","hash":"0ecad33b6c1ec741eb3b02bb47a3824ac3749d09","modified":1666019862000},{"_id":"themes/pure/layout/category.ejs","hash":"b3f7a96fbaf201a65ed64d509edc29976542fbfb","modified":1666019862000},{"_id":"themes/pure/layout/post.ejs","hash":"fbfed3c882059e757b23ff57924400683631594b","modified":1666019862000},{"_id":"themes/pure/layout/layout.ejs","hash":"71bdeba7b8be0c4f56a87ad05da2c6d4254da55e","modified":1666019862000},{"_id":"themes/pure/layout/tags.ejs","hash":"76bc71f3dfd8a5b1aa14b09dec7b460b14f5028a","modified":1666019862000},{"_id":"themes/pure/layout/tag.ejs","hash":"30d8ddd84c9aa87dff1be02af308097cf4e72448","modified":1666019862000},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/custom.md","hash":"a3b49dff53b405dbafe2e96834313fc329710007","modified":1666019862000},{"_id":"themes/pure/_source/404/index.md","hash":"16638b081d796638565ca462f3c87339b9a0577e","modified":1666019862000},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/feature_request.md","hash":"205a69ba038cf76affcdc1f39d88a8cb8079fc12","modified":1666019862000},{"_id":"themes/pure/_source/about/index.md","hash":"b72470146e8244886e15715e0cae79b4130305e8","modified":1666019862000},{"_id":"themes/pure/_source/_data/links.yml","hash":"a5e31f35ebb8e1e8811f2e3d957cf4d4835aa2f9","modified":1666019862000},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16dbe91b392ef9debb7abeffde473668d3337eb2","modified":1666019862000},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"eef9b025c2a81fdc714967d0c7b21bed9d55cff5","modified":1666019862000},{"_id":"themes/pure/_source/categories/index.md","hash":"b0006184ce9570766e7c7507d20fede1079f4992","modified":1666019862000},{"_id":"themes/pure/_source/books/index.md","hash":"d913d58987f539ac2ca4cca366ebf42f8b1a03d1","modified":1666019862000},{"_id":"themes/pure/_source/links/index.md","hash":"d768332d0d322fe39267dbbda05b931488c27d7e","modified":1666019862000},{"_id":"themes/pure/source/fonts/README.md","hash":"b5b2aac1b36a86dac2217d242d650e026c5a3b0c","modified":1666019862000},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1666019862000},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1666019862000},{"_id":"themes/pure/_source/tags/index.md","hash":"c35ba8af5acf41102909a9f9c1349a24d89f97a6","modified":1666019862000},{"_id":"themes/pure/_source/repository/index.md","hash":"bf2bec13066d7d53fc05a334876eb482e6f95825","modified":1666019862000},{"_id":"themes/pure/source/images/avatar.png","hash":"31d3297a74b4f6ef7cbd148181682c6ab889bb59","modified":1661996433000},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1666019862000},{"_id":"themes/pure/source/images/logo.png","hash":"1df4f8fc92b26acd84e67f17734381b09764ec01","modified":1661996443000},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"caec54ce31577207e1fd31aefa017bde99a8027c","modified":1666019862000},{"_id":"themes/pure/source/images/thumb-default.png","hash":"1df4f8fc92b26acd84e67f17734381b09764ec01","modified":1661996443000},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1666019862000},{"_id":"themes/pure/layout/_common/script.ejs","hash":"3045da0c1979946694b628fbef39c01cc98b6e75","modified":1666019862000},{"_id":"themes/pure/source/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1666019862000},{"_id":"themes/pure/layout/_common/social.ejs","hash":"2bcdc7b0ee3905e724b01c2efa1ca6b47a846e1f","modified":1666019862000},{"_id":"themes/pure/layout/_common/head.ejs","hash":"4135b80c40cc970f9dc30fdd02e4f3e0a8b0af67","modified":1666019862000},{"_id":"themes/pure/source/js/insight.js","hash":"a1b773d9ce470bf0e2f8fdca1b6fac2ac3d31aeb","modified":1666019862000},{"_id":"themes/pure/source/js/application.js","hash":"c29f52f5ed2d1a5d8185b115f2962d22e707e19e","modified":1666019862000},{"_id":"themes/pure/layout/_common/header.ejs","hash":"c05070274965692a270c7e07ad9f4dad6f2c5888","modified":1666019862000},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"b250fb0f63286f9648cd8bf428bed6a88901b481","modified":1666019862000},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"83c8ce4b099951d58b2be5006f6963afbbe7d4e9","modified":1666019862000},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"9811bab46dcf436c6d05ae78acd62bc25751df78","modified":1666019862000},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"e6967ec160b93a5f466a73a36745833e644d04c0","modified":1666019862000},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"24823a881a6c15fd846c7f4780eb90fe869a813b","modified":1666019862000},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"89848cc8e0190ca76cc26d42c6880a23e370702e","modified":1666019862000},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"14b1ec0bdb911ab6d92046c78d371264afc4fb19","modified":1666019862000},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"5e9a5cc9bdc05fabf939db494c3937cc0df48a72","modified":1666019862000},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"dc548a83c33b5a598683bf2e1cb723bc3be4a76b","modified":1666019862000},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8932ce5283a7e6a356c6840104a7d6984f2ea986","modified":1666019862000},{"_id":"themes/pure/layout/_search/index.ejs","hash":"2c1f06dac5710e5fd073f3e5739545f3f6a0a56f","modified":1666019862000},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"944913dcabd09c10d3014c844abf851f4dfdba8d","modified":1666019862000},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"4be88eec64fd40c7e1b74df8ccb6c8cdfa3e7a17","modified":1666019862000},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"513892fae41de4e68963c95a9358285714274bb4","modified":1666019862000},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"a8a387f9e7289a6524cf46d7ab76c34fff37f4bf","modified":1666019862000},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"db8cba32bf6655a8d21fe8c8ccd0695b049e1d4c","modified":1666019862000},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"01fabc035fe48a494581f5680ed23f355e0e59ce","modified":1666019862000},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"57a272db26c365076c713a80b3ad0a77ce31ceca","modified":1666069730000},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"c196b54f92eff017a48e02bacc029dd82edc8cf9","modified":1666019862000},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"47bbb53fe9cca05928c45782c6897c8a94d597ff","modified":1666019862000},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"1d90de80d5eb2b10be6cad6fa0bfb465cbc5c9f1","modified":1666019862000},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"a6662f79f7fd6f1cc9b5180672ba8e1d0192fbe2","modified":1666019862000},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"17787edc304543c8658c7f51076022bda6ad227d","modified":1666019862000},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"15ebb5d7cc3f07e6bf5ffa783c3d2feabd252fc1","modified":1666019862000},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"c5d1add53ce45df5f851f19023b2e4f16dad43ef","modified":1666019862000},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"cc450ee5638f180332b3c4b747c5337b89d5a0c8","modified":1666019862000},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"a464706b7a903e25d34b104bdfb298b260abc132","modified":1666019862000},{"_id":"themes/pure/layout/_script/analytics.ejs","hash":"db2967c6902ceb67caa70364935ef3441b10432f","modified":1666019862000},{"_id":"themes/pure/layout/_script/comment.ejs","hash":"d5c98ab345952bb11d9ee69a9c1e3432b6760c55","modified":1666019862000},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"7a64d98212769423425102a441fca52eb6930fff","modified":1666019862000},{"_id":"themes/pure/layout/_script/search.ejs","hash":"2b784d15581df4309f56682896b725da7d44fcdd","modified":1666019862000},{"_id":"themes/pure/source/images/donate/alipayimg.png","hash":"9562f23f2eb57841c65dc769b6cc43a2cf0efa94","modified":1666019862000},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"42b6602f478c9afa4e462716dcfcc76875c0df7d","modified":1666019862000},{"_id":"themes/pure/layout/_script/fancybox.ejs","hash":"4558b5713926735d874deb14d8b21ed2e597b714","modified":1666019862000},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1666019862000},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","hash":"c0844d9a633696cb00ae64fde06f0f924f63b596","modified":1666019862000},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1666019862000},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"6e671c659b282b690a5d61e842b5d5f38dced6d7","modified":1666019862000},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1666019862000},{"_id":"themes/pure/source/images/favatar/pure.jpg","hash":"f86eafc318f3900319b25057811720168f24d248","modified":1666076352000},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"19585fc666e13a2816d74a8046998ac7fd36f75c","modified":1666019862000},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"4557389e499b89982eb005a821208fdd3dbac627","modified":1666019862000},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"829778c19025882fe73cf1b297a36a9d0eff39a1","modified":1666019862000},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"98dac12a9cbf47098b49183893d714355e2e5999","modified":1666019862000},{"_id":"themes/pure/layout/_script/_comment/gitalk.ejs","hash":"22757f52df17f97c37c8faa0501965b223e890f4","modified":1666071633000},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"0af71b5b354fdddd576fbd55c3aeb0221af71e7d","modified":1666019862000},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"96fcc36560a8367e6c4ba9ec1e82d0c5a730b1b4","modified":1666019862000},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"2cc7b1cb7bdf157fe6470eb34a613963df75afa3","modified":1666019862000},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"19120669bfea521e0b9d2df5bf3a34f0ecb8bb68","modified":1666019862000},{"_id":"themes/pure/layout/_script/_repository/gitee.ejs","hash":"be7fed016f5332b597af6a5d5de262cc4fe939a0","modified":1666019862000},{"_id":"themes/pure/layout/_script/_repository/github.ejs","hash":"4df2172813297fcfb9ab894f668f21230f2e9e77","modified":1666019862000},{"_id":"themes/pure/layout/_script/_repository/legacy.ejs","hash":"9ed1e7de79bd661065b9c071957c54e58c38827c","modified":1666019862000},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"8cbaef422bd7f3d1581d1198dd1c36e4c0e1e46e","modified":1666019862000},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"72b48dcaab830b615c71f6e810e96100b715c682","modified":1666019862000},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"f95c3289c03fa084afce64e3c399cb5127707f56","modified":1666019862000},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"c690e62e930ac7e66a5982aa95e146324e9b1e7f","modified":1666019862000},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"20ef0d47ec3d2de7d94db9778ddac092dc2bd4b5","modified":1666019862000},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"bdef9836ca91b3e45498a9d98bcaec69e6627ced","modified":1666019862000},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1666019862000},{"_id":"themes/pure/layout/_partial/post/gitalk.ejs","hash":"300cbe4d79c0d2913f82e5c1c6eb8a174726d914","modified":1666069428000},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"0ef132fc45042b28411e3334e77b6e2a7f47fae2","modified":1666019862000},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"946f4bcfa5e5dc4d60c05916c8187bd2c06d1a95","modified":1666019862000},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"5b4119092b890c156a4e85e15be2cbcebf89fcbd","modified":1666019862000},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"8fd470b8d52606a90d475f7da9dbbed32742b1c9","modified":1666019862000},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"81e9a89734505f54fef83dc74d2e277dab1bfa75","modified":1666019862000},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1666019862000},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1666019862000},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1666019862000},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1666019862000},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1666019862000},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1666019862000},{"_id":"themes/pure/source/js/plugin.min.js","hash":"4eded164f8b6f5187fbf10065873ebeee5ab8787","modified":1666019862000},{"_id":"themes/pure/source/js/jquery.min.js","hash":"dacc1f76630a9708add066819b1aabf8dce01056","modified":1666019862000},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"0d8b9a3aeaed95b74e292c593f0a8225711bfdca","modified":1666019862000},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"1af91521f1c29c231ffc19d7f64696ddcd71470b","modified":1666019862000},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1666019862000},{"_id":"themes/pure/source/js/plugin.js","hash":"59cb2985d8d21653f0f80ef327517eca86af0ac6","modified":1666019862000},{"_id":"themes/pure/source/css/style.css","hash":"fca937c3b6b2c631dc48d7bf2db062c425c3a084","modified":1666019862000},{"_id":"themes/pure/source/css/style.min.css","hash":"4e46cbfadf9f0c5c236239a163058a3f525492ce","modified":1666019862000},{"_id":"themes/pure/source/images/donate/alipayimg.jpg","hash":"62052b9bfca8f95e7cad47c3a9955143bf74e432","modified":1666071344000},{"_id":"themes/pure/source/images/donate/wechatpayimg.jpg","hash":"3ec64a148631a700e5e3aafa95291d9e324b4814","modified":1666071348000},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1666019862000},{"_id":"public/baidusitemap.xml","hash":"e6c1eaacc07e7fba45258be0fbf3736218cf754b","modified":1678109535324},{"_id":"public/atom.xml","hash":"c98e2519e767e9b579ffe3b6c3e0d8cdf8c9b5a1","modified":1678109535324},{"_id":"public/content.json","hash":"8d52e4c6f9712019d7636ac5f8f647e15f3d084d","modified":1678109535324},{"_id":"public/sitemap.txt","hash":"4d1e0605a7e4496d68b6b69d709036d3790cd02b","modified":1678109535324},{"_id":"public/sitemap.xml","hash":"c12412727fbb1c44b623a2f9fc42e1700d96f016","modified":1678109535324},{"_id":"public/404.html","hash":"21e6504bebde1e643190f64a20ce27019e2e34ce","modified":1678109535324},{"_id":"public/about/index.html","hash":"9558d41e6945216da0b88d7e05b79c78301e2b34","modified":1678109535324},{"_id":"public/tags/index.html","hash":"69c12ceea32481e7ad6b6432f2621a7eef35e469","modified":1678109535324},{"_id":"public/repository/index.html","hash":"a33b530e6264b8204412cc2b7e548b73cbccddd6","modified":1678109535324},{"_id":"public/links/index.html","hash":"278a148fee39efb0844689026cf5c2546bc9dbd6","modified":1678109535324},{"_id":"public/books/index.html","hash":"3d23d21ac5a6815c9d13c4d46dfb22b494f8a100","modified":1678109535324},{"_id":"public/categories/index.html","hash":"ab1ac40d912f61077ca5faad150e0ba65487c273","modified":1678109535324},{"_id":"public/2023/02/18/python100天16-30/index.html","hash":"701a73aeb37d0aae82e2840f1aff3429b1426fc6","modified":1678109535324},{"_id":"public/2023/02/12/python100天1-15/index.html","hash":"2c9ebab5e45c6ea8799e6a05a71e6c04bff0ef39","modified":1676977111785},{"_id":"public/2023/02/12/LeetCode75/index.html","hash":"84cbce37d6e134273c34f83ff7d9e6935e692b9b","modified":1676977111785},{"_id":"public/2022/12/02/知识图谱表示学习综述,/index.html","hash":"5d8c15c838aa77213785983787ddeb4409ba2a3f","modified":1678109535324},{"_id":"public/2022/11/18/快速傅里叶变换(FFT)求多项式乘法/index.html","hash":"e7276b0cb08e7ca3defbac223d34c89dbc9e063e","modified":1678109535324},{"_id":"public/2022/11/17/Linux常用命令/index.html","hash":"eb46b6cec5707b8941ad42ba9f470a793432413f","modified":1678109535324},{"_id":"public/2022/11/12/排序复杂度/index.html","hash":"6db117de11df2171dc9ec3f38463374be0643a63","modified":1678109535324},{"_id":"public/2022/11/09/githuberror/index.html","hash":"7565c7128eabd553d1621902f4f33d608e384bca","modified":1676977111785},{"_id":"public/2022/11/09/Pytorch数据集加载/index.html","hash":"4b89b706600187253e36fa6bde372771cb120879","modified":1678109535324},{"_id":"public/2022/11/05/cypther/index.html","hash":"b51b5a6c76320f2b883de74421842a0ba1f38b3b","modified":1678109535324},{"_id":"public/2022/11/04/Neo4j/index.html","hash":"454582c9eacad6585b7fef64d5deebb47a91fcb0","modified":1678109535324},{"_id":"public/2022/11/03/Neo4j安装/index.html","hash":"99be16dcf58ae3c696d9a5cb29920eced5d979bf","modified":1678109535324},{"_id":"public/2022/10/26/一个服务器使用多个域名/index.html","hash":"52e88fde1b66beb74bdb9e51589c768d1a421c81","modified":1678109535324},{"_id":"public/2022/10/26/Vscode连接阿里云/index.html","hash":"61960fb1c9f809fe050c0014d20c18161b564641","modified":1678109535324},{"_id":"public/2022/10/22/hello-gitalk/index.html","hash":"00fb1eb4b469b2f34de4541e22ff0615c5435c25","modified":1678109535324},{"_id":"public/2022/10/22/markdown/index.html","hash":"49b8688be0025bf2fd7eab4c6c949fc7d9ec0829","modified":1678109535324},{"_id":"public/2022/10/22/第一篇博客记录/index.html","hash":"edaaede17e0f567262bedf5a5864e35a72652fe4","modified":1678109535324},{"_id":"public/2022/10/22/emoji/index.html","hash":"2e25e708b13665ab57235a1773c3aac7a55b0317","modified":1678109535324},{"_id":"public/2022/10/22/hello-picgo/index.html","hash":"171e9f1bcdfe683c91dbc956f2a50ec9e1de1e89","modified":1678109535324},{"_id":"public/archives/index.html","hash":"657686d6d77a7647ab0b8cb5da23d0e482591057","modified":1678109535324},{"_id":"public/2022/10/22/hello-hexo/index.html","hash":"df1b1c245d45267058261618ae3b387d4eadc524","modified":1678109535324},{"_id":"public/archives/page/2/index.html","hash":"25c49d3d166d58161823c99aab6625499b712e7c","modified":1678109535324},{"_id":"public/archives/2022/index.html","hash":"501b1f3ad79b880279e03bf8689eb3f1d6560a10","modified":1678109535324},{"_id":"public/archives/2022/page/2/index.html","hash":"2673426a52ebf4358fa3424511ed175ceec81bc1","modified":1678109535324},{"_id":"public/archives/2022/10/index.html","hash":"50ac9fbc749b5f365658d7a65c72246cec354e03","modified":1678109535324},{"_id":"public/archives/2022/11/index.html","hash":"55bb93007c053565b688894cba6f775f9cf95d11","modified":1678109535324},{"_id":"public/archives/2022/12/index.html","hash":"16e3db5c320439a7dbd67a1335a166bb37a889fa","modified":1678109535324},{"_id":"public/archives/2023/index.html","hash":"cfab2b410afb614c8ec9121adbb3aee6337cd9d2","modified":1678109535324},{"_id":"public/archives/2023/02/index.html","hash":"984db678ffc945d6f89462e1c10368f534f0ec5f","modified":1678109535324},{"_id":"public/categories/快捷命令/index.html","hash":"f9b78115fd29a27f49672e09881f546bfc386d62","modified":1678109535324},{"_id":"public/categories/学习笔记/index.html","hash":"17e85275839ffbbdc094d0db5269eb8afb747b6d","modified":1678109535324},{"_id":"public/categories/杂七杂八配置/index.html","hash":"56e9d5e6fcdd615e6d257b50fb0b2bbc72385080","modified":1678109535324},{"_id":"public/index.html","hash":"9a6f59138b333fa87206f6c913947a04836bae0a","modified":1678109535324},{"_id":"public/categories/杂谈/index.html","hash":"da21ba51b76997a8702260d889f33754d3659715","modified":1678109535324},{"_id":"public/categories/hexo博客配置/index.html","hash":"1c2d541fe6df165a8c4f91fbad5c0065b855c8d2","modified":1678109535324},{"_id":"public/page/2/index.html","hash":"5c46fcff281f4c985048c0e848f007eb7693d2a8","modified":1678109535324},{"_id":"public/tags/Linux快捷命令/index.html","hash":"26e0d4c242c3f32649989c46ba4f6c5824f29fbb","modified":1678109535324},{"_id":"public/tags/算法刷题笔记/index.html","hash":"8889f8e62ee6cdd8dcf49c404b120d87a9b436d6","modified":1678109535324},{"_id":"public/tags/neo4j安装/index.html","hash":"a43c8b5592d1bda09413810b4aae995af050b51c","modified":1678109535324},{"_id":"public/tags/Dataset/index.html","hash":"acd5950d8a1d10ee97522bbe3257c054fb28a9bd","modified":1678109535324},{"_id":"public/tags/Sampler/index.html","hash":"16d20e6182a7356e300cc557b369a7dbc3cac198","modified":1678109535324},{"_id":"public/tags/Dataloader/index.html","hash":"3ee8f8f237f9ebe0da6bac488adc31c31c2f4282","modified":1678109535324},{"_id":"public/tags/collate-fn/index.html","hash":"f29883d1deb56c933dfbe3098188014a2bc18fd1","modified":1678109535324},{"_id":"public/tags/git-Time-out/index.html","hash":"b4f653386ce818f8c37fbf7774397e5a5cc7c9fc","modified":1678109535324},{"_id":"public/tags/github-Time-out/index.html","hash":"74b72ec77e48a273f3e39ed90e635afda150cc4e","modified":1678109535324},{"_id":"public/tags/hexo博客配置gitalk/index.html","hash":"a4b2e2e8de5be9c28de4ef7fd208f7d7b7e31d64","modified":1678109535324},{"_id":"public/tags/Neo4j快捷命令/index.html","hash":"079cf4ed722d386306f0e833d93d0bf9833637bd","modified":1678109535324},{"_id":"public/tags/Vscode连接阿里云服务器/index.html","hash":"c460fc8f74633300e8d418da1bdbdbb0b34d1850","modified":1678109535324},{"_id":"public/tags/hexo博客配置picgo/index.html","hash":"08d56bc1e25b234141143ed8edefe58a56db6923","modified":1678109535324},{"_id":"public/tags/快捷键/index.html","hash":"188ce691b51f581995660a27a5d964cec983efb8","modified":1678109535324},{"_id":"public/tags/hexo博客配置pure/index.html","hash":"b4afa74bd89b69dde27d09915fe9592e436391d6","modified":1678109535324},{"_id":"public/tags/Cypher学习笔记/index.html","hash":"5286db4f713a1568730222b12271579eb6256d34","modified":1678109535324},{"_id":"public/tags/多个域名访问同一个服务器/index.html","hash":"1fd246a909ada571e1889a86727283240e752ddd","modified":1678109535324},{"_id":"public/tags/Python学习笔记/index.html","hash":"7b9317ae11c62c799a83b14896b5b3d4febffd1a","modified":1678109535324},{"_id":"public/tags/知识图谱表示/index.html","hash":"acf5ba91aca695a8d3da72275715f396355a7814","modified":1678109535324},{"_id":"public/tags/综述/index.html","hash":"e4da2dc47c156a2f67624fc4c2a9dde5b832bace","modified":1678109535324},{"_id":"public/tags/搭建博客/index.html","hash":"d7733d4ec313572643e82101d606e8154b72f780","modified":1678109535324},{"_id":"public/tags/排序算法/index.html","hash":"0f93e5479605cbad459d008f5b0b96184d231b91","modified":1678109535324},{"_id":"public/tags/多项式乘法/index.html","hash":"f5ff5384dc0ef6f8d216b10a71188a983222f1c4","modified":1678109535324},{"_id":"public/tags/快速傅里叶变换/index.html","hash":"da021fbb28668eb11214632b885862765b69b925","modified":1678109535324},{"_id":"public/tags/FFT/index.html","hash":"e372db479a16c1234ec90f6f17610f884305d831","modified":1678109535324},{"_id":"public/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1676977111785},{"_id":"public/favicon.png","hash":"1df4f8fc92b26acd84e67f17734381b09764ec01","modified":1676977111785},{"_id":"public/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1676977111785},{"_id":"public/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1676977111785},{"_id":"public/images/avatar.png","hash":"31d3297a74b4f6ef7cbd148181682c6ab889bb59","modified":1676977111785},{"_id":"public/images/logo.png","hash":"1df4f8fc92b26acd84e67f17734381b09764ec01","modified":1676977111785},{"_id":"public/images/thumb-default.png","hash":"1df4f8fc92b26acd84e67f17734381b09764ec01","modified":1676977111785},{"_id":"public/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1676977111785},{"_id":"public/images/donate/alipayimg.png","hash":"9562f23f2eb57841c65dc769b6cc43a2cf0efa94","modified":1676977111785},{"_id":"public/images/donate/wechatpayimg.png","hash":"c0844d9a633696cb00ae64fde06f0f924f63b596","modified":1676977111785},{"_id":"public/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1676977111785},{"_id":"public/images/favatar/pure.jpg","hash":"f86eafc318f3900319b25057811720168f24d248","modified":1676977111785},{"_id":"public/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1676977111785},{"_id":"public/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1676977111785},{"_id":"public/fonts/README.html","hash":"26a13286f808d3ef09314df865be3049eef3906f","modified":1676977111785},{"_id":"public/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1676977111785},{"_id":"public/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1676977111785},{"_id":"public/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1676977111785},{"_id":"public/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1676977111785},{"_id":"public/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1676977111785},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1676977111785},{"_id":"public/css/style.css","hash":"a115348d8810a8d6b608ffc7bb02b915b3f48534","modified":1676977111785},{"_id":"public/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1676977111785},{"_id":"public/fonts/iconfont.svg","hash":"1af91521f1c29c231ffc19d7f64696ddcd71470b","modified":1676977111785},{"_id":"public/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1676977111785},{"_id":"public/images/donate/alipayimg.jpg","hash":"62052b9bfca8f95e7cad47c3a9955143bf74e432","modified":1676977111785},{"_id":"public/images/donate/wechatpayimg.jpg","hash":"3ec64a148631a700e5e3aafa95291d9e324b4814","modified":1676977111785},{"_id":"source/_posts/LeetCode剑指offer1.md","hash":"3f6a19a4b8d75e99e89d5d17b92f641dec48dc56","modified":1678104152000},{"_id":"source/_posts/Python３标准库.md","hash":"f79ff1e8e4a5a42eacc14b2de526f9cbe44e9ea1","modified":1677546742000},{"_id":"source/_posts/python100天31-40.md","hash":"c219cdd7b988f211adeb5eb0359f8db84f297723","modified":1678109541220},{"_id":"source/_posts/doing.ipynb","hash":"efdeabd637c3468a21c4b6dc8a681749c9fb75d3","modified":1677309474000},{"_id":"source/_posts/python3lib.ipynb","hash":"2687325e4b2662188cf68b28bd25f67218ac9962","modified":1677742758000},{"_id":"public/2023/03/06/LeetCode剑指offer1/index.html","hash":"5128225c0982e4c79c0d7045d705821cdba995e2","modified":1678109535324},{"_id":"public/2023/03/05/python100天31-40/index.html","hash":"49f4329d9e1d9f1d436cc9818d912b73e679b2f7","modified":1678109535324},{"_id":"public/2023/02/28/Python３标准库/index.html","hash":"e186142ba0b935361c94b61dd5f9789fd0110820","modified":1678109535324},{"_id":"public/2023/02/28/python100天1-15/index.html","hash":"6b3ddbfc5c9b8e92b18b993cd29dc30f291ed974","modified":1678109535324},{"_id":"public/2023/02/26/LeetCode75/index.html","hash":"01daeda0696b1cb8c5d568bc050119eedb611924","modified":1678109535324},{"_id":"public/2023/02/24/githuberror/index.html","hash":"9a4f67ab4f6735b81afcc98d4aca59b53d7b65b7","modified":1678109535324},{"_id":"public/archives/page/3/index.html","hash":"78c74d1c92a85dab0d9e1dbfd245f2679912294f","modified":1678109535324},{"_id":"public/archives/2023/03/index.html","hash":"0e6801433231b78338bb06af565a5a86d4661d62","modified":1678109535324},{"_id":"public/categories/学习笔记/page/2/index.html","hash":"3a54f55590e7c64d459bde072d84ed05615a0fb7","modified":1678109535324},{"_id":"public/page/3/index.html","hash":"c327f6d78d0c16a3be5634318f5451a6fd9bbb25","modified":1678109535324}],"Category":[{"name":"学习笔记","_id":"clee4vhae0004c8vqbdf35svg"},{"name":"快捷命令","_id":"clee4vhaj000cc8vqgqil6e6r"},{"name":"杂七杂八配置","_id":"clee4vhan000kc8vq9dooegfq"},{"name":"hexo博客配置","_id":"clee4vhav000yc8vq54y5exoy"},{"name":"杂谈","_id":"clee4vhb3001mc8vq1nthh5n5"}],"Data":[{"_id":"links","data":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}}},{"_id":"gallery","data":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}],"Page":[{"title":"404 Not Found：该页无法显示","toc":false,"comments":0,"_content":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"<%- config.url %>\" homePageName=\"回到我的主页\"></script>\n","source":"404/index.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\n---\n<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"<%- config.url %>\" homePageName=\"回到我的主页\"></script>\n","date":"2022-10-22T00:58:31.964Z","updated":"2022-10-17T15:17:42.000Z","path":"/404.html","layout":"page","_id":"clee4vha40000c8vq3d2lh9q2","content":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"<%- config.url %>\" homePageName=\"回到我的主页\"></script>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"<%- config.url %>\" homePageName=\"回到我的主页\"></script>\n"},{"title":"关于","description":"一个啥也不会的，但是又对啥都好奇的人。","layout":"about","comments":0,"sidebar":"custom","_content":"这是我的详细个人介绍。\n","source":"about/index.md","raw":"---\ntitle: 关于\ndescription: 一个啥也不会的，但是又对啥都好奇的人。\nlayout: about\ncomments: False\nsidebar: custom\n---\n这是我的详细个人介绍。\n","date":"2022-10-22T00:58:31.964Z","updated":"2022-10-20T04:08:48.000Z","path":"about/index.html","_id":"clee4vhab0002c8vq6u2gc4s5","content":"<p>这是我的详细个人介绍。</p>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>这是我的详细个人介绍。</p>\n"},{"title":"标签","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\nlayout: tags\ncomments: false\n---\n","date":"2022-10-22T00:58:31.967Z","updated":"2022-10-17T15:17:42.000Z","path":"tags/index.html","_id":"clee4vhaf0006c8vqen9i96ea","content":"","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":""},{"title":"Repositories","layout":"repository","comments":0,"sidebar":"none","_content":"","source":"repository/index.md","raw":"---\ntitle: Repositories\nlayout: repository\ncomments: false\nsidebar: none\n---\n","date":"2022-10-22T00:58:31.966Z","updated":"2022-10-17T15:17:42.000Z","path":"repository/index.html","_id":"clee4vhah0008c8vq9vz46yq9","content":"","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":""},{"title":"友情链接","layout":"links","comments":1,"sidebar":"none","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\nlayout: links\ncomments: true\nsidebar: none\n---","date":"2022-10-22T00:58:31.966Z","updated":"2022-10-17T15:17:42.000Z","path":"links/index.html","_id":"clee4vhai000ac8vq5psgd2jm","content":"","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":""},{"title":"书单","layout":"books","comments":0,"sidebar":"none","_content":"","source":"books/index.md","raw":"---\ntitle: 书单\nlayout: books\ncomments: false\nsidebar: none\n---","date":"2022-10-22T00:58:31.965Z","updated":"2022-10-17T15:17:42.000Z","path":"books/index.html","_id":"clee4vhak000fc8vqbzvofys5","content":"","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":""},{"title":"分类","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\nlayout: categories\ncomments: false\n---\n","date":"2022-10-22T00:58:31.965Z","updated":"2022-10-17T15:17:42.000Z","path":"categories/index.html","_id":"clee4vhal000hc8vq6fge4ees","content":"","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":""}],"Post":[{"title":"LeetCode75","toc":"true# 是否启用内容索引","_content":"\n## LeetCode75学习计划\n\n### 第一天\n[1480.一维数组的动态和](https://leetcode.cn/problems/running-sum-of-1d-array/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n思路:前缀和\n\n```python\n# python的内置数据方法\n# https://docs.python.org/3/library/itertools.html\n# accumulate([1,2,3,4,5]) --> 1 3 6 10 15\n\nclass Solution:\n    def runningSum(self, nums: List[int]) -> List[int]:\n        return list(accumulate(nums))\n\n```\n\n[724.寻找数组的中心下标](https://leetcode.cn/problems/find-pivot-index/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n思路: 先求前缀和,然后遍历下标,利用前缀和计算下标两边的和,左右两端的位置需要判断一下\n\n```python\nclass Solution:\n    def pivotIndex(self, nums: List[int]) -> int:\n        pre_sum=list(accumulate(nums))\n        length=len(nums)\n        if pre_sum[length-1]-pre_sum[0]==0:\n            return 0\n\n        for index in range(1,length-1):\n            if pre_sum[index-1]==pre_sum[length-1]-pre_sum[index]:\n                return index\n        # 返回最左边下标,防止有x,x,x,x,..0,0,0,0的情况\n        if pre_sum[length-2]==0:\n            return length-1\n        return -1\n```\n\n### 第二天\n\n[205. 同构字符串](https://leetcode.cn/problems/isomorphic-strings/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n思路:每个字符串对应位置的字母是一一对应的,用字典.\n两个方向,一个是s对t的字母是一一对应,一个是t对s的字母是一一对应\n\n```python\nclass Solution:\n    def isIsomorphic1(self, s: str, t: str) -> bool:\n        dic=defaultdict(str)\n        for index,item in enumerate(s):\n            # 检查s对t\n            if item not in dic:\n                # 检擦t对s\n                if t[index] not in dic.values():\n                    dic[item]=t[index]\n                else:\n                    return False\n            else:\n                if dic[item]!=t[index]:\n                    return False\n        return True\n\n    \n    def isIsomorphic(self, s: str, t: str) -> bool:\n        def check(s,t):\n            dic=defaultdict(str)\n            for index,item in enumerate(s):\n                if item not in dic:\n                    dic[item]=t[index]\n                else:\n                    if dic[item]!=t[index]:\n                        return False\n            return True\n        return check(s,t) and check(t,s)\n\n```\n\n[392. 判断子序列](https://leetcode.cn/problems/is-subsequence/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n思路:判断子序列,两个字符串不同位置的比较,双指针,ab指针,如果对应字符一样,都前进,如果不一样,指向母字符串的前进\n\n\n```python\nclass Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        length=len(s)\n        if length==0:return True\n        index=0\n        for item in t:\n            if item==s[index]:\n                index+=1\n            if index==length:\n                return True\n        return False\n```\n\n>332周赛\n\n[6355. 统计公平数对的数目](https://leetcode.cn/problems/count-the-number-of-fair-pairs/)\n思路:对数组排序,对每一个数,用二分找到大小在lower和upper之间的下标,如果这个数也在下标中就-1,最后结果除2,(i,j)(j,i)都算了\n\nbilibili:两个数的和,枚举一个数,用其他方法处理另一个数\n\n[6356. 子字符串异或查询](https://leetcode.cn/problems/substring-xor-queries/)\n思路:对每一个查询,a^b=c => a=c^b,然后把a转换成二进制字符串,剩下的就是在字符串中找子字符串在起始位置\n\nbilibili:预处理s中的二进制,把子字符串转换成数字存进dict,直接找a\n\n[6357. 最少得分子序列](https://leetcode.cn/problems/subsequence-with-the-minimum-score/)\n没做出来思路:计算最长公共子序列,统计不在最长公共子序列中的下标,就是要删除的下标(可能错在需要找到最左边的最长子序列)\n\n\n\nbilibili:\n1.删除[left,right]中间的几个和删除全部是一样的\n2.枚举s,把s从中间划分,前面匹配t的前部分,后面匹配t的后部分\n3.中间就是可以删掉的部分,找到最小的\n4.实现的时候,先从后往前匹配s和t(全部匹配),然后从前往后,找到相应的答案\n\n\n### 第三天\n\n\n[21. 合并两个有序链表](https://leetcode.cn/problems/merge-two-sorted-lists/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n思路:双指针比较交替,问题就是开头的细节,一种是用一个空链表头,一种就是先比较ab的大小直接赋值ab的头\n\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeTwoLists(self, a: Optional[ListNode], b: Optional[ListNode]) -> Optional[ListNode]:\n        if not a:return b\n        if not b:return a\n        # 空表头\n        prehead=ListNode(0)\n        pre=prehead\n        while a and b:\n            if a.val>b.val:\n                pre.next=b\n                b=b.next\n            else:\n                pre.next=a\n                a=a.next\n            pre=pre.next\n        pre.next=a if a else b\n        return prehead.next\n```\n\n[206. 反转链表](https://leetcode.cn/problems/reverse-linked-list/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n思路:反转链表需要标记连续的三个节点,a,b,c  把b指向a,然后a,b,c依次向后移动一个,注意边界情况\n\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseList(self, a: Optional[ListNode]) -> Optional[ListNode]:\n        if not a:return a\n        if not a.next:return a \n        b=a.next\n        c=a.next.next\n        # 这个地方不断掉会死循环\n        a.next=None\n        while b:\n            b.next=a\n            if not c:break\n            a=b\n            b=c\n            c=c.next\n        return b\n\n```\n\n\n\n### 第四天\n\n[876. 链表的中间结点](https://leetcode.cn/problems/middle-of-the-linked-list/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n思路:把链表存成数组,找数组长度一半的节点\n\n\n```python\nclass Solution:\n    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        nums=[]\n        while head:\n            nums.append(head)\n            head=head.next\n        length=len(nums)\n        return nums[length//2]\n```\n其他解法:1.第一次计算长度,第二次找节点  2.快慢指针\n\n[142. 环形链表 II](https://leetcode.cn/problems/linked-list-cycle-ii/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n自己错误思路:快慢指针,只能检查是否有环,找不到入口\n\n思路:1.字典存已经走过的  2.快慢指针经过数学推导计算\n\n```python\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        nums=dict()\n        while head:\n            if head in nums.keys():\n                return head\n            else:\n                nums[head]=1\n                head=head.next\n        return head\n```\n\n\n\n### 第五天\n\n[121. 买卖股票的最佳时机](https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:如果今天减去昨天的利润,加上之前的利润小于0,说明今天是巨亏的,不如之前的不买,买今天的,如果今天减去昨天的利润,加上之前的利润仍然大于0,记录一下,继续往后加,说不定会涨\n\n```python\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        ans=0\n        profit=0\n        for index in range(1,len(prices)):\n            if prices[index]-prices[index-1]+profit<0:\n                profit=0\n            else:\n                profit+=prices[index]-prices[index-1]\n            ans=max(ans,profit)\n        return ans\n```\n\n\n[409. 最长回文串](https://leetcode.cn/problems/longest-palindrome/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:统计字符的数量,注意加上一个奇数就行\n\n```python\nclass Solution:\n    def longestPalindrome(self, s: str) -> int:\n        m=defaultdict(int)\n        for item in s:\n            m[item]+=1\n        ans=0\n        flag=0\n        for k,v in m.items():\n            if v&1:\n                 flag=1\n                 v-=1\n            ans+=v\n        return ans+flag\n```\n\n### 第六天\n\n[589. N 叉树的前序遍历](https://leetcode.cn/problems/n-ary-tree-preorder-traversal/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:二叉树的深搜,变成了多叉树的深搜\n\n```python\nclass Solution:\n    def preorder(self, a: 'Node') -> List[int]:\n        ans=[]\n\n        def dfs(root):\n            if not root:return ans\n            ans.append(root.val)\n            for chi in root.children:\n                dfs(chi)\n        dfs(a)\n        return ans \n```\n\n[102. 二叉树的层序遍历](https://leetcode.cn/problems/binary-tree-level-order-traversal/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:广搜,用一个额外的层数变量标记当前节点在第几层\n\n其他思路:记录当前栈内有几个节点,然后遍历完这些节点,这些节点之后的就是下一层的节点\n\n```python\nclass Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        ans=[]\n        deq=[]\n        if not root:return []\n        deq.insert(0,(root,0))\n        last=0\n        curlayer=[]\n        while len(deq):\n            (temp,layer)=deq.pop()\n            if layer!=last:\n                ans.append(curlayer)\n                last=layer\n                curlayer=[]\n            curlayer.append(temp.val)\n            if temp.left:\n                deq.insert(0,(temp.left,layer+1))\n            if temp.right:\n                deq.insert(0,(temp.right,layer+1))\n        ans.append(curlayer)\n        return ans\n```\n\n### 第七天\n\n\n[704. 二分查找](https://leetcode.cn/problems/binary-search/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:正常二分,right要到能遍历到的边界\n\n[二分的细节&边界](https://leetcode.cn/problems/binary-search/solutions/8337/er-fen-cha-zhao-xiang-jie-by-labuladong/)\n\n```python\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        left,right=0,len(nums)-1\n\n        while left<=right:\n            mid=(left+right)>>1\n            if nums[mid]<target:\n                left=mid+1\n            elif nums[mid]>target:\n                right=mid-1\n            else:\n                return mid\n        return -1 if nums[mid]!=target else mid\n```\n\n\n\n\n[278. 第一个错误的版本](https://leetcode.cn/problems/first-bad-version/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:二分查找的变换版,区别在于要记录mid量,纯二分是找到mid直接返回,这个找到的可能不是需要的\n\n```python\nclass Solution:\n    def firstBadVersion(self, n: int) -> int:\n        left,right=1,n\n        ans=1\n        while left<=right:\n            mid=(left+right)>>1\n            if isBadVersion(mid):\n                right=mid-1\n                ans=mid\n            else:\n                left=mid+1\n        return ans\n```\n\n### 第八天\n\n\n[98. 验证二叉搜索树](https://leetcode.cn/problems/validate-binary-search-tree/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n错误思路:不能判断当前节点之后,然后再去分别判断左右子树\n\n正确×思路: 每棵左右子树节点的大小范围应该都是low-up,初始low=-inf,up=inf,左子树的范围是(low,root.val) 右子树是(root.val,up)  **官方题解也是错的**\n\n其他:二叉搜素树中序遍历一定是升序的\n\n[树的几种遍历](https://www.bilibili.com/video/BV14G411P7C1/?vd_source=602787b9249cd70cfca4def5e041f060)\n\n```python\nclass Solution:\n    def firstBadVersion(self, n: int) -> int:\n        left,right=1,n\n        ans=1\n        while left<=right:\n            mid=(left+right)>>1\n            if isBadVersion(mid):\n                right=mid-1\n                ans=mid\n            else:\n                left=mid+1\n        return ans\n```\n\n\n[235. 二叉搜索树的最近公共祖先](https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:1.寻找祖先路径,找到第一个不同的位置  2.一次遍历,如果都小就都找左边,如果都大就都找右边,如果有小有大就找到了分界点\n\n```python\nclass Solution:\n    def lowestCommonAncestor(self, r: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        while True:\n            if r.val>p.val and r.val>q.val:\n                r=r.left\n            elif r.val<p.val and r.val < q.val:\n                r=r.right\n            else:\n                return r\n```\n\n\n\n\n### 第九天\n[733. 图像渲染](https://leetcode.cn/problems/flood-fill/description/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:广搜/深搜找同颜色的,上下左右判断边界,访问数组\n\n```python\nclass Solution:\n    def floodFill(self, image: List[List[int]], sr: int, sc: int, color: int) -> List[List[int]]:       \n        n=len(image) \n        m=len(image[0])\n        visited=[[0]*m for _ in range(n)]\n        dq=deque()\n        dq.append((sr,sc))\n        oldcolor=image[sr][sc]\n        while dq:\n            x,y=dq.popleft()\n            image[x][y]=color\n            visited[x][y]=1\n            for x_,y_ in [(0,1),(0,-1),(-1,0),(1,0)]:\n                if x_+x>=0 and x_+x<n and y_+y>=0 and y_+y<m:\n                    if visited[x_+x][y_+y]:\n                        continue\n                    if image[x_+x][y_+y]==oldcolor:\n                        dq.append((x_+x,y_+y))\n            \n        return image\n```\n\n[200. 岛屿数量](https://leetcode.cn/problems/number-of-islands/description/)\n\n\n思路:深搜/广搜,从某点开始把连在一起的都访问一次,记录一共从几个点开始,这些点都是不同的岛屿\n\n```python\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        n=len(grid) \n        m=len(grid[0])\n        visited=[[0 if grid[i][j]=='1' else 1  for j in range(m)] for i in range(n)]\n        ans=0\n        for i in range(n):\n            for j in range(m):\n                if not visited[i][j]:\n                    ans+=1\n                    dq=deque()\n                    dq.append((i,j))\n                    while dq:\n                        x,y=dq.popleft()\n                        visited[x][y]=1\n                        for x_,y_ in [(0,1),(0,-1),(-1,0),(1,0)]:\n                            if x_+x>=0 and x_+x<n and y_+y>=0 and y_+y<m:\n                                if not visited[x_+x][y_+y]:\n                                    visited[x_+x][y_+y]=1\n                                    dq.append((x_+x,y_+y))\n            \n        return ans\n```\n\n\n>333周赛\n\n[6365. 将整数减少到零需要的最少操作数]()\n思路1:刚开始以为要转成二进制的01传,看0多还是1多,如果0多直接返回1的数量,但是668错了\n思路2:打表100000之内2的次方,然后二分查找n在那两个数中间,找距离近的这个数的插值,然后+1递归下去,54->64-54=10->10-8=2->0\n\nbilibili:找到最低为的1,考虑这个1 是直接减掉还是加上同位置的1 ,枚举这两种可能.\n\n`判断一个数是不是2的幂:(x & ( x-1 ))==0`\n\n`找到最低位的1:lowbit: x & -x`\n\n[☆6364. 无平方子集计数]()\n\n没思路:题型重灾区,应该是用dp做,但是毫无思路\n\nbilibili:对不起,等我学有所成再来看,什么jb玩意那么难\n\n[6363. 找出对应 LCP 矩阵的字符串]()\n\n没思路\n\n\n\n### 第十天\n\n[509. 斐波那契数](https://leetcode.cn/problems/fibonacci-number/description/)\n\n\n思路:.\n\n```python\n# 1.自顶向下,记忆化搜索\n# 2.自底向上,dp数组\n# 3.用a,b两个变量,空间复杂度降到O(1)\n# 4.矩阵快速幂,时间复杂度降到O(logn)\n```\n\n\n\n[70. 爬楼梯](https://leetcode.cn/problems/climbing-stairs/description/)\n\n\n思路:.\n\n```python\n# 斐波那契数列模板题\n```\n\n\n### 第十一天\n\n[746. 使用最小花费爬楼梯](https://leetcode.cn/problems/min-cost-climbing-stairs/description/)\n\n\n思路:爬到今天的费用只能有两个来源,前一个和前两个,但是顶楼数组里没有,所以追加一个0,第一层第二层的费用就是本身,第二层为什么不是min(第一层,第二层)呢,因为如果是从第一层上到的第二层,第二层还要继续向上上,那么还得加上第二层的费用,就变成了(第一层+第二层)的费用了\n\n```python\nclass Solution:\n    def minCostClimbingStairs(self, cost: List[int]) -> int:\n        cost.append(0)\n        n=len(cost)\n        # dp=[99999]*(n)\n        a=cost[0]\n        b=cost[1]\n        c=b\n        for i in range(2,n):\n            c=min(a,b)+cost[i]\n            a,b=b,c\n            # dp[i]=min(dp[i-1],dp[i-2])+cost[i]\n        return c\n\n```\n\n[62. 不同路径](https://leetcode.cn/problems/unique-paths/description/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:深搜和广搜的复杂度应该是$O(2^n)$,会超时,还是dp,当前位置只能从左边或者上边来到,就把左边和上边的方案数加起来就行,第一行第一列的方案数都是1\n\n```python\nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        a=[1 for j in range(n) ]\n        b=[1 for j in range(n) ]\n        for i in range(1,m):\n            for j in range(1,n):\n                b[j]=a[j]+b[j-1]\n            a=b[:]\n        return b[-1]\n\n        # dp=[[0 for j in range(n) ]  for i in range(m)]\n        # for i in range(m):\n        #     for j in range(n):\n        #         if i==0 or j==0:\n        #             dp[i][j]=1\n        #         else:\n        #             dp[i][j]=dp[i][j-1]+dp[i-1][j]\n        # return dp[m-1][n-1]\n\n        # dq=deque([(0,0)])\n        # ans=0\n        # while dq:\n        #     x,y=dq.pop()\n        #     if x==m-1 and y==n-1:\n        #         ans+=1\n        #     for x_,y_ in  [(x+1,y),(x,y+1)]:\n        #         if x_>=0 and x_<m and y_>=0 and y_<n:\n        #             dq.append((x_,y_))\n        # return ans \n```\n\n\n\n### 第十二天\n\n\n[438. 找到字符串中所有字母异位词](https://leetcode.cn/problems/find-all-anagrams-in-a-string/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:双指针维护长度为第二个字符串的区间,对区间内的数字统计数量,数量一致答案加1,右移的时候,右侧字符加1,左侧字符减1\n\n```python\nclass Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        def val(a,b):\n            for i,j in zip(a,b):\n                if i!=j:\n                    return False\n            return True\n        pnums=[0]*26\n        snums=[0]*26\n        constant=ord('a')\n        for item in p:\n            pnums[ord(item)-constant]+=1\n        left=right=0\n        lengths=len(s)\n        lengthp=len(p)\n        ans=[]\n        while right<lengths:\n            snums[ord(s[right])-constant]+=1\n            if val(snums,pnums):\n                ans.append(left)\n            right+=1\n            if right>=lengthp:\n                snums[ord(s[left])-constant]-=1\n                left+=1\n        return ans \n```\n\n\n[424. 替换后的最长重复字符](https://leetcode.cn/problems/longest-repeating-character-replacement/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:没有思路,考虑到了应该是用双指针\n\n题解:双指针加一个maxhistory记录最多的相同字符个数,如果当前区间长度大于了k+maxhistory,说明不可能变成一样的,左边右移1,否则说明当前区间不是最大长度,还可增加新元素\n\n```python\nclass Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n        constant=ord('A')\n        length=len(s)\n        # 左右指针\n        left=right=0\n        # 用于记录left-right区间每个字母的个数\n        nums=[0]*26\n        # 用于记录区间内出现的 最多的相同字符的个数\n        historymax=0\n        while right<length:\n            # 新加的字符个数加1\n            nums[ord(s[right])-constant]+=1\n            # 更新一下区间内最长的字符个数\n            historymax=max(historymax,nums[ord(s[right])-constant])\n            # historymax+k 是目前可以达到的最长长度,已经包含了右节点了\n            # 小于说明现在这个区间长度还小于最大长度\n            # 大于说明把其它不是最多出现的字符替换以后，都不能填满这个滑动的窗口，说明此时 k 不够用\n            # 这个时候须要考虑左边界向右移动\n            if right-left+1>historymax+k:\n                nums[ord(s[left])-constant]-=1\n                left+=1\n            right+=1\n        return right-left\n```\n\n### 第十三天\n\n[1. 两数之和](https://leetcode.cn/problems/two-sum/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:数组排序,然后对每个数字,二分查找target减去她的值\n\n题解:用字典存储每个target-num的值,如果当前数字在字典中存在,找到答案,否则把target减他存进去\n\n```python\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        # nums=[(i,n) for i,n in enumerate(nums)]\n        # nums=sorted(nums,key=lambda x:x[1])\n        # length=len(nums)\n        # for i in range(length):\n        #     ttt=target-nums[i][1]\n        #     index=bisect_left(nums,ttt,key=lambda x:x[1])\n        #     if index==i:continue\n        #     if index<0 or index>=length:continue\n        #     if nums[index][1]==ttt:\n        #         return [nums[i][0],nums[index][0]]\n        hashtable = dict()\n        for i, num in enumerate(nums):\n            if target - num in hashtable:\n                return [hashtable[target - num], i]\n            hashtable[nums[i]] = i\n        return []\n```\n\n\n[299. 猜数字游戏](https://leetcode.cn/problems/bulls-and-cows/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:A数字好统计,对于B数字,分别存A,B中数字出现的个数,加入对他们重新排序,一定是只能匹配个数少的,所以直接取每个数字二者中的最小值,求和就是B.\n\n\n```python\nclass Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        hasA=[0]*10\n        hasB=[0]*10\n        A=0\n        for i,j in zip(secret,guess):\n            if i==j:\n                A+=1\n            else:\n                hasA[int(j)]+=1\n                hasB[int(i)]+=1\n\n        ans=sum([min(a,b) for a,b in zip(hasA,hasB)])\n\n        return f'{A}A{ans}B'\n```\n\n\n### 第十四天\n\n\n[844. 比较含退格的字符串](https://leetcode.cn/problems/backspace-string-compare/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:忘记用栈了，从后往前遍历数组，cnt记录当前#的数量，然后跳过cnt个字母。\n\n题解:用栈，遇见#退一个字符\n\n```python\nclass Solution:\n    def backspaceCompare(self, s: str, t: str) -> bool:\n        def check(a):\n            length=len(a)\n            ans=[]\n            cnt=0\n            for i in range(length-1,-1,-1):\n                if a[i]=='#':\n                    cnt+=1\n                else:\n                    if cnt==0:\n                        ans.append(a[i])\n                    else:\n                        cnt-=1\n            return ans\n        return check(s)==check(t)\n```\n\n\n[394. 字符串解码](https://leetcode.cn/problems/backspace-string-compare/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:栈操作，一个数组存数字，一个栈用来弹字符，遇见]一直弹，直到弹出[。然后复制数字数组的最后一个数字便，在加入栈中，数字的处理有一点点麻烦\n\n```python\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack=[]\n        nums=[]\n        length=len(s)\n        i=0\n        while i<length:\n            if s[i]==']':\n                temp=[]\n                while stack[-1]!='[':\n                    temp.append(stack.pop())\n                stack.pop()\n                temp=\"\".join(temp[::-1])\n                stack.append(temp*nums[-1])\n                nums.pop()\n                i+=1\n            elif s[i].isnumeric():\n                n=0\n                while i<length  and s[i].isnumeric():\n                    n*=10\n                    n+=int(s[i])\n                    i+=1\n                nums.append(n)\n\n            else:\n                stack.append(s[i])\n                i+=1\n        return \"\".join(stack)\n```\n\n\n### 第十五天\n\n[1046. 最后一块石头的重量](https://leetcode.cn/problems/last-stone-weight/description/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:大项堆，但是python的heapq只能实现小项堆，大项堆的实现要加负号\n\n\n```python\nclass Solution:\n    def lastStoneWeight(self, x: List[int]) -> int:\n        x=list(map(lambda x:-x,x))\n        # 这一步的作用不是很明确\n        # 注意heapify(包括heapq封装的其他操作)都不会更改数据结构(仍为list)，只会以堆的操作规范对其进行处理。\n        # 虽然类型仍为list，但元素的顺序已经满足了堆的规范，所以从线性的角度看结果列表并非是有序的(是[1, 3, 7, 9, 5]而非[1, 3, 5, 7, 9])\n        heapq.heapify(x)\n        while len(x)>1:\n            a=heapq.heappop(x)\n            b=heapq.heappop(x)\n            if a!=b:\n                newstore=abs(max(a,b)-min(a,b))\n                heapq.heappush(x,-newstore)\n            \n        return -x[0] if len(x) else 0\n```\n\n[692. 前K个高频单词](https://leetcode.cn/problems/top-k-frequent-words/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:Counter统计单词数量，然后按照数量降序，字典序升序排列，返回k个\n\n题解：优先队列，元组（单词，词频）\n\n知识点：1.Counter的most_common()在计数相同的情况下是按出现顺序返回\n2.python多关键字排序：\n\n```python \narr=[(1,4,3),(1,3,3),(2,1,4),(3,5,1)]\narr.sort(key=lambda s:(s[0],-s[1])) \n#两个关键字排序,在需要倒序排列的关键字前加`-`号\n\n```\n\n```python\nclass Solution:\n    def topKFrequent(self, words: List[str], k: int) -> List[str]:\n        c = Counter(words).items()\n        c = sorted(c,key=lambda x:(-x[1],x[0]))\n        return list(map(lambda x:x[0],c[:k]))\n        # return sorted((cnt := Counter(words)).keys(), key=lambda key: (-cnt[key], key))[:k]\n```\n\n### 总结","source":"_posts/LeetCode75.md","raw":"---\ntitle: LeetCode75\ncategories:\n  - 学习笔记\ntags:\n  - 算法刷题笔记\ntoc: true# 是否启用内容索引\n---\n\n## LeetCode75学习计划\n\n### 第一天\n[1480.一维数组的动态和](https://leetcode.cn/problems/running-sum-of-1d-array/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n思路:前缀和\n\n```python\n# python的内置数据方法\n# https://docs.python.org/3/library/itertools.html\n# accumulate([1,2,3,4,5]) --> 1 3 6 10 15\n\nclass Solution:\n    def runningSum(self, nums: List[int]) -> List[int]:\n        return list(accumulate(nums))\n\n```\n\n[724.寻找数组的中心下标](https://leetcode.cn/problems/find-pivot-index/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n思路: 先求前缀和,然后遍历下标,利用前缀和计算下标两边的和,左右两端的位置需要判断一下\n\n```python\nclass Solution:\n    def pivotIndex(self, nums: List[int]) -> int:\n        pre_sum=list(accumulate(nums))\n        length=len(nums)\n        if pre_sum[length-1]-pre_sum[0]==0:\n            return 0\n\n        for index in range(1,length-1):\n            if pre_sum[index-1]==pre_sum[length-1]-pre_sum[index]:\n                return index\n        # 返回最左边下标,防止有x,x,x,x,..0,0,0,0的情况\n        if pre_sum[length-2]==0:\n            return length-1\n        return -1\n```\n\n### 第二天\n\n[205. 同构字符串](https://leetcode.cn/problems/isomorphic-strings/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n思路:每个字符串对应位置的字母是一一对应的,用字典.\n两个方向,一个是s对t的字母是一一对应,一个是t对s的字母是一一对应\n\n```python\nclass Solution:\n    def isIsomorphic1(self, s: str, t: str) -> bool:\n        dic=defaultdict(str)\n        for index,item in enumerate(s):\n            # 检查s对t\n            if item not in dic:\n                # 检擦t对s\n                if t[index] not in dic.values():\n                    dic[item]=t[index]\n                else:\n                    return False\n            else:\n                if dic[item]!=t[index]:\n                    return False\n        return True\n\n    \n    def isIsomorphic(self, s: str, t: str) -> bool:\n        def check(s,t):\n            dic=defaultdict(str)\n            for index,item in enumerate(s):\n                if item not in dic:\n                    dic[item]=t[index]\n                else:\n                    if dic[item]!=t[index]:\n                        return False\n            return True\n        return check(s,t) and check(t,s)\n\n```\n\n[392. 判断子序列](https://leetcode.cn/problems/is-subsequence/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n思路:判断子序列,两个字符串不同位置的比较,双指针,ab指针,如果对应字符一样,都前进,如果不一样,指向母字符串的前进\n\n\n```python\nclass Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        length=len(s)\n        if length==0:return True\n        index=0\n        for item in t:\n            if item==s[index]:\n                index+=1\n            if index==length:\n                return True\n        return False\n```\n\n>332周赛\n\n[6355. 统计公平数对的数目](https://leetcode.cn/problems/count-the-number-of-fair-pairs/)\n思路:对数组排序,对每一个数,用二分找到大小在lower和upper之间的下标,如果这个数也在下标中就-1,最后结果除2,(i,j)(j,i)都算了\n\nbilibili:两个数的和,枚举一个数,用其他方法处理另一个数\n\n[6356. 子字符串异或查询](https://leetcode.cn/problems/substring-xor-queries/)\n思路:对每一个查询,a^b=c => a=c^b,然后把a转换成二进制字符串,剩下的就是在字符串中找子字符串在起始位置\n\nbilibili:预处理s中的二进制,把子字符串转换成数字存进dict,直接找a\n\n[6357. 最少得分子序列](https://leetcode.cn/problems/subsequence-with-the-minimum-score/)\n没做出来思路:计算最长公共子序列,统计不在最长公共子序列中的下标,就是要删除的下标(可能错在需要找到最左边的最长子序列)\n\n\n\nbilibili:\n1.删除[left,right]中间的几个和删除全部是一样的\n2.枚举s,把s从中间划分,前面匹配t的前部分,后面匹配t的后部分\n3.中间就是可以删掉的部分,找到最小的\n4.实现的时候,先从后往前匹配s和t(全部匹配),然后从前往后,找到相应的答案\n\n\n### 第三天\n\n\n[21. 合并两个有序链表](https://leetcode.cn/problems/merge-two-sorted-lists/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n思路:双指针比较交替,问题就是开头的细节,一种是用一个空链表头,一种就是先比较ab的大小直接赋值ab的头\n\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeTwoLists(self, a: Optional[ListNode], b: Optional[ListNode]) -> Optional[ListNode]:\n        if not a:return b\n        if not b:return a\n        # 空表头\n        prehead=ListNode(0)\n        pre=prehead\n        while a and b:\n            if a.val>b.val:\n                pre.next=b\n                b=b.next\n            else:\n                pre.next=a\n                a=a.next\n            pre=pre.next\n        pre.next=a if a else b\n        return prehead.next\n```\n\n[206. 反转链表](https://leetcode.cn/problems/reverse-linked-list/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n思路:反转链表需要标记连续的三个节点,a,b,c  把b指向a,然后a,b,c依次向后移动一个,注意边界情况\n\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseList(self, a: Optional[ListNode]) -> Optional[ListNode]:\n        if not a:return a\n        if not a.next:return a \n        b=a.next\n        c=a.next.next\n        # 这个地方不断掉会死循环\n        a.next=None\n        while b:\n            b.next=a\n            if not c:break\n            a=b\n            b=c\n            c=c.next\n        return b\n\n```\n\n\n\n### 第四天\n\n[876. 链表的中间结点](https://leetcode.cn/problems/middle-of-the-linked-list/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n思路:把链表存成数组,找数组长度一半的节点\n\n\n```python\nclass Solution:\n    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        nums=[]\n        while head:\n            nums.append(head)\n            head=head.next\n        length=len(nums)\n        return nums[length//2]\n```\n其他解法:1.第一次计算长度,第二次找节点  2.快慢指针\n\n[142. 环形链表 II](https://leetcode.cn/problems/linked-list-cycle-ii/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n自己错误思路:快慢指针,只能检查是否有环,找不到入口\n\n思路:1.字典存已经走过的  2.快慢指针经过数学推导计算\n\n```python\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        nums=dict()\n        while head:\n            if head in nums.keys():\n                return head\n            else:\n                nums[head]=1\n                head=head.next\n        return head\n```\n\n\n\n### 第五天\n\n[121. 买卖股票的最佳时机](https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:如果今天减去昨天的利润,加上之前的利润小于0,说明今天是巨亏的,不如之前的不买,买今天的,如果今天减去昨天的利润,加上之前的利润仍然大于0,记录一下,继续往后加,说不定会涨\n\n```python\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        ans=0\n        profit=0\n        for index in range(1,len(prices)):\n            if prices[index]-prices[index-1]+profit<0:\n                profit=0\n            else:\n                profit+=prices[index]-prices[index-1]\n            ans=max(ans,profit)\n        return ans\n```\n\n\n[409. 最长回文串](https://leetcode.cn/problems/longest-palindrome/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:统计字符的数量,注意加上一个奇数就行\n\n```python\nclass Solution:\n    def longestPalindrome(self, s: str) -> int:\n        m=defaultdict(int)\n        for item in s:\n            m[item]+=1\n        ans=0\n        flag=0\n        for k,v in m.items():\n            if v&1:\n                 flag=1\n                 v-=1\n            ans+=v\n        return ans+flag\n```\n\n### 第六天\n\n[589. N 叉树的前序遍历](https://leetcode.cn/problems/n-ary-tree-preorder-traversal/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:二叉树的深搜,变成了多叉树的深搜\n\n```python\nclass Solution:\n    def preorder(self, a: 'Node') -> List[int]:\n        ans=[]\n\n        def dfs(root):\n            if not root:return ans\n            ans.append(root.val)\n            for chi in root.children:\n                dfs(chi)\n        dfs(a)\n        return ans \n```\n\n[102. 二叉树的层序遍历](https://leetcode.cn/problems/binary-tree-level-order-traversal/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:广搜,用一个额外的层数变量标记当前节点在第几层\n\n其他思路:记录当前栈内有几个节点,然后遍历完这些节点,这些节点之后的就是下一层的节点\n\n```python\nclass Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        ans=[]\n        deq=[]\n        if not root:return []\n        deq.insert(0,(root,0))\n        last=0\n        curlayer=[]\n        while len(deq):\n            (temp,layer)=deq.pop()\n            if layer!=last:\n                ans.append(curlayer)\n                last=layer\n                curlayer=[]\n            curlayer.append(temp.val)\n            if temp.left:\n                deq.insert(0,(temp.left,layer+1))\n            if temp.right:\n                deq.insert(0,(temp.right,layer+1))\n        ans.append(curlayer)\n        return ans\n```\n\n### 第七天\n\n\n[704. 二分查找](https://leetcode.cn/problems/binary-search/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:正常二分,right要到能遍历到的边界\n\n[二分的细节&边界](https://leetcode.cn/problems/binary-search/solutions/8337/er-fen-cha-zhao-xiang-jie-by-labuladong/)\n\n```python\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        left,right=0,len(nums)-1\n\n        while left<=right:\n            mid=(left+right)>>1\n            if nums[mid]<target:\n                left=mid+1\n            elif nums[mid]>target:\n                right=mid-1\n            else:\n                return mid\n        return -1 if nums[mid]!=target else mid\n```\n\n\n\n\n[278. 第一个错误的版本](https://leetcode.cn/problems/first-bad-version/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:二分查找的变换版,区别在于要记录mid量,纯二分是找到mid直接返回,这个找到的可能不是需要的\n\n```python\nclass Solution:\n    def firstBadVersion(self, n: int) -> int:\n        left,right=1,n\n        ans=1\n        while left<=right:\n            mid=(left+right)>>1\n            if isBadVersion(mid):\n                right=mid-1\n                ans=mid\n            else:\n                left=mid+1\n        return ans\n```\n\n### 第八天\n\n\n[98. 验证二叉搜索树](https://leetcode.cn/problems/validate-binary-search-tree/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n错误思路:不能判断当前节点之后,然后再去分别判断左右子树\n\n正确×思路: 每棵左右子树节点的大小范围应该都是low-up,初始low=-inf,up=inf,左子树的范围是(low,root.val) 右子树是(root.val,up)  **官方题解也是错的**\n\n其他:二叉搜素树中序遍历一定是升序的\n\n[树的几种遍历](https://www.bilibili.com/video/BV14G411P7C1/?vd_source=602787b9249cd70cfca4def5e041f060)\n\n```python\nclass Solution:\n    def firstBadVersion(self, n: int) -> int:\n        left,right=1,n\n        ans=1\n        while left<=right:\n            mid=(left+right)>>1\n            if isBadVersion(mid):\n                right=mid-1\n                ans=mid\n            else:\n                left=mid+1\n        return ans\n```\n\n\n[235. 二叉搜索树的最近公共祖先](https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:1.寻找祖先路径,找到第一个不同的位置  2.一次遍历,如果都小就都找左边,如果都大就都找右边,如果有小有大就找到了分界点\n\n```python\nclass Solution:\n    def lowestCommonAncestor(self, r: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        while True:\n            if r.val>p.val and r.val>q.val:\n                r=r.left\n            elif r.val<p.val and r.val < q.val:\n                r=r.right\n            else:\n                return r\n```\n\n\n\n\n### 第九天\n[733. 图像渲染](https://leetcode.cn/problems/flood-fill/description/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:广搜/深搜找同颜色的,上下左右判断边界,访问数组\n\n```python\nclass Solution:\n    def floodFill(self, image: List[List[int]], sr: int, sc: int, color: int) -> List[List[int]]:       \n        n=len(image) \n        m=len(image[0])\n        visited=[[0]*m for _ in range(n)]\n        dq=deque()\n        dq.append((sr,sc))\n        oldcolor=image[sr][sc]\n        while dq:\n            x,y=dq.popleft()\n            image[x][y]=color\n            visited[x][y]=1\n            for x_,y_ in [(0,1),(0,-1),(-1,0),(1,0)]:\n                if x_+x>=0 and x_+x<n and y_+y>=0 and y_+y<m:\n                    if visited[x_+x][y_+y]:\n                        continue\n                    if image[x_+x][y_+y]==oldcolor:\n                        dq.append((x_+x,y_+y))\n            \n        return image\n```\n\n[200. 岛屿数量](https://leetcode.cn/problems/number-of-islands/description/)\n\n\n思路:深搜/广搜,从某点开始把连在一起的都访问一次,记录一共从几个点开始,这些点都是不同的岛屿\n\n```python\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        n=len(grid) \n        m=len(grid[0])\n        visited=[[0 if grid[i][j]=='1' else 1  for j in range(m)] for i in range(n)]\n        ans=0\n        for i in range(n):\n            for j in range(m):\n                if not visited[i][j]:\n                    ans+=1\n                    dq=deque()\n                    dq.append((i,j))\n                    while dq:\n                        x,y=dq.popleft()\n                        visited[x][y]=1\n                        for x_,y_ in [(0,1),(0,-1),(-1,0),(1,0)]:\n                            if x_+x>=0 and x_+x<n and y_+y>=0 and y_+y<m:\n                                if not visited[x_+x][y_+y]:\n                                    visited[x_+x][y_+y]=1\n                                    dq.append((x_+x,y_+y))\n            \n        return ans\n```\n\n\n>333周赛\n\n[6365. 将整数减少到零需要的最少操作数]()\n思路1:刚开始以为要转成二进制的01传,看0多还是1多,如果0多直接返回1的数量,但是668错了\n思路2:打表100000之内2的次方,然后二分查找n在那两个数中间,找距离近的这个数的插值,然后+1递归下去,54->64-54=10->10-8=2->0\n\nbilibili:找到最低为的1,考虑这个1 是直接减掉还是加上同位置的1 ,枚举这两种可能.\n\n`判断一个数是不是2的幂:(x & ( x-1 ))==0`\n\n`找到最低位的1:lowbit: x & -x`\n\n[☆6364. 无平方子集计数]()\n\n没思路:题型重灾区,应该是用dp做,但是毫无思路\n\nbilibili:对不起,等我学有所成再来看,什么jb玩意那么难\n\n[6363. 找出对应 LCP 矩阵的字符串]()\n\n没思路\n\n\n\n### 第十天\n\n[509. 斐波那契数](https://leetcode.cn/problems/fibonacci-number/description/)\n\n\n思路:.\n\n```python\n# 1.自顶向下,记忆化搜索\n# 2.自底向上,dp数组\n# 3.用a,b两个变量,空间复杂度降到O(1)\n# 4.矩阵快速幂,时间复杂度降到O(logn)\n```\n\n\n\n[70. 爬楼梯](https://leetcode.cn/problems/climbing-stairs/description/)\n\n\n思路:.\n\n```python\n# 斐波那契数列模板题\n```\n\n\n### 第十一天\n\n[746. 使用最小花费爬楼梯](https://leetcode.cn/problems/min-cost-climbing-stairs/description/)\n\n\n思路:爬到今天的费用只能有两个来源,前一个和前两个,但是顶楼数组里没有,所以追加一个0,第一层第二层的费用就是本身,第二层为什么不是min(第一层,第二层)呢,因为如果是从第一层上到的第二层,第二层还要继续向上上,那么还得加上第二层的费用,就变成了(第一层+第二层)的费用了\n\n```python\nclass Solution:\n    def minCostClimbingStairs(self, cost: List[int]) -> int:\n        cost.append(0)\n        n=len(cost)\n        # dp=[99999]*(n)\n        a=cost[0]\n        b=cost[1]\n        c=b\n        for i in range(2,n):\n            c=min(a,b)+cost[i]\n            a,b=b,c\n            # dp[i]=min(dp[i-1],dp[i-2])+cost[i]\n        return c\n\n```\n\n[62. 不同路径](https://leetcode.cn/problems/unique-paths/description/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:深搜和广搜的复杂度应该是$O(2^n)$,会超时,还是dp,当前位置只能从左边或者上边来到,就把左边和上边的方案数加起来就行,第一行第一列的方案数都是1\n\n```python\nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        a=[1 for j in range(n) ]\n        b=[1 for j in range(n) ]\n        for i in range(1,m):\n            for j in range(1,n):\n                b[j]=a[j]+b[j-1]\n            a=b[:]\n        return b[-1]\n\n        # dp=[[0 for j in range(n) ]  for i in range(m)]\n        # for i in range(m):\n        #     for j in range(n):\n        #         if i==0 or j==0:\n        #             dp[i][j]=1\n        #         else:\n        #             dp[i][j]=dp[i][j-1]+dp[i-1][j]\n        # return dp[m-1][n-1]\n\n        # dq=deque([(0,0)])\n        # ans=0\n        # while dq:\n        #     x,y=dq.pop()\n        #     if x==m-1 and y==n-1:\n        #         ans+=1\n        #     for x_,y_ in  [(x+1,y),(x,y+1)]:\n        #         if x_>=0 and x_<m and y_>=0 and y_<n:\n        #             dq.append((x_,y_))\n        # return ans \n```\n\n\n\n### 第十二天\n\n\n[438. 找到字符串中所有字母异位词](https://leetcode.cn/problems/find-all-anagrams-in-a-string/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:双指针维护长度为第二个字符串的区间,对区间内的数字统计数量,数量一致答案加1,右移的时候,右侧字符加1,左侧字符减1\n\n```python\nclass Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        def val(a,b):\n            for i,j in zip(a,b):\n                if i!=j:\n                    return False\n            return True\n        pnums=[0]*26\n        snums=[0]*26\n        constant=ord('a')\n        for item in p:\n            pnums[ord(item)-constant]+=1\n        left=right=0\n        lengths=len(s)\n        lengthp=len(p)\n        ans=[]\n        while right<lengths:\n            snums[ord(s[right])-constant]+=1\n            if val(snums,pnums):\n                ans.append(left)\n            right+=1\n            if right>=lengthp:\n                snums[ord(s[left])-constant]-=1\n                left+=1\n        return ans \n```\n\n\n[424. 替换后的最长重复字符](https://leetcode.cn/problems/longest-repeating-character-replacement/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:没有思路,考虑到了应该是用双指针\n\n题解:双指针加一个maxhistory记录最多的相同字符个数,如果当前区间长度大于了k+maxhistory,说明不可能变成一样的,左边右移1,否则说明当前区间不是最大长度,还可增加新元素\n\n```python\nclass Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n        constant=ord('A')\n        length=len(s)\n        # 左右指针\n        left=right=0\n        # 用于记录left-right区间每个字母的个数\n        nums=[0]*26\n        # 用于记录区间内出现的 最多的相同字符的个数\n        historymax=0\n        while right<length:\n            # 新加的字符个数加1\n            nums[ord(s[right])-constant]+=1\n            # 更新一下区间内最长的字符个数\n            historymax=max(historymax,nums[ord(s[right])-constant])\n            # historymax+k 是目前可以达到的最长长度,已经包含了右节点了\n            # 小于说明现在这个区间长度还小于最大长度\n            # 大于说明把其它不是最多出现的字符替换以后，都不能填满这个滑动的窗口，说明此时 k 不够用\n            # 这个时候须要考虑左边界向右移动\n            if right-left+1>historymax+k:\n                nums[ord(s[left])-constant]-=1\n                left+=1\n            right+=1\n        return right-left\n```\n\n### 第十三天\n\n[1. 两数之和](https://leetcode.cn/problems/two-sum/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:数组排序,然后对每个数字,二分查找target减去她的值\n\n题解:用字典存储每个target-num的值,如果当前数字在字典中存在,找到答案,否则把target减他存进去\n\n```python\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        # nums=[(i,n) for i,n in enumerate(nums)]\n        # nums=sorted(nums,key=lambda x:x[1])\n        # length=len(nums)\n        # for i in range(length):\n        #     ttt=target-nums[i][1]\n        #     index=bisect_left(nums,ttt,key=lambda x:x[1])\n        #     if index==i:continue\n        #     if index<0 or index>=length:continue\n        #     if nums[index][1]==ttt:\n        #         return [nums[i][0],nums[index][0]]\n        hashtable = dict()\n        for i, num in enumerate(nums):\n            if target - num in hashtable:\n                return [hashtable[target - num], i]\n            hashtable[nums[i]] = i\n        return []\n```\n\n\n[299. 猜数字游戏](https://leetcode.cn/problems/bulls-and-cows/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:A数字好统计,对于B数字,分别存A,B中数字出现的个数,加入对他们重新排序,一定是只能匹配个数少的,所以直接取每个数字二者中的最小值,求和就是B.\n\n\n```python\nclass Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        hasA=[0]*10\n        hasB=[0]*10\n        A=0\n        for i,j in zip(secret,guess):\n            if i==j:\n                A+=1\n            else:\n                hasA[int(j)]+=1\n                hasB[int(i)]+=1\n\n        ans=sum([min(a,b) for a,b in zip(hasA,hasB)])\n\n        return f'{A}A{ans}B'\n```\n\n\n### 第十四天\n\n\n[844. 比较含退格的字符串](https://leetcode.cn/problems/backspace-string-compare/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:忘记用栈了，从后往前遍历数组，cnt记录当前#的数量，然后跳过cnt个字母。\n\n题解:用栈，遇见#退一个字符\n\n```python\nclass Solution:\n    def backspaceCompare(self, s: str, t: str) -> bool:\n        def check(a):\n            length=len(a)\n            ans=[]\n            cnt=0\n            for i in range(length-1,-1,-1):\n                if a[i]=='#':\n                    cnt+=1\n                else:\n                    if cnt==0:\n                        ans.append(a[i])\n                    else:\n                        cnt-=1\n            return ans\n        return check(s)==check(t)\n```\n\n\n[394. 字符串解码](https://leetcode.cn/problems/backspace-string-compare/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:栈操作，一个数组存数字，一个栈用来弹字符，遇见]一直弹，直到弹出[。然后复制数字数组的最后一个数字便，在加入栈中，数字的处理有一点点麻烦\n\n```python\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack=[]\n        nums=[]\n        length=len(s)\n        i=0\n        while i<length:\n            if s[i]==']':\n                temp=[]\n                while stack[-1]!='[':\n                    temp.append(stack.pop())\n                stack.pop()\n                temp=\"\".join(temp[::-1])\n                stack.append(temp*nums[-1])\n                nums.pop()\n                i+=1\n            elif s[i].isnumeric():\n                n=0\n                while i<length  and s[i].isnumeric():\n                    n*=10\n                    n+=int(s[i])\n                    i+=1\n                nums.append(n)\n\n            else:\n                stack.append(s[i])\n                i+=1\n        return \"\".join(stack)\n```\n\n\n### 第十五天\n\n[1046. 最后一块石头的重量](https://leetcode.cn/problems/last-stone-weight/description/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:大项堆，但是python的heapq只能实现小项堆，大项堆的实现要加负号\n\n\n```python\nclass Solution:\n    def lastStoneWeight(self, x: List[int]) -> int:\n        x=list(map(lambda x:-x,x))\n        # 这一步的作用不是很明确\n        # 注意heapify(包括heapq封装的其他操作)都不会更改数据结构(仍为list)，只会以堆的操作规范对其进行处理。\n        # 虽然类型仍为list，但元素的顺序已经满足了堆的规范，所以从线性的角度看结果列表并非是有序的(是[1, 3, 7, 9, 5]而非[1, 3, 5, 7, 9])\n        heapq.heapify(x)\n        while len(x)>1:\n            a=heapq.heappop(x)\n            b=heapq.heappop(x)\n            if a!=b:\n                newstore=abs(max(a,b)-min(a,b))\n                heapq.heappush(x,-newstore)\n            \n        return -x[0] if len(x) else 0\n```\n\n[692. 前K个高频单词](https://leetcode.cn/problems/top-k-frequent-words/?envType=study-plan&id=leetcode_75_level_1&plan=leetcode_75&plan_progress=jr2hbvs)\n\n\n思路:Counter统计单词数量，然后按照数量降序，字典序升序排列，返回k个\n\n题解：优先队列，元组（单词，词频）\n\n知识点：1.Counter的most_common()在计数相同的情况下是按出现顺序返回\n2.python多关键字排序：\n\n```python \narr=[(1,4,3),(1,3,3),(2,1,4),(3,5,1)]\narr.sort(key=lambda s:(s[0],-s[1])) \n#两个关键字排序,在需要倒序排列的关键字前加`-`号\n\n```\n\n```python\nclass Solution:\n    def topKFrequent(self, words: List[str], k: int) -> List[str]:\n        c = Counter(words).items()\n        c = sorted(c,key=lambda x:(-x[1],x[0]))\n        return list(map(lambda x:x[0],c[:k]))\n        # return sorted((cnt := Counter(words)).keys(), key=lambda key: (-cnt[key], key))[:k]\n```\n\n### 总结","slug":"LeetCode75","published":1,"date":"2023-02-26T11:34:34.695Z","updated":"2023-02-25T03:47:06.000Z","_id":"clee4vha80001c8vqgypm1hg3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"leetcode75学习计划\"><a class=\"markdownIt-Anchor\" href=\"#leetcode75学习计划\"></a> LeetCode75学习计划</h2>\n<h3 id=\"第一天\"><a class=\"markdownIt-Anchor\" href=\"#第一天\"></a> 第一天</h3>\n<p><a href=\"https://leetcode.cn/problems/running-sum-of-1d-array/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">1480.一维数组的动态和</a></p>\n<p>思路:前缀和</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># python的内置数据方法</span></span><br><span class=\"line\"><span class=\"comment\"># https://docs.python.org/3/library/itertools.html</span></span><br><span class=\"line\"><span class=\"comment\"># accumulate([1,2,3,4,5]) --&gt; 1 3 6 10 15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">runningSum</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>(accumulate(nums))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/find-pivot-index/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">724.寻找数组的中心下标</a></p>\n<p>思路: 先求前缀和,然后遍历下标,利用前缀和计算下标两边的和,左右两端的位置需要判断一下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pivotIndex</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        pre_sum=<span class=\"built_in\">list</span>(accumulate(nums))</span><br><span class=\"line\">        length=<span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> pre_sum[length-<span class=\"number\">1</span>]-pre_sum[<span class=\"number\">0</span>]==<span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,length-<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> pre_sum[index-<span class=\"number\">1</span>]==pre_sum[length-<span class=\"number\">1</span>]-pre_sum[index]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> index</span><br><span class=\"line\">        <span class=\"comment\"># 返回最左边下标,防止有x,x,x,x,..0,0,0,0的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> pre_sum[length-<span class=\"number\">2</span>]==<span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> length-<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第二天\"><a class=\"markdownIt-Anchor\" href=\"#第二天\"></a> 第二天</h3>\n<p><a href=\"https://leetcode.cn/problems/isomorphic-strings/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">205. 同构字符串</a></p>\n<p>思路:每个字符串对应位置的字母是一一对应的,用字典.<br />\n两个方向,一个是s对t的字母是一一对应,一个是t对s的字母是一一对应</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">isIsomorphic1</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span>, t: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        dic=defaultdict(<span class=\"built_in\">str</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> index,item <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(s):</span><br><span class=\"line\">            <span class=\"comment\"># 检查s对t</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> item <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">                <span class=\"comment\"># 检擦t对s</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> t[index] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> dic.values():</span><br><span class=\"line\">                    dic[item]=t[index]</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> dic[item]!=t[index]:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">isIsomorphic</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span>, t: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">check</span>(<span class=\"params\">s,t</span>):</span><br><span class=\"line\">            dic=defaultdict(<span class=\"built_in\">str</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> index,item <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(s):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> item <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">                    dic[item]=t[index]</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> dic[item]!=t[index]:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> check(s,t) <span class=\"keyword\">and</span> check(t,s)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/is-subsequence/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">392. 判断子序列</a></p>\n<p>思路:判断子序列,两个字符串不同位置的比较,双指针,ab指针,如果对应字符一样,都前进,如果不一样,指向母字符串的前进</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">isSubsequence</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span>, t: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        length=<span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> length==<span class=\"number\">0</span>:<span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        index=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> t:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item==s[index]:</span><br><span class=\"line\">                index+=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> index==length:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>332周赛</p>\n</blockquote>\n<p><a href=\"https://leetcode.cn/problems/count-the-number-of-fair-pairs/\">6355. 统计公平数对的数目</a><br />\n思路:对数组排序,对每一个数,用二分找到大小在lower和upper之间的下标,如果这个数也在下标中就-1,最后结果除2,(i,j)(j,i)都算了</p>\n<p>bilibili:两个数的和,枚举一个数,用其他方法处理另一个数</p>\n<p><a href=\"https://leetcode.cn/problems/substring-xor-queries/\">6356. 子字符串异或查询</a><br />\n思路:对每一个查询,a^b=c =&gt; a=c^b,然后把a转换成二进制字符串,剩下的就是在字符串中找子字符串在起始位置</p>\n<p>bilibili:预处理s中的二进制,把子字符串转换成数字存进dict,直接找a</p>\n<p><a href=\"https://leetcode.cn/problems/subsequence-with-the-minimum-score/\">6357. 最少得分子序列</a><br />\n没做出来思路:计算最长公共子序列,统计不在最长公共子序列中的下标,就是要删除的下标(可能错在需要找到最左边的最长子序列)</p>\n<p>bilibili:<br />\n1.删除[left,right]中间的几个和删除全部是一样的<br />\n2.枚举s,把s从中间划分,前面匹配t的前部分,后面匹配t的后部分<br />\n3.中间就是可以删掉的部分,找到最小的<br />\n4.实现的时候,先从后往前匹配s和t(全部匹配),然后从前往后,找到相应的答案</p>\n<h3 id=\"第三天\"><a class=\"markdownIt-Anchor\" href=\"#第三天\"></a> 第三天</h3>\n<p><a href=\"https://leetcode.cn/problems/merge-two-sorted-lists/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">21. 合并两个有序链表</a></p>\n<p>思路:双指针比较交替,问题就是开头的细节,一种是用一个空链表头,一种就是先比较ab的大小直接赋值ab的头</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, val=0, next=None):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = val</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = next</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">mergeTwoLists</span>(<span class=\"params\">self, a: <span class=\"type\">Optional</span>[ListNode], b: <span class=\"type\">Optional</span>[ListNode]</span>) -&gt; <span class=\"type\">Optional</span>[ListNode]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> a:<span class=\"keyword\">return</span> b</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> b:<span class=\"keyword\">return</span> a</span><br><span class=\"line\">        <span class=\"comment\"># 空表头</span></span><br><span class=\"line\">        prehead=ListNode(<span class=\"number\">0</span>)</span><br><span class=\"line\">        pre=prehead</span><br><span class=\"line\">        <span class=\"keyword\">while</span> a <span class=\"keyword\">and</span> b:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> a.val&gt;b.val:</span><br><span class=\"line\">                pre.<span class=\"built_in\">next</span>=b</span><br><span class=\"line\">                b=b.<span class=\"built_in\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                pre.<span class=\"built_in\">next</span>=a</span><br><span class=\"line\">                a=a.<span class=\"built_in\">next</span></span><br><span class=\"line\">            pre=pre.<span class=\"built_in\">next</span></span><br><span class=\"line\">        pre.<span class=\"built_in\">next</span>=a <span class=\"keyword\">if</span> a <span class=\"keyword\">else</span> b</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prehead.<span class=\"built_in\">next</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/reverse-linked-list/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">206. 反转链表</a></p>\n<p>思路:反转链表需要标记连续的三个节点,a,b,c  把b指向a,然后a,b,c依次向后移动一个,注意边界情况</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, val=0, next=None):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = val</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = next</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">reverseList</span>(<span class=\"params\">self, a: <span class=\"type\">Optional</span>[ListNode]</span>) -&gt; <span class=\"type\">Optional</span>[ListNode]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> a:<span class=\"keyword\">return</span> a</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> a.<span class=\"built_in\">next</span>:<span class=\"keyword\">return</span> a </span><br><span class=\"line\">        b=a.<span class=\"built_in\">next</span></span><br><span class=\"line\">        c=a.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"comment\"># 这个地方不断掉会死循环</span></span><br><span class=\"line\">        a.<span class=\"built_in\">next</span>=<span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> b:</span><br><span class=\"line\">            b.<span class=\"built_in\">next</span>=a</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> c:<span class=\"keyword\">break</span></span><br><span class=\"line\">            a=b</span><br><span class=\"line\">            b=c</span><br><span class=\"line\">            c=c.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> b</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"第四天\"><a class=\"markdownIt-Anchor\" href=\"#第四天\"></a> 第四天</h3>\n<p><a href=\"https://leetcode.cn/problems/middle-of-the-linked-list/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">876. 链表的中间结点</a></p>\n<p>思路:把链表存成数组,找数组长度一半的节点</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">middleNode</span>(<span class=\"params\">self, head: <span class=\"type\">Optional</span>[ListNode]</span>) -&gt; <span class=\"type\">Optional</span>[ListNode]:</span><br><span class=\"line\">        nums=[]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> head:</span><br><span class=\"line\">            nums.append(head)</span><br><span class=\"line\">            head=head.<span class=\"built_in\">next</span></span><br><span class=\"line\">        length=<span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[length//<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n<p>其他解法:1.第一次计算长度,第二次找节点  2.快慢指针</p>\n<p><a href=\"https://leetcode.cn/problems/linked-list-cycle-ii/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">142. 环形链表 II</a></p>\n<p>自己错误思路:快慢指针,只能检查是否有环,找不到入口</p>\n<p>思路:1.字典存已经走过的  2.快慢指针经过数学推导计算</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">detectCycle</span>(<span class=\"params\">self, head: <span class=\"type\">Optional</span>[ListNode]</span>) -&gt; <span class=\"type\">Optional</span>[ListNode]:</span><br><span class=\"line\">        nums=<span class=\"built_in\">dict</span>()</span><br><span class=\"line\">        <span class=\"keyword\">while</span> head:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> head <span class=\"keyword\">in</span> nums.keys():</span><br><span class=\"line\">                <span class=\"keyword\">return</span> head</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                nums[head]=<span class=\"number\">1</span></span><br><span class=\"line\">                head=head.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> head</span><br></pre></td></tr></table></figure>\n<h3 id=\"第五天\"><a class=\"markdownIt-Anchor\" href=\"#第五天\"></a> 第五天</h3>\n<p><a href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">121. 买卖股票的最佳时机</a></p>\n<p>思路:如果今天减去昨天的利润,加上之前的利润小于0,说明今天是巨亏的,不如之前的不买,买今天的,如果今天减去昨天的利润,加上之前的利润仍然大于0,记录一下,继续往后加,说不定会涨</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxProfit</span>(<span class=\"params\">self, prices: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        ans=<span class=\"number\">0</span></span><br><span class=\"line\">        profit=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"built_in\">len</span>(prices)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> prices[index]-prices[index-<span class=\"number\">1</span>]+profit&lt;<span class=\"number\">0</span>:</span><br><span class=\"line\">                profit=<span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                profit+=prices[index]-prices[index-<span class=\"number\">1</span>]</span><br><span class=\"line\">            ans=<span class=\"built_in\">max</span>(ans,profit)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/longest-palindrome/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">409. 最长回文串</a></p>\n<p>思路:统计字符的数量,注意加上一个奇数就行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">longestPalindrome</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        m=defaultdict(<span class=\"built_in\">int</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">            m[item]+=<span class=\"number\">1</span></span><br><span class=\"line\">        ans=<span class=\"number\">0</span></span><br><span class=\"line\">        flag=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> m.items():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> v&amp;<span class=\"number\">1</span>:</span><br><span class=\"line\">                 flag=<span class=\"number\">1</span></span><br><span class=\"line\">                 v-=<span class=\"number\">1</span></span><br><span class=\"line\">            ans+=v</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans+flag</span><br></pre></td></tr></table></figure>\n<h3 id=\"第六天\"><a class=\"markdownIt-Anchor\" href=\"#第六天\"></a> 第六天</h3>\n<p><a href=\"https://leetcode.cn/problems/n-ary-tree-preorder-traversal/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">589. N 叉树的前序遍历</a></p>\n<p>思路:二叉树的深搜,变成了多叉树的深搜</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">preorder</span>(<span class=\"params\">self, a: <span class=\"string\">&#x27;Node&#x27;</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">        ans=[]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">root</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">            ans.append(root.val)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> chi <span class=\"keyword\">in</span> root.children:</span><br><span class=\"line\">                dfs(chi)</span><br><span class=\"line\">        dfs(a)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans </span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/binary-tree-level-order-traversal/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">102. 二叉树的层序遍历</a></p>\n<p>思路:广搜,用一个额外的层数变量标记当前节点在第几层</p>\n<p>其他思路:记录当前栈内有几个节点,然后遍历完这些节点,这些节点之后的就是下一层的节点</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">levelOrder</span>(<span class=\"params\">self, root: <span class=\"type\">Optional</span>[TreeNode]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]:</span><br><span class=\"line\">        ans=[]</span><br><span class=\"line\">        deq=[]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:<span class=\"keyword\">return</span> []</span><br><span class=\"line\">        deq.insert(<span class=\"number\">0</span>,(root,<span class=\"number\">0</span>))</span><br><span class=\"line\">        last=<span class=\"number\">0</span></span><br><span class=\"line\">        curlayer=[]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(deq):</span><br><span class=\"line\">            (temp,layer)=deq.pop()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> layer!=last:</span><br><span class=\"line\">                ans.append(curlayer)</span><br><span class=\"line\">                last=layer</span><br><span class=\"line\">                curlayer=[]</span><br><span class=\"line\">            curlayer.append(temp.val)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> temp.left:</span><br><span class=\"line\">                deq.insert(<span class=\"number\">0</span>,(temp.left,layer+<span class=\"number\">1</span>))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> temp.right:</span><br><span class=\"line\">                deq.insert(<span class=\"number\">0</span>,(temp.right,layer+<span class=\"number\">1</span>))</span><br><span class=\"line\">        ans.append(curlayer)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<h3 id=\"第七天\"><a class=\"markdownIt-Anchor\" href=\"#第七天\"></a> 第七天</h3>\n<p><a href=\"https://leetcode.cn/problems/binary-search/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">704. 二分查找</a></p>\n<p>思路:正常二分,right要到能遍历到的边界</p>\n<p><a href=\"https://leetcode.cn/problems/binary-search/solutions/8337/er-fen-cha-zhao-xiang-jie-by-labuladong/\">二分的细节&amp;边界</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">search</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        left,right=<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(nums)-<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left&lt;=right:</span><br><span class=\"line\">            mid=(left+right)&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[mid]&lt;target:</span><br><span class=\"line\">                left=mid+<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> nums[mid]&gt;target:</span><br><span class=\"line\">                right=mid-<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span> <span class=\"keyword\">if</span> nums[mid]!=target <span class=\"keyword\">else</span> mid</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/first-bad-version/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">278. 第一个错误的版本</a></p>\n<p>思路:二分查找的变换版,区别在于要记录mid量,纯二分是找到mid直接返回,这个找到的可能不是需要的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">firstBadVersion</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        left,right=<span class=\"number\">1</span>,n</span><br><span class=\"line\">        ans=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left&lt;=right:</span><br><span class=\"line\">            mid=(left+right)&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> isBadVersion(mid):</span><br><span class=\"line\">                right=mid-<span class=\"number\">1</span></span><br><span class=\"line\">                ans=mid</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                left=mid+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<h3 id=\"第八天\"><a class=\"markdownIt-Anchor\" href=\"#第八天\"></a> 第八天</h3>\n<p><a href=\"https://leetcode.cn/problems/validate-binary-search-tree/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">98. 验证二叉搜索树</a></p>\n<p>错误思路:不能判断当前节点之后,然后再去分别判断左右子树</p>\n<p>正确×思路: 每棵左右子树节点的大小范围应该都是low-up,初始low=-inf,up=inf,左子树的范围是(low,root.val) 右子树是(root.val,up)  <strong>官方题解也是错的</strong></p>\n<p>其他:二叉搜素树中序遍历一定是升序的</p>\n<p><a href=\"https://www.bilibili.com/video/BV14G411P7C1/?vd_source=602787b9249cd70cfca4def5e041f060\">树的几种遍历</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">firstBadVersion</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        left,right=<span class=\"number\">1</span>,n</span><br><span class=\"line\">        ans=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left&lt;=right:</span><br><span class=\"line\">            mid=(left+right)&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> isBadVersion(mid):</span><br><span class=\"line\">                right=mid-<span class=\"number\">1</span></span><br><span class=\"line\">                ans=mid</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                left=mid+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">235. 二叉搜索树的最近公共祖先</a></p>\n<p>思路:1.寻找祖先路径,找到第一个不同的位置  2.一次遍历,如果都小就都找左边,如果都大就都找右边,如果有小有大就找到了分界点</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">lowestCommonAncestor</span>(<span class=\"params\">self, r: <span class=\"string\">&#x27;TreeNode&#x27;</span>, p: <span class=\"string\">&#x27;TreeNode&#x27;</span>, q: <span class=\"string\">&#x27;TreeNode&#x27;</span></span>) -&gt; <span class=\"string\">&#x27;TreeNode&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> r.val&gt;p.val <span class=\"keyword\">and</span> r.val&gt;q.val:</span><br><span class=\"line\">                r=r.left</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> r.val&lt;p.val <span class=\"keyword\">and</span> r.val &lt; q.val:</span><br><span class=\"line\">                r=r.right</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> r</span><br></pre></td></tr></table></figure>\n<h3 id=\"第九天\"><a class=\"markdownIt-Anchor\" href=\"#第九天\"></a> 第九天</h3>\n<p><a href=\"https://leetcode.cn/problems/flood-fill/description/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">733. 图像渲染</a></p>\n<p>思路:广搜/深搜找同颜色的,上下左右判断边界,访问数组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">floodFill</span>(<span class=\"params\">self, image: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]], sr: <span class=\"built_in\">int</span>, sc: <span class=\"built_in\">int</span>, color: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]:       </span><br><span class=\"line\">        n=<span class=\"built_in\">len</span>(image) </span><br><span class=\"line\">        m=<span class=\"built_in\">len</span>(image[<span class=\"number\">0</span>])</span><br><span class=\"line\">        visited=[[<span class=\"number\">0</span>]*m <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">        dq=deque()</span><br><span class=\"line\">        dq.append((sr,sc))</span><br><span class=\"line\">        oldcolor=image[sr][sc]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> dq:</span><br><span class=\"line\">            x,y=dq.popleft()</span><br><span class=\"line\">            image[x][y]=color</span><br><span class=\"line\">            visited[x][y]=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> x_,y_ <span class=\"keyword\">in</span> [(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">0</span>,-<span class=\"number\">1</span>),(-<span class=\"number\">1</span>,<span class=\"number\">0</span>),(<span class=\"number\">1</span>,<span class=\"number\">0</span>)]:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> x_+x&gt;=<span class=\"number\">0</span> <span class=\"keyword\">and</span> x_+x&lt;n <span class=\"keyword\">and</span> y_+y&gt;=<span class=\"number\">0</span> <span class=\"keyword\">and</span> y_+y&lt;m:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> visited[x_+x][y_+y]:</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> image[x_+x][y_+y]==oldcolor:</span><br><span class=\"line\">                        dq.append((x_+x,y_+y))</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> image</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/number-of-islands/description/\">200. 岛屿数量</a></p>\n<p>思路:深搜/广搜,从某点开始把连在一起的都访问一次,记录一共从几个点开始,这些点都是不同的岛屿</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">numIslands</span>(<span class=\"params\">self, grid: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">str</span>]]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        n=<span class=\"built_in\">len</span>(grid) </span><br><span class=\"line\">        m=<span class=\"built_in\">len</span>(grid[<span class=\"number\">0</span>])</span><br><span class=\"line\">        visited=[[<span class=\"number\">0</span> <span class=\"keyword\">if</span> grid[i][j]==<span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">else</span> <span class=\"number\">1</span>  <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m)] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">        ans=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> visited[i][j]:</span><br><span class=\"line\">                    ans+=<span class=\"number\">1</span></span><br><span class=\"line\">                    dq=deque()</span><br><span class=\"line\">                    dq.append((i,j))</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> dq:</span><br><span class=\"line\">                        x,y=dq.popleft()</span><br><span class=\"line\">                        visited[x][y]=<span class=\"number\">1</span></span><br><span class=\"line\">                        <span class=\"keyword\">for</span> x_,y_ <span class=\"keyword\">in</span> [(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">0</span>,-<span class=\"number\">1</span>),(-<span class=\"number\">1</span>,<span class=\"number\">0</span>),(<span class=\"number\">1</span>,<span class=\"number\">0</span>)]:</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> x_+x&gt;=<span class=\"number\">0</span> <span class=\"keyword\">and</span> x_+x&lt;n <span class=\"keyword\">and</span> y_+y&gt;=<span class=\"number\">0</span> <span class=\"keyword\">and</span> y_+y&lt;m:</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> visited[x_+x][y_+y]:</span><br><span class=\"line\">                                    visited[x_+x][y_+y]=<span class=\"number\">1</span></span><br><span class=\"line\">                                    dq.append((x_+x,y_+y))</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>333周赛</p>\n</blockquote>\n<p><a href=\"\">6365. 将整数减少到零需要的最少操作数</a><br />\n思路1:刚开始以为要转成二进制的01传,看0多还是1多,如果0多直接返回1的数量,但是668错了<br />\n思路2:打表100000之内2的次方,然后二分查找n在那两个数中间,找距离近的这个数的插值,然后+1递归下去,54-&gt;64-54=10-&gt;10-8=2-&gt;0</p>\n<p>bilibili:找到最低为的1,考虑这个1 是直接减掉还是加上同位置的1 ,枚举这两种可能.</p>\n<p><code>判断一个数是不是2的幂:(x &amp; ( x-1 ))==0</code></p>\n<p><code>找到最低位的1:lowbit: x &amp; -x</code></p>\n<p><a href=\"\">☆6364. 无平方子集计数</a></p>\n<p>没思路:题型重灾区,应该是用dp做,但是毫无思路</p>\n<p>bilibili:对不起,等我学有所成再来看,什么jb玩意那么难</p>\n<p><a href=\"\">6363. 找出对应 LCP 矩阵的字符串</a></p>\n<p>没思路</p>\n<h3 id=\"第十天\"><a class=\"markdownIt-Anchor\" href=\"#第十天\"></a> 第十天</h3>\n<p><a href=\"https://leetcode.cn/problems/fibonacci-number/description/\">509. 斐波那契数</a></p>\n<p>思路:.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.自顶向下,记忆化搜索</span></span><br><span class=\"line\"><span class=\"comment\"># 2.自底向上,dp数组</span></span><br><span class=\"line\"><span class=\"comment\"># 3.用a,b两个变量,空间复杂度降到O(1)</span></span><br><span class=\"line\"><span class=\"comment\"># 4.矩阵快速幂,时间复杂度降到O(logn)</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/climbing-stairs/description/\">70. 爬楼梯</a></p>\n<p>思路:.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 斐波那契数列模板题</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第十一天\"><a class=\"markdownIt-Anchor\" href=\"#第十一天\"></a> 第十一天</h3>\n<p><a href=\"https://leetcode.cn/problems/min-cost-climbing-stairs/description/\">746. 使用最小花费爬楼梯</a></p>\n<p>思路:爬到今天的费用只能有两个来源,前一个和前两个,但是顶楼数组里没有,所以追加一个0,第一层第二层的费用就是本身,第二层为什么不是min(第一层,第二层)呢,因为如果是从第一层上到的第二层,第二层还要继续向上上,那么还得加上第二层的费用,就变成了(第一层+第二层)的费用了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">minCostClimbingStairs</span>(<span class=\"params\">self, cost: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        cost.append(<span class=\"number\">0</span>)</span><br><span class=\"line\">        n=<span class=\"built_in\">len</span>(cost)</span><br><span class=\"line\">        <span class=\"comment\"># dp=[99999]*(n)</span></span><br><span class=\"line\">        a=cost[<span class=\"number\">0</span>]</span><br><span class=\"line\">        b=cost[<span class=\"number\">1</span>]</span><br><span class=\"line\">        c=b</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>,n):</span><br><span class=\"line\">            c=<span class=\"built_in\">min</span>(a,b)+cost[i]</span><br><span class=\"line\">            a,b=b,c</span><br><span class=\"line\">            <span class=\"comment\"># dp[i]=min(dp[i-1],dp[i-2])+cost[i]</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> c</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/unique-paths/description/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">62. 不同路径</a></p>\n<p>思路:深搜和广搜的复杂度应该是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(2^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>,会超时,还是dp,当前位置只能从左边或者上边来到,就把左边和上边的方案数加起来就行,第一行第一列的方案数都是1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">uniquePaths</span>(<span class=\"params\">self, m: <span class=\"built_in\">int</span>, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        a=[<span class=\"number\">1</span> <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n) ]</span><br><span class=\"line\">        b=[<span class=\"number\">1</span> <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n) ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,n):</span><br><span class=\"line\">                b[j]=a[j]+b[j-<span class=\"number\">1</span>]</span><br><span class=\"line\">            a=b[:]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b[-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># dp=[[0 for j in range(n) ]  for i in range(m)]</span></span><br><span class=\"line\">        <span class=\"comment\"># for i in range(m):</span></span><br><span class=\"line\">        <span class=\"comment\">#     for j in range(n):</span></span><br><span class=\"line\">        <span class=\"comment\">#         if i==0 or j==0:</span></span><br><span class=\"line\">        <span class=\"comment\">#             dp[i][j]=1</span></span><br><span class=\"line\">        <span class=\"comment\">#         else:</span></span><br><span class=\"line\">        <span class=\"comment\">#             dp[i][j]=dp[i][j-1]+dp[i-1][j]</span></span><br><span class=\"line\">        <span class=\"comment\"># return dp[m-1][n-1]</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># dq=deque([(0,0)])</span></span><br><span class=\"line\">        <span class=\"comment\"># ans=0</span></span><br><span class=\"line\">        <span class=\"comment\"># while dq:</span></span><br><span class=\"line\">        <span class=\"comment\">#     x,y=dq.pop()</span></span><br><span class=\"line\">        <span class=\"comment\">#     if x==m-1 and y==n-1:</span></span><br><span class=\"line\">        <span class=\"comment\">#         ans+=1</span></span><br><span class=\"line\">        <span class=\"comment\">#     for x_,y_ in  [(x+1,y),(x,y+1)]:</span></span><br><span class=\"line\">        <span class=\"comment\">#         if x_&gt;=0 and x_&lt;m and y_&gt;=0 and y_&lt;n:</span></span><br><span class=\"line\">        <span class=\"comment\">#             dq.append((x_,y_))</span></span><br><span class=\"line\">        <span class=\"comment\"># return ans </span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第十二天\"><a class=\"markdownIt-Anchor\" href=\"#第十二天\"></a> 第十二天</h3>\n<p><a href=\"https://leetcode.cn/problems/find-all-anagrams-in-a-string/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">438. 找到字符串中所有字母异位词</a></p>\n<p>思路:双指针维护长度为第二个字符串的区间,对区间内的数字统计数量,数量一致答案加1,右移的时候,右侧字符加1,左侧字符减1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">findAnagrams</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span>, p: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">val</span>(<span class=\"params\">a,b</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i,j <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(a,b):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> i!=j:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        pnums=[<span class=\"number\">0</span>]*<span class=\"number\">26</span></span><br><span class=\"line\">        snums=[<span class=\"number\">0</span>]*<span class=\"number\">26</span></span><br><span class=\"line\">        constant=<span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> p:</span><br><span class=\"line\">            pnums[<span class=\"built_in\">ord</span>(item)-constant]+=<span class=\"number\">1</span></span><br><span class=\"line\">        left=right=<span class=\"number\">0</span></span><br><span class=\"line\">        lengths=<span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">        lengthp=<span class=\"built_in\">len</span>(p)</span><br><span class=\"line\">        ans=[]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> right&lt;lengths:</span><br><span class=\"line\">            snums[<span class=\"built_in\">ord</span>(s[right])-constant]+=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> val(snums,pnums):</span><br><span class=\"line\">                ans.append(left)</span><br><span class=\"line\">            right+=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> right&gt;=lengthp:</span><br><span class=\"line\">                snums[<span class=\"built_in\">ord</span>(s[left])-constant]-=<span class=\"number\">1</span></span><br><span class=\"line\">                left+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans </span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/longest-repeating-character-replacement/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">424. 替换后的最长重复字符</a></p>\n<p>思路:没有思路,考虑到了应该是用双指针</p>\n<p>题解:双指针加一个maxhistory记录最多的相同字符个数,如果当前区间长度大于了k+maxhistory,说明不可能变成一样的,左边右移1,否则说明当前区间不是最大长度,还可增加新元素</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">characterReplacement</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span>, k: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        constant=<span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;A&#x27;</span>)</span><br><span class=\"line\">        length=<span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">        <span class=\"comment\"># 左右指针</span></span><br><span class=\"line\">        left=right=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\"># 用于记录left-right区间每个字母的个数</span></span><br><span class=\"line\">        nums=[<span class=\"number\">0</span>]*<span class=\"number\">26</span></span><br><span class=\"line\">        <span class=\"comment\"># 用于记录区间内出现的 最多的相同字符的个数</span></span><br><span class=\"line\">        historymax=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> right&lt;length:</span><br><span class=\"line\">            <span class=\"comment\"># 新加的字符个数加1</span></span><br><span class=\"line\">            nums[<span class=\"built_in\">ord</span>(s[right])-constant]+=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"comment\"># 更新一下区间内最长的字符个数</span></span><br><span class=\"line\">            historymax=<span class=\"built_in\">max</span>(historymax,nums[<span class=\"built_in\">ord</span>(s[right])-constant])</span><br><span class=\"line\">            <span class=\"comment\"># historymax+k 是目前可以达到的最长长度,已经包含了右节点了</span></span><br><span class=\"line\">            <span class=\"comment\"># 小于说明现在这个区间长度还小于最大长度</span></span><br><span class=\"line\">            <span class=\"comment\"># 大于说明把其它不是最多出现的字符替换以后，都不能填满这个滑动的窗口，说明此时 k 不够用</span></span><br><span class=\"line\">            <span class=\"comment\"># 这个时候须要考虑左边界向右移动</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> right-left+<span class=\"number\">1</span>&gt;historymax+k:</span><br><span class=\"line\">                nums[<span class=\"built_in\">ord</span>(s[left])-constant]-=<span class=\"number\">1</span></span><br><span class=\"line\">                left+=<span class=\"number\">1</span></span><br><span class=\"line\">            right+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> right-left</span><br></pre></td></tr></table></figure>\n<h3 id=\"第十三天\"><a class=\"markdownIt-Anchor\" href=\"#第十三天\"></a> 第十三天</h3>\n<p><a href=\"https://leetcode.cn/problems/two-sum/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">1. 两数之和</a></p>\n<p>思路:数组排序,然后对每个数字,二分查找target减去她的值</p>\n<p>题解:用字典存储每个target-num的值,如果当前数字在字典中存在,找到答案,否则把target减他存进去</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">twoSum</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">        <span class=\"comment\"># nums=[(i,n) for i,n in enumerate(nums)]</span></span><br><span class=\"line\">        <span class=\"comment\"># nums=sorted(nums,key=lambda x:x[1])</span></span><br><span class=\"line\">        <span class=\"comment\"># length=len(nums)</span></span><br><span class=\"line\">        <span class=\"comment\"># for i in range(length):</span></span><br><span class=\"line\">        <span class=\"comment\">#     ttt=target-nums[i][1]</span></span><br><span class=\"line\">        <span class=\"comment\">#     index=bisect_left(nums,ttt,key=lambda x:x[1])</span></span><br><span class=\"line\">        <span class=\"comment\">#     if index==i:continue</span></span><br><span class=\"line\">        <span class=\"comment\">#     if index&lt;0 or index&gt;=length:continue</span></span><br><span class=\"line\">        <span class=\"comment\">#     if nums[index][1]==ttt:</span></span><br><span class=\"line\">        <span class=\"comment\">#         return [nums[i][0],nums[index][0]]</span></span><br><span class=\"line\">        hashtable = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, num <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(nums):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> target - num <span class=\"keyword\">in</span> hashtable:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [hashtable[target - num], i]</span><br><span class=\"line\">            hashtable[nums[i]] = i</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/bulls-and-cows/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">299. 猜数字游戏</a></p>\n<p>思路:A数字好统计,对于B数字,分别存A,B中数字出现的个数,加入对他们重新排序,一定是只能匹配个数少的,所以直接取每个数字二者中的最小值,求和就是B.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">getHint</span>(<span class=\"params\">self, secret: <span class=\"built_in\">str</span>, guess: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        hasA=[<span class=\"number\">0</span>]*<span class=\"number\">10</span></span><br><span class=\"line\">        hasB=[<span class=\"number\">0</span>]*<span class=\"number\">10</span></span><br><span class=\"line\">        A=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i,j <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(secret,guess):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i==j:</span><br><span class=\"line\">                A+=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                hasA[<span class=\"built_in\">int</span>(j)]+=<span class=\"number\">1</span></span><br><span class=\"line\">                hasB[<span class=\"built_in\">int</span>(i)]+=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ans=<span class=\"built_in\">sum</span>([<span class=\"built_in\">min</span>(a,b) <span class=\"keyword\">for</span> a,b <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(hasA,hasB)])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&#x27;<span class=\"subst\">&#123;A&#125;</span>A<span class=\"subst\">&#123;ans&#125;</span>B&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第十四天\"><a class=\"markdownIt-Anchor\" href=\"#第十四天\"></a> 第十四天</h3>\n<p><a href=\"https://leetcode.cn/problems/backspace-string-compare/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">844. 比较含退格的字符串</a></p>\n<p>思路:忘记用栈了，从后往前遍历数组，cnt记录当前#的数量，然后跳过cnt个字母。</p>\n<p>题解:用栈，遇见#退一个字符</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">backspaceCompare</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span>, t: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">check</span>(<span class=\"params\">a</span>):</span><br><span class=\"line\">            length=<span class=\"built_in\">len</span>(a)</span><br><span class=\"line\">            ans=[]</span><br><span class=\"line\">            cnt=<span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length-<span class=\"number\">1</span>,-<span class=\"number\">1</span>,-<span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> a[i]==<span class=\"string\">&#x27;#&#x27;</span>:</span><br><span class=\"line\">                    cnt+=<span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> cnt==<span class=\"number\">0</span>:</span><br><span class=\"line\">                        ans.append(a[i])</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        cnt-=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">        <span class=\"keyword\">return</span> check(s)==check(t)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/backspace-string-compare/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">394. 字符串解码</a></p>\n<p>思路:栈操作，一个数组存数字，一个栈用来弹字符，遇见]一直弹，直到弹出[。然后复制数字数组的最后一个数字便，在加入栈中，数字的处理有一点点麻烦</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">decodeString</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        stack=[]</span><br><span class=\"line\">        nums=[]</span><br><span class=\"line\">        length=<span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">        i=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> i&lt;length:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s[i]==<span class=\"string\">&#x27;]&#x27;</span>:</span><br><span class=\"line\">                temp=[]</span><br><span class=\"line\">                <span class=\"keyword\">while</span> stack[-<span class=\"number\">1</span>]!=<span class=\"string\">&#x27;[&#x27;</span>:</span><br><span class=\"line\">                    temp.append(stack.pop())</span><br><span class=\"line\">                stack.pop()</span><br><span class=\"line\">                temp=<span class=\"string\">&quot;&quot;</span>.join(temp[::-<span class=\"number\">1</span>])</span><br><span class=\"line\">                stack.append(temp*nums[-<span class=\"number\">1</span>])</span><br><span class=\"line\">                nums.pop()</span><br><span class=\"line\">                i+=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> s[i].isnumeric():</span><br><span class=\"line\">                n=<span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> i&lt;length  <span class=\"keyword\">and</span> s[i].isnumeric():</span><br><span class=\"line\">                    n*=<span class=\"number\">10</span></span><br><span class=\"line\">                    n+=<span class=\"built_in\">int</span>(s[i])</span><br><span class=\"line\">                    i+=<span class=\"number\">1</span></span><br><span class=\"line\">                nums.append(n)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                stack.append(s[i])</span><br><span class=\"line\">                i+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>.join(stack)</span><br></pre></td></tr></table></figure>\n<h3 id=\"第十五天\"><a class=\"markdownIt-Anchor\" href=\"#第十五天\"></a> 第十五天</h3>\n<p><a href=\"https://leetcode.cn/problems/last-stone-weight/description/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">1046. 最后一块石头的重量</a></p>\n<p>思路:大项堆，但是python的heapq只能实现小项堆，大项堆的实现要加负号</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">lastStoneWeight</span>(<span class=\"params\">self, x: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        x=<span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x:-x,x))</span><br><span class=\"line\">        <span class=\"comment\"># 这一步的作用不是很明确</span></span><br><span class=\"line\">        <span class=\"comment\"># 注意heapify(包括heapq封装的其他操作)都不会更改数据结构(仍为list)，只会以堆的操作规范对其进行处理。</span></span><br><span class=\"line\">        <span class=\"comment\"># 虽然类型仍为list，但元素的顺序已经满足了堆的规范，所以从线性的角度看结果列表并非是有序的(是[1, 3, 7, 9, 5]而非[1, 3, 5, 7, 9])</span></span><br><span class=\"line\">        heapq.heapify(x)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(x)&gt;<span class=\"number\">1</span>:</span><br><span class=\"line\">            a=heapq.heappop(x)</span><br><span class=\"line\">            b=heapq.heappop(x)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> a!=b:</span><br><span class=\"line\">                newstore=<span class=\"built_in\">abs</span>(<span class=\"built_in\">max</span>(a,b)-<span class=\"built_in\">min</span>(a,b))</span><br><span class=\"line\">                heapq.heappush(x,-newstore)</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> -x[<span class=\"number\">0</span>] <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(x) <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/top-k-frequent-words/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">692. 前K个高频单词</a></p>\n<p>思路:Counter统计单词数量，然后按照数量降序，字典序升序排列，返回k个</p>\n<p>题解：优先队列，元组（单词，词频）</p>\n<p>知识点：1.Counter的most_common()在计数相同的情况下是按出现顺序返回<br />\n2.python多关键字排序：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr=[(<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>),(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>),(<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>),(<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>)]</span><br><span class=\"line\">arr.sort(key=<span class=\"keyword\">lambda</span> s:(s[<span class=\"number\">0</span>],-s[<span class=\"number\">1</span>])) </span><br><span class=\"line\"><span class=\"comment\">#两个关键字排序,在需要倒序排列的关键字前加`-`号</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">topKFrequent</span>(<span class=\"params\">self, words: <span class=\"type\">List</span>[<span class=\"built_in\">str</span>], k: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">str</span>]:</span><br><span class=\"line\">        c = Counter(words).items()</span><br><span class=\"line\">        c = <span class=\"built_in\">sorted</span>(c,key=<span class=\"keyword\">lambda</span> x:(-x[<span class=\"number\">1</span>],x[<span class=\"number\">0</span>]))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x:x[<span class=\"number\">0</span>],c[:k]))</span><br><span class=\"line\">        <span class=\"comment\"># return sorted((cnt := Counter(words)).keys(), key=lambda key: (-cnt[key], key))[:k]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h3>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h2 id=\"leetcode75学习计划\"><a class=\"markdownIt-Anchor\" href=\"#leetcode75学习计划\"></a> LeetCode75学习计划</h2>\n<h3 id=\"第一天\"><a class=\"markdownIt-Anchor\" href=\"#第一天\"></a> 第一天</h3>\n<p><a href=\"https://leetcode.cn/problems/running-sum-of-1d-array/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">1480.一维数组的动态和</a></p>\n<p>思路:前缀和</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># python的内置数据方法</span></span><br><span class=\"line\"><span class=\"comment\"># https://docs.python.org/3/library/itertools.html</span></span><br><span class=\"line\"><span class=\"comment\"># accumulate([1,2,3,4,5]) --&gt; 1 3 6 10 15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">runningSum</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>(accumulate(nums))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/find-pivot-index/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">724.寻找数组的中心下标</a></p>\n<p>思路: 先求前缀和,然后遍历下标,利用前缀和计算下标两边的和,左右两端的位置需要判断一下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pivotIndex</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        pre_sum=<span class=\"built_in\">list</span>(accumulate(nums))</span><br><span class=\"line\">        length=<span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> pre_sum[length-<span class=\"number\">1</span>]-pre_sum[<span class=\"number\">0</span>]==<span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,length-<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> pre_sum[index-<span class=\"number\">1</span>]==pre_sum[length-<span class=\"number\">1</span>]-pre_sum[index]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> index</span><br><span class=\"line\">        <span class=\"comment\"># 返回最左边下标,防止有x,x,x,x,..0,0,0,0的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> pre_sum[length-<span class=\"number\">2</span>]==<span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> length-<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第二天\"><a class=\"markdownIt-Anchor\" href=\"#第二天\"></a> 第二天</h3>\n<p><a href=\"https://leetcode.cn/problems/isomorphic-strings/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">205. 同构字符串</a></p>\n<p>思路:每个字符串对应位置的字母是一一对应的,用字典.<br />\n两个方向,一个是s对t的字母是一一对应,一个是t对s的字母是一一对应</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">isIsomorphic1</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span>, t: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        dic=defaultdict(<span class=\"built_in\">str</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> index,item <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(s):</span><br><span class=\"line\">            <span class=\"comment\"># 检查s对t</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> item <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">                <span class=\"comment\"># 检擦t对s</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> t[index] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> dic.values():</span><br><span class=\"line\">                    dic[item]=t[index]</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> dic[item]!=t[index]:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">isIsomorphic</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span>, t: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">check</span>(<span class=\"params\">s,t</span>):</span><br><span class=\"line\">            dic=defaultdict(<span class=\"built_in\">str</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> index,item <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(s):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> item <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">                    dic[item]=t[index]</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> dic[item]!=t[index]:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> check(s,t) <span class=\"keyword\">and</span> check(t,s)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/is-subsequence/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">392. 判断子序列</a></p>\n<p>思路:判断子序列,两个字符串不同位置的比较,双指针,ab指针,如果对应字符一样,都前进,如果不一样,指向母字符串的前进</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">isSubsequence</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span>, t: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        length=<span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> length==<span class=\"number\">0</span>:<span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        index=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> t:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item==s[index]:</span><br><span class=\"line\">                index+=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> index==length:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>332周赛</p>\n</blockquote>\n<p><a href=\"https://leetcode.cn/problems/count-the-number-of-fair-pairs/\">6355. 统计公平数对的数目</a><br />\n思路:对数组排序,对每一个数,用二分找到大小在lower和upper之间的下标,如果这个数也在下标中就-1,最后结果除2,(i,j)(j,i)都算了</p>\n<p>bilibili:两个数的和,枚举一个数,用其他方法处理另一个数</p>\n<p><a href=\"https://leetcode.cn/problems/substring-xor-queries/\">6356. 子字符串异或查询</a><br />\n思路:对每一个查询,a^b=c =&gt; a=c^b,然后把a转换成二进制字符串,剩下的就是在字符串中找子字符串在起始位置</p>\n<p>bilibili:预处理s中的二进制,把子字符串转换成数字存进dict,直接找a</p>\n<p><a href=\"https://leetcode.cn/problems/subsequence-with-the-minimum-score/\">6357. 最少得分子序列</a><br />\n没做出来思路:计算最长公共子序列,统计不在最长公共子序列中的下标,就是要删除的下标(可能错在需要找到最左边的最长子序列)</p>\n<p>bilibili:<br />\n1.删除[left,right]中间的几个和删除全部是一样的<br />\n2.枚举s,把s从中间划分,前面匹配t的前部分,后面匹配t的后部分<br />\n3.中间就是可以删掉的部分,找到最小的<br />\n4.实现的时候,先从后往前匹配s和t(全部匹配),然后从前往后,找到相应的答案</p>\n<h3 id=\"第三天\"><a class=\"markdownIt-Anchor\" href=\"#第三天\"></a> 第三天</h3>\n<p><a href=\"https://leetcode.cn/problems/merge-two-sorted-lists/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">21. 合并两个有序链表</a></p>\n<p>思路:双指针比较交替,问题就是开头的细节,一种是用一个空链表头,一种就是先比较ab的大小直接赋值ab的头</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, val=0, next=None):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = val</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = next</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">mergeTwoLists</span>(<span class=\"params\">self, a: <span class=\"type\">Optional</span>[ListNode], b: <span class=\"type\">Optional</span>[ListNode]</span>) -&gt; <span class=\"type\">Optional</span>[ListNode]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> a:<span class=\"keyword\">return</span> b</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> b:<span class=\"keyword\">return</span> a</span><br><span class=\"line\">        <span class=\"comment\"># 空表头</span></span><br><span class=\"line\">        prehead=ListNode(<span class=\"number\">0</span>)</span><br><span class=\"line\">        pre=prehead</span><br><span class=\"line\">        <span class=\"keyword\">while</span> a <span class=\"keyword\">and</span> b:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> a.val&gt;b.val:</span><br><span class=\"line\">                pre.<span class=\"built_in\">next</span>=b</span><br><span class=\"line\">                b=b.<span class=\"built_in\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                pre.<span class=\"built_in\">next</span>=a</span><br><span class=\"line\">                a=a.<span class=\"built_in\">next</span></span><br><span class=\"line\">            pre=pre.<span class=\"built_in\">next</span></span><br><span class=\"line\">        pre.<span class=\"built_in\">next</span>=a <span class=\"keyword\">if</span> a <span class=\"keyword\">else</span> b</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prehead.<span class=\"built_in\">next</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/reverse-linked-list/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">206. 反转链表</a></p>\n<p>思路:反转链表需要标记连续的三个节点,a,b,c  把b指向a,然后a,b,c依次向后移动一个,注意边界情况</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, val=0, next=None):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = val</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = next</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">reverseList</span>(<span class=\"params\">self, a: <span class=\"type\">Optional</span>[ListNode]</span>) -&gt; <span class=\"type\">Optional</span>[ListNode]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> a:<span class=\"keyword\">return</span> a</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> a.<span class=\"built_in\">next</span>:<span class=\"keyword\">return</span> a </span><br><span class=\"line\">        b=a.<span class=\"built_in\">next</span></span><br><span class=\"line\">        c=a.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"comment\"># 这个地方不断掉会死循环</span></span><br><span class=\"line\">        a.<span class=\"built_in\">next</span>=<span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> b:</span><br><span class=\"line\">            b.<span class=\"built_in\">next</span>=a</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> c:<span class=\"keyword\">break</span></span><br><span class=\"line\">            a=b</span><br><span class=\"line\">            b=c</span><br><span class=\"line\">            c=c.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> b</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"第四天\"><a class=\"markdownIt-Anchor\" href=\"#第四天\"></a> 第四天</h3>\n<p><a href=\"https://leetcode.cn/problems/middle-of-the-linked-list/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">876. 链表的中间结点</a></p>\n<p>思路:把链表存成数组,找数组长度一半的节点</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">middleNode</span>(<span class=\"params\">self, head: <span class=\"type\">Optional</span>[ListNode]</span>) -&gt; <span class=\"type\">Optional</span>[ListNode]:</span><br><span class=\"line\">        nums=[]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> head:</span><br><span class=\"line\">            nums.append(head)</span><br><span class=\"line\">            head=head.<span class=\"built_in\">next</span></span><br><span class=\"line\">        length=<span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[length//<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n<p>其他解法:1.第一次计算长度,第二次找节点  2.快慢指针</p>\n<p><a href=\"https://leetcode.cn/problems/linked-list-cycle-ii/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">142. 环形链表 II</a></p>\n<p>自己错误思路:快慢指针,只能检查是否有环,找不到入口</p>\n<p>思路:1.字典存已经走过的  2.快慢指针经过数学推导计算</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">detectCycle</span>(<span class=\"params\">self, head: <span class=\"type\">Optional</span>[ListNode]</span>) -&gt; <span class=\"type\">Optional</span>[ListNode]:</span><br><span class=\"line\">        nums=<span class=\"built_in\">dict</span>()</span><br><span class=\"line\">        <span class=\"keyword\">while</span> head:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> head <span class=\"keyword\">in</span> nums.keys():</span><br><span class=\"line\">                <span class=\"keyword\">return</span> head</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                nums[head]=<span class=\"number\">1</span></span><br><span class=\"line\">                head=head.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> head</span><br></pre></td></tr></table></figure>\n<h3 id=\"第五天\"><a class=\"markdownIt-Anchor\" href=\"#第五天\"></a> 第五天</h3>\n<p><a href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">121. 买卖股票的最佳时机</a></p>\n<p>思路:如果今天减去昨天的利润,加上之前的利润小于0,说明今天是巨亏的,不如之前的不买,买今天的,如果今天减去昨天的利润,加上之前的利润仍然大于0,记录一下,继续往后加,说不定会涨</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxProfit</span>(<span class=\"params\">self, prices: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        ans=<span class=\"number\">0</span></span><br><span class=\"line\">        profit=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"built_in\">len</span>(prices)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> prices[index]-prices[index-<span class=\"number\">1</span>]+profit&lt;<span class=\"number\">0</span>:</span><br><span class=\"line\">                profit=<span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                profit+=prices[index]-prices[index-<span class=\"number\">1</span>]</span><br><span class=\"line\">            ans=<span class=\"built_in\">max</span>(ans,profit)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/longest-palindrome/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">409. 最长回文串</a></p>\n<p>思路:统计字符的数量,注意加上一个奇数就行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">longestPalindrome</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        m=defaultdict(<span class=\"built_in\">int</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">            m[item]+=<span class=\"number\">1</span></span><br><span class=\"line\">        ans=<span class=\"number\">0</span></span><br><span class=\"line\">        flag=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> m.items():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> v&amp;<span class=\"number\">1</span>:</span><br><span class=\"line\">                 flag=<span class=\"number\">1</span></span><br><span class=\"line\">                 v-=<span class=\"number\">1</span></span><br><span class=\"line\">            ans+=v</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans+flag</span><br></pre></td></tr></table></figure>\n<h3 id=\"第六天\"><a class=\"markdownIt-Anchor\" href=\"#第六天\"></a> 第六天</h3>\n<p><a href=\"https://leetcode.cn/problems/n-ary-tree-preorder-traversal/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">589. N 叉树的前序遍历</a></p>\n<p>思路:二叉树的深搜,变成了多叉树的深搜</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">preorder</span>(<span class=\"params\">self, a: <span class=\"string\">&#x27;Node&#x27;</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">        ans=[]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">root</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">            ans.append(root.val)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> chi <span class=\"keyword\">in</span> root.children:</span><br><span class=\"line\">                dfs(chi)</span><br><span class=\"line\">        dfs(a)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans </span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/binary-tree-level-order-traversal/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">102. 二叉树的层序遍历</a></p>\n<p>思路:广搜,用一个额外的层数变量标记当前节点在第几层</p>\n<p>其他思路:记录当前栈内有几个节点,然后遍历完这些节点,这些节点之后的就是下一层的节点</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">levelOrder</span>(<span class=\"params\">self, root: <span class=\"type\">Optional</span>[TreeNode]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]:</span><br><span class=\"line\">        ans=[]</span><br><span class=\"line\">        deq=[]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:<span class=\"keyword\">return</span> []</span><br><span class=\"line\">        deq.insert(<span class=\"number\">0</span>,(root,<span class=\"number\">0</span>))</span><br><span class=\"line\">        last=<span class=\"number\">0</span></span><br><span class=\"line\">        curlayer=[]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(deq):</span><br><span class=\"line\">            (temp,layer)=deq.pop()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> layer!=last:</span><br><span class=\"line\">                ans.append(curlayer)</span><br><span class=\"line\">                last=layer</span><br><span class=\"line\">                curlayer=[]</span><br><span class=\"line\">            curlayer.append(temp.val)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> temp.left:</span><br><span class=\"line\">                deq.insert(<span class=\"number\">0</span>,(temp.left,layer+<span class=\"number\">1</span>))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> temp.right:</span><br><span class=\"line\">                deq.insert(<span class=\"number\">0</span>,(temp.right,layer+<span class=\"number\">1</span>))</span><br><span class=\"line\">        ans.append(curlayer)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<h3 id=\"第七天\"><a class=\"markdownIt-Anchor\" href=\"#第七天\"></a> 第七天</h3>\n<p><a href=\"https://leetcode.cn/problems/binary-search/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">704. 二分查找</a></p>\n<p>思路:正常二分,right要到能遍历到的边界</p>\n<p><a href=\"https://leetcode.cn/problems/binary-search/solutions/8337/er-fen-cha-zhao-xiang-jie-by-labuladong/\">二分的细节&amp;边界</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">search</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        left,right=<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(nums)-<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left&lt;=right:</span><br><span class=\"line\">            mid=(left+right)&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[mid]&lt;target:</span><br><span class=\"line\">                left=mid+<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> nums[mid]&gt;target:</span><br><span class=\"line\">                right=mid-<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span> <span class=\"keyword\">if</span> nums[mid]!=target <span class=\"keyword\">else</span> mid</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/first-bad-version/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">278. 第一个错误的版本</a></p>\n<p>思路:二分查找的变换版,区别在于要记录mid量,纯二分是找到mid直接返回,这个找到的可能不是需要的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">firstBadVersion</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        left,right=<span class=\"number\">1</span>,n</span><br><span class=\"line\">        ans=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left&lt;=right:</span><br><span class=\"line\">            mid=(left+right)&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> isBadVersion(mid):</span><br><span class=\"line\">                right=mid-<span class=\"number\">1</span></span><br><span class=\"line\">                ans=mid</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                left=mid+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<h3 id=\"第八天\"><a class=\"markdownIt-Anchor\" href=\"#第八天\"></a> 第八天</h3>\n<p><a href=\"https://leetcode.cn/problems/validate-binary-search-tree/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">98. 验证二叉搜索树</a></p>\n<p>错误思路:不能判断当前节点之后,然后再去分别判断左右子树</p>\n<p>正确×思路: 每棵左右子树节点的大小范围应该都是low-up,初始low=-inf,up=inf,左子树的范围是(low,root.val) 右子树是(root.val,up)  <strong>官方题解也是错的</strong></p>\n<p>其他:二叉搜素树中序遍历一定是升序的</p>\n<p><a href=\"https://www.bilibili.com/video/BV14G411P7C1/?vd_source=602787b9249cd70cfca4def5e041f060\">树的几种遍历</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">firstBadVersion</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        left,right=<span class=\"number\">1</span>,n</span><br><span class=\"line\">        ans=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left&lt;=right:</span><br><span class=\"line\">            mid=(left+right)&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> isBadVersion(mid):</span><br><span class=\"line\">                right=mid-<span class=\"number\">1</span></span><br><span class=\"line\">                ans=mid</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                left=mid+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">235. 二叉搜索树的最近公共祖先</a></p>\n<p>思路:1.寻找祖先路径,找到第一个不同的位置  2.一次遍历,如果都小就都找左边,如果都大就都找右边,如果有小有大就找到了分界点</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">lowestCommonAncestor</span>(<span class=\"params\">self, r: <span class=\"string\">&#x27;TreeNode&#x27;</span>, p: <span class=\"string\">&#x27;TreeNode&#x27;</span>, q: <span class=\"string\">&#x27;TreeNode&#x27;</span></span>) -&gt; <span class=\"string\">&#x27;TreeNode&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> r.val&gt;p.val <span class=\"keyword\">and</span> r.val&gt;q.val:</span><br><span class=\"line\">                r=r.left</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> r.val&lt;p.val <span class=\"keyword\">and</span> r.val &lt; q.val:</span><br><span class=\"line\">                r=r.right</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> r</span><br></pre></td></tr></table></figure>\n<h3 id=\"第九天\"><a class=\"markdownIt-Anchor\" href=\"#第九天\"></a> 第九天</h3>\n<p><a href=\"https://leetcode.cn/problems/flood-fill/description/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">733. 图像渲染</a></p>\n<p>思路:广搜/深搜找同颜色的,上下左右判断边界,访问数组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">floodFill</span>(<span class=\"params\">self, image: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]], sr: <span class=\"built_in\">int</span>, sc: <span class=\"built_in\">int</span>, color: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]:       </span><br><span class=\"line\">        n=<span class=\"built_in\">len</span>(image) </span><br><span class=\"line\">        m=<span class=\"built_in\">len</span>(image[<span class=\"number\">0</span>])</span><br><span class=\"line\">        visited=[[<span class=\"number\">0</span>]*m <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">        dq=deque()</span><br><span class=\"line\">        dq.append((sr,sc))</span><br><span class=\"line\">        oldcolor=image[sr][sc]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> dq:</span><br><span class=\"line\">            x,y=dq.popleft()</span><br><span class=\"line\">            image[x][y]=color</span><br><span class=\"line\">            visited[x][y]=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> x_,y_ <span class=\"keyword\">in</span> [(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">0</span>,-<span class=\"number\">1</span>),(-<span class=\"number\">1</span>,<span class=\"number\">0</span>),(<span class=\"number\">1</span>,<span class=\"number\">0</span>)]:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> x_+x&gt;=<span class=\"number\">0</span> <span class=\"keyword\">and</span> x_+x&lt;n <span class=\"keyword\">and</span> y_+y&gt;=<span class=\"number\">0</span> <span class=\"keyword\">and</span> y_+y&lt;m:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> visited[x_+x][y_+y]:</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> image[x_+x][y_+y]==oldcolor:</span><br><span class=\"line\">                        dq.append((x_+x,y_+y))</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> image</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/number-of-islands/description/\">200. 岛屿数量</a></p>\n<p>思路:深搜/广搜,从某点开始把连在一起的都访问一次,记录一共从几个点开始,这些点都是不同的岛屿</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">numIslands</span>(<span class=\"params\">self, grid: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">str</span>]]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        n=<span class=\"built_in\">len</span>(grid) </span><br><span class=\"line\">        m=<span class=\"built_in\">len</span>(grid[<span class=\"number\">0</span>])</span><br><span class=\"line\">        visited=[[<span class=\"number\">0</span> <span class=\"keyword\">if</span> grid[i][j]==<span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">else</span> <span class=\"number\">1</span>  <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m)] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">        ans=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> visited[i][j]:</span><br><span class=\"line\">                    ans+=<span class=\"number\">1</span></span><br><span class=\"line\">                    dq=deque()</span><br><span class=\"line\">                    dq.append((i,j))</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> dq:</span><br><span class=\"line\">                        x,y=dq.popleft()</span><br><span class=\"line\">                        visited[x][y]=<span class=\"number\">1</span></span><br><span class=\"line\">                        <span class=\"keyword\">for</span> x_,y_ <span class=\"keyword\">in</span> [(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">0</span>,-<span class=\"number\">1</span>),(-<span class=\"number\">1</span>,<span class=\"number\">0</span>),(<span class=\"number\">1</span>,<span class=\"number\">0</span>)]:</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> x_+x&gt;=<span class=\"number\">0</span> <span class=\"keyword\">and</span> x_+x&lt;n <span class=\"keyword\">and</span> y_+y&gt;=<span class=\"number\">0</span> <span class=\"keyword\">and</span> y_+y&lt;m:</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> visited[x_+x][y_+y]:</span><br><span class=\"line\">                                    visited[x_+x][y_+y]=<span class=\"number\">1</span></span><br><span class=\"line\">                                    dq.append((x_+x,y_+y))</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>333周赛</p>\n</blockquote>\n<p><a href=\"\">6365. 将整数减少到零需要的最少操作数</a><br />\n思路1:刚开始以为要转成二进制的01传,看0多还是1多,如果0多直接返回1的数量,但是668错了<br />\n思路2:打表100000之内2的次方,然后二分查找n在那两个数中间,找距离近的这个数的插值,然后+1递归下去,54-&gt;64-54=10-&gt;10-8=2-&gt;0</p>\n<p>bilibili:找到最低为的1,考虑这个1 是直接减掉还是加上同位置的1 ,枚举这两种可能.</p>\n<p><code>判断一个数是不是2的幂:(x &amp; ( x-1 ))==0</code></p>\n<p><code>找到最低位的1:lowbit: x &amp; -x</code></p>\n<p><a href=\"\">☆6364. 无平方子集计数</a></p>\n<p>没思路:题型重灾区,应该是用dp做,但是毫无思路</p>\n<p>bilibili:对不起,等我学有所成再来看,什么jb玩意那么难</p>\n<p><a href=\"\">6363. 找出对应 LCP 矩阵的字符串</a></p>\n<p>没思路</p>\n<h3 id=\"第十天\"><a class=\"markdownIt-Anchor\" href=\"#第十天\"></a> 第十天</h3>\n<p><a href=\"https://leetcode.cn/problems/fibonacci-number/description/\">509. 斐波那契数</a></p>\n<p>思路:.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.自顶向下,记忆化搜索</span></span><br><span class=\"line\"><span class=\"comment\"># 2.自底向上,dp数组</span></span><br><span class=\"line\"><span class=\"comment\"># 3.用a,b两个变量,空间复杂度降到O(1)</span></span><br><span class=\"line\"><span class=\"comment\"># 4.矩阵快速幂,时间复杂度降到O(logn)</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/climbing-stairs/description/\">70. 爬楼梯</a></p>\n<p>思路:.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 斐波那契数列模板题</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第十一天\"><a class=\"markdownIt-Anchor\" href=\"#第十一天\"></a> 第十一天</h3>\n<p><a href=\"https://leetcode.cn/problems/min-cost-climbing-stairs/description/\">746. 使用最小花费爬楼梯</a></p>\n<p>思路:爬到今天的费用只能有两个来源,前一个和前两个,但是顶楼数组里没有,所以追加一个0,第一层第二层的费用就是本身,第二层为什么不是min(第一层,第二层)呢,因为如果是从第一层上到的第二层,第二层还要继续向上上,那么还得加上第二层的费用,就变成了(第一层+第二层)的费用了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">minCostClimbingStairs</span>(<span class=\"params\">self, cost: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        cost.append(<span class=\"number\">0</span>)</span><br><span class=\"line\">        n=<span class=\"built_in\">len</span>(cost)</span><br><span class=\"line\">        <span class=\"comment\"># dp=[99999]*(n)</span></span><br><span class=\"line\">        a=cost[<span class=\"number\">0</span>]</span><br><span class=\"line\">        b=cost[<span class=\"number\">1</span>]</span><br><span class=\"line\">        c=b</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>,n):</span><br><span class=\"line\">            c=<span class=\"built_in\">min</span>(a,b)+cost[i]</span><br><span class=\"line\">            a,b=b,c</span><br><span class=\"line\">            <span class=\"comment\"># dp[i]=min(dp[i-1],dp[i-2])+cost[i]</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> c</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/unique-paths/description/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">62. 不同路径</a></p>\n<p>思路:深搜和广搜的复杂度应该是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(2^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>,会超时,还是dp,当前位置只能从左边或者上边来到,就把左边和上边的方案数加起来就行,第一行第一列的方案数都是1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">uniquePaths</span>(<span class=\"params\">self, m: <span class=\"built_in\">int</span>, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        a=[<span class=\"number\">1</span> <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n) ]</span><br><span class=\"line\">        b=[<span class=\"number\">1</span> <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n) ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,n):</span><br><span class=\"line\">                b[j]=a[j]+b[j-<span class=\"number\">1</span>]</span><br><span class=\"line\">            a=b[:]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b[-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># dp=[[0 for j in range(n) ]  for i in range(m)]</span></span><br><span class=\"line\">        <span class=\"comment\"># for i in range(m):</span></span><br><span class=\"line\">        <span class=\"comment\">#     for j in range(n):</span></span><br><span class=\"line\">        <span class=\"comment\">#         if i==0 or j==0:</span></span><br><span class=\"line\">        <span class=\"comment\">#             dp[i][j]=1</span></span><br><span class=\"line\">        <span class=\"comment\">#         else:</span></span><br><span class=\"line\">        <span class=\"comment\">#             dp[i][j]=dp[i][j-1]+dp[i-1][j]</span></span><br><span class=\"line\">        <span class=\"comment\"># return dp[m-1][n-1]</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># dq=deque([(0,0)])</span></span><br><span class=\"line\">        <span class=\"comment\"># ans=0</span></span><br><span class=\"line\">        <span class=\"comment\"># while dq:</span></span><br><span class=\"line\">        <span class=\"comment\">#     x,y=dq.pop()</span></span><br><span class=\"line\">        <span class=\"comment\">#     if x==m-1 and y==n-1:</span></span><br><span class=\"line\">        <span class=\"comment\">#         ans+=1</span></span><br><span class=\"line\">        <span class=\"comment\">#     for x_,y_ in  [(x+1,y),(x,y+1)]:</span></span><br><span class=\"line\">        <span class=\"comment\">#         if x_&gt;=0 and x_&lt;m and y_&gt;=0 and y_&lt;n:</span></span><br><span class=\"line\">        <span class=\"comment\">#             dq.append((x_,y_))</span></span><br><span class=\"line\">        <span class=\"comment\"># return ans </span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第十二天\"><a class=\"markdownIt-Anchor\" href=\"#第十二天\"></a> 第十二天</h3>\n<p><a href=\"https://leetcode.cn/problems/find-all-anagrams-in-a-string/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">438. 找到字符串中所有字母异位词</a></p>\n<p>思路:双指针维护长度为第二个字符串的区间,对区间内的数字统计数量,数量一致答案加1,右移的时候,右侧字符加1,左侧字符减1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">findAnagrams</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span>, p: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">val</span>(<span class=\"params\">a,b</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i,j <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(a,b):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> i!=j:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        pnums=[<span class=\"number\">0</span>]*<span class=\"number\">26</span></span><br><span class=\"line\">        snums=[<span class=\"number\">0</span>]*<span class=\"number\">26</span></span><br><span class=\"line\">        constant=<span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> p:</span><br><span class=\"line\">            pnums[<span class=\"built_in\">ord</span>(item)-constant]+=<span class=\"number\">1</span></span><br><span class=\"line\">        left=right=<span class=\"number\">0</span></span><br><span class=\"line\">        lengths=<span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">        lengthp=<span class=\"built_in\">len</span>(p)</span><br><span class=\"line\">        ans=[]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> right&lt;lengths:</span><br><span class=\"line\">            snums[<span class=\"built_in\">ord</span>(s[right])-constant]+=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> val(snums,pnums):</span><br><span class=\"line\">                ans.append(left)</span><br><span class=\"line\">            right+=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> right&gt;=lengthp:</span><br><span class=\"line\">                snums[<span class=\"built_in\">ord</span>(s[left])-constant]-=<span class=\"number\">1</span></span><br><span class=\"line\">                left+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans </span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/longest-repeating-character-replacement/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">424. 替换后的最长重复字符</a></p>\n<p>思路:没有思路,考虑到了应该是用双指针</p>\n<p>题解:双指针加一个maxhistory记录最多的相同字符个数,如果当前区间长度大于了k+maxhistory,说明不可能变成一样的,左边右移1,否则说明当前区间不是最大长度,还可增加新元素</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">characterReplacement</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span>, k: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        constant=<span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;A&#x27;</span>)</span><br><span class=\"line\">        length=<span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">        <span class=\"comment\"># 左右指针</span></span><br><span class=\"line\">        left=right=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\"># 用于记录left-right区间每个字母的个数</span></span><br><span class=\"line\">        nums=[<span class=\"number\">0</span>]*<span class=\"number\">26</span></span><br><span class=\"line\">        <span class=\"comment\"># 用于记录区间内出现的 最多的相同字符的个数</span></span><br><span class=\"line\">        historymax=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> right&lt;length:</span><br><span class=\"line\">            <span class=\"comment\"># 新加的字符个数加1</span></span><br><span class=\"line\">            nums[<span class=\"built_in\">ord</span>(s[right])-constant]+=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"comment\"># 更新一下区间内最长的字符个数</span></span><br><span class=\"line\">            historymax=<span class=\"built_in\">max</span>(historymax,nums[<span class=\"built_in\">ord</span>(s[right])-constant])</span><br><span class=\"line\">            <span class=\"comment\"># historymax+k 是目前可以达到的最长长度,已经包含了右节点了</span></span><br><span class=\"line\">            <span class=\"comment\"># 小于说明现在这个区间长度还小于最大长度</span></span><br><span class=\"line\">            <span class=\"comment\"># 大于说明把其它不是最多出现的字符替换以后，都不能填满这个滑动的窗口，说明此时 k 不够用</span></span><br><span class=\"line\">            <span class=\"comment\"># 这个时候须要考虑左边界向右移动</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> right-left+<span class=\"number\">1</span>&gt;historymax+k:</span><br><span class=\"line\">                nums[<span class=\"built_in\">ord</span>(s[left])-constant]-=<span class=\"number\">1</span></span><br><span class=\"line\">                left+=<span class=\"number\">1</span></span><br><span class=\"line\">            right+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> right-left</span><br></pre></td></tr></table></figure>\n<h3 id=\"第十三天\"><a class=\"markdownIt-Anchor\" href=\"#第十三天\"></a> 第十三天</h3>\n<p><a href=\"https://leetcode.cn/problems/two-sum/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">1. 两数之和</a></p>\n<p>思路:数组排序,然后对每个数字,二分查找target减去她的值</p>\n<p>题解:用字典存储每个target-num的值,如果当前数字在字典中存在,找到答案,否则把target减他存进去</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">twoSum</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">        <span class=\"comment\"># nums=[(i,n) for i,n in enumerate(nums)]</span></span><br><span class=\"line\">        <span class=\"comment\"># nums=sorted(nums,key=lambda x:x[1])</span></span><br><span class=\"line\">        <span class=\"comment\"># length=len(nums)</span></span><br><span class=\"line\">        <span class=\"comment\"># for i in range(length):</span></span><br><span class=\"line\">        <span class=\"comment\">#     ttt=target-nums[i][1]</span></span><br><span class=\"line\">        <span class=\"comment\">#     index=bisect_left(nums,ttt,key=lambda x:x[1])</span></span><br><span class=\"line\">        <span class=\"comment\">#     if index==i:continue</span></span><br><span class=\"line\">        <span class=\"comment\">#     if index&lt;0 or index&gt;=length:continue</span></span><br><span class=\"line\">        <span class=\"comment\">#     if nums[index][1]==ttt:</span></span><br><span class=\"line\">        <span class=\"comment\">#         return [nums[i][0],nums[index][0]]</span></span><br><span class=\"line\">        hashtable = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, num <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(nums):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> target - num <span class=\"keyword\">in</span> hashtable:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [hashtable[target - num], i]</span><br><span class=\"line\">            hashtable[nums[i]] = i</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/bulls-and-cows/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">299. 猜数字游戏</a></p>\n<p>思路:A数字好统计,对于B数字,分别存A,B中数字出现的个数,加入对他们重新排序,一定是只能匹配个数少的,所以直接取每个数字二者中的最小值,求和就是B.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">getHint</span>(<span class=\"params\">self, secret: <span class=\"built_in\">str</span>, guess: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        hasA=[<span class=\"number\">0</span>]*<span class=\"number\">10</span></span><br><span class=\"line\">        hasB=[<span class=\"number\">0</span>]*<span class=\"number\">10</span></span><br><span class=\"line\">        A=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i,j <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(secret,guess):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i==j:</span><br><span class=\"line\">                A+=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                hasA[<span class=\"built_in\">int</span>(j)]+=<span class=\"number\">1</span></span><br><span class=\"line\">                hasB[<span class=\"built_in\">int</span>(i)]+=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ans=<span class=\"built_in\">sum</span>([<span class=\"built_in\">min</span>(a,b) <span class=\"keyword\">for</span> a,b <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(hasA,hasB)])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&#x27;<span class=\"subst\">&#123;A&#125;</span>A<span class=\"subst\">&#123;ans&#125;</span>B&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第十四天\"><a class=\"markdownIt-Anchor\" href=\"#第十四天\"></a> 第十四天</h3>\n<p><a href=\"https://leetcode.cn/problems/backspace-string-compare/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">844. 比较含退格的字符串</a></p>\n<p>思路:忘记用栈了，从后往前遍历数组，cnt记录当前#的数量，然后跳过cnt个字母。</p>\n<p>题解:用栈，遇见#退一个字符</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">backspaceCompare</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span>, t: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">check</span>(<span class=\"params\">a</span>):</span><br><span class=\"line\">            length=<span class=\"built_in\">len</span>(a)</span><br><span class=\"line\">            ans=[]</span><br><span class=\"line\">            cnt=<span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length-<span class=\"number\">1</span>,-<span class=\"number\">1</span>,-<span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> a[i]==<span class=\"string\">&#x27;#&#x27;</span>:</span><br><span class=\"line\">                    cnt+=<span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> cnt==<span class=\"number\">0</span>:</span><br><span class=\"line\">                        ans.append(a[i])</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        cnt-=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">        <span class=\"keyword\">return</span> check(s)==check(t)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/backspace-string-compare/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">394. 字符串解码</a></p>\n<p>思路:栈操作，一个数组存数字，一个栈用来弹字符，遇见]一直弹，直到弹出[。然后复制数字数组的最后一个数字便，在加入栈中，数字的处理有一点点麻烦</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">decodeString</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        stack=[]</span><br><span class=\"line\">        nums=[]</span><br><span class=\"line\">        length=<span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">        i=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> i&lt;length:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s[i]==<span class=\"string\">&#x27;]&#x27;</span>:</span><br><span class=\"line\">                temp=[]</span><br><span class=\"line\">                <span class=\"keyword\">while</span> stack[-<span class=\"number\">1</span>]!=<span class=\"string\">&#x27;[&#x27;</span>:</span><br><span class=\"line\">                    temp.append(stack.pop())</span><br><span class=\"line\">                stack.pop()</span><br><span class=\"line\">                temp=<span class=\"string\">&quot;&quot;</span>.join(temp[::-<span class=\"number\">1</span>])</span><br><span class=\"line\">                stack.append(temp*nums[-<span class=\"number\">1</span>])</span><br><span class=\"line\">                nums.pop()</span><br><span class=\"line\">                i+=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> s[i].isnumeric():</span><br><span class=\"line\">                n=<span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> i&lt;length  <span class=\"keyword\">and</span> s[i].isnumeric():</span><br><span class=\"line\">                    n*=<span class=\"number\">10</span></span><br><span class=\"line\">                    n+=<span class=\"built_in\">int</span>(s[i])</span><br><span class=\"line\">                    i+=<span class=\"number\">1</span></span><br><span class=\"line\">                nums.append(n)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                stack.append(s[i])</span><br><span class=\"line\">                i+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>.join(stack)</span><br></pre></td></tr></table></figure>\n<h3 id=\"第十五天\"><a class=\"markdownIt-Anchor\" href=\"#第十五天\"></a> 第十五天</h3>\n<p><a href=\"https://leetcode.cn/problems/last-stone-weight/description/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">1046. 最后一块石头的重量</a></p>\n<p>思路:大项堆，但是python的heapq只能实现小项堆，大项堆的实现要加负号</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">lastStoneWeight</span>(<span class=\"params\">self, x: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        x=<span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x:-x,x))</span><br><span class=\"line\">        <span class=\"comment\"># 这一步的作用不是很明确</span></span><br><span class=\"line\">        <span class=\"comment\"># 注意heapify(包括heapq封装的其他操作)都不会更改数据结构(仍为list)，只会以堆的操作规范对其进行处理。</span></span><br><span class=\"line\">        <span class=\"comment\"># 虽然类型仍为list，但元素的顺序已经满足了堆的规范，所以从线性的角度看结果列表并非是有序的(是[1, 3, 7, 9, 5]而非[1, 3, 5, 7, 9])</span></span><br><span class=\"line\">        heapq.heapify(x)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(x)&gt;<span class=\"number\">1</span>:</span><br><span class=\"line\">            a=heapq.heappop(x)</span><br><span class=\"line\">            b=heapq.heappop(x)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> a!=b:</span><br><span class=\"line\">                newstore=<span class=\"built_in\">abs</span>(<span class=\"built_in\">max</span>(a,b)-<span class=\"built_in\">min</span>(a,b))</span><br><span class=\"line\">                heapq.heappush(x,-newstore)</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> -x[<span class=\"number\">0</span>] <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(x) <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/top-k-frequent-words/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs\">692. 前K个高频单词</a></p>\n<p>思路:Counter统计单词数量，然后按照数量降序，字典序升序排列，返回k个</p>\n<p>题解：优先队列，元组（单词，词频）</p>\n<p>知识点：1.Counter的most_common()在计数相同的情况下是按出现顺序返回<br />\n2.python多关键字排序：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr=[(<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>),(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>),(<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>),(<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>)]</span><br><span class=\"line\">arr.sort(key=<span class=\"keyword\">lambda</span> s:(s[<span class=\"number\">0</span>],-s[<span class=\"number\">1</span>])) </span><br><span class=\"line\"><span class=\"comment\">#两个关键字排序,在需要倒序排列的关键字前加`-`号</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">topKFrequent</span>(<span class=\"params\">self, words: <span class=\"type\">List</span>[<span class=\"built_in\">str</span>], k: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">str</span>]:</span><br><span class=\"line\">        c = Counter(words).items()</span><br><span class=\"line\">        c = <span class=\"built_in\">sorted</span>(c,key=<span class=\"keyword\">lambda</span> x:(-x[<span class=\"number\">1</span>],x[<span class=\"number\">0</span>]))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x:x[<span class=\"number\">0</span>],c[:k]))</span><br><span class=\"line\">        <span class=\"comment\"># return sorted((cnt := Counter(words)).keys(), key=lambda key: (-cnt[key], key))[:k]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h3>\n"},{"title":"Linux的一些常用命令记录","toc":"true# 是否启用内容索引","_content":"```bash\n# 查看cpu型号\ncat /proc/cpuinfo | grep 'model name'\n\n# 查看系统\nuname -a\n\n# 查看显卡\nlshw -C display\n\n# 如果显卡是Nvidia\nnvidia-smi\n\n# 后台运行程序\nnohup ***** & \n\n# 查看所有进程\nps -aux\n```\n","source":"_posts/Linux常用命令.md","raw":"---\ntitle: Linux的一些常用命令记录\ncategories:\n  - 快捷命令\ntags:\n  - Linux快捷命令\ntoc: true# 是否启用内容索引\n---\n```bash\n# 查看cpu型号\ncat /proc/cpuinfo | grep 'model name'\n\n# 查看系统\nuname -a\n\n# 查看显卡\nlshw -C display\n\n# 如果显卡是Nvidia\nnvidia-smi\n\n# 后台运行程序\nnohup ***** & \n\n# 查看所有进程\nps -aux\n```\n","slug":"Linux常用命令","published":1,"date":"2022-11-17T09:35:08.623Z","updated":"2022-11-17T10:46:58.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clee4vhab0003c8vq1u9n5n6b","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看cpu型号</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /proc/cpuinfo | grep <span class=\"string\">&#x27;model name&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看系统</span></span><br><span class=\"line\"><span class=\"built_in\">uname</span> -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看显卡</span></span><br><span class=\"line\">lshw -C display</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果显卡是Nvidia</span></span><br><span class=\"line\">nvidia-smi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台运行程序</span></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> ***** &amp; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有进程</span></span><br><span class=\"line\">ps -aux</span><br></pre></td></tr></table></figure>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看cpu型号</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /proc/cpuinfo | grep <span class=\"string\">&#x27;model name&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看系统</span></span><br><span class=\"line\"><span class=\"built_in\">uname</span> -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看显卡</span></span><br><span class=\"line\">lshw -C display</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果显卡是Nvidia</span></span><br><span class=\"line\">nvidia-smi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台运行程序</span></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> ***** &amp; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有进程</span></span><br><span class=\"line\">ps -aux</span><br></pre></td></tr></table></figure>\n"},{"title":"Neo4j&JDK安装踩坑","toc":"true# 是否启用内容索引","_content":"# 前言\n\n最近要开始打工了\n😟 😟 😟 😟\n创建一个知识图谱(可视化)嵌入到一个系统里面,当作子系统.\n\n期待的效果是[百度百科影视图谱](https://baike.baidu.com/lemmagraph/graphview?lemmaId=56059649&featureId=06a4e94ff6154c81ede88422&classify=teleplay&fromModule=lemma_graph-tree),任务太艰巨了.\n😔 😔 😔 😔\n如果你看到了这篇博客,有好的解决方案都可以帮帮我.\n😘 😘 😘 😘\n\n# 正文\n\n## 踩坑\n\n😭😭😭😭\n\n### 问题:\n\n```\n想创建多个数据库用,刚开始默认有两个,一个neo4j,一个system.\n希望创建别的数据库.\n比如:\n```\n\n![](https://image.yayan.xyz/20221103175926.png)\n\n网上搜索了很多办法,最坑的一个:\n\n```\n创建:create database name\n删除:drop database name\n```\n\n看着挺好,试了很多遍报错\n\n![](https://image.yayan.xyz/20221103180045.png)\n\n\n看了[文档](https://neo4j.com/docs/cypher-manual/4.2/administration/databases/)才知道,**这是企业版专属命令,社区版用不了...**\n\n![](https://image.yayan.xyz/20221103183512.png)\n---\n\n### 解决:\n\n[neo4j官网](https://neo4j.com/docs/operations-manual/4.3/manage-databases/configuration/)\n\n**新建数据库**\n在 ``neo4j\\conf\\neo4j.conf``中,\n找到 ``dbms.default_database=defaultdatabase``\n修改后面的名字\n\n> 如果数据库不存在,就会创建一个新的\n> 如果存在,启动之后就会设为默认的数据库\n\n但是有一个弊端:\n![](https://image.yayan.xyz/20221103175926.png)\n这种方式还是切换不了数据库\n\ncypher命令 ``use databasename``也不能用\n\n上面两种方法都会报错\n![](https://image.yayan.xyz/20221103180846.png)\n\n因为**社区版只能开启一个用户数据库...**\n![](https://image.yayan.xyz/20221103183313.png)\n如果想切换数据库只能修改配置文件,然后重启(neo4j restart)或者开一个新的进程(neo4j start).\n\n---\n\n**删除数据库**\n\n把 ``neo4j\\data\\``文件夹下面的\n![](https://image.yayan.xyz/20221103181021.png)\n对应的数据库名字删除,即可.\n\n## 配置前须知\n\nneo4j现在已经到5.x了,\nneo4j 3.x版本需要jdk8\nneo4j 4.x版本需要jdk11\n\n安装之前需要把jdk安装好,我用的neo4j4.3.19,\njdk11.2\n\n## JDK安装\n\njdk有很多资料,建议找一个时间最近的,不要找好几年前的.\n\n1. 下载jdk安装包\n   [官网下载](https://www.oracle.com/java/technologies/downloads/)需要注册,可以用[其他镜像](https://repo.huaweicloud.com/java/jdk/)\n2. 如果需要,更改路径,但是要记住\n   ![](https://image.yayan.xyz/20221103174240.png)\n   (没图了,网上找的图)\n3. 一路next之后,如果jdk目录里没有jre\n\n> 命令:\n> bin\\jlink.exe --module-path jmods --add-modules java desktop --output jre\n> 就多了一个jre文件夹\n\n4. 配置环境变量\n   ![](https://image.yayan.xyz/20221103174641.png)\n\n```\n%JAVA_HOME%\\bin\n%JAVA_HOME%\\jre\\bin\n```\n\n![](https://image.yayan.xyz/20221103174753.png)\n\n```\n.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar\n```\n\n![](https://image.yayan.xyz/20221103174829.png)\n\n[解释每个变量的作用](https://www.cnblogs.com/zll-wyf/p/15095664.html)\n\n```bash\nJAVA_HOME\n    变量名：JAVA_HOME\n    变量值：C:\\develop\\Java\\jdk1.8.0_191\n    用途：定义一个变量，供其他地方使用\n\nPath\n    变量名：Path\n    变量值：%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;\n    用途：让系统在任何路径下都可以识别java、javac、javap等命令\n\nCLASSPATH\n    变量名：CLASSPATH\n    变量值：.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar\n    用途：告诉jvm要使用或执行的class放在什么路径上，便于JVM加载class文件，.;表示当前路径，tools.jar和dt.jar为类库路径\n\nCLASSPATH详解\n    - tools.jar\n    工具类库(编译和运行等)，它跟我们程序中用到的基础类库没有关系。我们注意到在Path中变量值bin目录下的各个exe工具的大小都很小，一般都在27KB左右，这是因为它们实际上仅仅相当于是一层代码的包装，这些工具的实现所要用到的类库都在tools.jar中，用压缩软件打开tools.jar，你会发现有很多文件是和bin目录下的exe工具相对性的。当然，如果tools.jar的功能只有这些的话，那么我们根本不用把它加入到CLASSPATH变量中，因为bin目录下的工具自己可以完成对这些类库的调用，因此tools.jar应该还有其他的功能。在里面还可以看到有Applet和RMI等相关的文件，因此tools.jar应该还是远程调用等必须的jar包。tools.jar的其他作用可以查看其他资料。\n\n    - dt.jar\n    运行环境类库，主要是Swing包，这一点通过用压缩软件打开dt.jar也可以看到。如果在开发时候没有用到Swing包，那么可以不用将dt.jar添加到CLASSPATH变量中。\n    CLASSPATH中的类库是由Application ClassLoader或者我们自定义的类加载器来加载的，这里当然不能包括基础类库，如果包括基础类库的话，并用两个不同的自定义类加载器去加载该基础类，那它得到的该基础类就不是唯一的了，这样便不能保证Java类的安全性。\n\n    - 基本类库和扩展类库rt.jar\n    基本类库是所有的 import java.* 开头的类，在 %JAVA_HOME%\\jre\\lib 目录下（如其中的 rt.jar、resource.jar ），类加载机制提到，该目录下的类会由 Bootstrap ClassLoader 自动加载，并通过亲委派模型保证了基础类库只会被Bootstrap ClassLoader加载，这也就保证了基础类的唯一性。\n\n    - 扩展类库是所有的 import javax.* 开头的类，在 %JAVA_HOME%\\jre\\lib\\ext 目录下，该目录下的类是由Extension ClassLoader 自动加载，不需要我们指定。\n\n    - rt.jar 默认就在根ClassLoader的加载路径里面，放在CLASSPATH也是多此一举。\n\n```\n\n5. 验证\n\n```\ncmd里输入:\njava -version\njavac -version\n```\n\n## neo4j安装\n\n```bash\nneo4j有三个版本\n一个是社区版:和桌面版基本上没区别,桌面版就是一个应用程序,社区版需要用命令行启动\n一个是企业版:收费,没用过,功能很多,上面有体会\n一个是桌面版:有可以操作的页面,方便,但是会有点慢\n```\n\n1. [官网下载](https://neo4j.com/download-center/),找对应的安装zip(社区版)\n2. 下载解压\n3. 配置环境变量\n   ![](https://image.yayan.xyz/20221103175408.png)\n   ![](https://image.yayan.xyz/20221103175425.png)\n4. cmd中输入:neo4j start 就可以启动了,浏览器输入访问\n\n```\nhttp://localhost:7474/browser/\n```\n\n5. 默认用户名密码都是**neo4j**\n","source":"_posts/Neo4j安装.md","raw":"---\ntitle: Neo4j&JDK安装踩坑\ncategories:\n  - 杂七杂八配置 \ntags:\n  - neo4j安装\ntoc: true# 是否启用内容索引\n---\n# 前言\n\n最近要开始打工了\n😟 😟 😟 😟\n创建一个知识图谱(可视化)嵌入到一个系统里面,当作子系统.\n\n期待的效果是[百度百科影视图谱](https://baike.baidu.com/lemmagraph/graphview?lemmaId=56059649&featureId=06a4e94ff6154c81ede88422&classify=teleplay&fromModule=lemma_graph-tree),任务太艰巨了.\n😔 😔 😔 😔\n如果你看到了这篇博客,有好的解决方案都可以帮帮我.\n😘 😘 😘 😘\n\n# 正文\n\n## 踩坑\n\n😭😭😭😭\n\n### 问题:\n\n```\n想创建多个数据库用,刚开始默认有两个,一个neo4j,一个system.\n希望创建别的数据库.\n比如:\n```\n\n![](https://image.yayan.xyz/20221103175926.png)\n\n网上搜索了很多办法,最坑的一个:\n\n```\n创建:create database name\n删除:drop database name\n```\n\n看着挺好,试了很多遍报错\n\n![](https://image.yayan.xyz/20221103180045.png)\n\n\n看了[文档](https://neo4j.com/docs/cypher-manual/4.2/administration/databases/)才知道,**这是企业版专属命令,社区版用不了...**\n\n![](https://image.yayan.xyz/20221103183512.png)\n---\n\n### 解决:\n\n[neo4j官网](https://neo4j.com/docs/operations-manual/4.3/manage-databases/configuration/)\n\n**新建数据库**\n在 ``neo4j\\conf\\neo4j.conf``中,\n找到 ``dbms.default_database=defaultdatabase``\n修改后面的名字\n\n> 如果数据库不存在,就会创建一个新的\n> 如果存在,启动之后就会设为默认的数据库\n\n但是有一个弊端:\n![](https://image.yayan.xyz/20221103175926.png)\n这种方式还是切换不了数据库\n\ncypher命令 ``use databasename``也不能用\n\n上面两种方法都会报错\n![](https://image.yayan.xyz/20221103180846.png)\n\n因为**社区版只能开启一个用户数据库...**\n![](https://image.yayan.xyz/20221103183313.png)\n如果想切换数据库只能修改配置文件,然后重启(neo4j restart)或者开一个新的进程(neo4j start).\n\n---\n\n**删除数据库**\n\n把 ``neo4j\\data\\``文件夹下面的\n![](https://image.yayan.xyz/20221103181021.png)\n对应的数据库名字删除,即可.\n\n## 配置前须知\n\nneo4j现在已经到5.x了,\nneo4j 3.x版本需要jdk8\nneo4j 4.x版本需要jdk11\n\n安装之前需要把jdk安装好,我用的neo4j4.3.19,\njdk11.2\n\n## JDK安装\n\njdk有很多资料,建议找一个时间最近的,不要找好几年前的.\n\n1. 下载jdk安装包\n   [官网下载](https://www.oracle.com/java/technologies/downloads/)需要注册,可以用[其他镜像](https://repo.huaweicloud.com/java/jdk/)\n2. 如果需要,更改路径,但是要记住\n   ![](https://image.yayan.xyz/20221103174240.png)\n   (没图了,网上找的图)\n3. 一路next之后,如果jdk目录里没有jre\n\n> 命令:\n> bin\\jlink.exe --module-path jmods --add-modules java desktop --output jre\n> 就多了一个jre文件夹\n\n4. 配置环境变量\n   ![](https://image.yayan.xyz/20221103174641.png)\n\n```\n%JAVA_HOME%\\bin\n%JAVA_HOME%\\jre\\bin\n```\n\n![](https://image.yayan.xyz/20221103174753.png)\n\n```\n.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar\n```\n\n![](https://image.yayan.xyz/20221103174829.png)\n\n[解释每个变量的作用](https://www.cnblogs.com/zll-wyf/p/15095664.html)\n\n```bash\nJAVA_HOME\n    变量名：JAVA_HOME\n    变量值：C:\\develop\\Java\\jdk1.8.0_191\n    用途：定义一个变量，供其他地方使用\n\nPath\n    变量名：Path\n    变量值：%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;\n    用途：让系统在任何路径下都可以识别java、javac、javap等命令\n\nCLASSPATH\n    变量名：CLASSPATH\n    变量值：.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar\n    用途：告诉jvm要使用或执行的class放在什么路径上，便于JVM加载class文件，.;表示当前路径，tools.jar和dt.jar为类库路径\n\nCLASSPATH详解\n    - tools.jar\n    工具类库(编译和运行等)，它跟我们程序中用到的基础类库没有关系。我们注意到在Path中变量值bin目录下的各个exe工具的大小都很小，一般都在27KB左右，这是因为它们实际上仅仅相当于是一层代码的包装，这些工具的实现所要用到的类库都在tools.jar中，用压缩软件打开tools.jar，你会发现有很多文件是和bin目录下的exe工具相对性的。当然，如果tools.jar的功能只有这些的话，那么我们根本不用把它加入到CLASSPATH变量中，因为bin目录下的工具自己可以完成对这些类库的调用，因此tools.jar应该还有其他的功能。在里面还可以看到有Applet和RMI等相关的文件，因此tools.jar应该还是远程调用等必须的jar包。tools.jar的其他作用可以查看其他资料。\n\n    - dt.jar\n    运行环境类库，主要是Swing包，这一点通过用压缩软件打开dt.jar也可以看到。如果在开发时候没有用到Swing包，那么可以不用将dt.jar添加到CLASSPATH变量中。\n    CLASSPATH中的类库是由Application ClassLoader或者我们自定义的类加载器来加载的，这里当然不能包括基础类库，如果包括基础类库的话，并用两个不同的自定义类加载器去加载该基础类，那它得到的该基础类就不是唯一的了，这样便不能保证Java类的安全性。\n\n    - 基本类库和扩展类库rt.jar\n    基本类库是所有的 import java.* 开头的类，在 %JAVA_HOME%\\jre\\lib 目录下（如其中的 rt.jar、resource.jar ），类加载机制提到，该目录下的类会由 Bootstrap ClassLoader 自动加载，并通过亲委派模型保证了基础类库只会被Bootstrap ClassLoader加载，这也就保证了基础类的唯一性。\n\n    - 扩展类库是所有的 import javax.* 开头的类，在 %JAVA_HOME%\\jre\\lib\\ext 目录下，该目录下的类是由Extension ClassLoader 自动加载，不需要我们指定。\n\n    - rt.jar 默认就在根ClassLoader的加载路径里面，放在CLASSPATH也是多此一举。\n\n```\n\n5. 验证\n\n```\ncmd里输入:\njava -version\njavac -version\n```\n\n## neo4j安装\n\n```bash\nneo4j有三个版本\n一个是社区版:和桌面版基本上没区别,桌面版就是一个应用程序,社区版需要用命令行启动\n一个是企业版:收费,没用过,功能很多,上面有体会\n一个是桌面版:有可以操作的页面,方便,但是会有点慢\n```\n\n1. [官网下载](https://neo4j.com/download-center/),找对应的安装zip(社区版)\n2. 下载解压\n3. 配置环境变量\n   ![](https://image.yayan.xyz/20221103175408.png)\n   ![](https://image.yayan.xyz/20221103175425.png)\n4. cmd中输入:neo4j start 就可以启动了,浏览器输入访问\n\n```\nhttp://localhost:7474/browser/\n```\n\n5. 默认用户名密码都是**neo4j**\n","slug":"Neo4j安装","published":1,"date":"2022-11-03T09:31:04.917Z","updated":"2022-11-03T10:35:37.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clee4vhag0007c8vqay23hvc7","content":"<h1 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h1>\n<p>最近要开始打工了<br />\n😟 😟 😟 😟<br />\n创建一个知识图谱(可视化)嵌入到一个系统里面,当作子系统.</p>\n<p>期待的效果是<a href=\"https://baike.baidu.com/lemmagraph/graphview?lemmaId=56059649&amp;featureId=06a4e94ff6154c81ede88422&amp;classify=teleplay&amp;fromModule=lemma_graph-tree\">百度百科影视图谱</a>,任务太艰巨了.<br />\n😔 😔 😔 😔<br />\n如果你看到了这篇博客,有好的解决方案都可以帮帮我.<br />\n😘 😘 😘 😘</p>\n<h1 id=\"正文\"><a class=\"markdownIt-Anchor\" href=\"#正文\"></a> 正文</h1>\n<h2 id=\"踩坑\"><a class=\"markdownIt-Anchor\" href=\"#踩坑\"></a> 踩坑</h2>\n<p>😭😭😭😭</p>\n<h3 id=\"问题\"><a class=\"markdownIt-Anchor\" href=\"#问题\"></a> 问题:</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">想创建多个数据库用,刚开始默认有两个,一个neo4j,一个system.</span><br><span class=\"line\">希望创建别的数据库.</span><br><span class=\"line\">比如:</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://image.yayan.xyz/20221103175926.png\" alt=\"\" /></p>\n<p>网上搜索了很多办法,最坑的一个:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建:create database name</span><br><span class=\"line\">删除:drop database name</span><br></pre></td></tr></table></figure>\n<p>看着挺好,试了很多遍报错</p>\n<p><img src=\"https://image.yayan.xyz/20221103180045.png\" alt=\"\" /></p>\n<p>看了<a href=\"https://neo4j.com/docs/cypher-manual/4.2/administration/databases/\">文档</a>才知道,<strong>这是企业版专属命令,社区版用不了…</strong></p>\n<h2 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\"></a> <img src=\"https://image.yayan.xyz/20221103183512.png\" alt=\"\" /></h2>\n<h3 id=\"解决\"><a class=\"markdownIt-Anchor\" href=\"#解决\"></a> 解决:</h3>\n<p><a href=\"https://neo4j.com/docs/operations-manual/4.3/manage-databases/configuration/\">neo4j官网</a></p>\n<p><strong>新建数据库</strong><br />\n在 <code>neo4j\\conf\\neo4j.conf</code>中,<br />\n找到 <code>dbms.default_database=defaultdatabase</code><br />\n修改后面的名字</p>\n<blockquote>\n<p>如果数据库不存在,就会创建一个新的<br />\n如果存在,启动之后就会设为默认的数据库</p>\n</blockquote>\n<p>但是有一个弊端:<br />\n<img src=\"https://image.yayan.xyz/20221103175926.png\" alt=\"\" /><br />\n这种方式还是切换不了数据库</p>\n<p>cypher命令 <code>use databasename</code>也不能用</p>\n<p>上面两种方法都会报错<br />\n<img src=\"https://image.yayan.xyz/20221103180846.png\" alt=\"\" /></p>\n<p>因为<strong>社区版只能开启一个用户数据库…</strong><br />\n<img src=\"https://image.yayan.xyz/20221103183313.png\" alt=\"\" /><br />\n如果想切换数据库只能修改配置文件,然后重启(neo4j restart)或者开一个新的进程(neo4j start).</p>\n<hr />\n<p><strong>删除数据库</strong></p>\n<p>把 <code>neo4j\\data\\</code>文件夹下面的<br />\n<img src=\"https://image.yayan.xyz/20221103181021.png\" alt=\"\" /><br />\n对应的数据库名字删除,即可.</p>\n<h2 id=\"配置前须知\"><a class=\"markdownIt-Anchor\" href=\"#配置前须知\"></a> 配置前须知</h2>\n<p>neo4j现在已经到5.x了,<br />\nneo4j 3.x版本需要jdk8<br />\nneo4j 4.x版本需要jdk11</p>\n<p>安装之前需要把jdk安装好,我用的neo4j4.3.19,<br />\njdk11.2</p>\n<h2 id=\"jdk安装\"><a class=\"markdownIt-Anchor\" href=\"#jdk安装\"></a> JDK安装</h2>\n<p>jdk有很多资料,建议找一个时间最近的,不要找好几年前的.</p>\n<ol>\n<li>下载jdk安装包<br />\n<a href=\"https://www.oracle.com/java/technologies/downloads/\">官网下载</a>需要注册,可以用<a href=\"https://repo.huaweicloud.com/java/jdk/\">其他镜像</a></li>\n<li>如果需要,更改路径,但是要记住<br />\n<img src=\"https://image.yayan.xyz/20221103174240.png\" alt=\"\" /><br />\n(没图了,网上找的图)</li>\n<li>一路next之后,如果jdk目录里没有jre</li>\n</ol>\n<blockquote>\n<p>命令:<br />\nbin\\jlink.exe --module-path jmods --add-modules java desktop --output jre<br />\n就多了一个jre文件夹</p>\n</blockquote>\n<ol start=\"4\">\n<li>配置环境变量<br />\n<img src=\"https://image.yayan.xyz/20221103174641.png\" alt=\"\" /></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%JAVA_HOME%\\bin</span><br><span class=\"line\">%JAVA_HOME%\\jre\\bin</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://image.yayan.xyz/20221103174753.png\" alt=\"\" /></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://image.yayan.xyz/20221103174829.png\" alt=\"\" /></p>\n<p><a href=\"https://www.cnblogs.com/zll-wyf/p/15095664.html\">解释每个变量的作用</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_HOME</span><br><span class=\"line\">    变量名：JAVA_HOME</span><br><span class=\"line\">    变量值：C:\\develop\\Java\\jdk1.8.0_191</span><br><span class=\"line\">    用途：定义一个变量，供其他地方使用</span><br><span class=\"line\"></span><br><span class=\"line\">Path</span><br><span class=\"line\">    变量名：Path</span><br><span class=\"line\">    变量值：%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;</span><br><span class=\"line\">    用途：让系统在任何路径下都可以识别java、javac、javap等命令</span><br><span class=\"line\"></span><br><span class=\"line\">CLASSPATH</span><br><span class=\"line\">    变量名：CLASSPATH</span><br><span class=\"line\">    变量值：.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar</span><br><span class=\"line\">    用途：告诉jvm要使用或执行的class放在什么路径上，便于JVM加载class文件，.;表示当前路径，tools.jar和dt.jar为类库路径</span><br><span class=\"line\"></span><br><span class=\"line\">CLASSPATH详解</span><br><span class=\"line\">    - tools.jar</span><br><span class=\"line\">    工具类库(编译和运行等)，它跟我们程序中用到的基础类库没有关系。我们注意到在Path中变量值bin目录下的各个exe工具的大小都很小，一般都在27KB左右，这是因为它们实际上仅仅相当于是一层代码的包装，这些工具的实现所要用到的类库都在tools.jar中，用压缩软件打开tools.jar，你会发现有很多文件是和bin目录下的exe工具相对性的。当然，如果tools.jar的功能只有这些的话，那么我们根本不用把它加入到CLASSPATH变量中，因为bin目录下的工具自己可以完成对这些类库的调用，因此tools.jar应该还有其他的功能。在里面还可以看到有Applet和RMI等相关的文件，因此tools.jar应该还是远程调用等必须的jar包。tools.jar的其他作用可以查看其他资料。</span><br><span class=\"line\"></span><br><span class=\"line\">    - dt.jar</span><br><span class=\"line\">    运行环境类库，主要是Swing包，这一点通过用压缩软件打开dt.jar也可以看到。如果在开发时候没有用到Swing包，那么可以不用将dt.jar添加到CLASSPATH变量中。</span><br><span class=\"line\">    CLASSPATH中的类库是由Application ClassLoader或者我们自定义的类加载器来加载的，这里当然不能包括基础类库，如果包括基础类库的话，并用两个不同的自定义类加载器去加载该基础类，那它得到的该基础类就不是唯一的了，这样便不能保证Java类的安全性。</span><br><span class=\"line\"></span><br><span class=\"line\">    - 基本类库和扩展类库rt.jar</span><br><span class=\"line\">    基本类库是所有的 import java.* 开头的类，在 %JAVA_HOME%\\jre\\lib 目录下（如其中的 rt.jar、resource.jar ），类加载机制提到，该目录下的类会由 Bootstrap ClassLoader 自动加载，并通过亲委派模型保证了基础类库只会被Bootstrap ClassLoader加载，这也就保证了基础类的唯一性。</span><br><span class=\"line\"></span><br><span class=\"line\">    - 扩展类库是所有的 import javax.* 开头的类，在 %JAVA_HOME%\\jre\\lib\\ext 目录下，该目录下的类是由Extension ClassLoader 自动加载，不需要我们指定。</span><br><span class=\"line\"></span><br><span class=\"line\">    - rt.jar 默认就在根ClassLoader的加载路径里面，放在CLASSPATH也是多此一举。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>验证</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd里输入:</span><br><span class=\"line\">java -version</span><br><span class=\"line\">javac -version</span><br></pre></td></tr></table></figure>\n<h2 id=\"neo4j安装\"><a class=\"markdownIt-Anchor\" href=\"#neo4j安装\"></a> neo4j安装</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">neo4j有三个版本</span><br><span class=\"line\">一个是社区版:和桌面版基本上没区别,桌面版就是一个应用程序,社区版需要用命令行启动</span><br><span class=\"line\">一个是企业版:收费,没用过,功能很多,上面有体会</span><br><span class=\"line\">一个是桌面版:有可以操作的页面,方便,但是会有点慢</span><br></pre></td></tr></table></figure>\n<ol>\n<li><a href=\"https://neo4j.com/download-center/\">官网下载</a>,找对应的安装zip(社区版)</li>\n<li>下载解压</li>\n<li>配置环境变量<br />\n<img src=\"https://image.yayan.xyz/20221103175408.png\" alt=\"\" /><br />\n<img src=\"https://image.yayan.xyz/20221103175425.png\" alt=\"\" /></li>\n<li>cmd中输入:neo4j start 就可以启动了,浏览器输入访问</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:7474/browser/</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>默认用户名密码都是<strong>neo4j</strong></li>\n</ol>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h1 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h1>\n<p>最近要开始打工了<br />\n😟 😟 😟 😟<br />\n创建一个知识图谱(可视化)嵌入到一个系统里面,当作子系统.</p>\n<p>期待的效果是<a href=\"https://baike.baidu.com/lemmagraph/graphview?lemmaId=56059649&amp;featureId=06a4e94ff6154c81ede88422&amp;classify=teleplay&amp;fromModule=lemma_graph-tree\">百度百科影视图谱</a>,任务太艰巨了.<br />\n😔 😔 😔 😔<br />\n如果你看到了这篇博客,有好的解决方案都可以帮帮我.<br />\n😘 😘 😘 😘</p>\n<h1 id=\"正文\"><a class=\"markdownIt-Anchor\" href=\"#正文\"></a> 正文</h1>\n<h2 id=\"踩坑\"><a class=\"markdownIt-Anchor\" href=\"#踩坑\"></a> 踩坑</h2>\n<p>😭😭😭😭</p>\n<h3 id=\"问题\"><a class=\"markdownIt-Anchor\" href=\"#问题\"></a> 问题:</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">想创建多个数据库用,刚开始默认有两个,一个neo4j,一个system.</span><br><span class=\"line\">希望创建别的数据库.</span><br><span class=\"line\">比如:</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://image.yayan.xyz/20221103175926.png\" alt=\"\" /></p>\n<p>网上搜索了很多办法,最坑的一个:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建:create database name</span><br><span class=\"line\">删除:drop database name</span><br></pre></td></tr></table></figure>\n<p>看着挺好,试了很多遍报错</p>\n<p><img src=\"https://image.yayan.xyz/20221103180045.png\" alt=\"\" /></p>\n<p>看了<a href=\"https://neo4j.com/docs/cypher-manual/4.2/administration/databases/\">文档</a>才知道,<strong>这是企业版专属命令,社区版用不了…</strong></p>\n<h2 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\"></a> <img src=\"https://image.yayan.xyz/20221103183512.png\" alt=\"\" /></h2>\n<h3 id=\"解决\"><a class=\"markdownIt-Anchor\" href=\"#解决\"></a> 解决:</h3>\n<p><a href=\"https://neo4j.com/docs/operations-manual/4.3/manage-databases/configuration/\">neo4j官网</a></p>\n<p><strong>新建数据库</strong><br />\n在 <code>neo4j\\conf\\neo4j.conf</code>中,<br />\n找到 <code>dbms.default_database=defaultdatabase</code><br />\n修改后面的名字</p>\n<blockquote>\n<p>如果数据库不存在,就会创建一个新的<br />\n如果存在,启动之后就会设为默认的数据库</p>\n</blockquote>\n<p>但是有一个弊端:<br />\n<img src=\"https://image.yayan.xyz/20221103175926.png\" alt=\"\" /><br />\n这种方式还是切换不了数据库</p>\n<p>cypher命令 <code>use databasename</code>也不能用</p>\n<p>上面两种方法都会报错<br />\n<img src=\"https://image.yayan.xyz/20221103180846.png\" alt=\"\" /></p>\n<p>因为<strong>社区版只能开启一个用户数据库…</strong><br />\n<img src=\"https://image.yayan.xyz/20221103183313.png\" alt=\"\" /><br />\n如果想切换数据库只能修改配置文件,然后重启(neo4j restart)或者开一个新的进程(neo4j start).</p>\n<hr />\n<p><strong>删除数据库</strong></p>\n<p>把 <code>neo4j\\data\\</code>文件夹下面的<br />\n<img src=\"https://image.yayan.xyz/20221103181021.png\" alt=\"\" /><br />\n对应的数据库名字删除,即可.</p>\n<h2 id=\"配置前须知\"><a class=\"markdownIt-Anchor\" href=\"#配置前须知\"></a> 配置前须知</h2>\n<p>neo4j现在已经到5.x了,<br />\nneo4j 3.x版本需要jdk8<br />\nneo4j 4.x版本需要jdk11</p>\n<p>安装之前需要把jdk安装好,我用的neo4j4.3.19,<br />\njdk11.2</p>\n<h2 id=\"jdk安装\"><a class=\"markdownIt-Anchor\" href=\"#jdk安装\"></a> JDK安装</h2>\n<p>jdk有很多资料,建议找一个时间最近的,不要找好几年前的.</p>\n<ol>\n<li>下载jdk安装包<br />\n<a href=\"https://www.oracle.com/java/technologies/downloads/\">官网下载</a>需要注册,可以用<a href=\"https://repo.huaweicloud.com/java/jdk/\">其他镜像</a></li>\n<li>如果需要,更改路径,但是要记住<br />\n<img src=\"https://image.yayan.xyz/20221103174240.png\" alt=\"\" /><br />\n(没图了,网上找的图)</li>\n<li>一路next之后,如果jdk目录里没有jre</li>\n</ol>\n<blockquote>\n<p>命令:<br />\nbin\\jlink.exe --module-path jmods --add-modules java desktop --output jre<br />\n就多了一个jre文件夹</p>\n</blockquote>\n<ol start=\"4\">\n<li>配置环境变量<br />\n<img src=\"https://image.yayan.xyz/20221103174641.png\" alt=\"\" /></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%JAVA_HOME%\\bin</span><br><span class=\"line\">%JAVA_HOME%\\jre\\bin</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://image.yayan.xyz/20221103174753.png\" alt=\"\" /></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://image.yayan.xyz/20221103174829.png\" alt=\"\" /></p>\n<p><a href=\"https://www.cnblogs.com/zll-wyf/p/15095664.html\">解释每个变量的作用</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_HOME</span><br><span class=\"line\">    变量名：JAVA_HOME</span><br><span class=\"line\">    变量值：C:\\develop\\Java\\jdk1.8.0_191</span><br><span class=\"line\">    用途：定义一个变量，供其他地方使用</span><br><span class=\"line\"></span><br><span class=\"line\">Path</span><br><span class=\"line\">    变量名：Path</span><br><span class=\"line\">    变量值：%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;</span><br><span class=\"line\">    用途：让系统在任何路径下都可以识别java、javac、javap等命令</span><br><span class=\"line\"></span><br><span class=\"line\">CLASSPATH</span><br><span class=\"line\">    变量名：CLASSPATH</span><br><span class=\"line\">    变量值：.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar</span><br><span class=\"line\">    用途：告诉jvm要使用或执行的class放在什么路径上，便于JVM加载class文件，.;表示当前路径，tools.jar和dt.jar为类库路径</span><br><span class=\"line\"></span><br><span class=\"line\">CLASSPATH详解</span><br><span class=\"line\">    - tools.jar</span><br><span class=\"line\">    工具类库(编译和运行等)，它跟我们程序中用到的基础类库没有关系。我们注意到在Path中变量值bin目录下的各个exe工具的大小都很小，一般都在27KB左右，这是因为它们实际上仅仅相当于是一层代码的包装，这些工具的实现所要用到的类库都在tools.jar中，用压缩软件打开tools.jar，你会发现有很多文件是和bin目录下的exe工具相对性的。当然，如果tools.jar的功能只有这些的话，那么我们根本不用把它加入到CLASSPATH变量中，因为bin目录下的工具自己可以完成对这些类库的调用，因此tools.jar应该还有其他的功能。在里面还可以看到有Applet和RMI等相关的文件，因此tools.jar应该还是远程调用等必须的jar包。tools.jar的其他作用可以查看其他资料。</span><br><span class=\"line\"></span><br><span class=\"line\">    - dt.jar</span><br><span class=\"line\">    运行环境类库，主要是Swing包，这一点通过用压缩软件打开dt.jar也可以看到。如果在开发时候没有用到Swing包，那么可以不用将dt.jar添加到CLASSPATH变量中。</span><br><span class=\"line\">    CLASSPATH中的类库是由Application ClassLoader或者我们自定义的类加载器来加载的，这里当然不能包括基础类库，如果包括基础类库的话，并用两个不同的自定义类加载器去加载该基础类，那它得到的该基础类就不是唯一的了，这样便不能保证Java类的安全性。</span><br><span class=\"line\"></span><br><span class=\"line\">    - 基本类库和扩展类库rt.jar</span><br><span class=\"line\">    基本类库是所有的 import java.* 开头的类，在 %JAVA_HOME%\\jre\\lib 目录下（如其中的 rt.jar、resource.jar ），类加载机制提到，该目录下的类会由 Bootstrap ClassLoader 自动加载，并通过亲委派模型保证了基础类库只会被Bootstrap ClassLoader加载，这也就保证了基础类的唯一性。</span><br><span class=\"line\"></span><br><span class=\"line\">    - 扩展类库是所有的 import javax.* 开头的类，在 %JAVA_HOME%\\jre\\lib\\ext 目录下，该目录下的类是由Extension ClassLoader 自动加载，不需要我们指定。</span><br><span class=\"line\"></span><br><span class=\"line\">    - rt.jar 默认就在根ClassLoader的加载路径里面，放在CLASSPATH也是多此一举。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>验证</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd里输入:</span><br><span class=\"line\">java -version</span><br><span class=\"line\">javac -version</span><br></pre></td></tr></table></figure>\n<h2 id=\"neo4j安装\"><a class=\"markdownIt-Anchor\" href=\"#neo4j安装\"></a> neo4j安装</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">neo4j有三个版本</span><br><span class=\"line\">一个是社区版:和桌面版基本上没区别,桌面版就是一个应用程序,社区版需要用命令行启动</span><br><span class=\"line\">一个是企业版:收费,没用过,功能很多,上面有体会</span><br><span class=\"line\">一个是桌面版:有可以操作的页面,方便,但是会有点慢</span><br></pre></td></tr></table></figure>\n<ol>\n<li><a href=\"https://neo4j.com/download-center/\">官网下载</a>,找对应的安装zip(社区版)</li>\n<li>下载解压</li>\n<li>配置环境变量<br />\n<img src=\"https://image.yayan.xyz/20221103175408.png\" alt=\"\" /><br />\n<img src=\"https://image.yayan.xyz/20221103175425.png\" alt=\"\" /></li>\n<li>cmd中输入:neo4j start 就可以启动了,浏览器输入访问</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:7474/browser/</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>默认用户名密码都是<strong>neo4j</strong></li>\n</ol>\n"},{"title":"详解PyTorch中加载数据的方法--Dataset、Dataloader、Sampler、collate-fn","toc":"true# 是否启用内容索引","_content":"\n[转载](https://www.jianshu.com/p/1651ed9d48c9)\n[作者pytorch其他笔记](https://www.jianshu.com/nb/48831659)\n\n数据读取是所有训练模型任务中最基础最重要的一步，`PyTorch`为数据集的读取、加载和使用提供了很好的机制，使得数据加载的工作变得异常简单而且具有非常高的定制性。\n\n## Dataset、Dataloader、Sampler的关系\n\n`PyTorch`中对于数据集的处理有三个非常重要的类：`Dataset`、`Dataloader`、`Sampler`，它们均是 `torch.utils.data `包下的模块（类）。它们的关系可以这样理解：\n\n- `Dataset`是数据集的类，主要用于定义数据集\n- `Sampler`是采样器的类，用于定义从数据集中选出数据的规则，比如是随机取数据还是按照顺序取等等\n- `Dataloader`是数据的加载类，它是对于 `Dataset`和 `Sampler`的进一步包装，即其实 `Dataset`和 `Sampler`会作为参数传递给 `Dataloader`，用于实际读取数据，可以理解为它是这个工作的真正实践者，而 `Dataset`和 `Sampler`则负责定义。我们训练、测试所获得的数据也是 `Dataloader`直接给我们的。\n\n**总的来说**，Dataset定义了整个数据集，`Sampler`提供了取数据的机制，最后由 `Dataloader`取完成取数据的任务。\n\n本篇以一个最简单的例子为例，比如有一个文件夹（`data-folder`）中存储训练的数据（一共30张图片：0.png 到 29.png），他们对应的标签被写在了一个 `labels.txt`文件中，第n行对应n-1.png的标签，是一个三分类问题，即0、1和2三种标签（虚构的数据集，不具有任何意义）。目录结构如下：\n\n```bash\n|--- Project\n   |--- main.py\n   |--- labels.txt\n   |--- data-folder\n      |--- 0.png\n      |--- 1.png\n      |--- ……\n      |--- 29.png\n```\n\n## Dataset\n\n`Dataset` 位于 `torch.utils.data `下，我们通过定义继承自这个类的子类来自定义数据集。它有两个最重要的方法需要重写，实际上它们都是类的特殊方法：\n\n- `__getitem__(self, index)`：传入参数 `index`为下标，返回数据集中对应下标的数据组（数据和标签）\n- `__len__(self)`：返回数据集的大小\n\n简单说，重写了这两个方法的继承自 `Dataset` 的类都可以作为数据集的定义类使用，即一个 `Dataset`类的必要结构：\n\n```python\nclass Dataset(torch.utils.data.Dataset):\n    def __init__(self, filepath=None,dataLen=None):\n        pass\n      \n    def __getitem__(self, index):\n        pass\n\n    def __len__(self):\n        pass\n```\n\n如下就是我们的例子的加载实例，其中的 `image2tensor` 使用了 `torchvision.transforms` 完成了一个简单的从 `PIL.Image` 格式的图片到 `tensor` 的转换，可以先不必在意，后面会详细地讲到 `transforms` 这个超级重要的工具：\n\n```python\nfrom torch.utils.data import Dataset\nfrom PIL import Image\nimport os\nfrom torchvision import transforms\n\n\nclass MyDataset(Dataset):\n    def __init__(self, images_folder_path, labels_file_path):\n        self.images_folder_path = images_folder_path\n\n        with open(labels_file_path, 'r') as file:\n            self.labels = list(map(int, file.read().splitlines()))\n\n    def __getitem__(self, item):\n        image = Image.open(os.path.join(self.images_folder_path, \"{}.png\".format(item)))\n        image = self.image2tensor(image)\n        label = self.labels[item]\n\n        return (image, label)\n\n    def __len__(self):\n        return len(self.labels)\n\n    def image2tensor(self, image):\n        \"\"\"\n        transform PIL.Image to tensor\n        :param image: image in PIL.Image format\n        :return: image in tensor format\n        \"\"\"\n        transform = transforms.Compose([\n            transforms.ToTensor()\n        ])\n        image = image.convert('RGB')\n        return transform(image)\n\n\nmyDataset = MyDataset(\"./data-folder/\", \"./labels.txt\")\n```\n\n## Dataloader\n\n`Dataloader`对 `Dataset`（和 `Sampler`等）打包，完成最后对数据的读取的执行工作，一般不需要自己定义或者重写一个 `Dataloader`的类（或子类），直接使用即可，通过传入参数定制 `Dataloader`，定制化的功能应该在 `Dataset`（和 `Sampler`等）中完成了。\n\n`Dataloader`的完整签名：\n[https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader)\n\n### Dataloader的一些常用参数\n\n`Dataloader`的一些重要的参数如下，除了第一个 `dataset`参数外，其他均为可选参数：\n\n- `dataset`（第一个参数，必须的参数）：一个 `Dataset`的实例，即传入的数据集（或者其他可迭代对象）\n- `batch_size`：整数值，每个 `batch`的样本数量，即 `batch`大小，默认为1\n- `shuffle：bool`值，如果设置为 `True`，则在每个 `epoch`开始的时候，会对数据集的数据进行重新排序，默认 `False`\n- `sampler`：传入一个自定义的 `Sampler`实例，定义从数据集中取样本的策略，`Sampler`每次返回一个索引，默认为 `None`\n- `batch_sampler`：也是传入一个自定义的 `Sampler`实例，但是与 `sampler`参数不同的是，它接收的 `Sampler`是一次返回一个 batch的索引，默认为 `None`\n- `num_workers`：整数值，定义有几个进程来处理数据。0意味着所有的数据都会被加载进主进程，默认0\n- `collate_fn`：传入一个函数，它的作用是将一个 `batch`的样本打包成一个大的 `tensor`，`tensor`的第一维就是这些样本，如果没有特殊需求可以保持默认即可（后边会详细介绍）\n- `pin_memory：bool`值，如果为 `True`，那么将加载的数据拷贝到 `CUDA`中的固定内存中。\n- `drop_last：bool`值，如果为 `True`，则对最后的一个 `batch`来说，如果不足 `batch_size`个样本了就舍弃，如果为 `False`，也会继续正常执行，只是最后的一个 `batch`可能会小一点（剩多少算多少），默认 `False`\n- `timeout`：如果是正数，表明等待从加载一个 `batch`等待的时间，若超出设定的时间还没有加载完，就放弃这个 `batch`，如果是0，表示不设置限制时间。默认为0\n\n### Dataloader参数之间的互斥\n\n值得注意的是，`Dataloader`的参数之间存在互斥的情况，主要针对自己定义的采样器：\n\n- `sampler`：如果自行指定了 `sampler`参数，则 `shuffle`必须保持默认值，即 `False`\n- `batch_sampler`：如果自行指定了 `batch_sampler`参数，则 `batch_size`、`shuffle`、`sampler`、`drop_last` 都必须保持默认值\n  如果没有指定自己是采样器，那么默认的情况下（即 `sampler`和 `batch_sampler`均为 `None`的情况下），`Dataloader`的采样策略是如何的呢：\n- `sampler`：\n- - `shuffle = True`：`sampler`采用 `RandomSampler`，即随机采样\n- - `shuffle = Flase`：`sampler`采用 `SequentialSampler`，即按照顺序采样\n- `batch_sampler`：采用 `BatchSampler`，即根据 `batch_size` 进行 `batch`采样\n- \n\n上面提到的 `RandomSampler`、`SequentialSampler`和 `BatchSampler`都是 `PyTorch`自己实现的，且它们都是 `Sampler`的子类，后边会详述。\n\n### Dataloader的实例\n\n下面我们继续我们的例子，定义 `Dataloader`的实例，从我们定义的 `myDataset` 数据集中加载数据，每一个 `batch`大小为8。并且我们使用了一个循环来验证其工作的情况：\n\n```python\nfrom torch.utils.data import DataLoader\n\nmyDataloader = DataLoader(myDataset, batch_size=8)\n\nfor epoch in range(2):\n    for data in myDataloader:\n        images, labels = data[0], data[1]\n        print(len(images))\n        print(labels)\n        # train your module\n```\n\n```python\n8\ntensor([0, 1, 1, 1, 2, 0, 1, 2])\n8\ntensor([0, 2, 1, 1, 1, 1, 2, 0])\n8\ntensor([1, 0, 0, 0, 0, 1, 1, 0])\n6\ntensor([2, 0, 1, 1, 1, 2])\n8\ntensor([0, 1, 1, 1, 2, 0, 1, 2])\n8\ntensor([0, 2, 1, 1, 1, 1, 2, 0])\n8\ntensor([1, 0, 0, 0, 0, 1, 1, 0])\n6\ntensor([2, 0, 1, 1, 1, 2])\n```\n\n## Sampler\n\n`Sampler`类是一个很抽象的父类，其主要用于设置从一个序列中返回样本的规则，即采样的规则。`Sampler`是一个可迭代对象，使用 `step`方法可以返回下一个迭代后的结果，因此其主要的类方法就是 `__iter__ `方法，定义了迭代后返回的内容。其父类的代码如下（`PyTorch 1.7`）：\n\n```python\n\nclass Sampler(Generic[T_co]):\n    def __init__(self, data_source: Optional[Sized]) -> None:\n        pass\n\n    def __iter__(self) -> Iterator[T_co]:\n        raise NotImplementedError\n```\n\n从上述代码可见，其实 `Sampler`父类并没有给出 `__iter__` 的具体定义，因此，如果我们要定义自己的采样器，就要编写继承自 `Sampler`的子类，并且重写 `__iter__ `方法给出迭代返回样本的逻辑。\n\n但是，正如上文提到的，`Dataloader`中的 `sampler`和 `batch_sampler`参数默认情况下使用的那些采样器（`RandomSampler`、`SequentialSampler`和 `BatchSampler`）一样，`PyTorch`自己实现了很多 `Sampler`的子类，这些采样器其实可以完成大部分功能，所以本节主要关注一些 `Sampler`的子类以及他们的用法，而不过多地讨论如何自己实现一个 `Sampler`。\n\n### SequentialSampler\n\n`SequentialSampler`就是一个按照顺序进行采样的采样器，接收一个数据集做参数（实际上任何可迭代对象都可），按照顺序对其进行采样：\n\n```python\nfrom torch.utils.data import SequentialSampler\n\npseudo_dataset = list(range(10))\nfor data in SequentialSampler(pseudo_dataset):\n    print(data, end=\" \")\n\n0 1 2 3 4 5 6 7 8 9 \n```\n\n### RandmSampler\n\n`RandomSampler` 即一个随机采样器，返回随机采样的值，第一个参数依然是一个数据集（或可迭代对象）。还有一组参数如下：\n\n- `replacement：bool`值，默认是 `False`，设置为 `True`时表示可以采出重复的样本\n- `num_samples`：只有在 `replacement`设置为 `True`的时候才能设置此参数，表示要采出样本的个数，默认为数据集的总长度。有时候由于 `replacement`置 `True`的原因导致重复数据被采样，导致有些数据被采不到，所以往往会设置一个比较大的值\n\n```python\nfrom torch.utils.data import RandomSampler\n\npseudo_dataset = list(range(10))\n\nrandomSampler1 = RandomSampler(pseudo_dataset)\nrandomSampler2 = RandomSampler(pseudo_dataset, replacement=True, num_samples=20)\n\nprint(\"for random sampler #1: \")\nfor data in randomSampler1:\n    print(data, end=\" \")\n\nprint(\"\\n\\nfor random sampler #2: \")\nfor data in randomSampler2:\n    print(data, end=\" \")\n\nfor random sampler #1: \n4 5 2 9 3 0 6 8 7 1 \n\nfor random sampler #2: \n4 9 0 6 9 3 1 6 1 8 5 0 2 7 2 8 6 4 0 6 \n```\n\n### SubsetRandomSampler\n\nSubsetRandomSampler 可以设置子集的随机采样，多用于将数据集分成多个集合，比如训练集和验证集的时候使用：\n\n```python\nfrom torch.utils.data import SubsetRandomSampler\n\npseudo_dataset = list(range(10))\n\nsubRandomSampler1 = SubsetRandomSampler(pseudo_dataset[:7])\nsubRandomSampler2 = SubsetRandomSampler(pseudo_dataset[7:])\n\nprint(\"for subset random sampler #1: \")\nfor data in subRandomSampler1:\n    print(data, end=\" \")\n\nprint(\"\\n\\nfor subset random sampler #2: \")\nfor data in subRandomSampler2:\n    print(data, end=\" \")\nfor subset random sampler #1: \n0 4 6 5 3 2 1 \n\nfor subset random sampler #2: \n7 8 9 \n```\n\n### WeightedRandomSampler\n\n`WeightedRandomSampler`和 `RandomSampler`的参数一致，但是不在传入一个 `dataset`，第一个参数变成了 `weights`，只接收一个一定长度的 `list`作为 `weights` 参数，表示采样的权重，采样时会根据权重随机从 `list(range(len(weights)))` 中采样，即 `WeightedRandomSampler`并不需要传入样本集，而是只在一个根据 `weights`长度创建的数组中采样，所以采样的结果可能需要进一步处理才能使用。`weights`的所有元素之和不需要为1。\n\n```python\nfrom torch.utils.data import WeightedRandomSampler\n\npseudo_dataset = list(range(10))\nweights = [1,1,1,1,1,10,10,10,10,10]\n\nweightedRandomSampler = WeightedRandomSampler(weights, replacement=True, num_samples=20)\n\nfor data in weightedRandomSampler:\n    print(data, end=\" \")\n7 8 7 7 9 7 8 9 8 7 5 5 9 9 6 5 8 9 6 5 \n```\n\n### BatchSampler\n\n以上的四个 `Sampler`在每次迭代都只返回一个索引，而 `BatchSampler`的作用是对上述这类返回一个索引的采样器进行包装，按照设定的 `batch_size`返回一组索引，因其他的参数和上述的有些不同：\n\n- `sampler`：一个 `Sampler`对象（或者一个可迭代对象）\n- `batch_size`：batch的大小\n- `drop_last`：是否丢弃最后一个可能不足 `batch_size`大小的数据\n\n```python\nfrom torch.utils.data import BatchSampler\npseudo_dataset = list(range(10))\n\nbatchSampler1 = BatchSampler(pseudo_dataset, batch_size=3, drop_last=False)\nbatchSampler2 = BatchSampler(pseudo_dataset, batch_size=3, drop_last=True)\n\nprint(\"for batch sampler #1: \")\nfor data in batchSampler1:\n    print(data, end=\" \")\n\nprint(\"\\n\\nfor batch sampler #2: \")\nfor data in batchSampler2:\n    print(data, end=\" \")\nfor batch sampler #1: \n[0, 1, 2] [3, 4, 5] [6, 7, 8] [9] \n\nfor batch sampler #2: \n[0, 1, 2] [3, 4, 5] [6, 7, 8] \n```\n\n## collate_fn\n\n`Dataloader`其实还有一个比较重要的参数是 `collate_fn`，它接收一个 `callable`对象，比如一个函数，它的作用是将每次迭代出来的数据打包成 `batch`。\n\n举个例子，如果我们在 `Dataloader`中设置了 `batch_size`为8，实际上，从 `Dataloader`所读取的数据集Dataset中取出数据时得到的是单独的数据，比如我们的例子中，每次采样得到一个 `tuple：(image, label)`，因此 `collate_fn` 的作用就有了，它负责包装 `batch`，即每从数据集中抽出8个这样的 `tuple`，它负责把8个 `(image, label)`包装成一个 `list: [images, labels]`，这个 `list`有两个元素，每一个是一个 `tensor`，比如第一个元素，实际上是一个 `8×size(image)` 的tensor，即给原来的数据增加了一维，也就是最前边的 `batch`的维度，`labels`也同理。\n\n有时候我们可能会需要实现自己的包装逻辑，所以需要自定义一个函数来完成定制化的如上的内容，只要将该函数名传递给 `collate_fn`参数即可。\n\n## PyTorch集成的数据集\n\n实际上，`PyTorch`提供了很多常用数据集的接口，如果使用这些数据集的话，可以直接使用对应的包加载，会方便很多，比如：\n\n- `torchvision.datasets` 就提供了很多视觉方向的数据集：https://pytorch.org/docs/stable/torchvision/datasets.html?highlight=torchvision%20datasets\n- `torchtext` 则提供了很多文本处理方向的数据集\n- `torchaudio` 提供了很多音频处理方向的数据集\n\n当然 `PyTorch`也可以配合其他包来获得数据以及对数据进行处理，比如：\n\n- 对于视觉方面，配合 `Pillow、OpenCV`等\n- 对于音频处理方面，配合 `scipy、librosa`等\n- 对于文本处理方面，配合 `Cython、NLTK、SpaCy`等\n","source":"_posts/Pytorch数据集加载.md","raw":"---\ntitle: 详解PyTorch中加载数据的方法--Dataset、Dataloader、Sampler、collate-fn\ncategories:\n  - 学习笔记\ntags:\n  - Dataset\n  - Dataloader\n  - Sampler\n  - collate_fn\ntoc: true# 是否启用内容索引\n---\n\n[转载](https://www.jianshu.com/p/1651ed9d48c9)\n[作者pytorch其他笔记](https://www.jianshu.com/nb/48831659)\n\n数据读取是所有训练模型任务中最基础最重要的一步，`PyTorch`为数据集的读取、加载和使用提供了很好的机制，使得数据加载的工作变得异常简单而且具有非常高的定制性。\n\n## Dataset、Dataloader、Sampler的关系\n\n`PyTorch`中对于数据集的处理有三个非常重要的类：`Dataset`、`Dataloader`、`Sampler`，它们均是 `torch.utils.data `包下的模块（类）。它们的关系可以这样理解：\n\n- `Dataset`是数据集的类，主要用于定义数据集\n- `Sampler`是采样器的类，用于定义从数据集中选出数据的规则，比如是随机取数据还是按照顺序取等等\n- `Dataloader`是数据的加载类，它是对于 `Dataset`和 `Sampler`的进一步包装，即其实 `Dataset`和 `Sampler`会作为参数传递给 `Dataloader`，用于实际读取数据，可以理解为它是这个工作的真正实践者，而 `Dataset`和 `Sampler`则负责定义。我们训练、测试所获得的数据也是 `Dataloader`直接给我们的。\n\n**总的来说**，Dataset定义了整个数据集，`Sampler`提供了取数据的机制，最后由 `Dataloader`取完成取数据的任务。\n\n本篇以一个最简单的例子为例，比如有一个文件夹（`data-folder`）中存储训练的数据（一共30张图片：0.png 到 29.png），他们对应的标签被写在了一个 `labels.txt`文件中，第n行对应n-1.png的标签，是一个三分类问题，即0、1和2三种标签（虚构的数据集，不具有任何意义）。目录结构如下：\n\n```bash\n|--- Project\n   |--- main.py\n   |--- labels.txt\n   |--- data-folder\n      |--- 0.png\n      |--- 1.png\n      |--- ……\n      |--- 29.png\n```\n\n## Dataset\n\n`Dataset` 位于 `torch.utils.data `下，我们通过定义继承自这个类的子类来自定义数据集。它有两个最重要的方法需要重写，实际上它们都是类的特殊方法：\n\n- `__getitem__(self, index)`：传入参数 `index`为下标，返回数据集中对应下标的数据组（数据和标签）\n- `__len__(self)`：返回数据集的大小\n\n简单说，重写了这两个方法的继承自 `Dataset` 的类都可以作为数据集的定义类使用，即一个 `Dataset`类的必要结构：\n\n```python\nclass Dataset(torch.utils.data.Dataset):\n    def __init__(self, filepath=None,dataLen=None):\n        pass\n      \n    def __getitem__(self, index):\n        pass\n\n    def __len__(self):\n        pass\n```\n\n如下就是我们的例子的加载实例，其中的 `image2tensor` 使用了 `torchvision.transforms` 完成了一个简单的从 `PIL.Image` 格式的图片到 `tensor` 的转换，可以先不必在意，后面会详细地讲到 `transforms` 这个超级重要的工具：\n\n```python\nfrom torch.utils.data import Dataset\nfrom PIL import Image\nimport os\nfrom torchvision import transforms\n\n\nclass MyDataset(Dataset):\n    def __init__(self, images_folder_path, labels_file_path):\n        self.images_folder_path = images_folder_path\n\n        with open(labels_file_path, 'r') as file:\n            self.labels = list(map(int, file.read().splitlines()))\n\n    def __getitem__(self, item):\n        image = Image.open(os.path.join(self.images_folder_path, \"{}.png\".format(item)))\n        image = self.image2tensor(image)\n        label = self.labels[item]\n\n        return (image, label)\n\n    def __len__(self):\n        return len(self.labels)\n\n    def image2tensor(self, image):\n        \"\"\"\n        transform PIL.Image to tensor\n        :param image: image in PIL.Image format\n        :return: image in tensor format\n        \"\"\"\n        transform = transforms.Compose([\n            transforms.ToTensor()\n        ])\n        image = image.convert('RGB')\n        return transform(image)\n\n\nmyDataset = MyDataset(\"./data-folder/\", \"./labels.txt\")\n```\n\n## Dataloader\n\n`Dataloader`对 `Dataset`（和 `Sampler`等）打包，完成最后对数据的读取的执行工作，一般不需要自己定义或者重写一个 `Dataloader`的类（或子类），直接使用即可，通过传入参数定制 `Dataloader`，定制化的功能应该在 `Dataset`（和 `Sampler`等）中完成了。\n\n`Dataloader`的完整签名：\n[https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader)\n\n### Dataloader的一些常用参数\n\n`Dataloader`的一些重要的参数如下，除了第一个 `dataset`参数外，其他均为可选参数：\n\n- `dataset`（第一个参数，必须的参数）：一个 `Dataset`的实例，即传入的数据集（或者其他可迭代对象）\n- `batch_size`：整数值，每个 `batch`的样本数量，即 `batch`大小，默认为1\n- `shuffle：bool`值，如果设置为 `True`，则在每个 `epoch`开始的时候，会对数据集的数据进行重新排序，默认 `False`\n- `sampler`：传入一个自定义的 `Sampler`实例，定义从数据集中取样本的策略，`Sampler`每次返回一个索引，默认为 `None`\n- `batch_sampler`：也是传入一个自定义的 `Sampler`实例，但是与 `sampler`参数不同的是，它接收的 `Sampler`是一次返回一个 batch的索引，默认为 `None`\n- `num_workers`：整数值，定义有几个进程来处理数据。0意味着所有的数据都会被加载进主进程，默认0\n- `collate_fn`：传入一个函数，它的作用是将一个 `batch`的样本打包成一个大的 `tensor`，`tensor`的第一维就是这些样本，如果没有特殊需求可以保持默认即可（后边会详细介绍）\n- `pin_memory：bool`值，如果为 `True`，那么将加载的数据拷贝到 `CUDA`中的固定内存中。\n- `drop_last：bool`值，如果为 `True`，则对最后的一个 `batch`来说，如果不足 `batch_size`个样本了就舍弃，如果为 `False`，也会继续正常执行，只是最后的一个 `batch`可能会小一点（剩多少算多少），默认 `False`\n- `timeout`：如果是正数，表明等待从加载一个 `batch`等待的时间，若超出设定的时间还没有加载完，就放弃这个 `batch`，如果是0，表示不设置限制时间。默认为0\n\n### Dataloader参数之间的互斥\n\n值得注意的是，`Dataloader`的参数之间存在互斥的情况，主要针对自己定义的采样器：\n\n- `sampler`：如果自行指定了 `sampler`参数，则 `shuffle`必须保持默认值，即 `False`\n- `batch_sampler`：如果自行指定了 `batch_sampler`参数，则 `batch_size`、`shuffle`、`sampler`、`drop_last` 都必须保持默认值\n  如果没有指定自己是采样器，那么默认的情况下（即 `sampler`和 `batch_sampler`均为 `None`的情况下），`Dataloader`的采样策略是如何的呢：\n- `sampler`：\n- - `shuffle = True`：`sampler`采用 `RandomSampler`，即随机采样\n- - `shuffle = Flase`：`sampler`采用 `SequentialSampler`，即按照顺序采样\n- `batch_sampler`：采用 `BatchSampler`，即根据 `batch_size` 进行 `batch`采样\n- \n\n上面提到的 `RandomSampler`、`SequentialSampler`和 `BatchSampler`都是 `PyTorch`自己实现的，且它们都是 `Sampler`的子类，后边会详述。\n\n### Dataloader的实例\n\n下面我们继续我们的例子，定义 `Dataloader`的实例，从我们定义的 `myDataset` 数据集中加载数据，每一个 `batch`大小为8。并且我们使用了一个循环来验证其工作的情况：\n\n```python\nfrom torch.utils.data import DataLoader\n\nmyDataloader = DataLoader(myDataset, batch_size=8)\n\nfor epoch in range(2):\n    for data in myDataloader:\n        images, labels = data[0], data[1]\n        print(len(images))\n        print(labels)\n        # train your module\n```\n\n```python\n8\ntensor([0, 1, 1, 1, 2, 0, 1, 2])\n8\ntensor([0, 2, 1, 1, 1, 1, 2, 0])\n8\ntensor([1, 0, 0, 0, 0, 1, 1, 0])\n6\ntensor([2, 0, 1, 1, 1, 2])\n8\ntensor([0, 1, 1, 1, 2, 0, 1, 2])\n8\ntensor([0, 2, 1, 1, 1, 1, 2, 0])\n8\ntensor([1, 0, 0, 0, 0, 1, 1, 0])\n6\ntensor([2, 0, 1, 1, 1, 2])\n```\n\n## Sampler\n\n`Sampler`类是一个很抽象的父类，其主要用于设置从一个序列中返回样本的规则，即采样的规则。`Sampler`是一个可迭代对象，使用 `step`方法可以返回下一个迭代后的结果，因此其主要的类方法就是 `__iter__ `方法，定义了迭代后返回的内容。其父类的代码如下（`PyTorch 1.7`）：\n\n```python\n\nclass Sampler(Generic[T_co]):\n    def __init__(self, data_source: Optional[Sized]) -> None:\n        pass\n\n    def __iter__(self) -> Iterator[T_co]:\n        raise NotImplementedError\n```\n\n从上述代码可见，其实 `Sampler`父类并没有给出 `__iter__` 的具体定义，因此，如果我们要定义自己的采样器，就要编写继承自 `Sampler`的子类，并且重写 `__iter__ `方法给出迭代返回样本的逻辑。\n\n但是，正如上文提到的，`Dataloader`中的 `sampler`和 `batch_sampler`参数默认情况下使用的那些采样器（`RandomSampler`、`SequentialSampler`和 `BatchSampler`）一样，`PyTorch`自己实现了很多 `Sampler`的子类，这些采样器其实可以完成大部分功能，所以本节主要关注一些 `Sampler`的子类以及他们的用法，而不过多地讨论如何自己实现一个 `Sampler`。\n\n### SequentialSampler\n\n`SequentialSampler`就是一个按照顺序进行采样的采样器，接收一个数据集做参数（实际上任何可迭代对象都可），按照顺序对其进行采样：\n\n```python\nfrom torch.utils.data import SequentialSampler\n\npseudo_dataset = list(range(10))\nfor data in SequentialSampler(pseudo_dataset):\n    print(data, end=\" \")\n\n0 1 2 3 4 5 6 7 8 9 \n```\n\n### RandmSampler\n\n`RandomSampler` 即一个随机采样器，返回随机采样的值，第一个参数依然是一个数据集（或可迭代对象）。还有一组参数如下：\n\n- `replacement：bool`值，默认是 `False`，设置为 `True`时表示可以采出重复的样本\n- `num_samples`：只有在 `replacement`设置为 `True`的时候才能设置此参数，表示要采出样本的个数，默认为数据集的总长度。有时候由于 `replacement`置 `True`的原因导致重复数据被采样，导致有些数据被采不到，所以往往会设置一个比较大的值\n\n```python\nfrom torch.utils.data import RandomSampler\n\npseudo_dataset = list(range(10))\n\nrandomSampler1 = RandomSampler(pseudo_dataset)\nrandomSampler2 = RandomSampler(pseudo_dataset, replacement=True, num_samples=20)\n\nprint(\"for random sampler #1: \")\nfor data in randomSampler1:\n    print(data, end=\" \")\n\nprint(\"\\n\\nfor random sampler #2: \")\nfor data in randomSampler2:\n    print(data, end=\" \")\n\nfor random sampler #1: \n4 5 2 9 3 0 6 8 7 1 \n\nfor random sampler #2: \n4 9 0 6 9 3 1 6 1 8 5 0 2 7 2 8 6 4 0 6 \n```\n\n### SubsetRandomSampler\n\nSubsetRandomSampler 可以设置子集的随机采样，多用于将数据集分成多个集合，比如训练集和验证集的时候使用：\n\n```python\nfrom torch.utils.data import SubsetRandomSampler\n\npseudo_dataset = list(range(10))\n\nsubRandomSampler1 = SubsetRandomSampler(pseudo_dataset[:7])\nsubRandomSampler2 = SubsetRandomSampler(pseudo_dataset[7:])\n\nprint(\"for subset random sampler #1: \")\nfor data in subRandomSampler1:\n    print(data, end=\" \")\n\nprint(\"\\n\\nfor subset random sampler #2: \")\nfor data in subRandomSampler2:\n    print(data, end=\" \")\nfor subset random sampler #1: \n0 4 6 5 3 2 1 \n\nfor subset random sampler #2: \n7 8 9 \n```\n\n### WeightedRandomSampler\n\n`WeightedRandomSampler`和 `RandomSampler`的参数一致，但是不在传入一个 `dataset`，第一个参数变成了 `weights`，只接收一个一定长度的 `list`作为 `weights` 参数，表示采样的权重，采样时会根据权重随机从 `list(range(len(weights)))` 中采样，即 `WeightedRandomSampler`并不需要传入样本集，而是只在一个根据 `weights`长度创建的数组中采样，所以采样的结果可能需要进一步处理才能使用。`weights`的所有元素之和不需要为1。\n\n```python\nfrom torch.utils.data import WeightedRandomSampler\n\npseudo_dataset = list(range(10))\nweights = [1,1,1,1,1,10,10,10,10,10]\n\nweightedRandomSampler = WeightedRandomSampler(weights, replacement=True, num_samples=20)\n\nfor data in weightedRandomSampler:\n    print(data, end=\" \")\n7 8 7 7 9 7 8 9 8 7 5 5 9 9 6 5 8 9 6 5 \n```\n\n### BatchSampler\n\n以上的四个 `Sampler`在每次迭代都只返回一个索引，而 `BatchSampler`的作用是对上述这类返回一个索引的采样器进行包装，按照设定的 `batch_size`返回一组索引，因其他的参数和上述的有些不同：\n\n- `sampler`：一个 `Sampler`对象（或者一个可迭代对象）\n- `batch_size`：batch的大小\n- `drop_last`：是否丢弃最后一个可能不足 `batch_size`大小的数据\n\n```python\nfrom torch.utils.data import BatchSampler\npseudo_dataset = list(range(10))\n\nbatchSampler1 = BatchSampler(pseudo_dataset, batch_size=3, drop_last=False)\nbatchSampler2 = BatchSampler(pseudo_dataset, batch_size=3, drop_last=True)\n\nprint(\"for batch sampler #1: \")\nfor data in batchSampler1:\n    print(data, end=\" \")\n\nprint(\"\\n\\nfor batch sampler #2: \")\nfor data in batchSampler2:\n    print(data, end=\" \")\nfor batch sampler #1: \n[0, 1, 2] [3, 4, 5] [6, 7, 8] [9] \n\nfor batch sampler #2: \n[0, 1, 2] [3, 4, 5] [6, 7, 8] \n```\n\n## collate_fn\n\n`Dataloader`其实还有一个比较重要的参数是 `collate_fn`，它接收一个 `callable`对象，比如一个函数，它的作用是将每次迭代出来的数据打包成 `batch`。\n\n举个例子，如果我们在 `Dataloader`中设置了 `batch_size`为8，实际上，从 `Dataloader`所读取的数据集Dataset中取出数据时得到的是单独的数据，比如我们的例子中，每次采样得到一个 `tuple：(image, label)`，因此 `collate_fn` 的作用就有了，它负责包装 `batch`，即每从数据集中抽出8个这样的 `tuple`，它负责把8个 `(image, label)`包装成一个 `list: [images, labels]`，这个 `list`有两个元素，每一个是一个 `tensor`，比如第一个元素，实际上是一个 `8×size(image)` 的tensor，即给原来的数据增加了一维，也就是最前边的 `batch`的维度，`labels`也同理。\n\n有时候我们可能会需要实现自己的包装逻辑，所以需要自定义一个函数来完成定制化的如上的内容，只要将该函数名传递给 `collate_fn`参数即可。\n\n## PyTorch集成的数据集\n\n实际上，`PyTorch`提供了很多常用数据集的接口，如果使用这些数据集的话，可以直接使用对应的包加载，会方便很多，比如：\n\n- `torchvision.datasets` 就提供了很多视觉方向的数据集：https://pytorch.org/docs/stable/torchvision/datasets.html?highlight=torchvision%20datasets\n- `torchtext` 则提供了很多文本处理方向的数据集\n- `torchaudio` 提供了很多音频处理方向的数据集\n\n当然 `PyTorch`也可以配合其他包来获得数据以及对数据进行处理，比如：\n\n- 对于视觉方面，配合 `Pillow、OpenCV`等\n- 对于音频处理方面，配合 `scipy、librosa`等\n- 对于文本处理方面，配合 `Cython、NLTK、SpaCy`等\n","slug":"Pytorch数据集加载","published":1,"date":"2022-11-09T10:38:42.428Z","updated":"2022-11-09T11:28:39.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clee4vhah0009c8vqfxze5ukw","content":"<p><a href=\"https://www.jianshu.com/p/1651ed9d48c9\">转载</a><br />\n<a href=\"https://www.jianshu.com/nb/48831659\">作者pytorch其他笔记</a></p>\n<p>数据读取是所有训练模型任务中最基础最重要的一步，<code>PyTorch</code>为数据集的读取、加载和使用提供了很好的机制，使得数据加载的工作变得异常简单而且具有非常高的定制性。</p>\n<h2 id=\"dataset-dataloader-sampler的关系\"><a class=\"markdownIt-Anchor\" href=\"#dataset-dataloader-sampler的关系\"></a> Dataset、Dataloader、Sampler的关系</h2>\n<p><code>PyTorch</code>中对于数据集的处理有三个非常重要的类：<code>Dataset</code>、<code>Dataloader</code>、<code>Sampler</code>，它们均是 <code>torch.utils.data </code>包下的模块（类）。它们的关系可以这样理解：</p>\n<ul>\n<li><code>Dataset</code>是数据集的类，主要用于定义数据集</li>\n<li><code>Sampler</code>是采样器的类，用于定义从数据集中选出数据的规则，比如是随机取数据还是按照顺序取等等</li>\n<li><code>Dataloader</code>是数据的加载类，它是对于 <code>Dataset</code>和 <code>Sampler</code>的进一步包装，即其实 <code>Dataset</code>和 <code>Sampler</code>会作为参数传递给 <code>Dataloader</code>，用于实际读取数据，可以理解为它是这个工作的真正实践者，而 <code>Dataset</code>和 <code>Sampler</code>则负责定义。我们训练、测试所获得的数据也是 <code>Dataloader</code>直接给我们的。</li>\n</ul>\n<p><strong>总的来说</strong>，Dataset定义了整个数据集，<code>Sampler</code>提供了取数据的机制，最后由 <code>Dataloader</code>取完成取数据的任务。</p>\n<p>本篇以一个最简单的例子为例，比如有一个文件夹（<code>data-folder</code>）中存储训练的数据（一共30张图片：0.png 到 29.png），他们对应的标签被写在了一个 <code>labels.txt</code>文件中，第n行对应n-1.png的标签，是一个三分类问题，即0、1和2三种标签（虚构的数据集，不具有任何意义）。目录结构如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|--- Project</span><br><span class=\"line\">   |--- main.py</span><br><span class=\"line\">   |--- labels.txt</span><br><span class=\"line\">   |--- data-folder</span><br><span class=\"line\">      |--- 0.png</span><br><span class=\"line\">      |--- 1.png</span><br><span class=\"line\">      |--- ……</span><br><span class=\"line\">      |--- 29.png</span><br></pre></td></tr></table></figure>\n<h2 id=\"dataset\"><a class=\"markdownIt-Anchor\" href=\"#dataset\"></a> Dataset</h2>\n<p><code>Dataset</code> 位于 <code>torch.utils.data </code>下，我们通过定义继承自这个类的子类来自定义数据集。它有两个最重要的方法需要重写，实际上它们都是类的特殊方法：</p>\n<ul>\n<li><code>__getitem__(self, index)</code>：传入参数 <code>index</code>为下标，返回数据集中对应下标的数据组（数据和标签）</li>\n<li><code>__len__(self)</code>：返回数据集的大小</li>\n</ul>\n<p>简单说，重写了这两个方法的继承自 <code>Dataset</code> 的类都可以作为数据集的定义类使用，即一个 <code>Dataset</code>类的必要结构：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dataset</span>(torch.utils.data.Dataset):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, filepath=<span class=\"literal\">None</span>,dataLen=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__getitem__</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__len__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>如下就是我们的例子的加载实例，其中的 <code>image2tensor</code> 使用了 <code>torchvision.transforms</code> 完成了一个简单的从 <code>PIL.Image</code> 格式的图片到 <code>tensor</code> 的转换，可以先不必在意，后面会详细地讲到 <code>transforms</code> 这个超级重要的工具：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> Dataset</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> torchvision <span class=\"keyword\">import</span> transforms</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyDataset</span>(<span class=\"title class_ inherited__\">Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, images_folder_path, labels_file_path</span>):</span><br><span class=\"line\">        self.images_folder_path = images_folder_path</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(labels_file_path, <span class=\"string\">&#x27;r&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">            self.labels = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, file.read().splitlines()))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__getitem__</span>(<span class=\"params\">self, item</span>):</span><br><span class=\"line\">        image = Image.<span class=\"built_in\">open</span>(os.path.join(self.images_folder_path, <span class=\"string\">&quot;&#123;&#125;.png&quot;</span>.<span class=\"built_in\">format</span>(item)))</span><br><span class=\"line\">        image = self.image2tensor(image)</span><br><span class=\"line\">        label = self.labels[item]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (image, label)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__len__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(self.labels)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">image2tensor</span>(<span class=\"params\">self, image</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        transform PIL.Image to tensor</span></span><br><span class=\"line\"><span class=\"string\">        :param image: image in PIL.Image format</span></span><br><span class=\"line\"><span class=\"string\">        :return: image in tensor format</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        transform = transforms.Compose([</span><br><span class=\"line\">            transforms.ToTensor()</span><br><span class=\"line\">        ])</span><br><span class=\"line\">        image = image.convert(<span class=\"string\">&#x27;RGB&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> transform(image)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">myDataset = MyDataset(<span class=\"string\">&quot;./data-folder/&quot;</span>, <span class=\"string\">&quot;./labels.txt&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"dataloader\"><a class=\"markdownIt-Anchor\" href=\"#dataloader\"></a> Dataloader</h2>\n<p><code>Dataloader</code>对 <code>Dataset</code>（和 <code>Sampler</code>等）打包，完成最后对数据的读取的执行工作，一般不需要自己定义或者重写一个 <code>Dataloader</code>的类（或子类），直接使用即可，通过传入参数定制 <code>Dataloader</code>，定制化的功能应该在 <code>Dataset</code>（和 <code>Sampler</code>等）中完成了。</p>\n<p><code>Dataloader</code>的完整签名：<br />\n<a href=\"https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader\">https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader</a></p>\n<h3 id=\"dataloader的一些常用参数\"><a class=\"markdownIt-Anchor\" href=\"#dataloader的一些常用参数\"></a> Dataloader的一些常用参数</h3>\n<p><code>Dataloader</code>的一些重要的参数如下，除了第一个 <code>dataset</code>参数外，其他均为可选参数：</p>\n<ul>\n<li><code>dataset</code>（第一个参数，必须的参数）：一个 <code>Dataset</code>的实例，即传入的数据集（或者其他可迭代对象）</li>\n<li><code>batch_size</code>：整数值，每个 <code>batch</code>的样本数量，即 <code>batch</code>大小，默认为1</li>\n<li><code>shuffle：bool</code>值，如果设置为 <code>True</code>，则在每个 <code>epoch</code>开始的时候，会对数据集的数据进行重新排序，默认 <code>False</code></li>\n<li><code>sampler</code>：传入一个自定义的 <code>Sampler</code>实例，定义从数据集中取样本的策略，<code>Sampler</code>每次返回一个索引，默认为 <code>None</code></li>\n<li><code>batch_sampler</code>：也是传入一个自定义的 <code>Sampler</code>实例，但是与 <code>sampler</code>参数不同的是，它接收的 <code>Sampler</code>是一次返回一个 batch的索引，默认为 <code>None</code></li>\n<li><code>num_workers</code>：整数值，定义有几个进程来处理数据。0意味着所有的数据都会被加载进主进程，默认0</li>\n<li><code>collate_fn</code>：传入一个函数，它的作用是将一个 <code>batch</code>的样本打包成一个大的 <code>tensor</code>，<code>tensor</code>的第一维就是这些样本，如果没有特殊需求可以保持默认即可（后边会详细介绍）</li>\n<li><code>pin_memory：bool</code>值，如果为 <code>True</code>，那么将加载的数据拷贝到 <code>CUDA</code>中的固定内存中。</li>\n<li><code>drop_last：bool</code>值，如果为 <code>True</code>，则对最后的一个 <code>batch</code>来说，如果不足 <code>batch_size</code>个样本了就舍弃，如果为 <code>False</code>，也会继续正常执行，只是最后的一个 <code>batch</code>可能会小一点（剩多少算多少），默认 <code>False</code></li>\n<li><code>timeout</code>：如果是正数，表明等待从加载一个 <code>batch</code>等待的时间，若超出设定的时间还没有加载完，就放弃这个 <code>batch</code>，如果是0，表示不设置限制时间。默认为0</li>\n</ul>\n<h3 id=\"dataloader参数之间的互斥\"><a class=\"markdownIt-Anchor\" href=\"#dataloader参数之间的互斥\"></a> Dataloader参数之间的互斥</h3>\n<p>值得注意的是，<code>Dataloader</code>的参数之间存在互斥的情况，主要针对自己定义的采样器：</p>\n<ul>\n<li><code>sampler</code>：如果自行指定了 <code>sampler</code>参数，则 <code>shuffle</code>必须保持默认值，即 <code>False</code></li>\n<li><code>batch_sampler</code>：如果自行指定了 <code>batch_sampler</code>参数，则 <code>batch_size</code>、<code>shuffle</code>、<code>sampler</code>、<code>drop_last</code> 都必须保持默认值<br />\n如果没有指定自己是采样器，那么默认的情况下（即 <code>sampler</code>和 <code>batch_sampler</code>均为 <code>None</code>的情况下），<code>Dataloader</code>的采样策略是如何的呢：</li>\n<li><code>sampler</code>：</li>\n<li>\n<ul>\n<li><code>shuffle = True</code>：<code>sampler</code>采用 <code>RandomSampler</code>，即随机采样</li>\n</ul>\n</li>\n<li>\n<ul>\n<li><code>shuffle = Flase</code>：<code>sampler</code>采用 <code>SequentialSampler</code>，即按照顺序采样</li>\n</ul>\n</li>\n<li><code>batch_sampler</code>：采用 <code>BatchSampler</code>，即根据 <code>batch_size</code> 进行 <code>batch</code>采样</li>\n<li></li>\n</ul>\n<p>上面提到的 <code>RandomSampler</code>、<code>SequentialSampler</code>和 <code>BatchSampler</code>都是 <code>PyTorch</code>自己实现的，且它们都是 <code>Sampler</code>的子类，后边会详述。</p>\n<h3 id=\"dataloader的实例\"><a class=\"markdownIt-Anchor\" href=\"#dataloader的实例\"></a> Dataloader的实例</h3>\n<p>下面我们继续我们的例子，定义 <code>Dataloader</code>的实例，从我们定义的 <code>myDataset</code> 数据集中加载数据，每一个 <code>batch</code>大小为8。并且我们使用了一个循环来验证其工作的情况：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"></span><br><span class=\"line\">myDataloader = DataLoader(myDataset, batch_size=<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> myDataloader:</span><br><span class=\"line\">        images, labels = data[<span class=\"number\">0</span>], data[<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(images))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(labels)</span><br><span class=\"line\">        <span class=\"comment\"># train your module</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\">tensor([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\">tensor([<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\">tensor([<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\">tensor([<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\">tensor([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\">tensor([<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\">tensor([<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\">tensor([<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n<h2 id=\"sampler\"><a class=\"markdownIt-Anchor\" href=\"#sampler\"></a> Sampler</h2>\n<p><code>Sampler</code>类是一个很抽象的父类，其主要用于设置从一个序列中返回样本的规则，即采样的规则。<code>Sampler</code>是一个可迭代对象，使用 <code>step</code>方法可以返回下一个迭代后的结果，因此其主要的类方法就是 <code>__iter__ </code>方法，定义了迭代后返回的内容。其父类的代码如下（<code>PyTorch 1.7</code>）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sampler</span>(<span class=\"type\">Generic</span>[T_co]):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, data_source: <span class=\"type\">Optional</span>[Sized]</span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>) -&gt; Iterator[T_co]:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> NotImplementedError</span><br></pre></td></tr></table></figure>\n<p>从上述代码可见，其实 <code>Sampler</code>父类并没有给出 <code>__iter__</code> 的具体定义，因此，如果我们要定义自己的采样器，就要编写继承自 <code>Sampler</code>的子类，并且重写 <code>__iter__ </code>方法给出迭代返回样本的逻辑。</p>\n<p>但是，正如上文提到的，<code>Dataloader</code>中的 <code>sampler</code>和 <code>batch_sampler</code>参数默认情况下使用的那些采样器（<code>RandomSampler</code>、<code>SequentialSampler</code>和 <code>BatchSampler</code>）一样，<code>PyTorch</code>自己实现了很多 <code>Sampler</code>的子类，这些采样器其实可以完成大部分功能，所以本节主要关注一些 <code>Sampler</code>的子类以及他们的用法，而不过多地讨论如何自己实现一个 <code>Sampler</code>。</p>\n<h3 id=\"sequentialsampler\"><a class=\"markdownIt-Anchor\" href=\"#sequentialsampler\"></a> SequentialSampler</h3>\n<p><code>SequentialSampler</code>就是一个按照顺序进行采样的采样器，接收一个数据集做参数（实际上任何可迭代对象都可），按照顺序对其进行采样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> SequentialSampler</span><br><span class=\"line\"></span><br><span class=\"line\">pseudo_dataset = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> SequentialSampler(pseudo_dataset):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span> </span><br></pre></td></tr></table></figure>\n<h3 id=\"randmsampler\"><a class=\"markdownIt-Anchor\" href=\"#randmsampler\"></a> RandmSampler</h3>\n<p><code>RandomSampler</code> 即一个随机采样器，返回随机采样的值，第一个参数依然是一个数据集（或可迭代对象）。还有一组参数如下：</p>\n<ul>\n<li><code>replacement：bool</code>值，默认是 <code>False</code>，设置为 <code>True</code>时表示可以采出重复的样本</li>\n<li><code>num_samples</code>：只有在 <code>replacement</code>设置为 <code>True</code>的时候才能设置此参数，表示要采出样本的个数，默认为数据集的总长度。有时候由于 <code>replacement</code>置 <code>True</code>的原因导致重复数据被采样，导致有些数据被采不到，所以往往会设置一个比较大的值</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> RandomSampler</span><br><span class=\"line\"></span><br><span class=\"line\">pseudo_dataset = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">randomSampler1 = RandomSampler(pseudo_dataset)</span><br><span class=\"line\">randomSampler2 = RandomSampler(pseudo_dataset, replacement=<span class=\"literal\">True</span>, num_samples=<span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;for random sampler #1: &quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> randomSampler1:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n\\nfor random sampler #2: &quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> randomSampler2:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> random sampler <span class=\"comment\">#1: </span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">2</span> <span class=\"number\">9</span> <span class=\"number\">3</span> <span class=\"number\">0</span> <span class=\"number\">6</span> <span class=\"number\">8</span> <span class=\"number\">7</span> <span class=\"number\">1</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> random sampler <span class=\"comment\">#2: </span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">9</span> <span class=\"number\">0</span> <span class=\"number\">6</span> <span class=\"number\">9</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">6</span> <span class=\"number\">1</span> <span class=\"number\">8</span> <span class=\"number\">5</span> <span class=\"number\">0</span> <span class=\"number\">2</span> <span class=\"number\">7</span> <span class=\"number\">2</span> <span class=\"number\">8</span> <span class=\"number\">6</span> <span class=\"number\">4</span> <span class=\"number\">0</span> <span class=\"number\">6</span> </span><br></pre></td></tr></table></figure>\n<h3 id=\"subsetrandomsampler\"><a class=\"markdownIt-Anchor\" href=\"#subsetrandomsampler\"></a> SubsetRandomSampler</h3>\n<p>SubsetRandomSampler 可以设置子集的随机采样，多用于将数据集分成多个集合，比如训练集和验证集的时候使用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> SubsetRandomSampler</span><br><span class=\"line\"></span><br><span class=\"line\">pseudo_dataset = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">subRandomSampler1 = SubsetRandomSampler(pseudo_dataset[:<span class=\"number\">7</span>])</span><br><span class=\"line\">subRandomSampler2 = SubsetRandomSampler(pseudo_dataset[<span class=\"number\">7</span>:])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;for subset random sampler #1: &quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> subRandomSampler1:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n\\nfor subset random sampler #2: &quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> subRandomSampler2:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> subset random sampler <span class=\"comment\">#1: </span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">4</span> <span class=\"number\">6</span> <span class=\"number\">5</span> <span class=\"number\">3</span> <span class=\"number\">2</span> <span class=\"number\">1</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> subset random sampler <span class=\"comment\">#2: </span></span><br><span class=\"line\"><span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span> </span><br></pre></td></tr></table></figure>\n<h3 id=\"weightedrandomsampler\"><a class=\"markdownIt-Anchor\" href=\"#weightedrandomsampler\"></a> WeightedRandomSampler</h3>\n<p><code>WeightedRandomSampler</code>和 <code>RandomSampler</code>的参数一致，但是不在传入一个 <code>dataset</code>，第一个参数变成了 <code>weights</code>，只接收一个一定长度的 <code>list</code>作为 <code>weights</code> 参数，表示采样的权重，采样时会根据权重随机从 <code>list(range(len(weights)))</code> 中采样，即 <code>WeightedRandomSampler</code>并不需要传入样本集，而是只在一个根据 <code>weights</code>长度创建的数组中采样，所以采样的结果可能需要进一步处理才能使用。<code>weights</code>的所有元素之和不需要为1。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> WeightedRandomSampler</span><br><span class=\"line\"></span><br><span class=\"line\">pseudo_dataset = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">10</span>))</span><br><span class=\"line\">weights = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">10</span>,<span class=\"number\">10</span>,<span class=\"number\">10</span>,<span class=\"number\">10</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">weightedRandomSampler = WeightedRandomSampler(weights, replacement=<span class=\"literal\">True</span>, num_samples=<span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> weightedRandomSampler:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"><span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">7</span> <span class=\"number\">7</span> <span class=\"number\">9</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span> <span class=\"number\">8</span> <span class=\"number\">7</span> <span class=\"number\">5</span> <span class=\"number\">5</span> <span class=\"number\">9</span> <span class=\"number\">9</span> <span class=\"number\">6</span> <span class=\"number\">5</span> <span class=\"number\">8</span> <span class=\"number\">9</span> <span class=\"number\">6</span> <span class=\"number\">5</span> </span><br></pre></td></tr></table></figure>\n<h3 id=\"batchsampler\"><a class=\"markdownIt-Anchor\" href=\"#batchsampler\"></a> BatchSampler</h3>\n<p>以上的四个 <code>Sampler</code>在每次迭代都只返回一个索引，而 <code>BatchSampler</code>的作用是对上述这类返回一个索引的采样器进行包装，按照设定的 <code>batch_size</code>返回一组索引，因其他的参数和上述的有些不同：</p>\n<ul>\n<li><code>sampler</code>：一个 <code>Sampler</code>对象（或者一个可迭代对象）</li>\n<li><code>batch_size</code>：batch的大小</li>\n<li><code>drop_last</code>：是否丢弃最后一个可能不足 <code>batch_size</code>大小的数据</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> BatchSampler</span><br><span class=\"line\">pseudo_dataset = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">batchSampler1 = BatchSampler(pseudo_dataset, batch_size=<span class=\"number\">3</span>, drop_last=<span class=\"literal\">False</span>)</span><br><span class=\"line\">batchSampler2 = BatchSampler(pseudo_dataset, batch_size=<span class=\"number\">3</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;for batch sampler #1: &quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> batchSampler1:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n\\nfor batch sampler #2: &quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> batchSampler2:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> batch sampler <span class=\"comment\">#1: </span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>] [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>] [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>] [<span class=\"number\">9</span>] </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> batch sampler <span class=\"comment\">#2: </span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>] [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>] [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>] </span><br></pre></td></tr></table></figure>\n<h2 id=\"collate_fn\"><a class=\"markdownIt-Anchor\" href=\"#collate_fn\"></a> collate_fn</h2>\n<p><code>Dataloader</code>其实还有一个比较重要的参数是 <code>collate_fn</code>，它接收一个 <code>callable</code>对象，比如一个函数，它的作用是将每次迭代出来的数据打包成 <code>batch</code>。</p>\n<p>举个例子，如果我们在 <code>Dataloader</code>中设置了 <code>batch_size</code>为8，实际上，从 <code>Dataloader</code>所读取的数据集Dataset中取出数据时得到的是单独的数据，比如我们的例子中，每次采样得到一个 <code>tuple：(image, label)</code>，因此 <code>collate_fn</code> 的作用就有了，它负责包装 <code>batch</code>，即每从数据集中抽出8个这样的 <code>tuple</code>，它负责把8个 <code>(image, label)</code>包装成一个 <code>list: [images, labels]</code>，这个 <code>list</code>有两个元素，每一个是一个 <code>tensor</code>，比如第一个元素，实际上是一个 <code>8×size(image)</code> 的tensor，即给原来的数据增加了一维，也就是最前边的 <code>batch</code>的维度，<code>labels</code>也同理。</p>\n<p>有时候我们可能会需要实现自己的包装逻辑，所以需要自定义一个函数来完成定制化的如上的内容，只要将该函数名传递给 <code>collate_fn</code>参数即可。</p>\n<h2 id=\"pytorch集成的数据集\"><a class=\"markdownIt-Anchor\" href=\"#pytorch集成的数据集\"></a> PyTorch集成的数据集</h2>\n<p>实际上，<code>PyTorch</code>提供了很多常用数据集的接口，如果使用这些数据集的话，可以直接使用对应的包加载，会方便很多，比如：</p>\n<ul>\n<li><code>torchvision.datasets</code> 就提供了很多视觉方向的数据集：<a href=\"https://pytorch.org/docs/stable/torchvision/datasets.html?highlight=torchvision%20datasets\">https://pytorch.org/docs/stable/torchvision/datasets.html?highlight=torchvision datasets</a></li>\n<li><code>torchtext</code> 则提供了很多文本处理方向的数据集</li>\n<li><code>torchaudio</code> 提供了很多音频处理方向的数据集</li>\n</ul>\n<p>当然 <code>PyTorch</code>也可以配合其他包来获得数据以及对数据进行处理，比如：</p>\n<ul>\n<li>对于视觉方面，配合 <code>Pillow、OpenCV</code>等</li>\n<li>对于音频处理方面，配合 <code>scipy、librosa</code>等</li>\n<li>对于文本处理方面，配合 <code>Cython、NLTK、SpaCy</code>等</li>\n</ul>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p><a href=\"https://www.jianshu.com/p/1651ed9d48c9\">转载</a><br />\n<a href=\"https://www.jianshu.com/nb/48831659\">作者pytorch其他笔记</a></p>\n<p>数据读取是所有训练模型任务中最基础最重要的一步，<code>PyTorch</code>为数据集的读取、加载和使用提供了很好的机制，使得数据加载的工作变得异常简单而且具有非常高的定制性。</p>\n<h2 id=\"dataset-dataloader-sampler的关系\"><a class=\"markdownIt-Anchor\" href=\"#dataset-dataloader-sampler的关系\"></a> Dataset、Dataloader、Sampler的关系</h2>\n<p><code>PyTorch</code>中对于数据集的处理有三个非常重要的类：<code>Dataset</code>、<code>Dataloader</code>、<code>Sampler</code>，它们均是 <code>torch.utils.data </code>包下的模块（类）。它们的关系可以这样理解：</p>\n<ul>\n<li><code>Dataset</code>是数据集的类，主要用于定义数据集</li>\n<li><code>Sampler</code>是采样器的类，用于定义从数据集中选出数据的规则，比如是随机取数据还是按照顺序取等等</li>\n<li><code>Dataloader</code>是数据的加载类，它是对于 <code>Dataset</code>和 <code>Sampler</code>的进一步包装，即其实 <code>Dataset</code>和 <code>Sampler</code>会作为参数传递给 <code>Dataloader</code>，用于实际读取数据，可以理解为它是这个工作的真正实践者，而 <code>Dataset</code>和 <code>Sampler</code>则负责定义。我们训练、测试所获得的数据也是 <code>Dataloader</code>直接给我们的。</li>\n</ul>\n<p><strong>总的来说</strong>，Dataset定义了整个数据集，<code>Sampler</code>提供了取数据的机制，最后由 <code>Dataloader</code>取完成取数据的任务。</p>\n<p>本篇以一个最简单的例子为例，比如有一个文件夹（<code>data-folder</code>）中存储训练的数据（一共30张图片：0.png 到 29.png），他们对应的标签被写在了一个 <code>labels.txt</code>文件中，第n行对应n-1.png的标签，是一个三分类问题，即0、1和2三种标签（虚构的数据集，不具有任何意义）。目录结构如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|--- Project</span><br><span class=\"line\">   |--- main.py</span><br><span class=\"line\">   |--- labels.txt</span><br><span class=\"line\">   |--- data-folder</span><br><span class=\"line\">      |--- 0.png</span><br><span class=\"line\">      |--- 1.png</span><br><span class=\"line\">      |--- ……</span><br><span class=\"line\">      |--- 29.png</span><br></pre></td></tr></table></figure>\n<h2 id=\"dataset\"><a class=\"markdownIt-Anchor\" href=\"#dataset\"></a> Dataset</h2>\n<p><code>Dataset</code> 位于 <code>torch.utils.data </code>下，我们通过定义继承自这个类的子类来自定义数据集。它有两个最重要的方法需要重写，实际上它们都是类的特殊方法：</p>\n<ul>\n<li><code>__getitem__(self, index)</code>：传入参数 <code>index</code>为下标，返回数据集中对应下标的数据组（数据和标签）</li>\n<li><code>__len__(self)</code>：返回数据集的大小</li>\n</ul>\n<p>简单说，重写了这两个方法的继承自 <code>Dataset</code> 的类都可以作为数据集的定义类使用，即一个 <code>Dataset</code>类的必要结构：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dataset</span>(torch.utils.data.Dataset):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, filepath=<span class=\"literal\">None</span>,dataLen=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__getitem__</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__len__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>如下就是我们的例子的加载实例，其中的 <code>image2tensor</code> 使用了 <code>torchvision.transforms</code> 完成了一个简单的从 <code>PIL.Image</code> 格式的图片到 <code>tensor</code> 的转换，可以先不必在意，后面会详细地讲到 <code>transforms</code> 这个超级重要的工具：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> Dataset</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> torchvision <span class=\"keyword\">import</span> transforms</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyDataset</span>(<span class=\"title class_ inherited__\">Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, images_folder_path, labels_file_path</span>):</span><br><span class=\"line\">        self.images_folder_path = images_folder_path</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(labels_file_path, <span class=\"string\">&#x27;r&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">            self.labels = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, file.read().splitlines()))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__getitem__</span>(<span class=\"params\">self, item</span>):</span><br><span class=\"line\">        image = Image.<span class=\"built_in\">open</span>(os.path.join(self.images_folder_path, <span class=\"string\">&quot;&#123;&#125;.png&quot;</span>.<span class=\"built_in\">format</span>(item)))</span><br><span class=\"line\">        image = self.image2tensor(image)</span><br><span class=\"line\">        label = self.labels[item]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (image, label)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__len__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(self.labels)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">image2tensor</span>(<span class=\"params\">self, image</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        transform PIL.Image to tensor</span></span><br><span class=\"line\"><span class=\"string\">        :param image: image in PIL.Image format</span></span><br><span class=\"line\"><span class=\"string\">        :return: image in tensor format</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        transform = transforms.Compose([</span><br><span class=\"line\">            transforms.ToTensor()</span><br><span class=\"line\">        ])</span><br><span class=\"line\">        image = image.convert(<span class=\"string\">&#x27;RGB&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> transform(image)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">myDataset = MyDataset(<span class=\"string\">&quot;./data-folder/&quot;</span>, <span class=\"string\">&quot;./labels.txt&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"dataloader\"><a class=\"markdownIt-Anchor\" href=\"#dataloader\"></a> Dataloader</h2>\n<p><code>Dataloader</code>对 <code>Dataset</code>（和 <code>Sampler</code>等）打包，完成最后对数据的读取的执行工作，一般不需要自己定义或者重写一个 <code>Dataloader</code>的类（或子类），直接使用即可，通过传入参数定制 <code>Dataloader</code>，定制化的功能应该在 <code>Dataset</code>（和 <code>Sampler</code>等）中完成了。</p>\n<p><code>Dataloader</code>的完整签名：<br />\n<a href=\"https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader\">https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader</a></p>\n<h3 id=\"dataloader的一些常用参数\"><a class=\"markdownIt-Anchor\" href=\"#dataloader的一些常用参数\"></a> Dataloader的一些常用参数</h3>\n<p><code>Dataloader</code>的一些重要的参数如下，除了第一个 <code>dataset</code>参数外，其他均为可选参数：</p>\n<ul>\n<li><code>dataset</code>（第一个参数，必须的参数）：一个 <code>Dataset</code>的实例，即传入的数据集（或者其他可迭代对象）</li>\n<li><code>batch_size</code>：整数值，每个 <code>batch</code>的样本数量，即 <code>batch</code>大小，默认为1</li>\n<li><code>shuffle：bool</code>值，如果设置为 <code>True</code>，则在每个 <code>epoch</code>开始的时候，会对数据集的数据进行重新排序，默认 <code>False</code></li>\n<li><code>sampler</code>：传入一个自定义的 <code>Sampler</code>实例，定义从数据集中取样本的策略，<code>Sampler</code>每次返回一个索引，默认为 <code>None</code></li>\n<li><code>batch_sampler</code>：也是传入一个自定义的 <code>Sampler</code>实例，但是与 <code>sampler</code>参数不同的是，它接收的 <code>Sampler</code>是一次返回一个 batch的索引，默认为 <code>None</code></li>\n<li><code>num_workers</code>：整数值，定义有几个进程来处理数据。0意味着所有的数据都会被加载进主进程，默认0</li>\n<li><code>collate_fn</code>：传入一个函数，它的作用是将一个 <code>batch</code>的样本打包成一个大的 <code>tensor</code>，<code>tensor</code>的第一维就是这些样本，如果没有特殊需求可以保持默认即可（后边会详细介绍）</li>\n<li><code>pin_memory：bool</code>值，如果为 <code>True</code>，那么将加载的数据拷贝到 <code>CUDA</code>中的固定内存中。</li>\n<li><code>drop_last：bool</code>值，如果为 <code>True</code>，则对最后的一个 <code>batch</code>来说，如果不足 <code>batch_size</code>个样本了就舍弃，如果为 <code>False</code>，也会继续正常执行，只是最后的一个 <code>batch</code>可能会小一点（剩多少算多少），默认 <code>False</code></li>\n<li><code>timeout</code>：如果是正数，表明等待从加载一个 <code>batch</code>等待的时间，若超出设定的时间还没有加载完，就放弃这个 <code>batch</code>，如果是0，表示不设置限制时间。默认为0</li>\n</ul>\n<h3 id=\"dataloader参数之间的互斥\"><a class=\"markdownIt-Anchor\" href=\"#dataloader参数之间的互斥\"></a> Dataloader参数之间的互斥</h3>\n<p>值得注意的是，<code>Dataloader</code>的参数之间存在互斥的情况，主要针对自己定义的采样器：</p>\n<ul>\n<li><code>sampler</code>：如果自行指定了 <code>sampler</code>参数，则 <code>shuffle</code>必须保持默认值，即 <code>False</code></li>\n<li><code>batch_sampler</code>：如果自行指定了 <code>batch_sampler</code>参数，则 <code>batch_size</code>、<code>shuffle</code>、<code>sampler</code>、<code>drop_last</code> 都必须保持默认值<br />\n如果没有指定自己是采样器，那么默认的情况下（即 <code>sampler</code>和 <code>batch_sampler</code>均为 <code>None</code>的情况下），<code>Dataloader</code>的采样策略是如何的呢：</li>\n<li><code>sampler</code>：</li>\n<li>\n<ul>\n<li><code>shuffle = True</code>：<code>sampler</code>采用 <code>RandomSampler</code>，即随机采样</li>\n</ul>\n</li>\n<li>\n<ul>\n<li><code>shuffle = Flase</code>：<code>sampler</code>采用 <code>SequentialSampler</code>，即按照顺序采样</li>\n</ul>\n</li>\n<li><code>batch_sampler</code>：采用 <code>BatchSampler</code>，即根据 <code>batch_size</code> 进行 <code>batch</code>采样</li>\n<li></li>\n</ul>\n<p>上面提到的 <code>RandomSampler</code>、<code>SequentialSampler</code>和 <code>BatchSampler</code>都是 <code>PyTorch</code>自己实现的，且它们都是 <code>Sampler</code>的子类，后边会详述。</p>\n<h3 id=\"dataloader的实例\"><a class=\"markdownIt-Anchor\" href=\"#dataloader的实例\"></a> Dataloader的实例</h3>\n<p>下面我们继续我们的例子，定义 <code>Dataloader</code>的实例，从我们定义的 <code>myDataset</code> 数据集中加载数据，每一个 <code>batch</code>大小为8。并且我们使用了一个循环来验证其工作的情况：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"></span><br><span class=\"line\">myDataloader = DataLoader(myDataset, batch_size=<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> myDataloader:</span><br><span class=\"line\">        images, labels = data[<span class=\"number\">0</span>], data[<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(images))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(labels)</span><br><span class=\"line\">        <span class=\"comment\"># train your module</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\">tensor([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\">tensor([<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\">tensor([<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\">tensor([<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\">tensor([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\">tensor([<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\">tensor([<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\">tensor([<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n<h2 id=\"sampler\"><a class=\"markdownIt-Anchor\" href=\"#sampler\"></a> Sampler</h2>\n<p><code>Sampler</code>类是一个很抽象的父类，其主要用于设置从一个序列中返回样本的规则，即采样的规则。<code>Sampler</code>是一个可迭代对象，使用 <code>step</code>方法可以返回下一个迭代后的结果，因此其主要的类方法就是 <code>__iter__ </code>方法，定义了迭代后返回的内容。其父类的代码如下（<code>PyTorch 1.7</code>）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sampler</span>(<span class=\"type\">Generic</span>[T_co]):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, data_source: <span class=\"type\">Optional</span>[Sized]</span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>) -&gt; Iterator[T_co]:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> NotImplementedError</span><br></pre></td></tr></table></figure>\n<p>从上述代码可见，其实 <code>Sampler</code>父类并没有给出 <code>__iter__</code> 的具体定义，因此，如果我们要定义自己的采样器，就要编写继承自 <code>Sampler</code>的子类，并且重写 <code>__iter__ </code>方法给出迭代返回样本的逻辑。</p>\n<p>但是，正如上文提到的，<code>Dataloader</code>中的 <code>sampler</code>和 <code>batch_sampler</code>参数默认情况下使用的那些采样器（<code>RandomSampler</code>、<code>SequentialSampler</code>和 <code>BatchSampler</code>）一样，<code>PyTorch</code>自己实现了很多 <code>Sampler</code>的子类，这些采样器其实可以完成大部分功能，所以本节主要关注一些 <code>Sampler</code>的子类以及他们的用法，而不过多地讨论如何自己实现一个 <code>Sampler</code>。</p>\n<h3 id=\"sequentialsampler\"><a class=\"markdownIt-Anchor\" href=\"#sequentialsampler\"></a> SequentialSampler</h3>\n<p><code>SequentialSampler</code>就是一个按照顺序进行采样的采样器，接收一个数据集做参数（实际上任何可迭代对象都可），按照顺序对其进行采样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> SequentialSampler</span><br><span class=\"line\"></span><br><span class=\"line\">pseudo_dataset = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> SequentialSampler(pseudo_dataset):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span> </span><br></pre></td></tr></table></figure>\n<h3 id=\"randmsampler\"><a class=\"markdownIt-Anchor\" href=\"#randmsampler\"></a> RandmSampler</h3>\n<p><code>RandomSampler</code> 即一个随机采样器，返回随机采样的值，第一个参数依然是一个数据集（或可迭代对象）。还有一组参数如下：</p>\n<ul>\n<li><code>replacement：bool</code>值，默认是 <code>False</code>，设置为 <code>True</code>时表示可以采出重复的样本</li>\n<li><code>num_samples</code>：只有在 <code>replacement</code>设置为 <code>True</code>的时候才能设置此参数，表示要采出样本的个数，默认为数据集的总长度。有时候由于 <code>replacement</code>置 <code>True</code>的原因导致重复数据被采样，导致有些数据被采不到，所以往往会设置一个比较大的值</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> RandomSampler</span><br><span class=\"line\"></span><br><span class=\"line\">pseudo_dataset = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">randomSampler1 = RandomSampler(pseudo_dataset)</span><br><span class=\"line\">randomSampler2 = RandomSampler(pseudo_dataset, replacement=<span class=\"literal\">True</span>, num_samples=<span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;for random sampler #1: &quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> randomSampler1:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n\\nfor random sampler #2: &quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> randomSampler2:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> random sampler <span class=\"comment\">#1: </span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">2</span> <span class=\"number\">9</span> <span class=\"number\">3</span> <span class=\"number\">0</span> <span class=\"number\">6</span> <span class=\"number\">8</span> <span class=\"number\">7</span> <span class=\"number\">1</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> random sampler <span class=\"comment\">#2: </span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">9</span> <span class=\"number\">0</span> <span class=\"number\">6</span> <span class=\"number\">9</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">6</span> <span class=\"number\">1</span> <span class=\"number\">8</span> <span class=\"number\">5</span> <span class=\"number\">0</span> <span class=\"number\">2</span> <span class=\"number\">7</span> <span class=\"number\">2</span> <span class=\"number\">8</span> <span class=\"number\">6</span> <span class=\"number\">4</span> <span class=\"number\">0</span> <span class=\"number\">6</span> </span><br></pre></td></tr></table></figure>\n<h3 id=\"subsetrandomsampler\"><a class=\"markdownIt-Anchor\" href=\"#subsetrandomsampler\"></a> SubsetRandomSampler</h3>\n<p>SubsetRandomSampler 可以设置子集的随机采样，多用于将数据集分成多个集合，比如训练集和验证集的时候使用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> SubsetRandomSampler</span><br><span class=\"line\"></span><br><span class=\"line\">pseudo_dataset = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">subRandomSampler1 = SubsetRandomSampler(pseudo_dataset[:<span class=\"number\">7</span>])</span><br><span class=\"line\">subRandomSampler2 = SubsetRandomSampler(pseudo_dataset[<span class=\"number\">7</span>:])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;for subset random sampler #1: &quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> subRandomSampler1:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n\\nfor subset random sampler #2: &quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> subRandomSampler2:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> subset random sampler <span class=\"comment\">#1: </span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">4</span> <span class=\"number\">6</span> <span class=\"number\">5</span> <span class=\"number\">3</span> <span class=\"number\">2</span> <span class=\"number\">1</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> subset random sampler <span class=\"comment\">#2: </span></span><br><span class=\"line\"><span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span> </span><br></pre></td></tr></table></figure>\n<h3 id=\"weightedrandomsampler\"><a class=\"markdownIt-Anchor\" href=\"#weightedrandomsampler\"></a> WeightedRandomSampler</h3>\n<p><code>WeightedRandomSampler</code>和 <code>RandomSampler</code>的参数一致，但是不在传入一个 <code>dataset</code>，第一个参数变成了 <code>weights</code>，只接收一个一定长度的 <code>list</code>作为 <code>weights</code> 参数，表示采样的权重，采样时会根据权重随机从 <code>list(range(len(weights)))</code> 中采样，即 <code>WeightedRandomSampler</code>并不需要传入样本集，而是只在一个根据 <code>weights</code>长度创建的数组中采样，所以采样的结果可能需要进一步处理才能使用。<code>weights</code>的所有元素之和不需要为1。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> WeightedRandomSampler</span><br><span class=\"line\"></span><br><span class=\"line\">pseudo_dataset = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">10</span>))</span><br><span class=\"line\">weights = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">10</span>,<span class=\"number\">10</span>,<span class=\"number\">10</span>,<span class=\"number\">10</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">weightedRandomSampler = WeightedRandomSampler(weights, replacement=<span class=\"literal\">True</span>, num_samples=<span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> weightedRandomSampler:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"><span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">7</span> <span class=\"number\">7</span> <span class=\"number\">9</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span> <span class=\"number\">8</span> <span class=\"number\">7</span> <span class=\"number\">5</span> <span class=\"number\">5</span> <span class=\"number\">9</span> <span class=\"number\">9</span> <span class=\"number\">6</span> <span class=\"number\">5</span> <span class=\"number\">8</span> <span class=\"number\">9</span> <span class=\"number\">6</span> <span class=\"number\">5</span> </span><br></pre></td></tr></table></figure>\n<h3 id=\"batchsampler\"><a class=\"markdownIt-Anchor\" href=\"#batchsampler\"></a> BatchSampler</h3>\n<p>以上的四个 <code>Sampler</code>在每次迭代都只返回一个索引，而 <code>BatchSampler</code>的作用是对上述这类返回一个索引的采样器进行包装，按照设定的 <code>batch_size</code>返回一组索引，因其他的参数和上述的有些不同：</p>\n<ul>\n<li><code>sampler</code>：一个 <code>Sampler</code>对象（或者一个可迭代对象）</li>\n<li><code>batch_size</code>：batch的大小</li>\n<li><code>drop_last</code>：是否丢弃最后一个可能不足 <code>batch_size</code>大小的数据</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> BatchSampler</span><br><span class=\"line\">pseudo_dataset = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">batchSampler1 = BatchSampler(pseudo_dataset, batch_size=<span class=\"number\">3</span>, drop_last=<span class=\"literal\">False</span>)</span><br><span class=\"line\">batchSampler2 = BatchSampler(pseudo_dataset, batch_size=<span class=\"number\">3</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;for batch sampler #1: &quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> batchSampler1:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n\\nfor batch sampler #2: &quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> batchSampler2:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> batch sampler <span class=\"comment\">#1: </span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>] [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>] [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>] [<span class=\"number\">9</span>] </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> batch sampler <span class=\"comment\">#2: </span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>] [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>] [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>] </span><br></pre></td></tr></table></figure>\n<h2 id=\"collate_fn\"><a class=\"markdownIt-Anchor\" href=\"#collate_fn\"></a> collate_fn</h2>\n<p><code>Dataloader</code>其实还有一个比较重要的参数是 <code>collate_fn</code>，它接收一个 <code>callable</code>对象，比如一个函数，它的作用是将每次迭代出来的数据打包成 <code>batch</code>。</p>\n<p>举个例子，如果我们在 <code>Dataloader</code>中设置了 <code>batch_size</code>为8，实际上，从 <code>Dataloader</code>所读取的数据集Dataset中取出数据时得到的是单独的数据，比如我们的例子中，每次采样得到一个 <code>tuple：(image, label)</code>，因此 <code>collate_fn</code> 的作用就有了，它负责包装 <code>batch</code>，即每从数据集中抽出8个这样的 <code>tuple</code>，它负责把8个 <code>(image, label)</code>包装成一个 <code>list: [images, labels]</code>，这个 <code>list</code>有两个元素，每一个是一个 <code>tensor</code>，比如第一个元素，实际上是一个 <code>8×size(image)</code> 的tensor，即给原来的数据增加了一维，也就是最前边的 <code>batch</code>的维度，<code>labels</code>也同理。</p>\n<p>有时候我们可能会需要实现自己的包装逻辑，所以需要自定义一个函数来完成定制化的如上的内容，只要将该函数名传递给 <code>collate_fn</code>参数即可。</p>\n<h2 id=\"pytorch集成的数据集\"><a class=\"markdownIt-Anchor\" href=\"#pytorch集成的数据集\"></a> PyTorch集成的数据集</h2>\n<p>实际上，<code>PyTorch</code>提供了很多常用数据集的接口，如果使用这些数据集的话，可以直接使用对应的包加载，会方便很多，比如：</p>\n<ul>\n<li><code>torchvision.datasets</code> 就提供了很多视觉方向的数据集：<a href=\"https://pytorch.org/docs/stable/torchvision/datasets.html?highlight=torchvision%20datasets\">https://pytorch.org/docs/stable/torchvision/datasets.html?highlight=torchvision datasets</a></li>\n<li><code>torchtext</code> 则提供了很多文本处理方向的数据集</li>\n<li><code>torchaudio</code> 提供了很多音频处理方向的数据集</li>\n</ul>\n<p>当然 <code>PyTorch</code>也可以配合其他包来获得数据以及对数据进行处理，比如：</p>\n<ul>\n<li>对于视觉方面，配合 <code>Pillow、OpenCV</code>等</li>\n<li>对于音频处理方面，配合 <code>scipy、librosa</code>等</li>\n<li>对于文本处理方面，配合 <code>Cython、NLTK、SpaCy</code>等</li>\n</ul>\n"},{"title":"git Time out error解决","toc":"true# 是否启用内容索引","_content":"错误信息:\n\n```bash\nfatal: unable to access 'https://github.com/gladdduck/gladdduck.github.io.git/':\nFailed to connect to github.com port 443 after 21048 ms: Timed out\nFATAL {\n  err: Error: Spawn failed\n  at ChildProcess.<anonymous> (D:\\BaiduSyncdisk\\Blog\\node_modules\\hexo-util\\lib\\spawn.js:51:21)\n      at ChildProcess.emit (node:events:513:28)\n      at ChildProcess.cp.emit (D:\\BaiduSyncdisk\\Blog\\node_modules\\cross-spawn\\lib\\enoent.js:34:29)\n      at Process.ChildProcess._handle.onexit (node:internal/child_process:293:12) {\n    code: 128\n  }\n} Something's wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html\n```\n\n解决:\n\ngit中输入\n\n```\ngit config --global --unset http.proxy\n \ngit config --global --unset https.proxy\n```\n\ncmd 中输入\n\n```bash\nipconfig /flushdns\n```\n\n刷新 `dns`缓存\n\n然后再执行相应命令.\n\n![](https://image.yayan.xyz/20230221185957.png)\n\n> 成功\n","source":"_posts/githuberror.md","raw":"---\ntitle: git Time out error解决\ncategories:\n  - 杂七杂八配置\ntags:\n  - git Time out\n  - github Time out\ntoc: true# 是否启用内容索引\n---\n错误信息:\n\n```bash\nfatal: unable to access 'https://github.com/gladdduck/gladdduck.github.io.git/':\nFailed to connect to github.com port 443 after 21048 ms: Timed out\nFATAL {\n  err: Error: Spawn failed\n  at ChildProcess.<anonymous> (D:\\BaiduSyncdisk\\Blog\\node_modules\\hexo-util\\lib\\spawn.js:51:21)\n      at ChildProcess.emit (node:events:513:28)\n      at ChildProcess.cp.emit (D:\\BaiduSyncdisk\\Blog\\node_modules\\cross-spawn\\lib\\enoent.js:34:29)\n      at Process.ChildProcess._handle.onexit (node:internal/child_process:293:12) {\n    code: 128\n  }\n} Something's wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html\n```\n\n解决:\n\ngit中输入\n\n```\ngit config --global --unset http.proxy\n \ngit config --global --unset https.proxy\n```\n\ncmd 中输入\n\n```bash\nipconfig /flushdns\n```\n\n刷新 `dns`缓存\n\n然后再执行相应命令.\n\n![](https://image.yayan.xyz/20230221185957.png)\n\n> 成功\n","slug":"githuberror","published":1,"date":"2023-02-24T14:39:50.432Z","updated":"2023-02-21T11:00:36.000Z","_id":"clee4vhai000bc8vqckbh1c46","comments":1,"layout":"post","photos":[],"link":"","content":"<p>错误信息:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: unable to access <span class=\"string\">&#x27;https://github.com/gladdduck/gladdduck.github.io.git/&#x27;</span>:</span><br><span class=\"line\">Failed to connect to github.com port 443 after 21048 ms: Timed out</span><br><span class=\"line\">FATAL &#123;</span><br><span class=\"line\">  err: Error: Spawn failed</span><br><span class=\"line\">  at ChildProcess.&lt;anonymous&gt; (D:\\BaiduSyncdisk\\Blog\\node_modules\\hexo-util\\lib\\spawn.js:51:21)</span><br><span class=\"line\">      at ChildProcess.emit (node:events:513:28)</span><br><span class=\"line\">      at ChildProcess.cp.emit (D:\\BaiduSyncdisk\\Blog\\node_modules\\cross-spawn\\lib\\enoent.js:34:29)</span><br><span class=\"line\">      at Process.ChildProcess._handle.onexit (node:internal/child_process:293:12) &#123;</span><br><span class=\"line\">    code: 128</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; Something<span class=\"string\">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span></span><br></pre></td></tr></table></figure>\n<p>解决:</p>\n<p>git中输入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\"> </span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>\n<p>cmd 中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipconfig /flushdns</span><br></pre></td></tr></table></figure>\n<p>刷新 <code>dns</code>缓存</p>\n<p>然后再执行相应命令.</p>\n<p><img src=\"https://image.yayan.xyz/20230221185957.png\" alt=\"\" /></p>\n<blockquote>\n<p>成功</p>\n</blockquote>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>错误信息:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: unable to access <span class=\"string\">&#x27;https://github.com/gladdduck/gladdduck.github.io.git/&#x27;</span>:</span><br><span class=\"line\">Failed to connect to github.com port 443 after 21048 ms: Timed out</span><br><span class=\"line\">FATAL &#123;</span><br><span class=\"line\">  err: Error: Spawn failed</span><br><span class=\"line\">  at ChildProcess.&lt;anonymous&gt; (D:\\BaiduSyncdisk\\Blog\\node_modules\\hexo-util\\lib\\spawn.js:51:21)</span><br><span class=\"line\">      at ChildProcess.emit (node:events:513:28)</span><br><span class=\"line\">      at ChildProcess.cp.emit (D:\\BaiduSyncdisk\\Blog\\node_modules\\cross-spawn\\lib\\enoent.js:34:29)</span><br><span class=\"line\">      at Process.ChildProcess._handle.onexit (node:internal/child_process:293:12) &#123;</span><br><span class=\"line\">    code: 128</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; Something<span class=\"string\">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span></span><br></pre></td></tr></table></figure>\n<p>解决:</p>\n<p>git中输入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\"> </span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>\n<p>cmd 中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipconfig /flushdns</span><br></pre></td></tr></table></figure>\n<p>刷新 <code>dns</code>缓存</p>\n<p>然后再执行相应命令.</p>\n<p><img src=\"https://image.yayan.xyz/20230221185957.png\" alt=\"\" /></p>\n<blockquote>\n<p>成功</p>\n</blockquote>\n"},{"title":"print(Hello gitalk)","toc":"true# 是否启用内容索引","_content":"\n# Github上配置\n1. xxx.github.io仓库内，找到issues-labels\n\n![](https://image.yayan.xyz/20221020124657.png)\n2. 新建一个label\n![](https://image.yayan.xyz/20221020124810.png)\n名字一定是**gitalk**\n用来存放提交的评论\n\n3. 新建一个application授权\n\n打开右上角头像，【Settings】->【Developer settings】->【OAuth Apps】->【New OAuth App】\n\n![](https://image.yayan.xyz/20221020125047.png)\nHomepage URL和Authorization callback URL\n一定是**xxxx.github.io** ,其他的随便填。\n\n复制下来生成的Client ID和Client　secrets\n![](https://image.yayan.xyz/20221020125332.png)\n\n# 主题中配置\n1. 配置文件_config.yml中的设置\n```bash\ncomment:\n    type: gitalk  # 启用哪种评论系统\n    gitalk:\n    enable: true 开启gitalk评论，不需要配置\n    owner: github用户名\n    admin: github用户名\n    repo: 博客的仓库名称(注意不是地址)\n    ClientID: 上面生成的Client ID\n    ClientSecret: 上面生成的Client Secret\n    labels: 'gitalk' github issue 对应的issue标签（上面新建的）\n    distractionFreeMode: true  无干扰模式，不需要更改\n    language: zh-CN\n    # proxy 如果设置之后gitalk加载不出来就设置，具体错误是什么忘记了\n    proxy: 'https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token'\n\n```\n2. 其他配置文件\n\n在 【theme】->【pure】->【layout】->【_partial】->【post】文件夹中，新建gitalk.ejs\n\n```javascript\n<link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk@latest/dist/gitalk.css\">\n<script src=\"https://unpkg.com/gitalk@latest/dist/gitalk.min.js\"></script>\n<script src=\"https://priesttomb.github.io/js/md5.min.js\"></script>\n<script type=\"text/javascript\">\n    new Gitalk({\n        clientID: '上述',\n        clientSecret: '上述',\n        repo: 'xxxx.github.io',\n        owner: 'xxxx',\n        admin: 'xxxx',\n        id: md5(location.pathname),\n        distractionFreeMode: true,\n        enable: true\n    }).render('gitalk-container')\n</script>\n```\n在 【theme】->【pure】->【layout】->【_partial】下的article.ejs新增以下：(我报错enable是undefined，我直接把这个去掉了没想到也行)\n```html\n<% if (theme.gitalk.enable){ %>\n\t<div id=\"gitalk-container\"></div>\n\t<%- include post/gitalk.ejs %>\n<% } %>\n\n```\n\n3. 运行\n\n现在运行hexo s应该就可以了\n第一次登陆需要授权，后续就不需要了\n可能会出现443或者128错误，就配置上面的proxy","source":"_posts/hello-gitalk.md","raw":"---\ntitle: print(Hello gitalk)\ncategories:\n  - hexo博客配置\ntags:\n  - hexo博客配置gitalk\ntoc: true# 是否启用内容索引\n---\n\n# Github上配置\n1. xxx.github.io仓库内，找到issues-labels\n\n![](https://image.yayan.xyz/20221020124657.png)\n2. 新建一个label\n![](https://image.yayan.xyz/20221020124810.png)\n名字一定是**gitalk**\n用来存放提交的评论\n\n3. 新建一个application授权\n\n打开右上角头像，【Settings】->【Developer settings】->【OAuth Apps】->【New OAuth App】\n\n![](https://image.yayan.xyz/20221020125047.png)\nHomepage URL和Authorization callback URL\n一定是**xxxx.github.io** ,其他的随便填。\n\n复制下来生成的Client ID和Client　secrets\n![](https://image.yayan.xyz/20221020125332.png)\n\n# 主题中配置\n1. 配置文件_config.yml中的设置\n```bash\ncomment:\n    type: gitalk  # 启用哪种评论系统\n    gitalk:\n    enable: true 开启gitalk评论，不需要配置\n    owner: github用户名\n    admin: github用户名\n    repo: 博客的仓库名称(注意不是地址)\n    ClientID: 上面生成的Client ID\n    ClientSecret: 上面生成的Client Secret\n    labels: 'gitalk' github issue 对应的issue标签（上面新建的）\n    distractionFreeMode: true  无干扰模式，不需要更改\n    language: zh-CN\n    # proxy 如果设置之后gitalk加载不出来就设置，具体错误是什么忘记了\n    proxy: 'https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token'\n\n```\n2. 其他配置文件\n\n在 【theme】->【pure】->【layout】->【_partial】->【post】文件夹中，新建gitalk.ejs\n\n```javascript\n<link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk@latest/dist/gitalk.css\">\n<script src=\"https://unpkg.com/gitalk@latest/dist/gitalk.min.js\"></script>\n<script src=\"https://priesttomb.github.io/js/md5.min.js\"></script>\n<script type=\"text/javascript\">\n    new Gitalk({\n        clientID: '上述',\n        clientSecret: '上述',\n        repo: 'xxxx.github.io',\n        owner: 'xxxx',\n        admin: 'xxxx',\n        id: md5(location.pathname),\n        distractionFreeMode: true,\n        enable: true\n    }).render('gitalk-container')\n</script>\n```\n在 【theme】->【pure】->【layout】->【_partial】下的article.ejs新增以下：(我报错enable是undefined，我直接把这个去掉了没想到也行)\n```html\n<% if (theme.gitalk.enable){ %>\n\t<div id=\"gitalk-container\"></div>\n\t<%- include post/gitalk.ejs %>\n<% } %>\n\n```\n\n3. 运行\n\n现在运行hexo s应该就可以了\n第一次登陆需要授权，后续就不需要了\n可能会出现443或者128错误，就配置上面的proxy","slug":"hello-gitalk","published":1,"date":"2022-10-22T00:58:32.349Z","updated":"2022-10-22T02:40:50.609Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clee4vhak000gc8vqbgy0c62r","content":"<h1 id=\"github上配置\"><a class=\"markdownIt-Anchor\" href=\"#github上配置\"></a> Github上配置</h1>\n<ol>\n<li>xxx.github.io仓库内，找到issues-labels</li>\n</ol>\n<p><img src=\"https://image.yayan.xyz/20221020124657.png\" alt=\"\" /><br />\n2. 新建一个label<br />\n<img src=\"https://image.yayan.xyz/20221020124810.png\" alt=\"\" /><br />\n名字一定是<strong>gitalk</strong><br />\n用来存放提交的评论</p>\n<ol start=\"3\">\n<li>新建一个application授权</li>\n</ol>\n<p>打开右上角头像，【Settings】-&gt;【Developer settings】-&gt;【OAuth Apps】-&gt;【New OAuth App】</p>\n<p><img src=\"https://image.yayan.xyz/20221020125047.png\" alt=\"\" /><br />\nHomepage URL和Authorization callback URL<br />\n一定是<strong><a href=\"http://xxxx.github.io\">xxxx.github.io</a></strong> ,其他的随便填。</p>\n<p>复制下来生成的Client ID和Client　secrets<br />\n<img src=\"https://image.yayan.xyz/20221020125332.png\" alt=\"\" /></p>\n<h1 id=\"主题中配置\"><a class=\"markdownIt-Anchor\" href=\"#主题中配置\"></a> 主题中配置</h1>\n<ol>\n<li>配置文件_config.yml中的设置</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comment:</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: gitalk  <span class=\"comment\"># 启用哪种评论系统</span></span><br><span class=\"line\">    gitalk:</span><br><span class=\"line\">    <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span> 开启gitalk评论，不需要配置</span><br><span class=\"line\">    owner: github用户名</span><br><span class=\"line\">    admin: github用户名</span><br><span class=\"line\">    repo: 博客的仓库名称(注意不是地址)</span><br><span class=\"line\">    ClientID: 上面生成的Client ID</span><br><span class=\"line\">    ClientSecret: 上面生成的Client Secret</span><br><span class=\"line\">    labels: <span class=\"string\">&#x27;gitalk&#x27;</span> github issue 对应的issue标签（上面新建的）</span><br><span class=\"line\">    distractionFreeMode: <span class=\"literal\">true</span>  无干扰模式，不需要更改</span><br><span class=\"line\">    language: zh-CN</span><br><span class=\"line\">    <span class=\"comment\"># proxy 如果设置之后gitalk加载不出来就设置，具体错误是什么忘记了</span></span><br><span class=\"line\">    proxy: <span class=\"string\">&#x27;https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>其他配置文件</li>\n</ol>\n<p>在 【theme】-&gt;【pure】-&gt;【layout】-&gt;【_partial】-&gt;【post】文件夹中，新建gitalk.ejs</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=<span class=\"string\">&quot;stylesheet&quot;</span> href=<span class=\"string\">&quot;https://unpkg.com/gitalk@latest/dist/gitalk.css&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://unpkg.com/gitalk@latest/dist/gitalk.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://priesttomb.github.io/js/md5.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Gitalk</span>(&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">clientID</span>: <span class=\"string\">&#x27;上述&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">clientSecret</span>: <span class=\"string\">&#x27;上述&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">repo</span>: <span class=\"string\">&#x27;xxxx.github.io&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">owner</span>: <span class=\"string\">&#x27;xxxx&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">admin</span>: <span class=\"string\">&#x27;xxxx&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">id</span>: <span class=\"title function_\">md5</span>(location.<span class=\"property\">pathname</span>),</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">distractionFreeMode</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">enable</span>: <span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;).<span class=\"title function_\">render</span>(<span class=\"string\">&#x27;gitalk-container&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>在 【theme】-&gt;【pure】-&gt;【layout】-&gt;【_partial】下的article.ejs新增以下：(我报错enable是undefined，我直接把这个去掉了没想到也行)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (theme.gitalk.enable)&#123; %&gt;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;gitalk-container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t&lt;%- include post/gitalk.ejs %&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>运行</li>\n</ol>\n<p>现在运行hexo s应该就可以了<br />\n第一次登陆需要授权，后续就不需要了<br />\n可能会出现443或者128错误，就配置上面的proxy</p>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h1 id=\"github上配置\"><a class=\"markdownIt-Anchor\" href=\"#github上配置\"></a> Github上配置</h1>\n<ol>\n<li>xxx.github.io仓库内，找到issues-labels</li>\n</ol>\n<p><img src=\"https://image.yayan.xyz/20221020124657.png\" alt=\"\" /><br />\n2. 新建一个label<br />\n<img src=\"https://image.yayan.xyz/20221020124810.png\" alt=\"\" /><br />\n名字一定是<strong>gitalk</strong><br />\n用来存放提交的评论</p>\n<ol start=\"3\">\n<li>新建一个application授权</li>\n</ol>\n<p>打开右上角头像，【Settings】-&gt;【Developer settings】-&gt;【OAuth Apps】-&gt;【New OAuth App】</p>\n<p><img src=\"https://image.yayan.xyz/20221020125047.png\" alt=\"\" /><br />\nHomepage URL和Authorization callback URL<br />\n一定是<strong><a href=\"http://xxxx.github.io\">xxxx.github.io</a></strong> ,其他的随便填。</p>\n<p>复制下来生成的Client ID和Client　secrets<br />\n<img src=\"https://image.yayan.xyz/20221020125332.png\" alt=\"\" /></p>\n<h1 id=\"主题中配置\"><a class=\"markdownIt-Anchor\" href=\"#主题中配置\"></a> 主题中配置</h1>\n<ol>\n<li>配置文件_config.yml中的设置</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comment:</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: gitalk  <span class=\"comment\"># 启用哪种评论系统</span></span><br><span class=\"line\">    gitalk:</span><br><span class=\"line\">    <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span> 开启gitalk评论，不需要配置</span><br><span class=\"line\">    owner: github用户名</span><br><span class=\"line\">    admin: github用户名</span><br><span class=\"line\">    repo: 博客的仓库名称(注意不是地址)</span><br><span class=\"line\">    ClientID: 上面生成的Client ID</span><br><span class=\"line\">    ClientSecret: 上面生成的Client Secret</span><br><span class=\"line\">    labels: <span class=\"string\">&#x27;gitalk&#x27;</span> github issue 对应的issue标签（上面新建的）</span><br><span class=\"line\">    distractionFreeMode: <span class=\"literal\">true</span>  无干扰模式，不需要更改</span><br><span class=\"line\">    language: zh-CN</span><br><span class=\"line\">    <span class=\"comment\"># proxy 如果设置之后gitalk加载不出来就设置，具体错误是什么忘记了</span></span><br><span class=\"line\">    proxy: <span class=\"string\">&#x27;https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>其他配置文件</li>\n</ol>\n<p>在 【theme】-&gt;【pure】-&gt;【layout】-&gt;【_partial】-&gt;【post】文件夹中，新建gitalk.ejs</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=<span class=\"string\">&quot;stylesheet&quot;</span> href=<span class=\"string\">&quot;https://unpkg.com/gitalk@latest/dist/gitalk.css&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://unpkg.com/gitalk@latest/dist/gitalk.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://priesttomb.github.io/js/md5.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Gitalk</span>(&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">clientID</span>: <span class=\"string\">&#x27;上述&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">clientSecret</span>: <span class=\"string\">&#x27;上述&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">repo</span>: <span class=\"string\">&#x27;xxxx.github.io&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">owner</span>: <span class=\"string\">&#x27;xxxx&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">admin</span>: <span class=\"string\">&#x27;xxxx&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">id</span>: <span class=\"title function_\">md5</span>(location.<span class=\"property\">pathname</span>),</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">distractionFreeMode</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">enable</span>: <span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;).<span class=\"title function_\">render</span>(<span class=\"string\">&#x27;gitalk-container&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>在 【theme】-&gt;【pure】-&gt;【layout】-&gt;【_partial】下的article.ejs新增以下：(我报错enable是undefined，我直接把这个去掉了没想到也行)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (theme.gitalk.enable)&#123; %&gt;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;gitalk-container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t&lt;%- include post/gitalk.ejs %&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>运行</li>\n</ol>\n<p>现在运行hexo s应该就可以了<br />\n第一次登陆需要授权，后续就不需要了<br />\n可能会出现443或者128错误，就配置上面的proxy</p>\n"},{"title":"Neo4j浏览器端快捷键","toc":"true# 是否启用内容索引","_content":"\n1、 执行当前命令： ctrl+enter\n2、 历史上一个命令：ctrl+向上箭头\n3、 切换到多行编辑：shift+enter\n4、 将焦点转移到编辑器： /\n5、 切换到全屏编辑： esc","source":"_posts/Neo4j.md","raw":"---\ntitle: Neo4j浏览器端快捷键\ncategories:\n  - 快捷命令\ntags:\n  - Neo4j快捷命令\ntoc: true# 是否启用内容索引\n---\n\n1、 执行当前命令： ctrl+enter\n2、 历史上一个命令：ctrl+向上箭头\n3、 切换到多行编辑：shift+enter\n4、 将焦点转移到编辑器： /\n5、 切换到全屏编辑： esc","slug":"Neo4j","published":1,"date":"2022-11-04T09:24:08.889Z","updated":"2022-11-04T09:26:04.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clee4vham000ic8vq614d9lf8","content":"<p>1、 执行当前命令： ctrl+enter<br />\n2、 历史上一个命令：ctrl+向上箭头<br />\n3、 切换到多行编辑：shift+enter<br />\n4、 将焦点转移到编辑器： /<br />\n5、 切换到全屏编辑： esc</p>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>1、 执行当前命令： ctrl+enter<br />\n2、 历史上一个命令：ctrl+向上箭头<br />\n3、 切换到多行编辑：shift+enter<br />\n4、 将焦点转移到编辑器： /<br />\n5、 切换到全屏编辑： esc</p>\n"},{"title":"Vscode连接阿里云服务器","toc":"true# 是否启用内容索引","_content":"\n有个阿里云ECS服务器，之前一直用宝塔面板连接，方便时方便，但是有时候太占内容了。\n本来服务器就小，一个宝塔占的差不多了。\n后期改成Vscode。\n其他能远程连接的软件很多，但是vscode是个神器，很推荐。\n\n## 方法1：密钥对\n用密钥对个人觉得有点，类似**hexo博客搭建里面连接github**.\n\n1. 在阿里云控制台，找到密钥对，点进去创建密钥对\n![](https://image.yayan.xyz/20221026144912.png)\n\n2. 创建一个新的，名字随便起\n\n![](https://image.yayan.xyz/20221026145018.png)\n\n3. 绑定到实例中，然后重启\n![](https://image.yayan.xyz/20221026145102.png)\n\n**绑定完会自动下载一个.pem文件，尽量存到C:\\user\\username**里面的一个问价夹\n\n如果直接放桌面或者公共文件夹，后期会报一个too open的错误\n\n4. 打开vscode，下载remote-ssh插件，打开ssh的配置文件\n\n![](https://image.yayan.xyz/20221026145352.png)\n应该是**C:\\Users\\username\\\\.ssh\\config**\n在配置文件中添加\n```bash\nHost 起个名字\n  HostName 服务器的ip(192.168.1.1)\n  IdentityFile pem的路径\\xxx.pem\n  User 用户名(root)\n```\n或者点击”+“号，输入命令：\n```bash\nssh -i \"pem路径\" root@服务器ip\n```\n\n5. 配置完成，打开就行了,后面会选操作系统，选个continue，忘记要不要输密码了\n\n> 目前单台云服务器只支持绑定单个密钥对。若您选择已经绑定过其他密钥对的云服务器，新绑定的密钥对将会覆盖以前绑定的密钥对。绑定/解绑密钥对需要在控制台重启ECS实例才能生效\n\n>太麻烦了，而且我自己用的时候很多次显示Permission denied (publickey).无解，\n强烈推荐下面一种方式\n\n## 方法2：用户名密码连接\n\n先贴一个[阿里云官网文档](https://help.aliyun.com/document_detail/71529.html)，通过密码或密钥认证登录Linux实例-为Linux实例开启root用户远程登录\n\n1. 先用VNC连接一下，修改配置文件\n![](https://image.yayan.xyz/20221026150342.png)\n输入用户名密码。\n如果密码忘了，在菜单栏的实例中，修改密码\n![](https://image.yayan.xyz/20221026150532.png)\n\n2. 终端中，输入\n```bash\nvi /etc/ssh/sshd_config\n# 如果不是root，就输入\nsudo vi /etc/ssh/sshd_config\n```\n\n3. 往下翻，基本上在最后\n\n```bash\n# PermitRootLogin no修改为PermitRootLogin yes。\n# PasswordAuthentication no修改为PasswordAuthentication yes。\n# 修改方法：\n# 1. 找到要修改的位置，点击\"i\",就进入编辑模式了\n# 2. 修改改完之后按Esc键，输入:wq保存修改。\n# 如果不是root，输入:wq!保存\n```\n\n4. 重启sshd服务\n```bash\nservice sshd restart\n```\n\n5. 在vscode的远程连接中，修改配置文件或者直接输入\n\n```bash\nHost 起个名字\n  HostName 服务器的ip(192.168.1.1)\n  User 用户名(root)\n# 或者输入 ssh root@服务器ip\n```\n输入实例密码就连接成功了！\n\n\n👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍\n","source":"_posts/Vscode连接阿里云.md","raw":"---\ntitle: Vscode连接阿里云服务器\ncategories:\n  - 杂七杂八配置\ntags:\n  - Vscode连接阿里云服务器\ntoc: true# 是否启用内容索引\n---\n\n有个阿里云ECS服务器，之前一直用宝塔面板连接，方便时方便，但是有时候太占内容了。\n本来服务器就小，一个宝塔占的差不多了。\n后期改成Vscode。\n其他能远程连接的软件很多，但是vscode是个神器，很推荐。\n\n## 方法1：密钥对\n用密钥对个人觉得有点，类似**hexo博客搭建里面连接github**.\n\n1. 在阿里云控制台，找到密钥对，点进去创建密钥对\n![](https://image.yayan.xyz/20221026144912.png)\n\n2. 创建一个新的，名字随便起\n\n![](https://image.yayan.xyz/20221026145018.png)\n\n3. 绑定到实例中，然后重启\n![](https://image.yayan.xyz/20221026145102.png)\n\n**绑定完会自动下载一个.pem文件，尽量存到C:\\user\\username**里面的一个问价夹\n\n如果直接放桌面或者公共文件夹，后期会报一个too open的错误\n\n4. 打开vscode，下载remote-ssh插件，打开ssh的配置文件\n\n![](https://image.yayan.xyz/20221026145352.png)\n应该是**C:\\Users\\username\\\\.ssh\\config**\n在配置文件中添加\n```bash\nHost 起个名字\n  HostName 服务器的ip(192.168.1.1)\n  IdentityFile pem的路径\\xxx.pem\n  User 用户名(root)\n```\n或者点击”+“号，输入命令：\n```bash\nssh -i \"pem路径\" root@服务器ip\n```\n\n5. 配置完成，打开就行了,后面会选操作系统，选个continue，忘记要不要输密码了\n\n> 目前单台云服务器只支持绑定单个密钥对。若您选择已经绑定过其他密钥对的云服务器，新绑定的密钥对将会覆盖以前绑定的密钥对。绑定/解绑密钥对需要在控制台重启ECS实例才能生效\n\n>太麻烦了，而且我自己用的时候很多次显示Permission denied (publickey).无解，\n强烈推荐下面一种方式\n\n## 方法2：用户名密码连接\n\n先贴一个[阿里云官网文档](https://help.aliyun.com/document_detail/71529.html)，通过密码或密钥认证登录Linux实例-为Linux实例开启root用户远程登录\n\n1. 先用VNC连接一下，修改配置文件\n![](https://image.yayan.xyz/20221026150342.png)\n输入用户名密码。\n如果密码忘了，在菜单栏的实例中，修改密码\n![](https://image.yayan.xyz/20221026150532.png)\n\n2. 终端中，输入\n```bash\nvi /etc/ssh/sshd_config\n# 如果不是root，就输入\nsudo vi /etc/ssh/sshd_config\n```\n\n3. 往下翻，基本上在最后\n\n```bash\n# PermitRootLogin no修改为PermitRootLogin yes。\n# PasswordAuthentication no修改为PasswordAuthentication yes。\n# 修改方法：\n# 1. 找到要修改的位置，点击\"i\",就进入编辑模式了\n# 2. 修改改完之后按Esc键，输入:wq保存修改。\n# 如果不是root，输入:wq!保存\n```\n\n4. 重启sshd服务\n```bash\nservice sshd restart\n```\n\n5. 在vscode的远程连接中，修改配置文件或者直接输入\n\n```bash\nHost 起个名字\n  HostName 服务器的ip(192.168.1.1)\n  User 用户名(root)\n# 或者输入 ssh root@服务器ip\n```\n输入实例密码就连接成功了！\n\n\n👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍\n","slug":"Vscode连接阿里云","published":1,"date":"2022-10-26T06:43:08.377Z","updated":"2022-10-26T07:11:48.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clee4vhan000mc8vq4cptdek8","content":"<p>有个阿里云ECS服务器，之前一直用宝塔面板连接，方便时方便，但是有时候太占内容了。<br />\n本来服务器就小，一个宝塔占的差不多了。<br />\n后期改成Vscode。<br />\n其他能远程连接的软件很多，但是vscode是个神器，很推荐。</p>\n<h2 id=\"方法1密钥对\"><a class=\"markdownIt-Anchor\" href=\"#方法1密钥对\"></a> 方法1：密钥对</h2>\n<p>用密钥对个人觉得有点，类似<strong>hexo博客搭建里面连接github</strong>.</p>\n<ol>\n<li>\n<p>在阿里云控制台，找到密钥对，点进去创建密钥对<br />\n<img src=\"https://image.yayan.xyz/20221026144912.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>创建一个新的，名字随便起</p>\n</li>\n</ol>\n<p><img src=\"https://image.yayan.xyz/20221026145018.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>绑定到实例中，然后重启<br />\n<img src=\"https://image.yayan.xyz/20221026145102.png\" alt=\"\" /></li>\n</ol>\n<p><strong>绑定完会自动下载一个.pem文件，尽量存到C:\\user\\username</strong>里面的一个问价夹</p>\n<p>如果直接放桌面或者公共文件夹，后期会报一个too open的错误</p>\n<ol start=\"4\">\n<li>打开vscode，下载remote-ssh插件，打开ssh的配置文件</li>\n</ol>\n<p><img src=\"https://image.yayan.xyz/20221026145352.png\" alt=\"\" /><br />\n应该是<strong>C:\\Users\\username\\.ssh\\config</strong><br />\n在配置文件中添加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host 起个名字</span><br><span class=\"line\">  HostName 服务器的ip(192.168.1.1)</span><br><span class=\"line\">  IdentityFile pem的路径\\xxx.pem</span><br><span class=\"line\">  User 用户名(root)</span><br></pre></td></tr></table></figure>\n<p>或者点击”+“号，输入命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -i <span class=\"string\">&quot;pem路径&quot;</span> root@服务器ip</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>配置完成，打开就行了,后面会选操作系统，选个continue，忘记要不要输密码了</li>\n</ol>\n<blockquote>\n<p>目前单台云服务器只支持绑定单个密钥对。若您选择已经绑定过其他密钥对的云服务器，新绑定的密钥对将会覆盖以前绑定的密钥对。绑定/解绑密钥对需要在控制台重启ECS实例才能生效</p>\n</blockquote>\n<blockquote>\n<p>太麻烦了，而且我自己用的时候很多次显示Permission denied (publickey).无解，<br />\n强烈推荐下面一种方式</p>\n</blockquote>\n<h2 id=\"方法2用户名密码连接\"><a class=\"markdownIt-Anchor\" href=\"#方法2用户名密码连接\"></a> 方法2：用户名密码连接</h2>\n<p>先贴一个<a href=\"https://help.aliyun.com/document_detail/71529.html\">阿里云官网文档</a>，通过密码或密钥认证登录Linux实例-为Linux实例开启root用户远程登录</p>\n<ol>\n<li>\n<p>先用VNC连接一下，修改配置文件<br />\n<img src=\"https://image.yayan.xyz/20221026150342.png\" alt=\"\" /><br />\n输入用户名密码。<br />\n如果密码忘了，在菜单栏的实例中，修改密码<br />\n<img src=\"https://image.yayan.xyz/20221026150532.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>终端中，输入</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/ssh/sshd_config</span><br><span class=\"line\"><span class=\"comment\"># 如果不是root，就输入</span></span><br><span class=\"line\">sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>往下翻，基本上在最后</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># PermitRootLogin no修改为PermitRootLogin yes。</span></span><br><span class=\"line\"><span class=\"comment\"># PasswordAuthentication no修改为PasswordAuthentication yes。</span></span><br><span class=\"line\"><span class=\"comment\"># 修改方法：</span></span><br><span class=\"line\"><span class=\"comment\"># 1. 找到要修改的位置，点击&quot;i&quot;,就进入编辑模式了</span></span><br><span class=\"line\"><span class=\"comment\"># 2. 修改改完之后按Esc键，输入:wq保存修改。</span></span><br><span class=\"line\"><span class=\"comment\"># 如果不是root，输入:wq!保存</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>重启sshd服务</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service sshd restart</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在vscode的远程连接中，修改配置文件或者直接输入</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host 起个名字</span><br><span class=\"line\">  HostName 服务器的ip(192.168.1.1)</span><br><span class=\"line\">  User 用户名(root)</span><br><span class=\"line\"><span class=\"comment\"># 或者输入 ssh root@服务器ip</span></span><br></pre></td></tr></table></figure>\n<p>输入实例密码就连接成功了！</p>\n<p>👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍</p>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>有个阿里云ECS服务器，之前一直用宝塔面板连接，方便时方便，但是有时候太占内容了。<br />\n本来服务器就小，一个宝塔占的差不多了。<br />\n后期改成Vscode。<br />\n其他能远程连接的软件很多，但是vscode是个神器，很推荐。</p>\n<h2 id=\"方法1密钥对\"><a class=\"markdownIt-Anchor\" href=\"#方法1密钥对\"></a> 方法1：密钥对</h2>\n<p>用密钥对个人觉得有点，类似<strong>hexo博客搭建里面连接github</strong>.</p>\n<ol>\n<li>\n<p>在阿里云控制台，找到密钥对，点进去创建密钥对<br />\n<img src=\"https://image.yayan.xyz/20221026144912.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>创建一个新的，名字随便起</p>\n</li>\n</ol>\n<p><img src=\"https://image.yayan.xyz/20221026145018.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>绑定到实例中，然后重启<br />\n<img src=\"https://image.yayan.xyz/20221026145102.png\" alt=\"\" /></li>\n</ol>\n<p><strong>绑定完会自动下载一个.pem文件，尽量存到C:\\user\\username</strong>里面的一个问价夹</p>\n<p>如果直接放桌面或者公共文件夹，后期会报一个too open的错误</p>\n<ol start=\"4\">\n<li>打开vscode，下载remote-ssh插件，打开ssh的配置文件</li>\n</ol>\n<p><img src=\"https://image.yayan.xyz/20221026145352.png\" alt=\"\" /><br />\n应该是<strong>C:\\Users\\username\\.ssh\\config</strong><br />\n在配置文件中添加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host 起个名字</span><br><span class=\"line\">  HostName 服务器的ip(192.168.1.1)</span><br><span class=\"line\">  IdentityFile pem的路径\\xxx.pem</span><br><span class=\"line\">  User 用户名(root)</span><br></pre></td></tr></table></figure>\n<p>或者点击”+“号，输入命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -i <span class=\"string\">&quot;pem路径&quot;</span> root@服务器ip</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>配置完成，打开就行了,后面会选操作系统，选个continue，忘记要不要输密码了</li>\n</ol>\n<blockquote>\n<p>目前单台云服务器只支持绑定单个密钥对。若您选择已经绑定过其他密钥对的云服务器，新绑定的密钥对将会覆盖以前绑定的密钥对。绑定/解绑密钥对需要在控制台重启ECS实例才能生效</p>\n</blockquote>\n<blockquote>\n<p>太麻烦了，而且我自己用的时候很多次显示Permission denied (publickey).无解，<br />\n强烈推荐下面一种方式</p>\n</blockquote>\n<h2 id=\"方法2用户名密码连接\"><a class=\"markdownIt-Anchor\" href=\"#方法2用户名密码连接\"></a> 方法2：用户名密码连接</h2>\n<p>先贴一个<a href=\"https://help.aliyun.com/document_detail/71529.html\">阿里云官网文档</a>，通过密码或密钥认证登录Linux实例-为Linux实例开启root用户远程登录</p>\n<ol>\n<li>\n<p>先用VNC连接一下，修改配置文件<br />\n<img src=\"https://image.yayan.xyz/20221026150342.png\" alt=\"\" /><br />\n输入用户名密码。<br />\n如果密码忘了，在菜单栏的实例中，修改密码<br />\n<img src=\"https://image.yayan.xyz/20221026150532.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>终端中，输入</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/ssh/sshd_config</span><br><span class=\"line\"><span class=\"comment\"># 如果不是root，就输入</span></span><br><span class=\"line\">sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>往下翻，基本上在最后</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># PermitRootLogin no修改为PermitRootLogin yes。</span></span><br><span class=\"line\"><span class=\"comment\"># PasswordAuthentication no修改为PasswordAuthentication yes。</span></span><br><span class=\"line\"><span class=\"comment\"># 修改方法：</span></span><br><span class=\"line\"><span class=\"comment\"># 1. 找到要修改的位置，点击&quot;i&quot;,就进入编辑模式了</span></span><br><span class=\"line\"><span class=\"comment\"># 2. 修改改完之后按Esc键，输入:wq保存修改。</span></span><br><span class=\"line\"><span class=\"comment\"># 如果不是root，输入:wq!保存</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>重启sshd服务</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service sshd restart</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在vscode的远程连接中，修改配置文件或者直接输入</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host 起个名字</span><br><span class=\"line\">  HostName 服务器的ip(192.168.1.1)</span><br><span class=\"line\">  User 用户名(root)</span><br><span class=\"line\"><span class=\"comment\"># 或者输入 ssh root@服务器ip</span></span><br></pre></td></tr></table></figure>\n<p>输入实例密码就连接成功了！</p>\n<p>👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍</p>\n"},{"title":"emoji在markdown的表情大全","toc":"true# 是否启用内容索引","_content":"People\n\n| :bowtie:`:bowtie:`                  | 😄 `:smile:`                                                                                                                                              | 😆 `:laughing:`           |\n| ------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------- |\n| 😊 `:blush:`                        | 😃 `:smiley:`                                                                                                                                             | ☺️ `:relaxed:`          |\n| 😏 `:smirk:`                        | 😍 `:heart_eyes:`                                                                                                                                         | 😘 `:kissing_heart:`      |\n| 😚 `:kissing_closed_eyes:`          | 😳 `:flushed:`                                                                                                                                            | 😌 `:relieved:`           |\n| 😆 `:satisfied:`                    | 😁 `:grin:`                                                                                                                                               | 😉 `:wink:`               |\n| 😜 `:stuck_out_tongue_winking_eye:` | 😝 `:stuck_out_tongue_closed_eyes:`                                                                                                                       | 😀 `:grinning:`           |\n| 😗 `:kissing:`                      | 😙 `:kissing_smiling_eyes:`                                                                                                                               | 😛 `:stuck_out_tongue:`   |\n| 😴 `:sleeping:`                     | 😟 `:worried:`                                                                                                                                            | 😦 `:frowning:`           |\n| 😧 `:anguished:`                    | 😮 `:open_mouth:`                                                                                                                                         | 😬 `:grimacing:`          |\n| 😕 `:confused:`                     | 😯 `:hushed:`                                                                                                                                             | 😑 `:expressionless:`     |\n| 😒 `:unamused:`                     | 😅 `:sweat_smile:`                                                                                                                                        | 😓 `:sweat:`              |\n| 😥 `:disappointed_relieved:`        | 😩 `:weary:`                                                                                                                                              | 😔 `:pensive:`            |\n| 😞 `:disappointed:`                 | 😖 `:confounded:`                                                                                                                                         | 😨 `:fearful:`            |\n| 😰 `:cold_sweat:`                   | 😣 `:persevere:`                                                                                                                                          | 😢 `:cry:`                |\n| 😭 `:sob:`                          | 😂 `:joy:`                                                                                                                                                | 😲 `:astonished:`         |\n| 😱 `:scream:`                       | :neckbeard:`:neckbeard:`                                                                                                                                  | 😫 `:tired_face:`         |\n| 😠 `:angry:`                        | 😡 `:rage:`                                                                                                                                               | 😤 `:triumph:`            |\n| 😪 `:sleepy:`                       | 😋 `:yum:`                                                                                                                                                | 😷 `:mask:`               |\n| 😎 `:sunglasses:`                   | 😵 `:dizzy_face:`                                                                                                                                         | 👿 `:imp:`                |\n| 😈 `:smiling_imp:`                  | 😐 `:neutral_face:`                                                                                                                                       | 😶 `:no_mouth:`           |\n| 😇 `:innocent:`                     | 👽 `:alien:`                                                                                                                                              | 💛 `:yellow_heart:`       |\n| 💙 `:blue_heart:`                   | 💜 `:purple_heart:`                                                                                                                                       | ❤️ `:heart:`            |\n| 💚 `:green_heart:`                  | 💔 `:broken_heart:`                                                                                                                                       | 💓 `:heartbeat:`          |\n| 💗 `:heartpulse:`                   | 💕 `:two_hearts:`                                                                                                                                         | 💞 `:revolving_hearts:`   |\n| 💘 `:cupid:`                        | 💖 `:sparkling_heart:`                                                                                                                                    | ✨ `:sparkles:`           |\n| ⭐️ `:star:`                       | 🌟 `:star2:`                                                                                                                                              | 💫 `:dizzy:`              |\n| 💥 `:boom:`                         | 💥 `:collision:`                                                                                                                                          | 💢 `:anger:`              |\n| ❗️ `:exclamation:`                | ❓ `:question:`                                                                                                                                           | ❕ `:grey_exclamation:`   |\n| ❔ `:grey_question:`                | 💤 `:zzz:`                                                                                                                                                | 💨 `:dash:`               |\n| 💦 `:sweat_drops:`                  | 🎶 `:notes:`                                                                                                                                              | 🎵 `:musical_note:`       |\n| 🔥 `:fire:`                         | 💩 `:hankey:`                                                                                                                                             | 💩 `:poop:`               |\n| 💩 `:shit:`                         | 👍 `:+1:`                                                                                                                                                 | 👍 `:thumbsup:`           |\n| 👎 `:-1:`                           | 👎 `:thumbsdown:`                                                                                                                                         | 👌 `:ok_hand:`            |\n| 👊 `:punch:`                        | 👊 `:facepunch:`                                                                                                                                          | ✊ `:fist:`               |\n| ✌️ `:v:`                          | 👋 `:wave:`                                                                                                                                               | ✋ `:hand:`               |\n| ✋ `:raised_hand:`                  | 👐 `:open_hands:`                                                                                                                                         | ☝️ `:point_up:`         |\n| 👇 `:point_down:`                   | 👈 `:point_left:`                                                                                                                                         | 👉 `:point_right:`        |\n| 🙌 `:raised_hands:`                 | 🙏 `:pray:`                                                                                                                                               | 👆 `:point_up_2:`         |\n| 👏 `:clap:`                         | 💪 `:muscle:`                                                                                                                                             | 🤘 `:metal:`              |\n| 🖕 `:fu:`                           | 🚶 `:walking:`                                                                                                                                            | 🏃 `:runner:`             |\n| 🏃 `:running:`                      | 👫 `:couple:`                                                                                                                                             | 👪 `:family:`             |\n| 👬 `:two_men_holding_hands:`        | 👭 `:two_women_holding_hands:`                                                                                                                            | 💃 `:dancer:`             |\n| 👯 `:dancers:`                      | 🙆 `:ok_woman:`                                                                                                                                           | 🙅 `:no_good:`            |\n| 💁 `:information_desk_person:`      | 🙋 `:raising_hand:`                                                                                                                                       | 👰 `:bride_with_veil:`    |\n| 🙎 `:person_with_pouting_face:`     | 🙍 `:person_frowning:`                                                                                                                                    | 🙇 `:bow:`                |\n| :couplekiss:`:couplekiss:`          | 💑 `:couple_with_heart:`                                                                                                                                  | 💆 `:massage:`            |\n| 💇 `:haircut:`                      | 💅 `:nail_care:`                                                                                                                                          | 👦 `:boy:`                |\n| 👧 `:girl:`                         | 👩 `:woman:`                                                                                                                                              | 👨 `:man:`                |\n| 👶 `:baby:`                         | 👵 `:older_woman:`                                                                                                                                        | 👴 `:older_man:`          |\n| 👱 `:person_with_blond_hair:`       | 👲 `:man_with_gua_pi_mao:`                                                                                                                                | 👳 `:man_with_turban:`    |\n| 👷 `:construction_worker:`          | 👮 `:cop:`                                                                                                                                                | 👼 `:angel:`              |\n| 👸 `:princess:`                     | 😺 `:smiley_cat:`                                                                                                                                         | 😸 `:smile_cat:`          |\n| 😻 `:heart_eyes_cat:`               | 😽 `:kissing_cat:`                                                                                                                                        | 😼 `:smirk_cat:`          |\n| 🙀 `:scream_cat:`                   | 😿 `:crying_cat_face:`                                                                                                                                    | 😹 `:joy_cat:`            |\n| 😾 `:pouting_cat:`                  | 👹 `:japanese_ogre:`                                                                                                                                      | 👺 `:japanese_goblin:`    |\n| 🙈 `:see_no_evil:`                  | 🙉 `:hear_no_evil:`                                                                                                                                       | 🙊 `:speak_no_evil:`      |\n| 💂 `:guardsman:`                    | 💀 `:skull:`                                                                                                                                              | 🐾 `:feet:`               |\n| 👄 `:lips:`                         | 💋 `:kiss:`                                                                                                                                               | 💧 `:droplet:`            |\n| 👂 `:ear:`                          | 👀 `:eyes:`                                                                                                                                               | 👃 `:nose:`               |\n| 👅 `:tongue:`                       | 💌 `:love_letter:`                                                                                                                                        | 👤 `:bust_in_silhouette:` |\n| 👥 `:busts_in_silhouette:`          | 💬 `:speech_balloon:`                                                                                                                                     | 💭 `:thought_balloon:`    |\n| :feelsgood:`:feelsgood:`            | :finnadie:`:finnadie:`                                                                                                                                    | :goberserk:`:goberserk:`  |\n| :godmode:`:godmode:`                | :hurtrealbad:`:hurtrealbad:`                                                                                                                              | :rage1:`:rage1:`          |\n| :rage2:`:rage2:`                    | :rage3:`:rage3:`                                                                                                                                          | :rage4:`:rage4:`          |\n| :suspect:`:suspect:`                | :trollface: `:trollface:` |                             |\n\nNature\n\n| ☀️ `:sunny:`                      | ☔️ `:umbrella:`           | ☁️ `:cloud:`                                                                                                                                  |\n| ------------------------------------- | ----------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |\n| ❄️ `:snowflake:`                  | ⛄️ `:snowman:`            | ⚡️ `:zap:`                                                                                                                                    |\n| 🌀 `:cyclone:`                      | 🌁 `:foggy:`                | 🌊 `:ocean:`                                                                                                                                    |\n| 🐱 `:cat:`                          | 🐶 `:dog:`                  | 🐭 `:mouse:`                                                                                                                                    |\n| 🐹 `:hamster:`                      | 🐰 `:rabbit:`               | 🐺 `:wolf:`                                                                                                                                     |\n| 🐸 `:frog:`                         | 🐯 `:tiger:`                | 🐨 `:koala:`                                                                                                                                    |\n| 🐻 `:bear:`                         | 🐷 `:pig:`                  | 🐽 `:pig_nose:`                                                                                                                                 |\n| 🐮 `:cow:`                          | 🐗 `:boar:`                 | 🐵 `:monkey_face:`                                                                                                                              |\n| 🐒 `:monkey:`                       | 🐴 `:horse:`                | 🐎 `:racehorse:`                                                                                                                                |\n| 🐫 `:camel:`                        | 🐑 `:sheep:`                | 🐘 `:elephant:`                                                                                                                                 |\n| 🐼 `:panda_face:`                   | 🐍 `:snake:`                | 🐦 `:bird:`                                                                                                                                     |\n| 🐤 `:baby_chick:`                   | 🐥 `:hatched_chick:`        | 🐣 `:hatching_chick:`                                                                                                                           |\n| 🐔 `:chicken:`                      | 🐧 `:penguin:`              | 🐢 `:turtle:`                                                                                                                                   |\n| 🐛 `:bug:`                          | 🐝 `:honeybee:`             | 🐜 `:ant:`                                                                                                                                      |\n| 🐞 `:beetle:`                       | 🐌 `:snail:`                | 🐙 `:octopus:`                                                                                                                                  |\n| 🐠 `:tropical_fish:`                | 🐟 `:fish:`                 | 🐳 `:whale:`                                                                                                                                    |\n| 🐋 `:whale2:`                       | 🐬 `:dolphin:`              | 🐄 `:cow2:`                                                                                                                                     |\n| 🐏 `:ram:`                          | 🐀 `:rat:`                  | 🐃 `:water_buffalo:`                                                                                                                            |\n| 🐅 `:tiger2:`                       | 🐇 `:rabbit2:`              | 🐉 `:dragon:`                                                                                                                                   |\n| 🐐 `:goat:`                         | 🐓 `:rooster:`              | 🐕 `:dog2:`                                                                                                                                     |\n| 🐖 `:pig2:`                         | 🐁 `:mouse2:`               | 🐂 `:ox:`                                                                                                                                       |\n| 🐲 `:dragon_face:`                  | 🐡 `:blowfish:`             | 🐊 `:crocodile:`                                                                                                                                |\n| 🐪 `:dromedary_camel:`              | 🐆 `:leopard:`              | 🐈 `:cat2:`                                                                                                                                     |\n| 🐩 `:poodle:`                       | 🐾 `:paw_prints:`           | 💐 `:bouquet:`                                                                                                                                  |\n| 🌸 `:cherry_blossom:`               | 🌷 `:tulip:`                | 🍀 `:four_leaf_clover:`                                                                                                                         |\n| 🌹 `:rose:`                         | 🌻 `:sunflower:`            | 🌺 `:hibiscus:`                                                                                                                                 |\n| 🍁 `:maple_leaf:`                   | 🍃 `:leaves:`               | 🍂 `:fallen_leaf:`                                                                                                                              |\n| 🌿 `:herb:`                         | 🍄 `:mushroom:`             | 🌵 `:cactus:`                                                                                                                                   |\n| 🌴 `:palm_tree:`                    | 🌲 `:evergreen_tree:`       | 🌳 `:deciduous_tree:`                                                                                                                           |\n| 🌰 `:chestnut:`                     | 🌱 `:seedling:`             | 🌼 `:blossom:`                                                                                                                                  |\n| 🌾 `:ear_of_rice:`                  | 🐚 `:shell:`                | 🌐 `:globe_with_meridians:`                                                                                                                     |\n| 🌞 `:sun_with_face:`                | 🌝 `:full_moon_with_face:`  | 🌚 `:new_moon_with_face:`                                                                                                                       |\n| 🌑 `:new_moon:`                     | 🌒 `:waxing_crescent_moon:` | 🌓 `:first_quarter_moon:`                                                                                                                       |\n| 🌔 `:waxing_gibbous_moon:`          | 🌕 `:full_moon:`            | 🌖 `:waning_gibbous_moon:`                                                                                                                      |\n| 🌗 `:last_quarter_moon:`            | 🌘 `:waning_crescent_moon:` | 🌜 `:last_quarter_moon_with_face:`                                                                                                              |\n| 🌛 `:first_quarter_moon_with_face:` | 🌔 `:moon:`                 | 🌍 `:earth_africa:`                                                                                                                             |\n| 🌎 `:earth_americas:`               | 🌏 `:earth_asia:`           | 🌋 `:volcano:`                                                                                                                                  |\n| 🌌 `:milky_way:`                    | ⛅️ `:partly_sunny:`       | :octocat: `:octocat:` |\n| :squirrel:`:squirrel:`              |                               |                                                                                                                                                   |\n\nObjects\n\n| 🎍 `:bamboo:`                         | 💝 `:gift_heart:`                 | 🎎 `:dolls:`                  |\n| --------------------------------------- | ----------------------------------- | ------------------------------- |\n| 🎒 `:school_satchel:`                 | 🎓 `:mortar_board:`               | 🎏 `:flags:`                  |\n| 🎆 `:fireworks:`                      | 🎇 `:sparkler:`                   | 🎐 `:wind_chime:`             |\n| 🎑 `:rice_scene:`                     | 🎃 `:jack_o_lantern:`             | 👻 `:ghost:`                  |\n| 🎅 `:santa:`                          | 🎄 `:christmas_tree:`             | 🎁 `:gift:`                   |\n| 🔔 `:bell:`                           | 🔕 `:no_bell:`                    | 🎋 `:tanabata_tree:`          |\n| 🎉 `:tada:`                           | 🎊 `:confetti_ball:`              | 🎈 `:balloon:`                |\n| 🔮 `:crystal_ball:`                   | 💿 `:cd:`                         | 📀 `:dvd:`                    |\n| 💾 `:floppy_disk:`                    | 📷 `:camera:`                     | 📹 `:video_camera:`           |\n| 🎥 `:movie_camera:`                   | 💻 `:computer:`                   | 📺 `:tv:`                     |\n| 📱 `:iphone:`                         | ☎️ `:phone:`                    | ☎️ `:telephone:`            |\n| 📞 `:telephone_receiver:`             | 📟 `:pager:`                      | 📠 `:fax:`                    |\n| 💽 `:minidisc:`                       | 📼 `:vhs:`                        | 🔉 `:sound:`                  |\n| 🔈 `:speaker:`                        | 🔇 `:mute:`                       | 📢 `:loudspeaker:`            |\n| 📣 `:mega:`                           | ⌛️ `:hourglass:`                | ⏳ `:hourglass_flowing_sand:` |\n| ⏰ `:alarm_clock:`                    | ⌚️ `:watch:`                    | 📻 `:radio:`                  |\n| 📡 `:satellite:`                      | ➿ `:loop:`                       | 🔍 `:mag:`                    |\n| 🔎 `:mag_right:`                      | 🔓 `:unlock:`                     | 🔒 `:lock:`                   |\n| 🔏 `:lock_with_ink_pen:`              | 🔐 `:closed_lock_with_key:`       | 🔑 `:key:`                    |\n| 💡 `:bulb:`                           | 🔦 `:flashlight:`                 | 🔆 `:high_brightness:`        |\n| 🔅 `:low_brightness:`                 | 🔌 `:electric_plug:`              | 🔋 `:battery:`                |\n| 📲 `:calling:`                        | ✉️ `:email:`                    | 📫 `:mailbox:`                |\n| 📮 `:postbox:`                        | 🛀 `:bath:`                       | 🛁 `:bathtub:`                |\n| 🚿 `:shower:`                         | 🚽 `:toilet:`                     | 🔧 `:wrench:`                 |\n| 🔩 `:nut_and_bolt:`                   | 🔨 `:hammer:`                     | 💺 `:seat:`                   |\n| 💰 `:moneybag:`                       | 💴 `:yen:`                        | 💵 `:dollar:`                 |\n| 💷 `:pound:`                          | 💶 `:euro:`                       | 💳 `:credit_card:`            |\n| 💸 `:money_with_wings:`               | 📧 `:e-mail:`                     | 📥 `:inbox_tray:`             |\n| 📤 `:outbox_tray:`                    | ✉️ `:envelope:`                 | 📨 `:incoming_envelope:`      |\n| 📯 `:postal_horn:`                    | 📪 `:mailbox_closed:`             | 📬 `:mailbox_with_mail:`      |\n| 📭 `:mailbox_with_no_mail:`           | 🚪 `:door:`                       | 🚬 `:smoking:`                |\n| 💣 `:bomb:`                           | 🔫 `:gun:`                        | 🔪 `:hocho:`                  |\n| 💊 `:pill:`                           | 💉 `:syringe:`                    | 📄 `:page_facing_up:`         |\n| 📃 `:page_with_curl:`                 | 📑 `:bookmark_tabs:`              | 📊 `:bar_chart:`              |\n| 📈 `:chart_with_upwards_trend:`       | 📉 `:chart_with_downwards_trend:` | 📜 `:scroll:`                 |\n| 📋 `:clipboard:`                      | 📆 `:calendar:`                   | 📅 `:date:`                   |\n| 📇 `:card_index:`                     | 📁 `:file_folder:`                | 📂 `:open_file_folder:`       |\n| ✂️ `:scissors:`                     | 📌 `:pushpin:`                    | 📎 `:paperclip:`              |\n| ✒️ `:black_nib:`                    | ✏️ `:pencil2:`                  | 📏 `:straight_ruler:`         |\n| 📐 `:triangular_ruler:`               | 📕 `:closed_book:`                | 📗 `:green_book:`             |\n| 📘 `:blue_book:`                      | 📙 `:orange_book:`                | 📓 `:notebook:`               |\n| 📔 `:notebook_with_decorative_cover:` | 📒 `:ledger:`                     | 📚 `:books:`                  |\n| 🔖 `:bookmark:`                       | 📛 `:name_badge:`                 | 🔬 `:microscope:`             |\n| 🔭 `:telescope:`                      | 📰 `:newspaper:`                  | 🏈 `:football:`               |\n| 🏀 `:basketball:`                     | ⚽️ `:soccer:`                   | ⚾️ `:baseball:`             |\n| 🎾 `:tennis:`                         | 🎱 `:8ball:`                      | 🏉 `:rugby_football:`         |\n| 🎳 `:bowling:`                        | ⛳️ `:golf:`                     | 🚵 `:mountain_bicyclist:`     |\n| 🚴 `:bicyclist:`                      | 🏇 `:horse_racing:`               | 🏂 `:snowboarder:`            |\n| 🏊 `:swimmer:`                        | 🏄 `:surfer:`                     | 🎿 `:ski:`                    |\n| ♠️ `:spades:`                       | ♥️ `:hearts:`                   | ♣️ `:clubs:`                |\n| ♦️ `:diamonds:`                     | 💎 `:gem:`                        | 💍 `:ring:`                   |\n| 🏆 `:trophy:`                         | 🎼 `:musical_score:`              | 🎹 `:musical_keyboard:`       |\n| 🎻 `:violin:`                         | 👾 `:space_invader:`              | 🎮 `:video_game:`             |\n| 🃏 `:black_joker:`                    | 🎴 `:flower_playing_cards:`       | 🎲 `:game_die:`               |\n| 🎯 `:dart:`                           | 🀄️ `:mahjong:`                  | 🎬 `:clapper:`                |\n| 📝 `:memo:`                           | 📝 `:pencil:`                     | 📖 `:book:`                   |\n| 🎨 `:art:`                            | 🎤 `:microphone:`                 | 🎧 `:headphones:`             |\n| 🎺 `:trumpet:`                        | 🎷 `:saxophone:`                  | 🎸 `:guitar:`                 |\n| 👞 `:shoe:`                           | 👡 `:sandal:`                     | 👠 `:high_heel:`              |\n| 💄 `:lipstick:`                       | 👢 `:boot:`                       | 👕 `:shirt:`                  |\n| 👕 `:tshirt:`                         | 👔 `:necktie:`                    | 👚 `:womans_clothes:`         |\n| 👗 `:dress:`                          | 🎽 `:running_shirt_with_sash:`    | 👖 `:jeans:`                  |\n| 👘 `:kimono:`                         | 👙 `:bikini:`                     | 🎀 `:ribbon:`                 |\n| 🎩 `:tophat:`                         | 👑 `:crown:`                      | 👒 `:womans_hat:`             |\n| 👞 `:mans_shoe:`                      | 🌂 `:closed_umbrella:`            | 💼 `:briefcase:`              |\n| 👜 `:handbag:`                        | 👝 `:pouch:`                      | 👛 `:purse:`                  |\n| 👓 `:eyeglasses:`                     | 🎣 `:fishing_pole_and_fish:`      | ☕️ `:coffee:`               |\n| 🍵 `:tea:`                            | 🍶 `:sake:`                       | 🍼 `:baby_bottle:`            |\n| 🍺 `:beer:`                           | 🍻 `:beers:`                      | 🍸 `:cocktail:`               |\n| 🍹 `:tropical_drink:`                 | 🍷 `:wine_glass:`                 | 🍴 `:fork_and_knife:`         |\n| 🍕 `:pizza:`                          | 🍔 `:hamburger:`                  | 🍟 `:fries:`                  |\n| 🍗 `:poultry_leg:`                    | 🍖 `:meat_on_bone:`               | 🍝 `:spaghetti:`              |\n| 🍛 `:curry:`                          | 🍤 `:fried_shrimp:`               | 🍱 `:bento:`                  |\n| 🍣 `:sushi:`                          | 🍥 `:fish_cake:`                  | 🍙 `:rice_ball:`              |\n| 🍘 `:rice_cracker:`                   | 🍚 `:rice:`                       | 🍜 `:ramen:`                  |\n| 🍲 `:stew:`                           | 🍢 `:oden:`                       | 🍡 `:dango:`                  |\n| 🥚 `:egg:`                            | 🍞 `:bread:`                      | 🍩 `:doughnut:`               |\n| 🍮 `:custard:`                        | 🍦 `:icecream:`                   | 🍨 `:ice_cream:`              |\n| 🍧 `:shaved_ice:`                     | 🎂 `:birthday:`                   | 🍰 `:cake:`                   |\n| 🍪 `:cookie:`                         | 🍫 `:chocolate_bar:`              | 🍬 `:candy:`                  |\n| 🍭 `:lollipop:`                       | 🍯 `:honey_pot:`                  | 🍎 `:apple:`                  |\n| 🍏 `:green_apple:`                    | 🍊 `:tangerine:`                  | 🍋 `:lemon:`                  |\n| 🍒 `:cherries:`                       | 🍇 `:grapes:`                     | 🍉 `:watermelon:`             |\n| 🍓 `:strawberry:`                     | 🍑 `:peach:`                      | 🍈 `:melon:`                  |\n| 🍌 `:banana:`                         | 🍐 `:pear:`                       | 🍍 `:pineapple:`              |\n| 🍠 `:sweet_potato:`                   | 🍆 `:eggplant:`                   | 🍅 `:tomato:`                 |\n| 🌽 `:corn:`                           |                                     |                                 |\n\nPlaces\n\n| 🏠 `:house:`               | 🏡 `:house_with_garden:`       | 🏫 `:school:`                 |\n| ---------------------------- | -------------------------------- | ------------------------------- |\n| 🏢 `:office:`              | 🏣 `:post_office:`             | 🏥 `:hospital:`               |\n| 🏦 `:bank:`                | 🏪 `:convenience_store:`       | 🏩 `:love_hotel:`             |\n| 🏨 `:hotel:`               | 💒 `:wedding:`                 | ⛪️ `:church:`               |\n| 🏬 `:department_store:`    | 🏤 `:european_post_office:`    | 🌇 `:city_sunrise:`           |\n| 🌆 `:city_sunset:`         | 🏯 `:japanese_castle:`         | 🏰 `:european_castle:`        |\n| ⛺️ `:tent:`              | 🏭 `:factory:`                 | 🗼 `:tokyo_tower:`            |\n| 🗾 `:japan:`               | 🗻 `:mount_fuji:`              | 🌄 `:sunrise_over_mountains:` |\n| 🌅 `:sunrise:`             | 🌠 `:stars:`                   | 🗽 `:statue_of_liberty:`      |\n| 🌉 `:bridge_at_night:`     | 🎠 `:carousel_horse:`          | 🌈 `:rainbow:`                |\n| 🎡 `:ferris_wheel:`        | ⛲️ `:fountain:`              | 🎢 `:roller_coaster:`         |\n| 🚢 `:ship:`                | 🚤 `:speedboat:`               | ⛵️ `:boat:`                 |\n| ⛵️ `:sailboat:`          | 🚣 `:rowboat:`                 | ⚓️ `:anchor:`               |\n| 🚀 `:rocket:`              | ✈️ `:airplane:`              | 🚁 `:helicopter:`             |\n| 🚂 `:steam_locomotive:`    | 🚊 `:tram:`                    | 🚞 `:mountain_railway:`       |\n| 🚲 `:bike:`                | 🚡 `:aerial_tramway:`          | 🚟 `:suspension_railway:`     |\n| 🚠 `:mountain_cableway:`   | 🚜 `:tractor:`                 | 🚙 `:blue_car:`               |\n| 🚘 `:oncoming_automobile:` | 🚗 `:car:`                     | 🚗 `:red_car:`                |\n| 🚕 `:taxi:`                | 🚖 `:oncoming_taxi:`           | 🚛 `:articulated_lorry:`      |\n| 🚌 `:bus:`                 | 🚍 `:oncoming_bus:`            | 🚨 `:rotating_light:`         |\n| 🚓 `:police_car:`          | 🚔 `:oncoming_police_car:`     | 🚒 `:fire_engine:`            |\n| 🚑 `:ambulance:`           | 🚐 `:minibus:`                 | 🚚 `:truck:`                  |\n| 🚋 `:train:`               | 🚉 `:station:`                 | 🚆 `:train2:`                 |\n| 🚅 `:bullettrain_front:`   | 🚄 `:bullettrain_side:`        | 🚈 `:light_rail:`             |\n| 🚝 `:monorail:`            | 🚃 `:railway_car:`             | 🚎 `:trolleybus:`             |\n| 🎫 `:ticket:`              | ⛽️ `:fuelpump:`              | 🚦 `:vertical_traffic_light:` |\n| 🚥 `:traffic_light:`       | ⚠️ `:warning:`               | 🚧 `:construction:`           |\n| 🔰 `:beginner:`            | 🏧 `:atm:`                     | 🎰 `:slot_machine:`           |\n| 🚏 `:busstop:`             | 💈 `:barber:`                  | ♨️ `:hotsprings:`           |\n| 🏁 `:checkered_flag:`      | 🎌 `:crossed_flags:`           | 🏮 `:izakaya_lantern:`        |\n| 🗿 `:moyai:`               | 🎪 `:circus_tent:`             | 🎭 `:performing_arts:`        |\n| 📍 `:round_pushpin:`       | 🚩 `:triangular_flag_on_post:` | 🇯🇵 `:jp:`                   |\n| 🇰🇷 `:kr:`                | 🇨🇳 `:cn:`                    | 🇺🇸 `:us:`                   |\n| 🇫🇷 `:fr:`                | 🇪🇸 `:es:`                    | 🇮🇹 `:it:`                   |\n| 🇷🇺 `:ru:`                | 🇬🇧 `:gb:`                    | 🇬🇧 `:uk:`                   |\n| 🇩🇪 `:de:`                |                                  |                                 |\n\nSymbols\n\n| 1️⃣ `:one:`                          | 2️⃣ `:two:`                      | 3️⃣ `:three:`                    |\n| ---------------------------------------- | ------------------------------------ | ------------------------------------ |\n| 4️⃣ `:four:`                         | 5️⃣ `:five:`                     | 6️⃣ `:six:`                      |\n| 7️⃣ `:seven:`                        | 8️⃣ `:eight:`                    | 9️⃣ `:nine:`                     |\n| 🔟 `:keycap_ten:`                      | 🔢 `:1234:`                        | 0️⃣ `:zero:`                     |\n| #️⃣ `:hash:`                         | 🔣 `:symbols:`                     | ◀️ `:arrow_backward:`            |\n| ⬇️ `:arrow_down:`                    | ▶️ `:arrow_forward:`             | ⬅️ `:arrow_left:`                |\n| 🔠 `:capital_abcd:`                    | 🔡 `:abcd:`                        | 🔤 `:abc:`                         |\n| ↙️ `:arrow_lower_left:`              | ↘️ `:arrow_lower_right:`         | ➡️ `:arrow_right:`               |\n| ⬆️ `:arrow_up:`                      | ↖️ `:arrow_upper_left:`          | ↗️ `:arrow_upper_right:`         |\n| ⏬ `:arrow_double_down:`               | ⏫ `:arrow_double_up:`             | 🔽 `:arrow_down_small:`            |\n| ⤵️ `:arrow_heading_down:`            | ⤴️ `:arrow_heading_up:`          | ↩️ `:leftwards_arrow_with_hook:` |\n| ↪️ `:arrow_right_hook:`              | ↔️ `:left_right_arrow:`          | ↕️ `:arrow_up_down:`             |\n| 🔼 `:arrow_up_small:`                  | 🔃 `:arrows_clockwise:`            | 🔄 `:arrows_counterclockwise:`     |\n| ⏪ `:rewind:`                          | ⏩ `:fast_forward:`                | ℹ️ `:information_source:`        |\n| 🆗 `:ok:`                              | 🔀 `:twisted_rightwards_arrows:`   | 🔁 `:repeat:`                      |\n| 🔂 `:repeat_one:`                      | 🆕 `:new:`                         | 🔝 `:top:`                         |\n| 🆙 `:up:`                              | 🆒 `:cool:`                        | 🆓 `:free:`                        |\n| 🆖 `:ng:`                              | 🎦 `:cinema:`                      | 🈁 `:koko:`                        |\n| 📶 `:signal_strength:`                 | 🈹 `:u5272:`                       | 🈴 `:u5408:`                       |\n| 🈺 `:u55b6:`                           | 🈯️ `:u6307:`                     | 🈷️ `:u6708:`                     |\n| 🈶 `:u6709:`                           | 🈵 `:u6e80:`                       | 🈚️ `:u7121:`                     |\n| 🈸 `:u7533:`                           | 🈳 `:u7a7a:`                       | 🈲 `:u7981:`                       |\n| 🈂️ `:sa:`                            | 🚻 `:restroom:`                    | 🚹 `:mens:`                        |\n| 🚺 `:womens:`                          | 🚼 `:baby_symbol:`                 | 🚭 `:no_smoking:`                  |\n| 🅿️ `:parking:`                       | ♿️ `:wheelchair:`                | 🚇 `:metro:`                       |\n| 🛄 `:baggage_claim:`                   | :accept:`:accept:`                 | 🚾 `:wc:`                          |\n| 🚰 `:potable_water:`                   | 🚮 `:put_litter_in_its_place:`     | ㊙️ `:secret:`                    |\n| ㊗️ `:congratulations:`               | Ⓜ️ `:m:`                         | 🛂 `:passport_control:`            |\n| 🛅 `:left_luggage:`                    | 🛃 `:customs:`                     | 🉐 `:ideograph_advantage:`         |\n| 🆑 `:cl:`                              | 🆘 `:sos:`                         | 🆔 `:id:`                          |\n| 🚫 `:no_entry_sign:`                   | 🔞 `:underage:`                    | 📵 `:no_mobile_phones:`            |\n| 🚯 `:do_not_litter:`                   | 🚱 `:non-potable_water:`           | 🚳 `:no_bicycles:`                 |\n| 🚷 `:no_pedestrians:`                  | 🚸 `:children_crossing:`           | ⛔️ `:no_entry:`                  |\n| ✳️ `:eight_spoked_asterisk:`         | ✴️ `:eight_pointed_black_star:`  | 💟 `:heart_decoration:`            |\n| 🆚 `:vs:`                              | 📳 `:vibration_mode:`              | 📴 `:mobile_phone_off:`            |\n| 💹 `:chart:`                           | 💱 `:currency_exchange:`           | ♈️ `:aries:`                     |\n| ♉️ `:taurus:`                        | ♊️ `:gemini:`                    | ♋️ `:cancer:`                    |\n| ♌️ `:leo:`                           | ♍️ `:virgo:`                     | ♎️ `:libra:`                     |\n| ♏️ `:scorpius:`                      | ♐️ `:sagittarius:`               | ♑️ `:capricorn:`                 |\n| ♒️ `:aquarius:`                      | ♓️ `:pisces:`                    | ⛎ `:ophiuchus:`                   |\n| 🔯 `:six_pointed_star:`                | ❎ `:negative_squared_cross_mark:` | 🅰️ `:a:`                         |\n| 🅱️ `:b:`                             | 🆎 `:ab:`                          | 🅾️ `:o2:`                        |\n| 💠 `:diamond_shape_with_a_dot_inside:` | ♻️ `:recycle:`                   | 🔚 `:end:`                         |\n| 🔛 `:on:`                              | 🔜 `:soon:`                        | 🕐 `:clock1:`                      |\n| 🕜 `:clock130:`                        | 🕙 `:clock10:`                     | 🕥 `:clock1030:`                   |\n| 🕚 `:clock11:`                         | 🕦 `:clock1130:`                   | 🕛 `:clock12:`                     |\n| 🕧 `:clock1230:`                       | 🕑 `:clock2:`                      | 🕝 `:clock230:`                    |\n| 🕒 `:clock3:`                          | 🕞 `:clock330:`                    | 🕓 `:clock4:`                      |\n| 🕟 `:clock430:`                        | 🕔 `:clock5:`                      | 🕠 `:clock530:`                    |\n| 🕕 `:clock6:`                          | 🕡 `:clock630:`                    | 🕖 `:clock7:`                      |\n| 🕢 `:clock730:`                        | 🕗 `:clock8:`                      | 🕣 `:clock830:`                    |\n| 🕘 `:clock9:`                          | 🕤 `:clock930:`                    | 💲 `:heavy_dollar_sign:`           |\n| ©️ `:copyright:`                     | ®️ `:registered:`                | ™️ `:tm:`                        |\n| ❌ `:x:`                               | ❗️ `:heavy_exclamation_mark:`    | ‼️ `:bangbang:`                  |\n| ⁉️ `:interrobang:`                   | ⭕️ `:o:`                         | ✖️ `:heavy_multiplication_x:`    |\n| ➕ `:heavy_plus_sign:`                 | ➖ `:heavy_minus_sign:`            | ➗ `:heavy_division_sign:`         |\n| 💮 `:white_flower:`                    | 💯 `:100:`                         | ✔️ `:heavy_check_mark:`          |\n| ☑️ `:ballot_box_with_check:`         | 🔘 `:radio_button:`                | 🔗 `:link:`                        |\n| ➰ `:curly_loop:`                      | 〰️ `:wavy_dash:`                 | 〽️ `:part_alternation_mark:`     |\n| 🔱 `:trident:`                         | :black_square:`:black_square:`     | :white_square:`:white_square:`     |\n| ✅ `:white_check_mark:`                | 🔲 `:black_square_button:`         | 🔳 `:white_square_button:`         |\n| ⚫️ `:black_circle:`                  | ⚪️ `:white_circle:`              | 🔴 `:red_circle:`                  |\n| 🔵 `:large_blue_circle:`               | 🔷 `:large_blue_diamond:`          | 🔶 `:large_orange_diamond:`        |\n| 🔹 `:small_blue_diamond:`              | 🔸 `:small_orange_diamond:`        | 🔺 `:small_red_triangle:`          |\n| 🔻 `:small_red_triangle_down:`         | :shipit:`:shipit:`                 |                                      |\n","source":"_posts/emoji.md","raw":"---\ntitle: emoji在markdown的表情大全\ncategories:\n  - 快捷命令\ntags:\n  - 快捷键\ntoc: true# 是否启用内容索引\n---\nPeople\n\n| :bowtie:`:bowtie:`                  | 😄 `:smile:`                                                                                                                                              | 😆 `:laughing:`           |\n| ------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------- |\n| 😊 `:blush:`                        | 😃 `:smiley:`                                                                                                                                             | ☺️ `:relaxed:`          |\n| 😏 `:smirk:`                        | 😍 `:heart_eyes:`                                                                                                                                         | 😘 `:kissing_heart:`      |\n| 😚 `:kissing_closed_eyes:`          | 😳 `:flushed:`                                                                                                                                            | 😌 `:relieved:`           |\n| 😆 `:satisfied:`                    | 😁 `:grin:`                                                                                                                                               | 😉 `:wink:`               |\n| 😜 `:stuck_out_tongue_winking_eye:` | 😝 `:stuck_out_tongue_closed_eyes:`                                                                                                                       | 😀 `:grinning:`           |\n| 😗 `:kissing:`                      | 😙 `:kissing_smiling_eyes:`                                                                                                                               | 😛 `:stuck_out_tongue:`   |\n| 😴 `:sleeping:`                     | 😟 `:worried:`                                                                                                                                            | 😦 `:frowning:`           |\n| 😧 `:anguished:`                    | 😮 `:open_mouth:`                                                                                                                                         | 😬 `:grimacing:`          |\n| 😕 `:confused:`                     | 😯 `:hushed:`                                                                                                                                             | 😑 `:expressionless:`     |\n| 😒 `:unamused:`                     | 😅 `:sweat_smile:`                                                                                                                                        | 😓 `:sweat:`              |\n| 😥 `:disappointed_relieved:`        | 😩 `:weary:`                                                                                                                                              | 😔 `:pensive:`            |\n| 😞 `:disappointed:`                 | 😖 `:confounded:`                                                                                                                                         | 😨 `:fearful:`            |\n| 😰 `:cold_sweat:`                   | 😣 `:persevere:`                                                                                                                                          | 😢 `:cry:`                |\n| 😭 `:sob:`                          | 😂 `:joy:`                                                                                                                                                | 😲 `:astonished:`         |\n| 😱 `:scream:`                       | :neckbeard:`:neckbeard:`                                                                                                                                  | 😫 `:tired_face:`         |\n| 😠 `:angry:`                        | 😡 `:rage:`                                                                                                                                               | 😤 `:triumph:`            |\n| 😪 `:sleepy:`                       | 😋 `:yum:`                                                                                                                                                | 😷 `:mask:`               |\n| 😎 `:sunglasses:`                   | 😵 `:dizzy_face:`                                                                                                                                         | 👿 `:imp:`                |\n| 😈 `:smiling_imp:`                  | 😐 `:neutral_face:`                                                                                                                                       | 😶 `:no_mouth:`           |\n| 😇 `:innocent:`                     | 👽 `:alien:`                                                                                                                                              | 💛 `:yellow_heart:`       |\n| 💙 `:blue_heart:`                   | 💜 `:purple_heart:`                                                                                                                                       | ❤️ `:heart:`            |\n| 💚 `:green_heart:`                  | 💔 `:broken_heart:`                                                                                                                                       | 💓 `:heartbeat:`          |\n| 💗 `:heartpulse:`                   | 💕 `:two_hearts:`                                                                                                                                         | 💞 `:revolving_hearts:`   |\n| 💘 `:cupid:`                        | 💖 `:sparkling_heart:`                                                                                                                                    | ✨ `:sparkles:`           |\n| ⭐️ `:star:`                       | 🌟 `:star2:`                                                                                                                                              | 💫 `:dizzy:`              |\n| 💥 `:boom:`                         | 💥 `:collision:`                                                                                                                                          | 💢 `:anger:`              |\n| ❗️ `:exclamation:`                | ❓ `:question:`                                                                                                                                           | ❕ `:grey_exclamation:`   |\n| ❔ `:grey_question:`                | 💤 `:zzz:`                                                                                                                                                | 💨 `:dash:`               |\n| 💦 `:sweat_drops:`                  | 🎶 `:notes:`                                                                                                                                              | 🎵 `:musical_note:`       |\n| 🔥 `:fire:`                         | 💩 `:hankey:`                                                                                                                                             | 💩 `:poop:`               |\n| 💩 `:shit:`                         | 👍 `:+1:`                                                                                                                                                 | 👍 `:thumbsup:`           |\n| 👎 `:-1:`                           | 👎 `:thumbsdown:`                                                                                                                                         | 👌 `:ok_hand:`            |\n| 👊 `:punch:`                        | 👊 `:facepunch:`                                                                                                                                          | ✊ `:fist:`               |\n| ✌️ `:v:`                          | 👋 `:wave:`                                                                                                                                               | ✋ `:hand:`               |\n| ✋ `:raised_hand:`                  | 👐 `:open_hands:`                                                                                                                                         | ☝️ `:point_up:`         |\n| 👇 `:point_down:`                   | 👈 `:point_left:`                                                                                                                                         | 👉 `:point_right:`        |\n| 🙌 `:raised_hands:`                 | 🙏 `:pray:`                                                                                                                                               | 👆 `:point_up_2:`         |\n| 👏 `:clap:`                         | 💪 `:muscle:`                                                                                                                                             | 🤘 `:metal:`              |\n| 🖕 `:fu:`                           | 🚶 `:walking:`                                                                                                                                            | 🏃 `:runner:`             |\n| 🏃 `:running:`                      | 👫 `:couple:`                                                                                                                                             | 👪 `:family:`             |\n| 👬 `:two_men_holding_hands:`        | 👭 `:two_women_holding_hands:`                                                                                                                            | 💃 `:dancer:`             |\n| 👯 `:dancers:`                      | 🙆 `:ok_woman:`                                                                                                                                           | 🙅 `:no_good:`            |\n| 💁 `:information_desk_person:`      | 🙋 `:raising_hand:`                                                                                                                                       | 👰 `:bride_with_veil:`    |\n| 🙎 `:person_with_pouting_face:`     | 🙍 `:person_frowning:`                                                                                                                                    | 🙇 `:bow:`                |\n| :couplekiss:`:couplekiss:`          | 💑 `:couple_with_heart:`                                                                                                                                  | 💆 `:massage:`            |\n| 💇 `:haircut:`                      | 💅 `:nail_care:`                                                                                                                                          | 👦 `:boy:`                |\n| 👧 `:girl:`                         | 👩 `:woman:`                                                                                                                                              | 👨 `:man:`                |\n| 👶 `:baby:`                         | 👵 `:older_woman:`                                                                                                                                        | 👴 `:older_man:`          |\n| 👱 `:person_with_blond_hair:`       | 👲 `:man_with_gua_pi_mao:`                                                                                                                                | 👳 `:man_with_turban:`    |\n| 👷 `:construction_worker:`          | 👮 `:cop:`                                                                                                                                                | 👼 `:angel:`              |\n| 👸 `:princess:`                     | 😺 `:smiley_cat:`                                                                                                                                         | 😸 `:smile_cat:`          |\n| 😻 `:heart_eyes_cat:`               | 😽 `:kissing_cat:`                                                                                                                                        | 😼 `:smirk_cat:`          |\n| 🙀 `:scream_cat:`                   | 😿 `:crying_cat_face:`                                                                                                                                    | 😹 `:joy_cat:`            |\n| 😾 `:pouting_cat:`                  | 👹 `:japanese_ogre:`                                                                                                                                      | 👺 `:japanese_goblin:`    |\n| 🙈 `:see_no_evil:`                  | 🙉 `:hear_no_evil:`                                                                                                                                       | 🙊 `:speak_no_evil:`      |\n| 💂 `:guardsman:`                    | 💀 `:skull:`                                                                                                                                              | 🐾 `:feet:`               |\n| 👄 `:lips:`                         | 💋 `:kiss:`                                                                                                                                               | 💧 `:droplet:`            |\n| 👂 `:ear:`                          | 👀 `:eyes:`                                                                                                                                               | 👃 `:nose:`               |\n| 👅 `:tongue:`                       | 💌 `:love_letter:`                                                                                                                                        | 👤 `:bust_in_silhouette:` |\n| 👥 `:busts_in_silhouette:`          | 💬 `:speech_balloon:`                                                                                                                                     | 💭 `:thought_balloon:`    |\n| :feelsgood:`:feelsgood:`            | :finnadie:`:finnadie:`                                                                                                                                    | :goberserk:`:goberserk:`  |\n| :godmode:`:godmode:`                | :hurtrealbad:`:hurtrealbad:`                                                                                                                              | :rage1:`:rage1:`          |\n| :rage2:`:rage2:`                    | :rage3:`:rage3:`                                                                                                                                          | :rage4:`:rage4:`          |\n| :suspect:`:suspect:`                | :trollface: `:trollface:` |                             |\n\nNature\n\n| ☀️ `:sunny:`                      | ☔️ `:umbrella:`           | ☁️ `:cloud:`                                                                                                                                  |\n| ------------------------------------- | ----------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |\n| ❄️ `:snowflake:`                  | ⛄️ `:snowman:`            | ⚡️ `:zap:`                                                                                                                                    |\n| 🌀 `:cyclone:`                      | 🌁 `:foggy:`                | 🌊 `:ocean:`                                                                                                                                    |\n| 🐱 `:cat:`                          | 🐶 `:dog:`                  | 🐭 `:mouse:`                                                                                                                                    |\n| 🐹 `:hamster:`                      | 🐰 `:rabbit:`               | 🐺 `:wolf:`                                                                                                                                     |\n| 🐸 `:frog:`                         | 🐯 `:tiger:`                | 🐨 `:koala:`                                                                                                                                    |\n| 🐻 `:bear:`                         | 🐷 `:pig:`                  | 🐽 `:pig_nose:`                                                                                                                                 |\n| 🐮 `:cow:`                          | 🐗 `:boar:`                 | 🐵 `:monkey_face:`                                                                                                                              |\n| 🐒 `:monkey:`                       | 🐴 `:horse:`                | 🐎 `:racehorse:`                                                                                                                                |\n| 🐫 `:camel:`                        | 🐑 `:sheep:`                | 🐘 `:elephant:`                                                                                                                                 |\n| 🐼 `:panda_face:`                   | 🐍 `:snake:`                | 🐦 `:bird:`                                                                                                                                     |\n| 🐤 `:baby_chick:`                   | 🐥 `:hatched_chick:`        | 🐣 `:hatching_chick:`                                                                                                                           |\n| 🐔 `:chicken:`                      | 🐧 `:penguin:`              | 🐢 `:turtle:`                                                                                                                                   |\n| 🐛 `:bug:`                          | 🐝 `:honeybee:`             | 🐜 `:ant:`                                                                                                                                      |\n| 🐞 `:beetle:`                       | 🐌 `:snail:`                | 🐙 `:octopus:`                                                                                                                                  |\n| 🐠 `:tropical_fish:`                | 🐟 `:fish:`                 | 🐳 `:whale:`                                                                                                                                    |\n| 🐋 `:whale2:`                       | 🐬 `:dolphin:`              | 🐄 `:cow2:`                                                                                                                                     |\n| 🐏 `:ram:`                          | 🐀 `:rat:`                  | 🐃 `:water_buffalo:`                                                                                                                            |\n| 🐅 `:tiger2:`                       | 🐇 `:rabbit2:`              | 🐉 `:dragon:`                                                                                                                                   |\n| 🐐 `:goat:`                         | 🐓 `:rooster:`              | 🐕 `:dog2:`                                                                                                                                     |\n| 🐖 `:pig2:`                         | 🐁 `:mouse2:`               | 🐂 `:ox:`                                                                                                                                       |\n| 🐲 `:dragon_face:`                  | 🐡 `:blowfish:`             | 🐊 `:crocodile:`                                                                                                                                |\n| 🐪 `:dromedary_camel:`              | 🐆 `:leopard:`              | 🐈 `:cat2:`                                                                                                                                     |\n| 🐩 `:poodle:`                       | 🐾 `:paw_prints:`           | 💐 `:bouquet:`                                                                                                                                  |\n| 🌸 `:cherry_blossom:`               | 🌷 `:tulip:`                | 🍀 `:four_leaf_clover:`                                                                                                                         |\n| 🌹 `:rose:`                         | 🌻 `:sunflower:`            | 🌺 `:hibiscus:`                                                                                                                                 |\n| 🍁 `:maple_leaf:`                   | 🍃 `:leaves:`               | 🍂 `:fallen_leaf:`                                                                                                                              |\n| 🌿 `:herb:`                         | 🍄 `:mushroom:`             | 🌵 `:cactus:`                                                                                                                                   |\n| 🌴 `:palm_tree:`                    | 🌲 `:evergreen_tree:`       | 🌳 `:deciduous_tree:`                                                                                                                           |\n| 🌰 `:chestnut:`                     | 🌱 `:seedling:`             | 🌼 `:blossom:`                                                                                                                                  |\n| 🌾 `:ear_of_rice:`                  | 🐚 `:shell:`                | 🌐 `:globe_with_meridians:`                                                                                                                     |\n| 🌞 `:sun_with_face:`                | 🌝 `:full_moon_with_face:`  | 🌚 `:new_moon_with_face:`                                                                                                                       |\n| 🌑 `:new_moon:`                     | 🌒 `:waxing_crescent_moon:` | 🌓 `:first_quarter_moon:`                                                                                                                       |\n| 🌔 `:waxing_gibbous_moon:`          | 🌕 `:full_moon:`            | 🌖 `:waning_gibbous_moon:`                                                                                                                      |\n| 🌗 `:last_quarter_moon:`            | 🌘 `:waning_crescent_moon:` | 🌜 `:last_quarter_moon_with_face:`                                                                                                              |\n| 🌛 `:first_quarter_moon_with_face:` | 🌔 `:moon:`                 | 🌍 `:earth_africa:`                                                                                                                             |\n| 🌎 `:earth_americas:`               | 🌏 `:earth_asia:`           | 🌋 `:volcano:`                                                                                                                                  |\n| 🌌 `:milky_way:`                    | ⛅️ `:partly_sunny:`       | :octocat: `:octocat:` |\n| :squirrel:`:squirrel:`              |                               |                                                                                                                                                   |\n\nObjects\n\n| 🎍 `:bamboo:`                         | 💝 `:gift_heart:`                 | 🎎 `:dolls:`                  |\n| --------------------------------------- | ----------------------------------- | ------------------------------- |\n| 🎒 `:school_satchel:`                 | 🎓 `:mortar_board:`               | 🎏 `:flags:`                  |\n| 🎆 `:fireworks:`                      | 🎇 `:sparkler:`                   | 🎐 `:wind_chime:`             |\n| 🎑 `:rice_scene:`                     | 🎃 `:jack_o_lantern:`             | 👻 `:ghost:`                  |\n| 🎅 `:santa:`                          | 🎄 `:christmas_tree:`             | 🎁 `:gift:`                   |\n| 🔔 `:bell:`                           | 🔕 `:no_bell:`                    | 🎋 `:tanabata_tree:`          |\n| 🎉 `:tada:`                           | 🎊 `:confetti_ball:`              | 🎈 `:balloon:`                |\n| 🔮 `:crystal_ball:`                   | 💿 `:cd:`                         | 📀 `:dvd:`                    |\n| 💾 `:floppy_disk:`                    | 📷 `:camera:`                     | 📹 `:video_camera:`           |\n| 🎥 `:movie_camera:`                   | 💻 `:computer:`                   | 📺 `:tv:`                     |\n| 📱 `:iphone:`                         | ☎️ `:phone:`                    | ☎️ `:telephone:`            |\n| 📞 `:telephone_receiver:`             | 📟 `:pager:`                      | 📠 `:fax:`                    |\n| 💽 `:minidisc:`                       | 📼 `:vhs:`                        | 🔉 `:sound:`                  |\n| 🔈 `:speaker:`                        | 🔇 `:mute:`                       | 📢 `:loudspeaker:`            |\n| 📣 `:mega:`                           | ⌛️ `:hourglass:`                | ⏳ `:hourglass_flowing_sand:` |\n| ⏰ `:alarm_clock:`                    | ⌚️ `:watch:`                    | 📻 `:radio:`                  |\n| 📡 `:satellite:`                      | ➿ `:loop:`                       | 🔍 `:mag:`                    |\n| 🔎 `:mag_right:`                      | 🔓 `:unlock:`                     | 🔒 `:lock:`                   |\n| 🔏 `:lock_with_ink_pen:`              | 🔐 `:closed_lock_with_key:`       | 🔑 `:key:`                    |\n| 💡 `:bulb:`                           | 🔦 `:flashlight:`                 | 🔆 `:high_brightness:`        |\n| 🔅 `:low_brightness:`                 | 🔌 `:electric_plug:`              | 🔋 `:battery:`                |\n| 📲 `:calling:`                        | ✉️ `:email:`                    | 📫 `:mailbox:`                |\n| 📮 `:postbox:`                        | 🛀 `:bath:`                       | 🛁 `:bathtub:`                |\n| 🚿 `:shower:`                         | 🚽 `:toilet:`                     | 🔧 `:wrench:`                 |\n| 🔩 `:nut_and_bolt:`                   | 🔨 `:hammer:`                     | 💺 `:seat:`                   |\n| 💰 `:moneybag:`                       | 💴 `:yen:`                        | 💵 `:dollar:`                 |\n| 💷 `:pound:`                          | 💶 `:euro:`                       | 💳 `:credit_card:`            |\n| 💸 `:money_with_wings:`               | 📧 `:e-mail:`                     | 📥 `:inbox_tray:`             |\n| 📤 `:outbox_tray:`                    | ✉️ `:envelope:`                 | 📨 `:incoming_envelope:`      |\n| 📯 `:postal_horn:`                    | 📪 `:mailbox_closed:`             | 📬 `:mailbox_with_mail:`      |\n| 📭 `:mailbox_with_no_mail:`           | 🚪 `:door:`                       | 🚬 `:smoking:`                |\n| 💣 `:bomb:`                           | 🔫 `:gun:`                        | 🔪 `:hocho:`                  |\n| 💊 `:pill:`                           | 💉 `:syringe:`                    | 📄 `:page_facing_up:`         |\n| 📃 `:page_with_curl:`                 | 📑 `:bookmark_tabs:`              | 📊 `:bar_chart:`              |\n| 📈 `:chart_with_upwards_trend:`       | 📉 `:chart_with_downwards_trend:` | 📜 `:scroll:`                 |\n| 📋 `:clipboard:`                      | 📆 `:calendar:`                   | 📅 `:date:`                   |\n| 📇 `:card_index:`                     | 📁 `:file_folder:`                | 📂 `:open_file_folder:`       |\n| ✂️ `:scissors:`                     | 📌 `:pushpin:`                    | 📎 `:paperclip:`              |\n| ✒️ `:black_nib:`                    | ✏️ `:pencil2:`                  | 📏 `:straight_ruler:`         |\n| 📐 `:triangular_ruler:`               | 📕 `:closed_book:`                | 📗 `:green_book:`             |\n| 📘 `:blue_book:`                      | 📙 `:orange_book:`                | 📓 `:notebook:`               |\n| 📔 `:notebook_with_decorative_cover:` | 📒 `:ledger:`                     | 📚 `:books:`                  |\n| 🔖 `:bookmark:`                       | 📛 `:name_badge:`                 | 🔬 `:microscope:`             |\n| 🔭 `:telescope:`                      | 📰 `:newspaper:`                  | 🏈 `:football:`               |\n| 🏀 `:basketball:`                     | ⚽️ `:soccer:`                   | ⚾️ `:baseball:`             |\n| 🎾 `:tennis:`                         | 🎱 `:8ball:`                      | 🏉 `:rugby_football:`         |\n| 🎳 `:bowling:`                        | ⛳️ `:golf:`                     | 🚵 `:mountain_bicyclist:`     |\n| 🚴 `:bicyclist:`                      | 🏇 `:horse_racing:`               | 🏂 `:snowboarder:`            |\n| 🏊 `:swimmer:`                        | 🏄 `:surfer:`                     | 🎿 `:ski:`                    |\n| ♠️ `:spades:`                       | ♥️ `:hearts:`                   | ♣️ `:clubs:`                |\n| ♦️ `:diamonds:`                     | 💎 `:gem:`                        | 💍 `:ring:`                   |\n| 🏆 `:trophy:`                         | 🎼 `:musical_score:`              | 🎹 `:musical_keyboard:`       |\n| 🎻 `:violin:`                         | 👾 `:space_invader:`              | 🎮 `:video_game:`             |\n| 🃏 `:black_joker:`                    | 🎴 `:flower_playing_cards:`       | 🎲 `:game_die:`               |\n| 🎯 `:dart:`                           | 🀄️ `:mahjong:`                  | 🎬 `:clapper:`                |\n| 📝 `:memo:`                           | 📝 `:pencil:`                     | 📖 `:book:`                   |\n| 🎨 `:art:`                            | 🎤 `:microphone:`                 | 🎧 `:headphones:`             |\n| 🎺 `:trumpet:`                        | 🎷 `:saxophone:`                  | 🎸 `:guitar:`                 |\n| 👞 `:shoe:`                           | 👡 `:sandal:`                     | 👠 `:high_heel:`              |\n| 💄 `:lipstick:`                       | 👢 `:boot:`                       | 👕 `:shirt:`                  |\n| 👕 `:tshirt:`                         | 👔 `:necktie:`                    | 👚 `:womans_clothes:`         |\n| 👗 `:dress:`                          | 🎽 `:running_shirt_with_sash:`    | 👖 `:jeans:`                  |\n| 👘 `:kimono:`                         | 👙 `:bikini:`                     | 🎀 `:ribbon:`                 |\n| 🎩 `:tophat:`                         | 👑 `:crown:`                      | 👒 `:womans_hat:`             |\n| 👞 `:mans_shoe:`                      | 🌂 `:closed_umbrella:`            | 💼 `:briefcase:`              |\n| 👜 `:handbag:`                        | 👝 `:pouch:`                      | 👛 `:purse:`                  |\n| 👓 `:eyeglasses:`                     | 🎣 `:fishing_pole_and_fish:`      | ☕️ `:coffee:`               |\n| 🍵 `:tea:`                            | 🍶 `:sake:`                       | 🍼 `:baby_bottle:`            |\n| 🍺 `:beer:`                           | 🍻 `:beers:`                      | 🍸 `:cocktail:`               |\n| 🍹 `:tropical_drink:`                 | 🍷 `:wine_glass:`                 | 🍴 `:fork_and_knife:`         |\n| 🍕 `:pizza:`                          | 🍔 `:hamburger:`                  | 🍟 `:fries:`                  |\n| 🍗 `:poultry_leg:`                    | 🍖 `:meat_on_bone:`               | 🍝 `:spaghetti:`              |\n| 🍛 `:curry:`                          | 🍤 `:fried_shrimp:`               | 🍱 `:bento:`                  |\n| 🍣 `:sushi:`                          | 🍥 `:fish_cake:`                  | 🍙 `:rice_ball:`              |\n| 🍘 `:rice_cracker:`                   | 🍚 `:rice:`                       | 🍜 `:ramen:`                  |\n| 🍲 `:stew:`                           | 🍢 `:oden:`                       | 🍡 `:dango:`                  |\n| 🥚 `:egg:`                            | 🍞 `:bread:`                      | 🍩 `:doughnut:`               |\n| 🍮 `:custard:`                        | 🍦 `:icecream:`                   | 🍨 `:ice_cream:`              |\n| 🍧 `:shaved_ice:`                     | 🎂 `:birthday:`                   | 🍰 `:cake:`                   |\n| 🍪 `:cookie:`                         | 🍫 `:chocolate_bar:`              | 🍬 `:candy:`                  |\n| 🍭 `:lollipop:`                       | 🍯 `:honey_pot:`                  | 🍎 `:apple:`                  |\n| 🍏 `:green_apple:`                    | 🍊 `:tangerine:`                  | 🍋 `:lemon:`                  |\n| 🍒 `:cherries:`                       | 🍇 `:grapes:`                     | 🍉 `:watermelon:`             |\n| 🍓 `:strawberry:`                     | 🍑 `:peach:`                      | 🍈 `:melon:`                  |\n| 🍌 `:banana:`                         | 🍐 `:pear:`                       | 🍍 `:pineapple:`              |\n| 🍠 `:sweet_potato:`                   | 🍆 `:eggplant:`                   | 🍅 `:tomato:`                 |\n| 🌽 `:corn:`                           |                                     |                                 |\n\nPlaces\n\n| 🏠 `:house:`               | 🏡 `:house_with_garden:`       | 🏫 `:school:`                 |\n| ---------------------------- | -------------------------------- | ------------------------------- |\n| 🏢 `:office:`              | 🏣 `:post_office:`             | 🏥 `:hospital:`               |\n| 🏦 `:bank:`                | 🏪 `:convenience_store:`       | 🏩 `:love_hotel:`             |\n| 🏨 `:hotel:`               | 💒 `:wedding:`                 | ⛪️ `:church:`               |\n| 🏬 `:department_store:`    | 🏤 `:european_post_office:`    | 🌇 `:city_sunrise:`           |\n| 🌆 `:city_sunset:`         | 🏯 `:japanese_castle:`         | 🏰 `:european_castle:`        |\n| ⛺️ `:tent:`              | 🏭 `:factory:`                 | 🗼 `:tokyo_tower:`            |\n| 🗾 `:japan:`               | 🗻 `:mount_fuji:`              | 🌄 `:sunrise_over_mountains:` |\n| 🌅 `:sunrise:`             | 🌠 `:stars:`                   | 🗽 `:statue_of_liberty:`      |\n| 🌉 `:bridge_at_night:`     | 🎠 `:carousel_horse:`          | 🌈 `:rainbow:`                |\n| 🎡 `:ferris_wheel:`        | ⛲️ `:fountain:`              | 🎢 `:roller_coaster:`         |\n| 🚢 `:ship:`                | 🚤 `:speedboat:`               | ⛵️ `:boat:`                 |\n| ⛵️ `:sailboat:`          | 🚣 `:rowboat:`                 | ⚓️ `:anchor:`               |\n| 🚀 `:rocket:`              | ✈️ `:airplane:`              | 🚁 `:helicopter:`             |\n| 🚂 `:steam_locomotive:`    | 🚊 `:tram:`                    | 🚞 `:mountain_railway:`       |\n| 🚲 `:bike:`                | 🚡 `:aerial_tramway:`          | 🚟 `:suspension_railway:`     |\n| 🚠 `:mountain_cableway:`   | 🚜 `:tractor:`                 | 🚙 `:blue_car:`               |\n| 🚘 `:oncoming_automobile:` | 🚗 `:car:`                     | 🚗 `:red_car:`                |\n| 🚕 `:taxi:`                | 🚖 `:oncoming_taxi:`           | 🚛 `:articulated_lorry:`      |\n| 🚌 `:bus:`                 | 🚍 `:oncoming_bus:`            | 🚨 `:rotating_light:`         |\n| 🚓 `:police_car:`          | 🚔 `:oncoming_police_car:`     | 🚒 `:fire_engine:`            |\n| 🚑 `:ambulance:`           | 🚐 `:minibus:`                 | 🚚 `:truck:`                  |\n| 🚋 `:train:`               | 🚉 `:station:`                 | 🚆 `:train2:`                 |\n| 🚅 `:bullettrain_front:`   | 🚄 `:bullettrain_side:`        | 🚈 `:light_rail:`             |\n| 🚝 `:monorail:`            | 🚃 `:railway_car:`             | 🚎 `:trolleybus:`             |\n| 🎫 `:ticket:`              | ⛽️ `:fuelpump:`              | 🚦 `:vertical_traffic_light:` |\n| 🚥 `:traffic_light:`       | ⚠️ `:warning:`               | 🚧 `:construction:`           |\n| 🔰 `:beginner:`            | 🏧 `:atm:`                     | 🎰 `:slot_machine:`           |\n| 🚏 `:busstop:`             | 💈 `:barber:`                  | ♨️ `:hotsprings:`           |\n| 🏁 `:checkered_flag:`      | 🎌 `:crossed_flags:`           | 🏮 `:izakaya_lantern:`        |\n| 🗿 `:moyai:`               | 🎪 `:circus_tent:`             | 🎭 `:performing_arts:`        |\n| 📍 `:round_pushpin:`       | 🚩 `:triangular_flag_on_post:` | 🇯🇵 `:jp:`                   |\n| 🇰🇷 `:kr:`                | 🇨🇳 `:cn:`                    | 🇺🇸 `:us:`                   |\n| 🇫🇷 `:fr:`                | 🇪🇸 `:es:`                    | 🇮🇹 `:it:`                   |\n| 🇷🇺 `:ru:`                | 🇬🇧 `:gb:`                    | 🇬🇧 `:uk:`                   |\n| 🇩🇪 `:de:`                |                                  |                                 |\n\nSymbols\n\n| 1️⃣ `:one:`                          | 2️⃣ `:two:`                      | 3️⃣ `:three:`                    |\n| ---------------------------------------- | ------------------------------------ | ------------------------------------ |\n| 4️⃣ `:four:`                         | 5️⃣ `:five:`                     | 6️⃣ `:six:`                      |\n| 7️⃣ `:seven:`                        | 8️⃣ `:eight:`                    | 9️⃣ `:nine:`                     |\n| 🔟 `:keycap_ten:`                      | 🔢 `:1234:`                        | 0️⃣ `:zero:`                     |\n| #️⃣ `:hash:`                         | 🔣 `:symbols:`                     | ◀️ `:arrow_backward:`            |\n| ⬇️ `:arrow_down:`                    | ▶️ `:arrow_forward:`             | ⬅️ `:arrow_left:`                |\n| 🔠 `:capital_abcd:`                    | 🔡 `:abcd:`                        | 🔤 `:abc:`                         |\n| ↙️ `:arrow_lower_left:`              | ↘️ `:arrow_lower_right:`         | ➡️ `:arrow_right:`               |\n| ⬆️ `:arrow_up:`                      | ↖️ `:arrow_upper_left:`          | ↗️ `:arrow_upper_right:`         |\n| ⏬ `:arrow_double_down:`               | ⏫ `:arrow_double_up:`             | 🔽 `:arrow_down_small:`            |\n| ⤵️ `:arrow_heading_down:`            | ⤴️ `:arrow_heading_up:`          | ↩️ `:leftwards_arrow_with_hook:` |\n| ↪️ `:arrow_right_hook:`              | ↔️ `:left_right_arrow:`          | ↕️ `:arrow_up_down:`             |\n| 🔼 `:arrow_up_small:`                  | 🔃 `:arrows_clockwise:`            | 🔄 `:arrows_counterclockwise:`     |\n| ⏪ `:rewind:`                          | ⏩ `:fast_forward:`                | ℹ️ `:information_source:`        |\n| 🆗 `:ok:`                              | 🔀 `:twisted_rightwards_arrows:`   | 🔁 `:repeat:`                      |\n| 🔂 `:repeat_one:`                      | 🆕 `:new:`                         | 🔝 `:top:`                         |\n| 🆙 `:up:`                              | 🆒 `:cool:`                        | 🆓 `:free:`                        |\n| 🆖 `:ng:`                              | 🎦 `:cinema:`                      | 🈁 `:koko:`                        |\n| 📶 `:signal_strength:`                 | 🈹 `:u5272:`                       | 🈴 `:u5408:`                       |\n| 🈺 `:u55b6:`                           | 🈯️ `:u6307:`                     | 🈷️ `:u6708:`                     |\n| 🈶 `:u6709:`                           | 🈵 `:u6e80:`                       | 🈚️ `:u7121:`                     |\n| 🈸 `:u7533:`                           | 🈳 `:u7a7a:`                       | 🈲 `:u7981:`                       |\n| 🈂️ `:sa:`                            | 🚻 `:restroom:`                    | 🚹 `:mens:`                        |\n| 🚺 `:womens:`                          | 🚼 `:baby_symbol:`                 | 🚭 `:no_smoking:`                  |\n| 🅿️ `:parking:`                       | ♿️ `:wheelchair:`                | 🚇 `:metro:`                       |\n| 🛄 `:baggage_claim:`                   | :accept:`:accept:`                 | 🚾 `:wc:`                          |\n| 🚰 `:potable_water:`                   | 🚮 `:put_litter_in_its_place:`     | ㊙️ `:secret:`                    |\n| ㊗️ `:congratulations:`               | Ⓜ️ `:m:`                         | 🛂 `:passport_control:`            |\n| 🛅 `:left_luggage:`                    | 🛃 `:customs:`                     | 🉐 `:ideograph_advantage:`         |\n| 🆑 `:cl:`                              | 🆘 `:sos:`                         | 🆔 `:id:`                          |\n| 🚫 `:no_entry_sign:`                   | 🔞 `:underage:`                    | 📵 `:no_mobile_phones:`            |\n| 🚯 `:do_not_litter:`                   | 🚱 `:non-potable_water:`           | 🚳 `:no_bicycles:`                 |\n| 🚷 `:no_pedestrians:`                  | 🚸 `:children_crossing:`           | ⛔️ `:no_entry:`                  |\n| ✳️ `:eight_spoked_asterisk:`         | ✴️ `:eight_pointed_black_star:`  | 💟 `:heart_decoration:`            |\n| 🆚 `:vs:`                              | 📳 `:vibration_mode:`              | 📴 `:mobile_phone_off:`            |\n| 💹 `:chart:`                           | 💱 `:currency_exchange:`           | ♈️ `:aries:`                     |\n| ♉️ `:taurus:`                        | ♊️ `:gemini:`                    | ♋️ `:cancer:`                    |\n| ♌️ `:leo:`                           | ♍️ `:virgo:`                     | ♎️ `:libra:`                     |\n| ♏️ `:scorpius:`                      | ♐️ `:sagittarius:`               | ♑️ `:capricorn:`                 |\n| ♒️ `:aquarius:`                      | ♓️ `:pisces:`                    | ⛎ `:ophiuchus:`                   |\n| 🔯 `:six_pointed_star:`                | ❎ `:negative_squared_cross_mark:` | 🅰️ `:a:`                         |\n| 🅱️ `:b:`                             | 🆎 `:ab:`                          | 🅾️ `:o2:`                        |\n| 💠 `:diamond_shape_with_a_dot_inside:` | ♻️ `:recycle:`                   | 🔚 `:end:`                         |\n| 🔛 `:on:`                              | 🔜 `:soon:`                        | 🕐 `:clock1:`                      |\n| 🕜 `:clock130:`                        | 🕙 `:clock10:`                     | 🕥 `:clock1030:`                   |\n| 🕚 `:clock11:`                         | 🕦 `:clock1130:`                   | 🕛 `:clock12:`                     |\n| 🕧 `:clock1230:`                       | 🕑 `:clock2:`                      | 🕝 `:clock230:`                    |\n| 🕒 `:clock3:`                          | 🕞 `:clock330:`                    | 🕓 `:clock4:`                      |\n| 🕟 `:clock430:`                        | 🕔 `:clock5:`                      | 🕠 `:clock530:`                    |\n| 🕕 `:clock6:`                          | 🕡 `:clock630:`                    | 🕖 `:clock7:`                      |\n| 🕢 `:clock730:`                        | 🕗 `:clock8:`                      | 🕣 `:clock830:`                    |\n| 🕘 `:clock9:`                          | 🕤 `:clock930:`                    | 💲 `:heavy_dollar_sign:`           |\n| ©️ `:copyright:`                     | ®️ `:registered:`                | ™️ `:tm:`                        |\n| ❌ `:x:`                               | ❗️ `:heavy_exclamation_mark:`    | ‼️ `:bangbang:`                  |\n| ⁉️ `:interrobang:`                   | ⭕️ `:o:`                         | ✖️ `:heavy_multiplication_x:`    |\n| ➕ `:heavy_plus_sign:`                 | ➖ `:heavy_minus_sign:`            | ➗ `:heavy_division_sign:`         |\n| 💮 `:white_flower:`                    | 💯 `:100:`                         | ✔️ `:heavy_check_mark:`          |\n| ☑️ `:ballot_box_with_check:`         | 🔘 `:radio_button:`                | 🔗 `:link:`                        |\n| ➰ `:curly_loop:`                      | 〰️ `:wavy_dash:`                 | 〽️ `:part_alternation_mark:`     |\n| 🔱 `:trident:`                         | :black_square:`:black_square:`     | :white_square:`:white_square:`     |\n| ✅ `:white_check_mark:`                | 🔲 `:black_square_button:`         | 🔳 `:white_square_button:`         |\n| ⚫️ `:black_circle:`                  | ⚪️ `:white_circle:`              | 🔴 `:red_circle:`                  |\n| 🔵 `:large_blue_circle:`               | 🔷 `:large_blue_diamond:`          | 🔶 `:large_orange_diamond:`        |\n| 🔹 `:small_blue_diamond:`              | 🔸 `:small_orange_diamond:`        | 🔺 `:small_red_triangle:`          |\n| 🔻 `:small_red_triangle_down:`         | :shipit:`:shipit:`                 |                                      |\n","slug":"emoji","published":1,"date":"2022-10-22T00:58:32.348Z","updated":"2022-10-20T06:17:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clee4vhap000pc8vq00wt3p0b","content":"<p>People</p>\n<table>\n<thead>\n<tr>\n<th>:bowtie:<code>:bowtie:</code></th>\n<th>😄 <code>:smile:</code></th>\n<th>😆 <code>:laughing:</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>😊 <code>:blush:</code></td>\n<td>😃 <code>:smiley:</code></td>\n<td>☺️ <code>:relaxed:</code></td>\n</tr>\n<tr>\n<td>😏 <code>:smirk:</code></td>\n<td>😍 <code>:heart_eyes:</code></td>\n<td>😘 <code>:kissing_heart:</code></td>\n</tr>\n<tr>\n<td>😚 <code>:kissing_closed_eyes:</code></td>\n<td>😳 <code>:flushed:</code></td>\n<td>😌 <code>:relieved:</code></td>\n</tr>\n<tr>\n<td>😆 <code>:satisfied:</code></td>\n<td>😁 <code>:grin:</code></td>\n<td>😉 <code>:wink:</code></td>\n</tr>\n<tr>\n<td>😜 <code>:stuck_out_tongue_winking_eye:</code></td>\n<td>😝 <code>:stuck_out_tongue_closed_eyes:</code></td>\n<td>😀 <code>:grinning:</code></td>\n</tr>\n<tr>\n<td>😗 <code>:kissing:</code></td>\n<td>😙 <code>:kissing_smiling_eyes:</code></td>\n<td>😛 <code>:stuck_out_tongue:</code></td>\n</tr>\n<tr>\n<td>😴 <code>:sleeping:</code></td>\n<td>😟 <code>:worried:</code></td>\n<td>😦 <code>:frowning:</code></td>\n</tr>\n<tr>\n<td>😧 <code>:anguished:</code></td>\n<td>😮 <code>:open_mouth:</code></td>\n<td>😬 <code>:grimacing:</code></td>\n</tr>\n<tr>\n<td>😕 <code>:confused:</code></td>\n<td>😯 <code>:hushed:</code></td>\n<td>😑 <code>:expressionless:</code></td>\n</tr>\n<tr>\n<td>😒 <code>:unamused:</code></td>\n<td>😅 <code>:sweat_smile:</code></td>\n<td>😓 <code>:sweat:</code></td>\n</tr>\n<tr>\n<td>😥 <code>:disappointed_relieved:</code></td>\n<td>😩 <code>:weary:</code></td>\n<td>😔 <code>:pensive:</code></td>\n</tr>\n<tr>\n<td>😞 <code>:disappointed:</code></td>\n<td>😖 <code>:confounded:</code></td>\n<td>😨 <code>:fearful:</code></td>\n</tr>\n<tr>\n<td>😰 <code>:cold_sweat:</code></td>\n<td>😣 <code>:persevere:</code></td>\n<td>😢 <code>:cry:</code></td>\n</tr>\n<tr>\n<td>😭 <code>:sob:</code></td>\n<td>😂 <code>:joy:</code></td>\n<td>😲 <code>:astonished:</code></td>\n</tr>\n<tr>\n<td>😱 <code>:scream:</code></td>\n<td>:neckbeard:<code>:neckbeard:</code></td>\n<td>😫 <code>:tired_face:</code></td>\n</tr>\n<tr>\n<td>😠 <code>:angry:</code></td>\n<td>😡 <code>:rage:</code></td>\n<td>😤 <code>:triumph:</code></td>\n</tr>\n<tr>\n<td>😪 <code>:sleepy:</code></td>\n<td>😋 <code>:yum:</code></td>\n<td>😷 <code>:mask:</code></td>\n</tr>\n<tr>\n<td>😎 <code>:sunglasses:</code></td>\n<td>😵 <code>:dizzy_face:</code></td>\n<td>👿 <code>:imp:</code></td>\n</tr>\n<tr>\n<td>😈 <code>:smiling_imp:</code></td>\n<td>😐 <code>:neutral_face:</code></td>\n<td>😶 <code>:no_mouth:</code></td>\n</tr>\n<tr>\n<td>😇 <code>:innocent:</code></td>\n<td>👽 <code>:alien:</code></td>\n<td>💛 <code>:yellow_heart:</code></td>\n</tr>\n<tr>\n<td>💙 <code>:blue_heart:</code></td>\n<td>💜 <code>:purple_heart:</code></td>\n<td>❤️ <code>:heart:</code></td>\n</tr>\n<tr>\n<td>💚 <code>:green_heart:</code></td>\n<td>💔 <code>:broken_heart:</code></td>\n<td>💓 <code>:heartbeat:</code></td>\n</tr>\n<tr>\n<td>💗 <code>:heartpulse:</code></td>\n<td>💕 <code>:two_hearts:</code></td>\n<td>💞 <code>:revolving_hearts:</code></td>\n</tr>\n<tr>\n<td>💘 <code>:cupid:</code></td>\n<td>💖 <code>:sparkling_heart:</code></td>\n<td>✨ <code>:sparkles:</code></td>\n</tr>\n<tr>\n<td>⭐️ <code>:star:</code></td>\n<td>🌟 <code>:star2:</code></td>\n<td>💫 <code>:dizzy:</code></td>\n</tr>\n<tr>\n<td>💥 <code>:boom:</code></td>\n<td>💥 <code>:collision:</code></td>\n<td>💢 <code>:anger:</code></td>\n</tr>\n<tr>\n<td>❗️ <code>:exclamation:</code></td>\n<td>❓ <code>:question:</code></td>\n<td>❕ <code>:grey_exclamation:</code></td>\n</tr>\n<tr>\n<td>❔ <code>:grey_question:</code></td>\n<td>💤 <code>:zzz:</code></td>\n<td>💨 <code>:dash:</code></td>\n</tr>\n<tr>\n<td>💦 <code>:sweat_drops:</code></td>\n<td>🎶 <code>:notes:</code></td>\n<td>🎵 <code>:musical_note:</code></td>\n</tr>\n<tr>\n<td>🔥 <code>:fire:</code></td>\n<td>💩 <code>:hankey:</code></td>\n<td>💩 <code>:poop:</code></td>\n</tr>\n<tr>\n<td>💩 <code>:shit:</code></td>\n<td>👍 <code>:+1:</code></td>\n<td>👍 <code>:thumbsup:</code></td>\n</tr>\n<tr>\n<td>👎 <code>:-1:</code></td>\n<td>👎 <code>:thumbsdown:</code></td>\n<td>👌 <code>:ok_hand:</code></td>\n</tr>\n<tr>\n<td>👊 <code>:punch:</code></td>\n<td>👊 <code>:facepunch:</code></td>\n<td>✊ <code>:fist:</code></td>\n</tr>\n<tr>\n<td>✌️ <code>:v:</code></td>\n<td>👋 <code>:wave:</code></td>\n<td>✋ <code>:hand:</code></td>\n</tr>\n<tr>\n<td>✋ <code>:raised_hand:</code></td>\n<td>👐 <code>:open_hands:</code></td>\n<td>☝️ <code>:point_up:</code></td>\n</tr>\n<tr>\n<td>👇 <code>:point_down:</code></td>\n<td>👈 <code>:point_left:</code></td>\n<td>👉 <code>:point_right:</code></td>\n</tr>\n<tr>\n<td>🙌 <code>:raised_hands:</code></td>\n<td>🙏 <code>:pray:</code></td>\n<td>👆 <code>:point_up_2:</code></td>\n</tr>\n<tr>\n<td>👏 <code>:clap:</code></td>\n<td>💪 <code>:muscle:</code></td>\n<td>🤘 <code>:metal:</code></td>\n</tr>\n<tr>\n<td>🖕 <code>:fu:</code></td>\n<td>🚶 <code>:walking:</code></td>\n<td>🏃 <code>:runner:</code></td>\n</tr>\n<tr>\n<td>🏃 <code>:running:</code></td>\n<td>👫 <code>:couple:</code></td>\n<td>👪 <code>:family:</code></td>\n</tr>\n<tr>\n<td>👬 <code>:two_men_holding_hands:</code></td>\n<td>👭 <code>:two_women_holding_hands:</code></td>\n<td>💃 <code>:dancer:</code></td>\n</tr>\n<tr>\n<td>👯 <code>:dancers:</code></td>\n<td>🙆 <code>:ok_woman:</code></td>\n<td>🙅 <code>:no_good:</code></td>\n</tr>\n<tr>\n<td>💁 <code>:information_desk_person:</code></td>\n<td>🙋 <code>:raising_hand:</code></td>\n<td>👰 <code>:bride_with_veil:</code></td>\n</tr>\n<tr>\n<td>🙎 <code>:person_with_pouting_face:</code></td>\n<td>🙍 <code>:person_frowning:</code></td>\n<td>🙇 <code>:bow:</code></td>\n</tr>\n<tr>\n<td>💏<code>:couplekiss:</code></td>\n<td>💑 <code>:couple_with_heart:</code></td>\n<td>💆 <code>:massage:</code></td>\n</tr>\n<tr>\n<td>💇 <code>:haircut:</code></td>\n<td>💅 <code>:nail_care:</code></td>\n<td>👦 <code>:boy:</code></td>\n</tr>\n<tr>\n<td>👧 <code>:girl:</code></td>\n<td>👩 <code>:woman:</code></td>\n<td>👨 <code>:man:</code></td>\n</tr>\n<tr>\n<td>👶 <code>:baby:</code></td>\n<td>👵 <code>:older_woman:</code></td>\n<td>👴 <code>:older_man:</code></td>\n</tr>\n<tr>\n<td>👱 <code>:person_with_blond_hair:</code></td>\n<td>👲 <code>:man_with_gua_pi_mao:</code></td>\n<td>👳 <code>:man_with_turban:</code></td>\n</tr>\n<tr>\n<td>👷 <code>:construction_worker:</code></td>\n<td>👮 <code>:cop:</code></td>\n<td>👼 <code>:angel:</code></td>\n</tr>\n<tr>\n<td>👸 <code>:princess:</code></td>\n<td>😺 <code>:smiley_cat:</code></td>\n<td>😸 <code>:smile_cat:</code></td>\n</tr>\n<tr>\n<td>😻 <code>:heart_eyes_cat:</code></td>\n<td>😽 <code>:kissing_cat:</code></td>\n<td>😼 <code>:smirk_cat:</code></td>\n</tr>\n<tr>\n<td>🙀 <code>:scream_cat:</code></td>\n<td>😿 <code>:crying_cat_face:</code></td>\n<td>😹 <code>:joy_cat:</code></td>\n</tr>\n<tr>\n<td>😾 <code>:pouting_cat:</code></td>\n<td>👹 <code>:japanese_ogre:</code></td>\n<td>👺 <code>:japanese_goblin:</code></td>\n</tr>\n<tr>\n<td>🙈 <code>:see_no_evil:</code></td>\n<td>🙉 <code>:hear_no_evil:</code></td>\n<td>🙊 <code>:speak_no_evil:</code></td>\n</tr>\n<tr>\n<td>💂 <code>:guardsman:</code></td>\n<td>💀 <code>:skull:</code></td>\n<td>🐾 <code>:feet:</code></td>\n</tr>\n<tr>\n<td>👄 <code>:lips:</code></td>\n<td>💋 <code>:kiss:</code></td>\n<td>💧 <code>:droplet:</code></td>\n</tr>\n<tr>\n<td>👂 <code>:ear:</code></td>\n<td>👀 <code>:eyes:</code></td>\n<td>👃 <code>:nose:</code></td>\n</tr>\n<tr>\n<td>👅 <code>:tongue:</code></td>\n<td>💌 <code>:love_letter:</code></td>\n<td>👤 <code>:bust_in_silhouette:</code></td>\n</tr>\n<tr>\n<td>👥 <code>:busts_in_silhouette:</code></td>\n<td>💬 <code>:speech_balloon:</code></td>\n<td>💭 <code>:thought_balloon:</code></td>\n</tr>\n<tr>\n<td>:feelsgood:<code>:feelsgood:</code></td>\n<td>:finnadie:<code>:finnadie:</code></td>\n<td>:goberserk:<code>:goberserk:</code></td>\n</tr>\n<tr>\n<td>:godmode:<code>:godmode:</code></td>\n<td>:hurtrealbad:<code>:hurtrealbad:</code></td>\n<td>:rage1:<code>:rage1:</code></td>\n</tr>\n<tr>\n<td>:rage2:<code>:rage2:</code></td>\n<td>:rage3:<code>:rage3:</code></td>\n<td>:rage4:<code>:rage4:</code></td>\n</tr>\n<tr>\n<td>:suspect:<code>:suspect:</code></td>\n<td>:trollface: <code>:trollface:</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Nature</p>\n<table>\n<thead>\n<tr>\n<th>☀️ <code>:sunny:</code></th>\n<th>☔️ <code>:umbrella:</code></th>\n<th>☁️ <code>:cloud:</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>❄️ <code>:snowflake:</code></td>\n<td>⛄️ <code>:snowman:</code></td>\n<td>⚡️ <code>:zap:</code></td>\n</tr>\n<tr>\n<td>🌀 <code>:cyclone:</code></td>\n<td>🌁 <code>:foggy:</code></td>\n<td>🌊 <code>:ocean:</code></td>\n</tr>\n<tr>\n<td>🐱 <code>:cat:</code></td>\n<td>🐶 <code>:dog:</code></td>\n<td>🐭 <code>:mouse:</code></td>\n</tr>\n<tr>\n<td>🐹 <code>:hamster:</code></td>\n<td>🐰 <code>:rabbit:</code></td>\n<td>🐺 <code>:wolf:</code></td>\n</tr>\n<tr>\n<td>🐸 <code>:frog:</code></td>\n<td>🐯 <code>:tiger:</code></td>\n<td>🐨 <code>:koala:</code></td>\n</tr>\n<tr>\n<td>🐻 <code>:bear:</code></td>\n<td>🐷 <code>:pig:</code></td>\n<td>🐽 <code>:pig_nose:</code></td>\n</tr>\n<tr>\n<td>🐮 <code>:cow:</code></td>\n<td>🐗 <code>:boar:</code></td>\n<td>🐵 <code>:monkey_face:</code></td>\n</tr>\n<tr>\n<td>🐒 <code>:monkey:</code></td>\n<td>🐴 <code>:horse:</code></td>\n<td>🐎 <code>:racehorse:</code></td>\n</tr>\n<tr>\n<td>🐫 <code>:camel:</code></td>\n<td>🐑 <code>:sheep:</code></td>\n<td>🐘 <code>:elephant:</code></td>\n</tr>\n<tr>\n<td>🐼 <code>:panda_face:</code></td>\n<td>🐍 <code>:snake:</code></td>\n<td>🐦 <code>:bird:</code></td>\n</tr>\n<tr>\n<td>🐤 <code>:baby_chick:</code></td>\n<td>🐥 <code>:hatched_chick:</code></td>\n<td>🐣 <code>:hatching_chick:</code></td>\n</tr>\n<tr>\n<td>🐔 <code>:chicken:</code></td>\n<td>🐧 <code>:penguin:</code></td>\n<td>🐢 <code>:turtle:</code></td>\n</tr>\n<tr>\n<td>🐛 <code>:bug:</code></td>\n<td>🐝 <code>:honeybee:</code></td>\n<td>🐜 <code>:ant:</code></td>\n</tr>\n<tr>\n<td>🐞 <code>:beetle:</code></td>\n<td>🐌 <code>:snail:</code></td>\n<td>🐙 <code>:octopus:</code></td>\n</tr>\n<tr>\n<td>🐠 <code>:tropical_fish:</code></td>\n<td>🐟 <code>:fish:</code></td>\n<td>🐳 <code>:whale:</code></td>\n</tr>\n<tr>\n<td>🐋 <code>:whale2:</code></td>\n<td>🐬 <code>:dolphin:</code></td>\n<td>🐄 <code>:cow2:</code></td>\n</tr>\n<tr>\n<td>🐏 <code>:ram:</code></td>\n<td>🐀 <code>:rat:</code></td>\n<td>🐃 <code>:water_buffalo:</code></td>\n</tr>\n<tr>\n<td>🐅 <code>:tiger2:</code></td>\n<td>🐇 <code>:rabbit2:</code></td>\n<td>🐉 <code>:dragon:</code></td>\n</tr>\n<tr>\n<td>🐐 <code>:goat:</code></td>\n<td>🐓 <code>:rooster:</code></td>\n<td>🐕 <code>:dog2:</code></td>\n</tr>\n<tr>\n<td>🐖 <code>:pig2:</code></td>\n<td>🐁 <code>:mouse2:</code></td>\n<td>🐂 <code>:ox:</code></td>\n</tr>\n<tr>\n<td>🐲 <code>:dragon_face:</code></td>\n<td>🐡 <code>:blowfish:</code></td>\n<td>🐊 <code>:crocodile:</code></td>\n</tr>\n<tr>\n<td>🐪 <code>:dromedary_camel:</code></td>\n<td>🐆 <code>:leopard:</code></td>\n<td>🐈 <code>:cat2:</code></td>\n</tr>\n<tr>\n<td>🐩 <code>:poodle:</code></td>\n<td>🐾 <code>:paw_prints:</code></td>\n<td>💐 <code>:bouquet:</code></td>\n</tr>\n<tr>\n<td>🌸 <code>:cherry_blossom:</code></td>\n<td>🌷 <code>:tulip:</code></td>\n<td>🍀 <code>:four_leaf_clover:</code></td>\n</tr>\n<tr>\n<td>🌹 <code>:rose:</code></td>\n<td>🌻 <code>:sunflower:</code></td>\n<td>🌺 <code>:hibiscus:</code></td>\n</tr>\n<tr>\n<td>🍁 <code>:maple_leaf:</code></td>\n<td>🍃 <code>:leaves:</code></td>\n<td>🍂 <code>:fallen_leaf:</code></td>\n</tr>\n<tr>\n<td>🌿 <code>:herb:</code></td>\n<td>🍄 <code>:mushroom:</code></td>\n<td>🌵 <code>:cactus:</code></td>\n</tr>\n<tr>\n<td>🌴 <code>:palm_tree:</code></td>\n<td>🌲 <code>:evergreen_tree:</code></td>\n<td>🌳 <code>:deciduous_tree:</code></td>\n</tr>\n<tr>\n<td>🌰 <code>:chestnut:</code></td>\n<td>🌱 <code>:seedling:</code></td>\n<td>🌼 <code>:blossom:</code></td>\n</tr>\n<tr>\n<td>🌾 <code>:ear_of_rice:</code></td>\n<td>🐚 <code>:shell:</code></td>\n<td>🌐 <code>:globe_with_meridians:</code></td>\n</tr>\n<tr>\n<td>🌞 <code>:sun_with_face:</code></td>\n<td>🌝 <code>:full_moon_with_face:</code></td>\n<td>🌚 <code>:new_moon_with_face:</code></td>\n</tr>\n<tr>\n<td>🌑 <code>:new_moon:</code></td>\n<td>🌒 <code>:waxing_crescent_moon:</code></td>\n<td>🌓 <code>:first_quarter_moon:</code></td>\n</tr>\n<tr>\n<td>🌔 <code>:waxing_gibbous_moon:</code></td>\n<td>🌕 <code>:full_moon:</code></td>\n<td>🌖 <code>:waning_gibbous_moon:</code></td>\n</tr>\n<tr>\n<td>🌗 <code>:last_quarter_moon:</code></td>\n<td>🌘 <code>:waning_crescent_moon:</code></td>\n<td>🌜 <code>:last_quarter_moon_with_face:</code></td>\n</tr>\n<tr>\n<td>🌛 <code>:first_quarter_moon_with_face:</code></td>\n<td>🌔 <code>:moon:</code></td>\n<td>🌍 <code>:earth_africa:</code></td>\n</tr>\n<tr>\n<td>🌎 <code>:earth_americas:</code></td>\n<td>🌏 <code>:earth_asia:</code></td>\n<td>🌋 <code>:volcano:</code></td>\n</tr>\n<tr>\n<td>🌌 <code>:milky_way:</code></td>\n<td>⛅️ <code>:partly_sunny:</code></td>\n<td>:octocat: <code>:octocat:</code></td>\n</tr>\n<tr>\n<td>:squirrel:<code>:squirrel:</code></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Objects</p>\n<table>\n<thead>\n<tr>\n<th>🎍 <code>:bamboo:</code></th>\n<th>💝 <code>:gift_heart:</code></th>\n<th>🎎 <code>:dolls:</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>🎒 <code>:school_satchel:</code></td>\n<td>🎓 <code>:mortar_board:</code></td>\n<td>🎏 <code>:flags:</code></td>\n</tr>\n<tr>\n<td>🎆 <code>:fireworks:</code></td>\n<td>🎇 <code>:sparkler:</code></td>\n<td>🎐 <code>:wind_chime:</code></td>\n</tr>\n<tr>\n<td>🎑 <code>:rice_scene:</code></td>\n<td>🎃 <code>:jack_o_lantern:</code></td>\n<td>👻 <code>:ghost:</code></td>\n</tr>\n<tr>\n<td>🎅 <code>:santa:</code></td>\n<td>🎄 <code>:christmas_tree:</code></td>\n<td>🎁 <code>:gift:</code></td>\n</tr>\n<tr>\n<td>🔔 <code>:bell:</code></td>\n<td>🔕 <code>:no_bell:</code></td>\n<td>🎋 <code>:tanabata_tree:</code></td>\n</tr>\n<tr>\n<td>🎉 <code>:tada:</code></td>\n<td>🎊 <code>:confetti_ball:</code></td>\n<td>🎈 <code>:balloon:</code></td>\n</tr>\n<tr>\n<td>🔮 <code>:crystal_ball:</code></td>\n<td>💿 <code>:cd:</code></td>\n<td>📀 <code>:dvd:</code></td>\n</tr>\n<tr>\n<td>💾 <code>:floppy_disk:</code></td>\n<td>📷 <code>:camera:</code></td>\n<td>📹 <code>:video_camera:</code></td>\n</tr>\n<tr>\n<td>🎥 <code>:movie_camera:</code></td>\n<td>💻 <code>:computer:</code></td>\n<td>📺 <code>:tv:</code></td>\n</tr>\n<tr>\n<td>📱 <code>:iphone:</code></td>\n<td>☎️ <code>:phone:</code></td>\n<td>☎️ <code>:telephone:</code></td>\n</tr>\n<tr>\n<td>📞 <code>:telephone_receiver:</code></td>\n<td>📟 <code>:pager:</code></td>\n<td>📠 <code>:fax:</code></td>\n</tr>\n<tr>\n<td>💽 <code>:minidisc:</code></td>\n<td>📼 <code>:vhs:</code></td>\n<td>🔉 <code>:sound:</code></td>\n</tr>\n<tr>\n<td>🔈 <code>:speaker:</code></td>\n<td>🔇 <code>:mute:</code></td>\n<td>📢 <code>:loudspeaker:</code></td>\n</tr>\n<tr>\n<td>📣 <code>:mega:</code></td>\n<td>⌛️ <code>:hourglass:</code></td>\n<td>⏳ <code>:hourglass_flowing_sand:</code></td>\n</tr>\n<tr>\n<td>⏰ <code>:alarm_clock:</code></td>\n<td>⌚️ <code>:watch:</code></td>\n<td>📻 <code>:radio:</code></td>\n</tr>\n<tr>\n<td>📡 <code>:satellite:</code></td>\n<td>➿ <code>:loop:</code></td>\n<td>🔍 <code>:mag:</code></td>\n</tr>\n<tr>\n<td>🔎 <code>:mag_right:</code></td>\n<td>🔓 <code>:unlock:</code></td>\n<td>🔒 <code>:lock:</code></td>\n</tr>\n<tr>\n<td>🔏 <code>:lock_with_ink_pen:</code></td>\n<td>🔐 <code>:closed_lock_with_key:</code></td>\n<td>🔑 <code>:key:</code></td>\n</tr>\n<tr>\n<td>💡 <code>:bulb:</code></td>\n<td>🔦 <code>:flashlight:</code></td>\n<td>🔆 <code>:high_brightness:</code></td>\n</tr>\n<tr>\n<td>🔅 <code>:low_brightness:</code></td>\n<td>🔌 <code>:electric_plug:</code></td>\n<td>🔋 <code>:battery:</code></td>\n</tr>\n<tr>\n<td>📲 <code>:calling:</code></td>\n<td>✉️ <code>:email:</code></td>\n<td>📫 <code>:mailbox:</code></td>\n</tr>\n<tr>\n<td>📮 <code>:postbox:</code></td>\n<td>🛀 <code>:bath:</code></td>\n<td>🛁 <code>:bathtub:</code></td>\n</tr>\n<tr>\n<td>🚿 <code>:shower:</code></td>\n<td>🚽 <code>:toilet:</code></td>\n<td>🔧 <code>:wrench:</code></td>\n</tr>\n<tr>\n<td>🔩 <code>:nut_and_bolt:</code></td>\n<td>🔨 <code>:hammer:</code></td>\n<td>💺 <code>:seat:</code></td>\n</tr>\n<tr>\n<td>💰 <code>:moneybag:</code></td>\n<td>💴 <code>:yen:</code></td>\n<td>💵 <code>:dollar:</code></td>\n</tr>\n<tr>\n<td>💷 <code>:pound:</code></td>\n<td>💶 <code>:euro:</code></td>\n<td>💳 <code>:credit_card:</code></td>\n</tr>\n<tr>\n<td>💸 <code>:money_with_wings:</code></td>\n<td>📧 <code>:e-mail:</code></td>\n<td>📥 <code>:inbox_tray:</code></td>\n</tr>\n<tr>\n<td>📤 <code>:outbox_tray:</code></td>\n<td>✉️ <code>:envelope:</code></td>\n<td>📨 <code>:incoming_envelope:</code></td>\n</tr>\n<tr>\n<td>📯 <code>:postal_horn:</code></td>\n<td>📪 <code>:mailbox_closed:</code></td>\n<td>📬 <code>:mailbox_with_mail:</code></td>\n</tr>\n<tr>\n<td>📭 <code>:mailbox_with_no_mail:</code></td>\n<td>🚪 <code>:door:</code></td>\n<td>🚬 <code>:smoking:</code></td>\n</tr>\n<tr>\n<td>💣 <code>:bomb:</code></td>\n<td>🔫 <code>:gun:</code></td>\n<td>🔪 <code>:hocho:</code></td>\n</tr>\n<tr>\n<td>💊 <code>:pill:</code></td>\n<td>💉 <code>:syringe:</code></td>\n<td>📄 <code>:page_facing_up:</code></td>\n</tr>\n<tr>\n<td>📃 <code>:page_with_curl:</code></td>\n<td>📑 <code>:bookmark_tabs:</code></td>\n<td>📊 <code>:bar_chart:</code></td>\n</tr>\n<tr>\n<td>📈 <code>:chart_with_upwards_trend:</code></td>\n<td>📉 <code>:chart_with_downwards_trend:</code></td>\n<td>📜 <code>:scroll:</code></td>\n</tr>\n<tr>\n<td>📋 <code>:clipboard:</code></td>\n<td>📆 <code>:calendar:</code></td>\n<td>📅 <code>:date:</code></td>\n</tr>\n<tr>\n<td>📇 <code>:card_index:</code></td>\n<td>📁 <code>:file_folder:</code></td>\n<td>📂 <code>:open_file_folder:</code></td>\n</tr>\n<tr>\n<td>✂️ <code>:scissors:</code></td>\n<td>📌 <code>:pushpin:</code></td>\n<td>📎 <code>:paperclip:</code></td>\n</tr>\n<tr>\n<td>✒️ <code>:black_nib:</code></td>\n<td>✏️ <code>:pencil2:</code></td>\n<td>📏 <code>:straight_ruler:</code></td>\n</tr>\n<tr>\n<td>📐 <code>:triangular_ruler:</code></td>\n<td>📕 <code>:closed_book:</code></td>\n<td>📗 <code>:green_book:</code></td>\n</tr>\n<tr>\n<td>📘 <code>:blue_book:</code></td>\n<td>📙 <code>:orange_book:</code></td>\n<td>📓 <code>:notebook:</code></td>\n</tr>\n<tr>\n<td>📔 <code>:notebook_with_decorative_cover:</code></td>\n<td>📒 <code>:ledger:</code></td>\n<td>📚 <code>:books:</code></td>\n</tr>\n<tr>\n<td>🔖 <code>:bookmark:</code></td>\n<td>📛 <code>:name_badge:</code></td>\n<td>🔬 <code>:microscope:</code></td>\n</tr>\n<tr>\n<td>🔭 <code>:telescope:</code></td>\n<td>📰 <code>:newspaper:</code></td>\n<td>🏈 <code>:football:</code></td>\n</tr>\n<tr>\n<td>🏀 <code>:basketball:</code></td>\n<td>⚽️ <code>:soccer:</code></td>\n<td>⚾️ <code>:baseball:</code></td>\n</tr>\n<tr>\n<td>🎾 <code>:tennis:</code></td>\n<td>🎱 <code>:8ball:</code></td>\n<td>🏉 <code>:rugby_football:</code></td>\n</tr>\n<tr>\n<td>🎳 <code>:bowling:</code></td>\n<td>⛳️ <code>:golf:</code></td>\n<td>🚵 <code>:mountain_bicyclist:</code></td>\n</tr>\n<tr>\n<td>🚴 <code>:bicyclist:</code></td>\n<td>🏇 <code>:horse_racing:</code></td>\n<td>🏂 <code>:snowboarder:</code></td>\n</tr>\n<tr>\n<td>🏊 <code>:swimmer:</code></td>\n<td>🏄 <code>:surfer:</code></td>\n<td>🎿 <code>:ski:</code></td>\n</tr>\n<tr>\n<td>♠️ <code>:spades:</code></td>\n<td>♥️ <code>:hearts:</code></td>\n<td>♣️ <code>:clubs:</code></td>\n</tr>\n<tr>\n<td>♦️ <code>:diamonds:</code></td>\n<td>💎 <code>:gem:</code></td>\n<td>💍 <code>:ring:</code></td>\n</tr>\n<tr>\n<td>🏆 <code>:trophy:</code></td>\n<td>🎼 <code>:musical_score:</code></td>\n<td>🎹 <code>:musical_keyboard:</code></td>\n</tr>\n<tr>\n<td>🎻 <code>:violin:</code></td>\n<td>👾 <code>:space_invader:</code></td>\n<td>🎮 <code>:video_game:</code></td>\n</tr>\n<tr>\n<td>🃏 <code>:black_joker:</code></td>\n<td>🎴 <code>:flower_playing_cards:</code></td>\n<td>🎲 <code>:game_die:</code></td>\n</tr>\n<tr>\n<td>🎯 <code>:dart:</code></td>\n<td>🀄️ <code>:mahjong:</code></td>\n<td>🎬 <code>:clapper:</code></td>\n</tr>\n<tr>\n<td>📝 <code>:memo:</code></td>\n<td>📝 <code>:pencil:</code></td>\n<td>📖 <code>:book:</code></td>\n</tr>\n<tr>\n<td>🎨 <code>:art:</code></td>\n<td>🎤 <code>:microphone:</code></td>\n<td>🎧 <code>:headphones:</code></td>\n</tr>\n<tr>\n<td>🎺 <code>:trumpet:</code></td>\n<td>🎷 <code>:saxophone:</code></td>\n<td>🎸 <code>:guitar:</code></td>\n</tr>\n<tr>\n<td>👞 <code>:shoe:</code></td>\n<td>👡 <code>:sandal:</code></td>\n<td>👠 <code>:high_heel:</code></td>\n</tr>\n<tr>\n<td>💄 <code>:lipstick:</code></td>\n<td>👢 <code>:boot:</code></td>\n<td>👕 <code>:shirt:</code></td>\n</tr>\n<tr>\n<td>👕 <code>:tshirt:</code></td>\n<td>👔 <code>:necktie:</code></td>\n<td>👚 <code>:womans_clothes:</code></td>\n</tr>\n<tr>\n<td>👗 <code>:dress:</code></td>\n<td>🎽 <code>:running_shirt_with_sash:</code></td>\n<td>👖 <code>:jeans:</code></td>\n</tr>\n<tr>\n<td>👘 <code>:kimono:</code></td>\n<td>👙 <code>:bikini:</code></td>\n<td>🎀 <code>:ribbon:</code></td>\n</tr>\n<tr>\n<td>🎩 <code>:tophat:</code></td>\n<td>👑 <code>:crown:</code></td>\n<td>👒 <code>:womans_hat:</code></td>\n</tr>\n<tr>\n<td>👞 <code>:mans_shoe:</code></td>\n<td>🌂 <code>:closed_umbrella:</code></td>\n<td>💼 <code>:briefcase:</code></td>\n</tr>\n<tr>\n<td>👜 <code>:handbag:</code></td>\n<td>👝 <code>:pouch:</code></td>\n<td>👛 <code>:purse:</code></td>\n</tr>\n<tr>\n<td>👓 <code>:eyeglasses:</code></td>\n<td>🎣 <code>:fishing_pole_and_fish:</code></td>\n<td>☕️ <code>:coffee:</code></td>\n</tr>\n<tr>\n<td>🍵 <code>:tea:</code></td>\n<td>🍶 <code>:sake:</code></td>\n<td>🍼 <code>:baby_bottle:</code></td>\n</tr>\n<tr>\n<td>🍺 <code>:beer:</code></td>\n<td>🍻 <code>:beers:</code></td>\n<td>🍸 <code>:cocktail:</code></td>\n</tr>\n<tr>\n<td>🍹 <code>:tropical_drink:</code></td>\n<td>🍷 <code>:wine_glass:</code></td>\n<td>🍴 <code>:fork_and_knife:</code></td>\n</tr>\n<tr>\n<td>🍕 <code>:pizza:</code></td>\n<td>🍔 <code>:hamburger:</code></td>\n<td>🍟 <code>:fries:</code></td>\n</tr>\n<tr>\n<td>🍗 <code>:poultry_leg:</code></td>\n<td>🍖 <code>:meat_on_bone:</code></td>\n<td>🍝 <code>:spaghetti:</code></td>\n</tr>\n<tr>\n<td>🍛 <code>:curry:</code></td>\n<td>🍤 <code>:fried_shrimp:</code></td>\n<td>🍱 <code>:bento:</code></td>\n</tr>\n<tr>\n<td>🍣 <code>:sushi:</code></td>\n<td>🍥 <code>:fish_cake:</code></td>\n<td>🍙 <code>:rice_ball:</code></td>\n</tr>\n<tr>\n<td>🍘 <code>:rice_cracker:</code></td>\n<td>🍚 <code>:rice:</code></td>\n<td>🍜 <code>:ramen:</code></td>\n</tr>\n<tr>\n<td>🍲 <code>:stew:</code></td>\n<td>🍢 <code>:oden:</code></td>\n<td>🍡 <code>:dango:</code></td>\n</tr>\n<tr>\n<td>🥚 <code>:egg:</code></td>\n<td>🍞 <code>:bread:</code></td>\n<td>🍩 <code>:doughnut:</code></td>\n</tr>\n<tr>\n<td>🍮 <code>:custard:</code></td>\n<td>🍦 <code>:icecream:</code></td>\n<td>🍨 <code>:ice_cream:</code></td>\n</tr>\n<tr>\n<td>🍧 <code>:shaved_ice:</code></td>\n<td>🎂 <code>:birthday:</code></td>\n<td>🍰 <code>:cake:</code></td>\n</tr>\n<tr>\n<td>🍪 <code>:cookie:</code></td>\n<td>🍫 <code>:chocolate_bar:</code></td>\n<td>🍬 <code>:candy:</code></td>\n</tr>\n<tr>\n<td>🍭 <code>:lollipop:</code></td>\n<td>🍯 <code>:honey_pot:</code></td>\n<td>🍎 <code>:apple:</code></td>\n</tr>\n<tr>\n<td>🍏 <code>:green_apple:</code></td>\n<td>🍊 <code>:tangerine:</code></td>\n<td>🍋 <code>:lemon:</code></td>\n</tr>\n<tr>\n<td>🍒 <code>:cherries:</code></td>\n<td>🍇 <code>:grapes:</code></td>\n<td>🍉 <code>:watermelon:</code></td>\n</tr>\n<tr>\n<td>🍓 <code>:strawberry:</code></td>\n<td>🍑 <code>:peach:</code></td>\n<td>🍈 <code>:melon:</code></td>\n</tr>\n<tr>\n<td>🍌 <code>:banana:</code></td>\n<td>🍐 <code>:pear:</code></td>\n<td>🍍 <code>:pineapple:</code></td>\n</tr>\n<tr>\n<td>🍠 <code>:sweet_potato:</code></td>\n<td>🍆 <code>:eggplant:</code></td>\n<td>🍅 <code>:tomato:</code></td>\n</tr>\n<tr>\n<td>🌽 <code>:corn:</code></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Places</p>\n<table>\n<thead>\n<tr>\n<th>🏠 <code>:house:</code></th>\n<th>🏡 <code>:house_with_garden:</code></th>\n<th>🏫 <code>:school:</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>🏢 <code>:office:</code></td>\n<td>🏣 <code>:post_office:</code></td>\n<td>🏥 <code>:hospital:</code></td>\n</tr>\n<tr>\n<td>🏦 <code>:bank:</code></td>\n<td>🏪 <code>:convenience_store:</code></td>\n<td>🏩 <code>:love_hotel:</code></td>\n</tr>\n<tr>\n<td>🏨 <code>:hotel:</code></td>\n<td>💒 <code>:wedding:</code></td>\n<td>⛪️ <code>:church:</code></td>\n</tr>\n<tr>\n<td>🏬 <code>:department_store:</code></td>\n<td>🏤 <code>:european_post_office:</code></td>\n<td>🌇 <code>:city_sunrise:</code></td>\n</tr>\n<tr>\n<td>🌆 <code>:city_sunset:</code></td>\n<td>🏯 <code>:japanese_castle:</code></td>\n<td>🏰 <code>:european_castle:</code></td>\n</tr>\n<tr>\n<td>⛺️ <code>:tent:</code></td>\n<td>🏭 <code>:factory:</code></td>\n<td>🗼 <code>:tokyo_tower:</code></td>\n</tr>\n<tr>\n<td>🗾 <code>:japan:</code></td>\n<td>🗻 <code>:mount_fuji:</code></td>\n<td>🌄 <code>:sunrise_over_mountains:</code></td>\n</tr>\n<tr>\n<td>🌅 <code>:sunrise:</code></td>\n<td>🌠 <code>:stars:</code></td>\n<td>🗽 <code>:statue_of_liberty:</code></td>\n</tr>\n<tr>\n<td>🌉 <code>:bridge_at_night:</code></td>\n<td>🎠 <code>:carousel_horse:</code></td>\n<td>🌈 <code>:rainbow:</code></td>\n</tr>\n<tr>\n<td>🎡 <code>:ferris_wheel:</code></td>\n<td>⛲️ <code>:fountain:</code></td>\n<td>🎢 <code>:roller_coaster:</code></td>\n</tr>\n<tr>\n<td>🚢 <code>:ship:</code></td>\n<td>🚤 <code>:speedboat:</code></td>\n<td>⛵️ <code>:boat:</code></td>\n</tr>\n<tr>\n<td>⛵️ <code>:sailboat:</code></td>\n<td>🚣 <code>:rowboat:</code></td>\n<td>⚓️ <code>:anchor:</code></td>\n</tr>\n<tr>\n<td>🚀 <code>:rocket:</code></td>\n<td>✈️ <code>:airplane:</code></td>\n<td>🚁 <code>:helicopter:</code></td>\n</tr>\n<tr>\n<td>🚂 <code>:steam_locomotive:</code></td>\n<td>🚊 <code>:tram:</code></td>\n<td>🚞 <code>:mountain_railway:</code></td>\n</tr>\n<tr>\n<td>🚲 <code>:bike:</code></td>\n<td>🚡 <code>:aerial_tramway:</code></td>\n<td>🚟 <code>:suspension_railway:</code></td>\n</tr>\n<tr>\n<td>🚠 <code>:mountain_cableway:</code></td>\n<td>🚜 <code>:tractor:</code></td>\n<td>🚙 <code>:blue_car:</code></td>\n</tr>\n<tr>\n<td>🚘 <code>:oncoming_automobile:</code></td>\n<td>🚗 <code>:car:</code></td>\n<td>🚗 <code>:red_car:</code></td>\n</tr>\n<tr>\n<td>🚕 <code>:taxi:</code></td>\n<td>🚖 <code>:oncoming_taxi:</code></td>\n<td>🚛 <code>:articulated_lorry:</code></td>\n</tr>\n<tr>\n<td>🚌 <code>:bus:</code></td>\n<td>🚍 <code>:oncoming_bus:</code></td>\n<td>🚨 <code>:rotating_light:</code></td>\n</tr>\n<tr>\n<td>🚓 <code>:police_car:</code></td>\n<td>🚔 <code>:oncoming_police_car:</code></td>\n<td>🚒 <code>:fire_engine:</code></td>\n</tr>\n<tr>\n<td>🚑 <code>:ambulance:</code></td>\n<td>🚐 <code>:minibus:</code></td>\n<td>🚚 <code>:truck:</code></td>\n</tr>\n<tr>\n<td>🚋 <code>:train:</code></td>\n<td>🚉 <code>:station:</code></td>\n<td>🚆 <code>:train2:</code></td>\n</tr>\n<tr>\n<td>🚅 <code>:bullettrain_front:</code></td>\n<td>🚄 <code>:bullettrain_side:</code></td>\n<td>🚈 <code>:light_rail:</code></td>\n</tr>\n<tr>\n<td>🚝 <code>:monorail:</code></td>\n<td>🚃 <code>:railway_car:</code></td>\n<td>🚎 <code>:trolleybus:</code></td>\n</tr>\n<tr>\n<td>🎫 <code>:ticket:</code></td>\n<td>⛽️ <code>:fuelpump:</code></td>\n<td>🚦 <code>:vertical_traffic_light:</code></td>\n</tr>\n<tr>\n<td>🚥 <code>:traffic_light:</code></td>\n<td>⚠️ <code>:warning:</code></td>\n<td>🚧 <code>:construction:</code></td>\n</tr>\n<tr>\n<td>🔰 <code>:beginner:</code></td>\n<td>🏧 <code>:atm:</code></td>\n<td>🎰 <code>:slot_machine:</code></td>\n</tr>\n<tr>\n<td>🚏 <code>:busstop:</code></td>\n<td>💈 <code>:barber:</code></td>\n<td>♨️ <code>:hotsprings:</code></td>\n</tr>\n<tr>\n<td>🏁 <code>:checkered_flag:</code></td>\n<td>🎌 <code>:crossed_flags:</code></td>\n<td>🏮 <code>:izakaya_lantern:</code></td>\n</tr>\n<tr>\n<td>🗿 <code>:moyai:</code></td>\n<td>🎪 <code>:circus_tent:</code></td>\n<td>🎭 <code>:performing_arts:</code></td>\n</tr>\n<tr>\n<td>📍 <code>:round_pushpin:</code></td>\n<td>🚩 <code>:triangular_flag_on_post:</code></td>\n<td>🇯🇵 <code>:jp:</code></td>\n</tr>\n<tr>\n<td>🇰🇷 <code>:kr:</code></td>\n<td>🇨🇳 <code>:cn:</code></td>\n<td>🇺🇸 <code>:us:</code></td>\n</tr>\n<tr>\n<td>🇫🇷 <code>:fr:</code></td>\n<td>🇪🇸 <code>:es:</code></td>\n<td>🇮🇹 <code>:it:</code></td>\n</tr>\n<tr>\n<td>🇷🇺 <code>:ru:</code></td>\n<td>🇬🇧 <code>:gb:</code></td>\n<td>🇬🇧 <code>:uk:</code></td>\n</tr>\n<tr>\n<td>🇩🇪 <code>:de:</code></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Symbols</p>\n<table>\n<thead>\n<tr>\n<th>1️⃣ <code>:one:</code></th>\n<th>2️⃣ <code>:two:</code></th>\n<th>3️⃣ <code>:three:</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4️⃣ <code>:four:</code></td>\n<td>5️⃣ <code>:five:</code></td>\n<td>6️⃣ <code>:six:</code></td>\n</tr>\n<tr>\n<td>7️⃣ <code>:seven:</code></td>\n<td>8️⃣ <code>:eight:</code></td>\n<td>9️⃣ <code>:nine:</code></td>\n</tr>\n<tr>\n<td>🔟 <code>:keycap_ten:</code></td>\n<td>🔢 <code>:1234:</code></td>\n<td>0️⃣ <code>:zero:</code></td>\n</tr>\n<tr>\n<td>#️⃣ <code>:hash:</code></td>\n<td>🔣 <code>:symbols:</code></td>\n<td>◀️ <code>:arrow_backward:</code></td>\n</tr>\n<tr>\n<td>⬇️ <code>:arrow_down:</code></td>\n<td>▶️ <code>:arrow_forward:</code></td>\n<td>⬅️ <code>:arrow_left:</code></td>\n</tr>\n<tr>\n<td>🔠 <code>:capital_abcd:</code></td>\n<td>🔡 <code>:abcd:</code></td>\n<td>🔤 <code>:abc:</code></td>\n</tr>\n<tr>\n<td>↙️ <code>:arrow_lower_left:</code></td>\n<td>↘️ <code>:arrow_lower_right:</code></td>\n<td>➡️ <code>:arrow_right:</code></td>\n</tr>\n<tr>\n<td>⬆️ <code>:arrow_up:</code></td>\n<td>↖️ <code>:arrow_upper_left:</code></td>\n<td>↗️ <code>:arrow_upper_right:</code></td>\n</tr>\n<tr>\n<td>⏬ <code>:arrow_double_down:</code></td>\n<td>⏫ <code>:arrow_double_up:</code></td>\n<td>🔽 <code>:arrow_down_small:</code></td>\n</tr>\n<tr>\n<td>⤵️ <code>:arrow_heading_down:</code></td>\n<td>⤴️ <code>:arrow_heading_up:</code></td>\n<td>↩️ <code>:leftwards_arrow_with_hook:</code></td>\n</tr>\n<tr>\n<td>↪️ <code>:arrow_right_hook:</code></td>\n<td>↔️ <code>:left_right_arrow:</code></td>\n<td>↕️ <code>:arrow_up_down:</code></td>\n</tr>\n<tr>\n<td>🔼 <code>:arrow_up_small:</code></td>\n<td>🔃 <code>:arrows_clockwise:</code></td>\n<td>🔄 <code>:arrows_counterclockwise:</code></td>\n</tr>\n<tr>\n<td>⏪ <code>:rewind:</code></td>\n<td>⏩ <code>:fast_forward:</code></td>\n<td>ℹ️ <code>:information_source:</code></td>\n</tr>\n<tr>\n<td>🆗 <code>:ok:</code></td>\n<td>🔀 <code>:twisted_rightwards_arrows:</code></td>\n<td>🔁 <code>:repeat:</code></td>\n</tr>\n<tr>\n<td>🔂 <code>:repeat_one:</code></td>\n<td>🆕 <code>:new:</code></td>\n<td>🔝 <code>:top:</code></td>\n</tr>\n<tr>\n<td>🆙 <code>:up:</code></td>\n<td>🆒 <code>:cool:</code></td>\n<td>🆓 <code>:free:</code></td>\n</tr>\n<tr>\n<td>🆖 <code>:ng:</code></td>\n<td>🎦 <code>:cinema:</code></td>\n<td>🈁 <code>:koko:</code></td>\n</tr>\n<tr>\n<td>📶 <code>:signal_strength:</code></td>\n<td>🈹 <code>:u5272:</code></td>\n<td>🈴 <code>:u5408:</code></td>\n</tr>\n<tr>\n<td>🈺 <code>:u55b6:</code></td>\n<td>🈯️ <code>:u6307:</code></td>\n<td>🈷️ <code>:u6708:</code></td>\n</tr>\n<tr>\n<td>🈶 <code>:u6709:</code></td>\n<td>🈵 <code>:u6e80:</code></td>\n<td>🈚️ <code>:u7121:</code></td>\n</tr>\n<tr>\n<td>🈸 <code>:u7533:</code></td>\n<td>🈳 <code>:u7a7a:</code></td>\n<td>🈲 <code>:u7981:</code></td>\n</tr>\n<tr>\n<td>🈂️ <code>:sa:</code></td>\n<td>🚻 <code>:restroom:</code></td>\n<td>🚹 <code>:mens:</code></td>\n</tr>\n<tr>\n<td>🚺 <code>:womens:</code></td>\n<td>🚼 <code>:baby_symbol:</code></td>\n<td>🚭 <code>:no_smoking:</code></td>\n</tr>\n<tr>\n<td>🅿️ <code>:parking:</code></td>\n<td>♿️ <code>:wheelchair:</code></td>\n<td>🚇 <code>:metro:</code></td>\n</tr>\n<tr>\n<td>🛄 <code>:baggage_claim:</code></td>\n<td>🉑<code>:accept:</code></td>\n<td>🚾 <code>:wc:</code></td>\n</tr>\n<tr>\n<td>🚰 <code>:potable_water:</code></td>\n<td>🚮 <code>:put_litter_in_its_place:</code></td>\n<td>㊙️ <code>:secret:</code></td>\n</tr>\n<tr>\n<td>㊗️ <code>:congratulations:</code></td>\n<td>Ⓜ️ <code>:m:</code></td>\n<td>🛂 <code>:passport_control:</code></td>\n</tr>\n<tr>\n<td>🛅 <code>:left_luggage:</code></td>\n<td>🛃 <code>:customs:</code></td>\n<td>🉐 <code>:ideograph_advantage:</code></td>\n</tr>\n<tr>\n<td>🆑 <code>:cl:</code></td>\n<td>🆘 <code>:sos:</code></td>\n<td>🆔 <code>:id:</code></td>\n</tr>\n<tr>\n<td>🚫 <code>:no_entry_sign:</code></td>\n<td>🔞 <code>:underage:</code></td>\n<td>📵 <code>:no_mobile_phones:</code></td>\n</tr>\n<tr>\n<td>🚯 <code>:do_not_litter:</code></td>\n<td>🚱 <code>:non-potable_water:</code></td>\n<td>🚳 <code>:no_bicycles:</code></td>\n</tr>\n<tr>\n<td>🚷 <code>:no_pedestrians:</code></td>\n<td>🚸 <code>:children_crossing:</code></td>\n<td>⛔️ <code>:no_entry:</code></td>\n</tr>\n<tr>\n<td>✳️ <code>:eight_spoked_asterisk:</code></td>\n<td>✴️ <code>:eight_pointed_black_star:</code></td>\n<td>💟 <code>:heart_decoration:</code></td>\n</tr>\n<tr>\n<td>🆚 <code>:vs:</code></td>\n<td>📳 <code>:vibration_mode:</code></td>\n<td>📴 <code>:mobile_phone_off:</code></td>\n</tr>\n<tr>\n<td>💹 <code>:chart:</code></td>\n<td>💱 <code>:currency_exchange:</code></td>\n<td>♈️ <code>:aries:</code></td>\n</tr>\n<tr>\n<td>♉️ <code>:taurus:</code></td>\n<td>♊️ <code>:gemini:</code></td>\n<td>♋️ <code>:cancer:</code></td>\n</tr>\n<tr>\n<td>♌️ <code>:leo:</code></td>\n<td>♍️ <code>:virgo:</code></td>\n<td>♎️ <code>:libra:</code></td>\n</tr>\n<tr>\n<td>♏️ <code>:scorpius:</code></td>\n<td>♐️ <code>:sagittarius:</code></td>\n<td>♑️ <code>:capricorn:</code></td>\n</tr>\n<tr>\n<td>♒️ <code>:aquarius:</code></td>\n<td>♓️ <code>:pisces:</code></td>\n<td>⛎ <code>:ophiuchus:</code></td>\n</tr>\n<tr>\n<td>🔯 <code>:six_pointed_star:</code></td>\n<td>❎ <code>:negative_squared_cross_mark:</code></td>\n<td>🅰️ <code>:a:</code></td>\n</tr>\n<tr>\n<td>🅱️ <code>:b:</code></td>\n<td>🆎 <code>:ab:</code></td>\n<td>🅾️ <code>:o2:</code></td>\n</tr>\n<tr>\n<td>💠 <code>:diamond_shape_with_a_dot_inside:</code></td>\n<td>♻️ <code>:recycle:</code></td>\n<td>🔚 <code>:end:</code></td>\n</tr>\n<tr>\n<td>🔛 <code>:on:</code></td>\n<td>🔜 <code>:soon:</code></td>\n<td>🕐 <code>:clock1:</code></td>\n</tr>\n<tr>\n<td>🕜 <code>:clock130:</code></td>\n<td>🕙 <code>:clock10:</code></td>\n<td>🕥 <code>:clock1030:</code></td>\n</tr>\n<tr>\n<td>🕚 <code>:clock11:</code></td>\n<td>🕦 <code>:clock1130:</code></td>\n<td>🕛 <code>:clock12:</code></td>\n</tr>\n<tr>\n<td>🕧 <code>:clock1230:</code></td>\n<td>🕑 <code>:clock2:</code></td>\n<td>🕝 <code>:clock230:</code></td>\n</tr>\n<tr>\n<td>🕒 <code>:clock3:</code></td>\n<td>🕞 <code>:clock330:</code></td>\n<td>🕓 <code>:clock4:</code></td>\n</tr>\n<tr>\n<td>🕟 <code>:clock430:</code></td>\n<td>🕔 <code>:clock5:</code></td>\n<td>🕠 <code>:clock530:</code></td>\n</tr>\n<tr>\n<td>🕕 <code>:clock6:</code></td>\n<td>🕡 <code>:clock630:</code></td>\n<td>🕖 <code>:clock7:</code></td>\n</tr>\n<tr>\n<td>🕢 <code>:clock730:</code></td>\n<td>🕗 <code>:clock8:</code></td>\n<td>🕣 <code>:clock830:</code></td>\n</tr>\n<tr>\n<td>🕘 <code>:clock9:</code></td>\n<td>🕤 <code>:clock930:</code></td>\n<td>💲 <code>:heavy_dollar_sign:</code></td>\n</tr>\n<tr>\n<td>©️ <code>:copyright:</code></td>\n<td>®️ <code>:registered:</code></td>\n<td>™️ <code>:tm:</code></td>\n</tr>\n<tr>\n<td>❌ <code>:x:</code></td>\n<td>❗️ <code>:heavy_exclamation_mark:</code></td>\n<td>‼️ <code>:bangbang:</code></td>\n</tr>\n<tr>\n<td>⁉️ <code>:interrobang:</code></td>\n<td>⭕️ <code>:o:</code></td>\n<td>✖️ <code>:heavy_multiplication_x:</code></td>\n</tr>\n<tr>\n<td>➕ <code>:heavy_plus_sign:</code></td>\n<td>➖ <code>:heavy_minus_sign:</code></td>\n<td>➗ <code>:heavy_division_sign:</code></td>\n</tr>\n<tr>\n<td>💮 <code>:white_flower:</code></td>\n<td>💯 <code>:100:</code></td>\n<td>✔️ <code>:heavy_check_mark:</code></td>\n</tr>\n<tr>\n<td>☑️ <code>:ballot_box_with_check:</code></td>\n<td>🔘 <code>:radio_button:</code></td>\n<td>🔗 <code>:link:</code></td>\n</tr>\n<tr>\n<td>➰ <code>:curly_loop:</code></td>\n<td>〰️ <code>:wavy_dash:</code></td>\n<td>〽️ <code>:part_alternation_mark:</code></td>\n</tr>\n<tr>\n<td>🔱 <code>:trident:</code></td>\n<td>:black_square:<code>:black_square:</code></td>\n<td>:white_square:<code>:white_square:</code></td>\n</tr>\n<tr>\n<td>✅ <code>:white_check_mark:</code></td>\n<td>🔲 <code>:black_square_button:</code></td>\n<td>🔳 <code>:white_square_button:</code></td>\n</tr>\n<tr>\n<td>⚫️ <code>:black_circle:</code></td>\n<td>⚪️ <code>:white_circle:</code></td>\n<td>🔴 <code>:red_circle:</code></td>\n</tr>\n<tr>\n<td>🔵 <code>:large_blue_circle:</code></td>\n<td>🔷 <code>:large_blue_diamond:</code></td>\n<td>🔶 <code>:large_orange_diamond:</code></td>\n</tr>\n<tr>\n<td>🔹 <code>:small_blue_diamond:</code></td>\n<td>🔸 <code>:small_orange_diamond:</code></td>\n<td>🔺 <code>:small_red_triangle:</code></td>\n</tr>\n<tr>\n<td>🔻 <code>:small_red_triangle_down:</code></td>\n<td>:shipit:<code>:shipit:</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>People</p>\n<table>\n<thead>\n<tr>\n<th>:bowtie:<code>:bowtie:</code></th>\n<th>😄 <code>:smile:</code></th>\n<th>😆 <code>:laughing:</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>😊 <code>:blush:</code></td>\n<td>😃 <code>:smiley:</code></td>\n<td>☺️ <code>:relaxed:</code></td>\n</tr>\n<tr>\n<td>😏 <code>:smirk:</code></td>\n<td>😍 <code>:heart_eyes:</code></td>\n<td>😘 <code>:kissing_heart:</code></td>\n</tr>\n<tr>\n<td>😚 <code>:kissing_closed_eyes:</code></td>\n<td>😳 <code>:flushed:</code></td>\n<td>😌 <code>:relieved:</code></td>\n</tr>\n<tr>\n<td>😆 <code>:satisfied:</code></td>\n<td>😁 <code>:grin:</code></td>\n<td>😉 <code>:wink:</code></td>\n</tr>\n<tr>\n<td>😜 <code>:stuck_out_tongue_winking_eye:</code></td>\n<td>😝 <code>:stuck_out_tongue_closed_eyes:</code></td>\n<td>😀 <code>:grinning:</code></td>\n</tr>\n<tr>\n<td>😗 <code>:kissing:</code></td>\n<td>😙 <code>:kissing_smiling_eyes:</code></td>\n<td>😛 <code>:stuck_out_tongue:</code></td>\n</tr>\n<tr>\n<td>😴 <code>:sleeping:</code></td>\n<td>😟 <code>:worried:</code></td>\n<td>😦 <code>:frowning:</code></td>\n</tr>\n<tr>\n<td>😧 <code>:anguished:</code></td>\n<td>😮 <code>:open_mouth:</code></td>\n<td>😬 <code>:grimacing:</code></td>\n</tr>\n<tr>\n<td>😕 <code>:confused:</code></td>\n<td>😯 <code>:hushed:</code></td>\n<td>😑 <code>:expressionless:</code></td>\n</tr>\n<tr>\n<td>😒 <code>:unamused:</code></td>\n<td>😅 <code>:sweat_smile:</code></td>\n<td>😓 <code>:sweat:</code></td>\n</tr>\n<tr>\n<td>😥 <code>:disappointed_relieved:</code></td>\n<td>😩 <code>:weary:</code></td>\n<td>😔 <code>:pensive:</code></td>\n</tr>\n<tr>\n<td>😞 <code>:disappointed:</code></td>\n<td>😖 <code>:confounded:</code></td>\n<td>😨 <code>:fearful:</code></td>\n</tr>\n<tr>\n<td>😰 <code>:cold_sweat:</code></td>\n<td>😣 <code>:persevere:</code></td>\n<td>😢 <code>:cry:</code></td>\n</tr>\n<tr>\n<td>😭 <code>:sob:</code></td>\n<td>😂 <code>:joy:</code></td>\n<td>😲 <code>:astonished:</code></td>\n</tr>\n<tr>\n<td>😱 <code>:scream:</code></td>\n<td>:neckbeard:<code>:neckbeard:</code></td>\n<td>😫 <code>:tired_face:</code></td>\n</tr>\n<tr>\n<td>😠 <code>:angry:</code></td>\n<td>😡 <code>:rage:</code></td>\n<td>😤 <code>:triumph:</code></td>\n</tr>\n<tr>\n<td>😪 <code>:sleepy:</code></td>\n<td>😋 <code>:yum:</code></td>\n<td>😷 <code>:mask:</code></td>\n</tr>\n<tr>\n<td>😎 <code>:sunglasses:</code></td>\n<td>😵 <code>:dizzy_face:</code></td>\n<td>👿 <code>:imp:</code></td>\n</tr>\n<tr>\n<td>😈 <code>:smiling_imp:</code></td>\n<td>😐 <code>:neutral_face:</code></td>\n<td>😶 <code>:no_mouth:</code></td>\n</tr>\n<tr>\n<td>😇 <code>:innocent:</code></td>\n<td>👽 <code>:alien:</code></td>\n<td>💛 <code>:yellow_heart:</code></td>\n</tr>\n<tr>\n<td>💙 <code>:blue_heart:</code></td>\n<td>💜 <code>:purple_heart:</code></td>\n<td>❤️ <code>:heart:</code></td>\n</tr>\n<tr>\n<td>💚 <code>:green_heart:</code></td>\n<td>💔 <code>:broken_heart:</code></td>\n<td>💓 <code>:heartbeat:</code></td>\n</tr>\n<tr>\n<td>💗 <code>:heartpulse:</code></td>\n<td>💕 <code>:two_hearts:</code></td>\n<td>💞 <code>:revolving_hearts:</code></td>\n</tr>\n<tr>\n<td>💘 <code>:cupid:</code></td>\n<td>💖 <code>:sparkling_heart:</code></td>\n<td>✨ <code>:sparkles:</code></td>\n</tr>\n<tr>\n<td>⭐️ <code>:star:</code></td>\n<td>🌟 <code>:star2:</code></td>\n<td>💫 <code>:dizzy:</code></td>\n</tr>\n<tr>\n<td>💥 <code>:boom:</code></td>\n<td>💥 <code>:collision:</code></td>\n<td>💢 <code>:anger:</code></td>\n</tr>\n<tr>\n<td>❗️ <code>:exclamation:</code></td>\n<td>❓ <code>:question:</code></td>\n<td>❕ <code>:grey_exclamation:</code></td>\n</tr>\n<tr>\n<td>❔ <code>:grey_question:</code></td>\n<td>💤 <code>:zzz:</code></td>\n<td>💨 <code>:dash:</code></td>\n</tr>\n<tr>\n<td>💦 <code>:sweat_drops:</code></td>\n<td>🎶 <code>:notes:</code></td>\n<td>🎵 <code>:musical_note:</code></td>\n</tr>\n<tr>\n<td>🔥 <code>:fire:</code></td>\n<td>💩 <code>:hankey:</code></td>\n<td>💩 <code>:poop:</code></td>\n</tr>\n<tr>\n<td>💩 <code>:shit:</code></td>\n<td>👍 <code>:+1:</code></td>\n<td>👍 <code>:thumbsup:</code></td>\n</tr>\n<tr>\n<td>👎 <code>:-1:</code></td>\n<td>👎 <code>:thumbsdown:</code></td>\n<td>👌 <code>:ok_hand:</code></td>\n</tr>\n<tr>\n<td>👊 <code>:punch:</code></td>\n<td>👊 <code>:facepunch:</code></td>\n<td>✊ <code>:fist:</code></td>\n</tr>\n<tr>\n<td>✌️ <code>:v:</code></td>\n<td>👋 <code>:wave:</code></td>\n<td>✋ <code>:hand:</code></td>\n</tr>\n<tr>\n<td>✋ <code>:raised_hand:</code></td>\n<td>👐 <code>:open_hands:</code></td>\n<td>☝️ <code>:point_up:</code></td>\n</tr>\n<tr>\n<td>👇 <code>:point_down:</code></td>\n<td>👈 <code>:point_left:</code></td>\n<td>👉 <code>:point_right:</code></td>\n</tr>\n<tr>\n<td>🙌 <code>:raised_hands:</code></td>\n<td>🙏 <code>:pray:</code></td>\n<td>👆 <code>:point_up_2:</code></td>\n</tr>\n<tr>\n<td>👏 <code>:clap:</code></td>\n<td>💪 <code>:muscle:</code></td>\n<td>🤘 <code>:metal:</code></td>\n</tr>\n<tr>\n<td>🖕 <code>:fu:</code></td>\n<td>🚶 <code>:walking:</code></td>\n<td>🏃 <code>:runner:</code></td>\n</tr>\n<tr>\n<td>🏃 <code>:running:</code></td>\n<td>👫 <code>:couple:</code></td>\n<td>👪 <code>:family:</code></td>\n</tr>\n<tr>\n<td>👬 <code>:two_men_holding_hands:</code></td>\n<td>👭 <code>:two_women_holding_hands:</code></td>\n<td>💃 <code>:dancer:</code></td>\n</tr>\n<tr>\n<td>👯 <code>:dancers:</code></td>\n<td>🙆 <code>:ok_woman:</code></td>\n<td>🙅 <code>:no_good:</code></td>\n</tr>\n<tr>\n<td>💁 <code>:information_desk_person:</code></td>\n<td>🙋 <code>:raising_hand:</code></td>\n<td>👰 <code>:bride_with_veil:</code></td>\n</tr>\n<tr>\n<td>🙎 <code>:person_with_pouting_face:</code></td>\n<td>🙍 <code>:person_frowning:</code></td>\n<td>🙇 <code>:bow:</code></td>\n</tr>\n<tr>\n<td>💏<code>:couplekiss:</code></td>\n<td>💑 <code>:couple_with_heart:</code></td>\n<td>💆 <code>:massage:</code></td>\n</tr>\n<tr>\n<td>💇 <code>:haircut:</code></td>\n<td>💅 <code>:nail_care:</code></td>\n<td>👦 <code>:boy:</code></td>\n</tr>\n<tr>\n<td>👧 <code>:girl:</code></td>\n<td>👩 <code>:woman:</code></td>\n<td>👨 <code>:man:</code></td>\n</tr>\n<tr>\n<td>👶 <code>:baby:</code></td>\n<td>👵 <code>:older_woman:</code></td>\n<td>👴 <code>:older_man:</code></td>\n</tr>\n<tr>\n<td>👱 <code>:person_with_blond_hair:</code></td>\n<td>👲 <code>:man_with_gua_pi_mao:</code></td>\n<td>👳 <code>:man_with_turban:</code></td>\n</tr>\n<tr>\n<td>👷 <code>:construction_worker:</code></td>\n<td>👮 <code>:cop:</code></td>\n<td>👼 <code>:angel:</code></td>\n</tr>\n<tr>\n<td>👸 <code>:princess:</code></td>\n<td>😺 <code>:smiley_cat:</code></td>\n<td>😸 <code>:smile_cat:</code></td>\n</tr>\n<tr>\n<td>😻 <code>:heart_eyes_cat:</code></td>\n<td>😽 <code>:kissing_cat:</code></td>\n<td>😼 <code>:smirk_cat:</code></td>\n</tr>\n<tr>\n<td>🙀 <code>:scream_cat:</code></td>\n<td>😿 <code>:crying_cat_face:</code></td>\n<td>😹 <code>:joy_cat:</code></td>\n</tr>\n<tr>\n<td>😾 <code>:pouting_cat:</code></td>\n<td>👹 <code>:japanese_ogre:</code></td>\n<td>👺 <code>:japanese_goblin:</code></td>\n</tr>\n<tr>\n<td>🙈 <code>:see_no_evil:</code></td>\n<td>🙉 <code>:hear_no_evil:</code></td>\n<td>🙊 <code>:speak_no_evil:</code></td>\n</tr>\n<tr>\n<td>💂 <code>:guardsman:</code></td>\n<td>💀 <code>:skull:</code></td>\n<td>🐾 <code>:feet:</code></td>\n</tr>\n<tr>\n<td>👄 <code>:lips:</code></td>\n<td>💋 <code>:kiss:</code></td>\n<td>💧 <code>:droplet:</code></td>\n</tr>\n<tr>\n<td>👂 <code>:ear:</code></td>\n<td>👀 <code>:eyes:</code></td>\n<td>👃 <code>:nose:</code></td>\n</tr>\n<tr>\n<td>👅 <code>:tongue:</code></td>\n<td>💌 <code>:love_letter:</code></td>\n<td>👤 <code>:bust_in_silhouette:</code></td>\n</tr>\n<tr>\n<td>👥 <code>:busts_in_silhouette:</code></td>\n<td>💬 <code>:speech_balloon:</code></td>\n<td>💭 <code>:thought_balloon:</code></td>\n</tr>\n<tr>\n<td>:feelsgood:<code>:feelsgood:</code></td>\n<td>:finnadie:<code>:finnadie:</code></td>\n<td>:goberserk:<code>:goberserk:</code></td>\n</tr>\n<tr>\n<td>:godmode:<code>:godmode:</code></td>\n<td>:hurtrealbad:<code>:hurtrealbad:</code></td>\n<td>:rage1:<code>:rage1:</code></td>\n</tr>\n<tr>\n<td>:rage2:<code>:rage2:</code></td>\n<td>:rage3:<code>:rage3:</code></td>\n<td>:rage4:<code>:rage4:</code></td>\n</tr>\n<tr>\n<td>:suspect:<code>:suspect:</code></td>\n<td>:trollface: <code>:trollface:</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Nature</p>\n<table>\n<thead>\n<tr>\n<th>☀️ <code>:sunny:</code></th>\n<th>☔️ <code>:umbrella:</code></th>\n<th>☁️ <code>:cloud:</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>❄️ <code>:snowflake:</code></td>\n<td>⛄️ <code>:snowman:</code></td>\n<td>⚡️ <code>:zap:</code></td>\n</tr>\n<tr>\n<td>🌀 <code>:cyclone:</code></td>\n<td>🌁 <code>:foggy:</code></td>\n<td>🌊 <code>:ocean:</code></td>\n</tr>\n<tr>\n<td>🐱 <code>:cat:</code></td>\n<td>🐶 <code>:dog:</code></td>\n<td>🐭 <code>:mouse:</code></td>\n</tr>\n<tr>\n<td>🐹 <code>:hamster:</code></td>\n<td>🐰 <code>:rabbit:</code></td>\n<td>🐺 <code>:wolf:</code></td>\n</tr>\n<tr>\n<td>🐸 <code>:frog:</code></td>\n<td>🐯 <code>:tiger:</code></td>\n<td>🐨 <code>:koala:</code></td>\n</tr>\n<tr>\n<td>🐻 <code>:bear:</code></td>\n<td>🐷 <code>:pig:</code></td>\n<td>🐽 <code>:pig_nose:</code></td>\n</tr>\n<tr>\n<td>🐮 <code>:cow:</code></td>\n<td>🐗 <code>:boar:</code></td>\n<td>🐵 <code>:monkey_face:</code></td>\n</tr>\n<tr>\n<td>🐒 <code>:monkey:</code></td>\n<td>🐴 <code>:horse:</code></td>\n<td>🐎 <code>:racehorse:</code></td>\n</tr>\n<tr>\n<td>🐫 <code>:camel:</code></td>\n<td>🐑 <code>:sheep:</code></td>\n<td>🐘 <code>:elephant:</code></td>\n</tr>\n<tr>\n<td>🐼 <code>:panda_face:</code></td>\n<td>🐍 <code>:snake:</code></td>\n<td>🐦 <code>:bird:</code></td>\n</tr>\n<tr>\n<td>🐤 <code>:baby_chick:</code></td>\n<td>🐥 <code>:hatched_chick:</code></td>\n<td>🐣 <code>:hatching_chick:</code></td>\n</tr>\n<tr>\n<td>🐔 <code>:chicken:</code></td>\n<td>🐧 <code>:penguin:</code></td>\n<td>🐢 <code>:turtle:</code></td>\n</tr>\n<tr>\n<td>🐛 <code>:bug:</code></td>\n<td>🐝 <code>:honeybee:</code></td>\n<td>🐜 <code>:ant:</code></td>\n</tr>\n<tr>\n<td>🐞 <code>:beetle:</code></td>\n<td>🐌 <code>:snail:</code></td>\n<td>🐙 <code>:octopus:</code></td>\n</tr>\n<tr>\n<td>🐠 <code>:tropical_fish:</code></td>\n<td>🐟 <code>:fish:</code></td>\n<td>🐳 <code>:whale:</code></td>\n</tr>\n<tr>\n<td>🐋 <code>:whale2:</code></td>\n<td>🐬 <code>:dolphin:</code></td>\n<td>🐄 <code>:cow2:</code></td>\n</tr>\n<tr>\n<td>🐏 <code>:ram:</code></td>\n<td>🐀 <code>:rat:</code></td>\n<td>🐃 <code>:water_buffalo:</code></td>\n</tr>\n<tr>\n<td>🐅 <code>:tiger2:</code></td>\n<td>🐇 <code>:rabbit2:</code></td>\n<td>🐉 <code>:dragon:</code></td>\n</tr>\n<tr>\n<td>🐐 <code>:goat:</code></td>\n<td>🐓 <code>:rooster:</code></td>\n<td>🐕 <code>:dog2:</code></td>\n</tr>\n<tr>\n<td>🐖 <code>:pig2:</code></td>\n<td>🐁 <code>:mouse2:</code></td>\n<td>🐂 <code>:ox:</code></td>\n</tr>\n<tr>\n<td>🐲 <code>:dragon_face:</code></td>\n<td>🐡 <code>:blowfish:</code></td>\n<td>🐊 <code>:crocodile:</code></td>\n</tr>\n<tr>\n<td>🐪 <code>:dromedary_camel:</code></td>\n<td>🐆 <code>:leopard:</code></td>\n<td>🐈 <code>:cat2:</code></td>\n</tr>\n<tr>\n<td>🐩 <code>:poodle:</code></td>\n<td>🐾 <code>:paw_prints:</code></td>\n<td>💐 <code>:bouquet:</code></td>\n</tr>\n<tr>\n<td>🌸 <code>:cherry_blossom:</code></td>\n<td>🌷 <code>:tulip:</code></td>\n<td>🍀 <code>:four_leaf_clover:</code></td>\n</tr>\n<tr>\n<td>🌹 <code>:rose:</code></td>\n<td>🌻 <code>:sunflower:</code></td>\n<td>🌺 <code>:hibiscus:</code></td>\n</tr>\n<tr>\n<td>🍁 <code>:maple_leaf:</code></td>\n<td>🍃 <code>:leaves:</code></td>\n<td>🍂 <code>:fallen_leaf:</code></td>\n</tr>\n<tr>\n<td>🌿 <code>:herb:</code></td>\n<td>🍄 <code>:mushroom:</code></td>\n<td>🌵 <code>:cactus:</code></td>\n</tr>\n<tr>\n<td>🌴 <code>:palm_tree:</code></td>\n<td>🌲 <code>:evergreen_tree:</code></td>\n<td>🌳 <code>:deciduous_tree:</code></td>\n</tr>\n<tr>\n<td>🌰 <code>:chestnut:</code></td>\n<td>🌱 <code>:seedling:</code></td>\n<td>🌼 <code>:blossom:</code></td>\n</tr>\n<tr>\n<td>🌾 <code>:ear_of_rice:</code></td>\n<td>🐚 <code>:shell:</code></td>\n<td>🌐 <code>:globe_with_meridians:</code></td>\n</tr>\n<tr>\n<td>🌞 <code>:sun_with_face:</code></td>\n<td>🌝 <code>:full_moon_with_face:</code></td>\n<td>🌚 <code>:new_moon_with_face:</code></td>\n</tr>\n<tr>\n<td>🌑 <code>:new_moon:</code></td>\n<td>🌒 <code>:waxing_crescent_moon:</code></td>\n<td>🌓 <code>:first_quarter_moon:</code></td>\n</tr>\n<tr>\n<td>🌔 <code>:waxing_gibbous_moon:</code></td>\n<td>🌕 <code>:full_moon:</code></td>\n<td>🌖 <code>:waning_gibbous_moon:</code></td>\n</tr>\n<tr>\n<td>🌗 <code>:last_quarter_moon:</code></td>\n<td>🌘 <code>:waning_crescent_moon:</code></td>\n<td>🌜 <code>:last_quarter_moon_with_face:</code></td>\n</tr>\n<tr>\n<td>🌛 <code>:first_quarter_moon_with_face:</code></td>\n<td>🌔 <code>:moon:</code></td>\n<td>🌍 <code>:earth_africa:</code></td>\n</tr>\n<tr>\n<td>🌎 <code>:earth_americas:</code></td>\n<td>🌏 <code>:earth_asia:</code></td>\n<td>🌋 <code>:volcano:</code></td>\n</tr>\n<tr>\n<td>🌌 <code>:milky_way:</code></td>\n<td>⛅️ <code>:partly_sunny:</code></td>\n<td>:octocat: <code>:octocat:</code></td>\n</tr>\n<tr>\n<td>:squirrel:<code>:squirrel:</code></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Objects</p>\n<table>\n<thead>\n<tr>\n<th>🎍 <code>:bamboo:</code></th>\n<th>💝 <code>:gift_heart:</code></th>\n<th>🎎 <code>:dolls:</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>🎒 <code>:school_satchel:</code></td>\n<td>🎓 <code>:mortar_board:</code></td>\n<td>🎏 <code>:flags:</code></td>\n</tr>\n<tr>\n<td>🎆 <code>:fireworks:</code></td>\n<td>🎇 <code>:sparkler:</code></td>\n<td>🎐 <code>:wind_chime:</code></td>\n</tr>\n<tr>\n<td>🎑 <code>:rice_scene:</code></td>\n<td>🎃 <code>:jack_o_lantern:</code></td>\n<td>👻 <code>:ghost:</code></td>\n</tr>\n<tr>\n<td>🎅 <code>:santa:</code></td>\n<td>🎄 <code>:christmas_tree:</code></td>\n<td>🎁 <code>:gift:</code></td>\n</tr>\n<tr>\n<td>🔔 <code>:bell:</code></td>\n<td>🔕 <code>:no_bell:</code></td>\n<td>🎋 <code>:tanabata_tree:</code></td>\n</tr>\n<tr>\n<td>🎉 <code>:tada:</code></td>\n<td>🎊 <code>:confetti_ball:</code></td>\n<td>🎈 <code>:balloon:</code></td>\n</tr>\n<tr>\n<td>🔮 <code>:crystal_ball:</code></td>\n<td>💿 <code>:cd:</code></td>\n<td>📀 <code>:dvd:</code></td>\n</tr>\n<tr>\n<td>💾 <code>:floppy_disk:</code></td>\n<td>📷 <code>:camera:</code></td>\n<td>📹 <code>:video_camera:</code></td>\n</tr>\n<tr>\n<td>🎥 <code>:movie_camera:</code></td>\n<td>💻 <code>:computer:</code></td>\n<td>📺 <code>:tv:</code></td>\n</tr>\n<tr>\n<td>📱 <code>:iphone:</code></td>\n<td>☎️ <code>:phone:</code></td>\n<td>☎️ <code>:telephone:</code></td>\n</tr>\n<tr>\n<td>📞 <code>:telephone_receiver:</code></td>\n<td>📟 <code>:pager:</code></td>\n<td>📠 <code>:fax:</code></td>\n</tr>\n<tr>\n<td>💽 <code>:minidisc:</code></td>\n<td>📼 <code>:vhs:</code></td>\n<td>🔉 <code>:sound:</code></td>\n</tr>\n<tr>\n<td>🔈 <code>:speaker:</code></td>\n<td>🔇 <code>:mute:</code></td>\n<td>📢 <code>:loudspeaker:</code></td>\n</tr>\n<tr>\n<td>📣 <code>:mega:</code></td>\n<td>⌛️ <code>:hourglass:</code></td>\n<td>⏳ <code>:hourglass_flowing_sand:</code></td>\n</tr>\n<tr>\n<td>⏰ <code>:alarm_clock:</code></td>\n<td>⌚️ <code>:watch:</code></td>\n<td>📻 <code>:radio:</code></td>\n</tr>\n<tr>\n<td>📡 <code>:satellite:</code></td>\n<td>➿ <code>:loop:</code></td>\n<td>🔍 <code>:mag:</code></td>\n</tr>\n<tr>\n<td>🔎 <code>:mag_right:</code></td>\n<td>🔓 <code>:unlock:</code></td>\n<td>🔒 <code>:lock:</code></td>\n</tr>\n<tr>\n<td>🔏 <code>:lock_with_ink_pen:</code></td>\n<td>🔐 <code>:closed_lock_with_key:</code></td>\n<td>🔑 <code>:key:</code></td>\n</tr>\n<tr>\n<td>💡 <code>:bulb:</code></td>\n<td>🔦 <code>:flashlight:</code></td>\n<td>🔆 <code>:high_brightness:</code></td>\n</tr>\n<tr>\n<td>🔅 <code>:low_brightness:</code></td>\n<td>🔌 <code>:electric_plug:</code></td>\n<td>🔋 <code>:battery:</code></td>\n</tr>\n<tr>\n<td>📲 <code>:calling:</code></td>\n<td>✉️ <code>:email:</code></td>\n<td>📫 <code>:mailbox:</code></td>\n</tr>\n<tr>\n<td>📮 <code>:postbox:</code></td>\n<td>🛀 <code>:bath:</code></td>\n<td>🛁 <code>:bathtub:</code></td>\n</tr>\n<tr>\n<td>🚿 <code>:shower:</code></td>\n<td>🚽 <code>:toilet:</code></td>\n<td>🔧 <code>:wrench:</code></td>\n</tr>\n<tr>\n<td>🔩 <code>:nut_and_bolt:</code></td>\n<td>🔨 <code>:hammer:</code></td>\n<td>💺 <code>:seat:</code></td>\n</tr>\n<tr>\n<td>💰 <code>:moneybag:</code></td>\n<td>💴 <code>:yen:</code></td>\n<td>💵 <code>:dollar:</code></td>\n</tr>\n<tr>\n<td>💷 <code>:pound:</code></td>\n<td>💶 <code>:euro:</code></td>\n<td>💳 <code>:credit_card:</code></td>\n</tr>\n<tr>\n<td>💸 <code>:money_with_wings:</code></td>\n<td>📧 <code>:e-mail:</code></td>\n<td>📥 <code>:inbox_tray:</code></td>\n</tr>\n<tr>\n<td>📤 <code>:outbox_tray:</code></td>\n<td>✉️ <code>:envelope:</code></td>\n<td>📨 <code>:incoming_envelope:</code></td>\n</tr>\n<tr>\n<td>📯 <code>:postal_horn:</code></td>\n<td>📪 <code>:mailbox_closed:</code></td>\n<td>📬 <code>:mailbox_with_mail:</code></td>\n</tr>\n<tr>\n<td>📭 <code>:mailbox_with_no_mail:</code></td>\n<td>🚪 <code>:door:</code></td>\n<td>🚬 <code>:smoking:</code></td>\n</tr>\n<tr>\n<td>💣 <code>:bomb:</code></td>\n<td>🔫 <code>:gun:</code></td>\n<td>🔪 <code>:hocho:</code></td>\n</tr>\n<tr>\n<td>💊 <code>:pill:</code></td>\n<td>💉 <code>:syringe:</code></td>\n<td>📄 <code>:page_facing_up:</code></td>\n</tr>\n<tr>\n<td>📃 <code>:page_with_curl:</code></td>\n<td>📑 <code>:bookmark_tabs:</code></td>\n<td>📊 <code>:bar_chart:</code></td>\n</tr>\n<tr>\n<td>📈 <code>:chart_with_upwards_trend:</code></td>\n<td>📉 <code>:chart_with_downwards_trend:</code></td>\n<td>📜 <code>:scroll:</code></td>\n</tr>\n<tr>\n<td>📋 <code>:clipboard:</code></td>\n<td>📆 <code>:calendar:</code></td>\n<td>📅 <code>:date:</code></td>\n</tr>\n<tr>\n<td>📇 <code>:card_index:</code></td>\n<td>📁 <code>:file_folder:</code></td>\n<td>📂 <code>:open_file_folder:</code></td>\n</tr>\n<tr>\n<td>✂️ <code>:scissors:</code></td>\n<td>📌 <code>:pushpin:</code></td>\n<td>📎 <code>:paperclip:</code></td>\n</tr>\n<tr>\n<td>✒️ <code>:black_nib:</code></td>\n<td>✏️ <code>:pencil2:</code></td>\n<td>📏 <code>:straight_ruler:</code></td>\n</tr>\n<tr>\n<td>📐 <code>:triangular_ruler:</code></td>\n<td>📕 <code>:closed_book:</code></td>\n<td>📗 <code>:green_book:</code></td>\n</tr>\n<tr>\n<td>📘 <code>:blue_book:</code></td>\n<td>📙 <code>:orange_book:</code></td>\n<td>📓 <code>:notebook:</code></td>\n</tr>\n<tr>\n<td>📔 <code>:notebook_with_decorative_cover:</code></td>\n<td>📒 <code>:ledger:</code></td>\n<td>📚 <code>:books:</code></td>\n</tr>\n<tr>\n<td>🔖 <code>:bookmark:</code></td>\n<td>📛 <code>:name_badge:</code></td>\n<td>🔬 <code>:microscope:</code></td>\n</tr>\n<tr>\n<td>🔭 <code>:telescope:</code></td>\n<td>📰 <code>:newspaper:</code></td>\n<td>🏈 <code>:football:</code></td>\n</tr>\n<tr>\n<td>🏀 <code>:basketball:</code></td>\n<td>⚽️ <code>:soccer:</code></td>\n<td>⚾️ <code>:baseball:</code></td>\n</tr>\n<tr>\n<td>🎾 <code>:tennis:</code></td>\n<td>🎱 <code>:8ball:</code></td>\n<td>🏉 <code>:rugby_football:</code></td>\n</tr>\n<tr>\n<td>🎳 <code>:bowling:</code></td>\n<td>⛳️ <code>:golf:</code></td>\n<td>🚵 <code>:mountain_bicyclist:</code></td>\n</tr>\n<tr>\n<td>🚴 <code>:bicyclist:</code></td>\n<td>🏇 <code>:horse_racing:</code></td>\n<td>🏂 <code>:snowboarder:</code></td>\n</tr>\n<tr>\n<td>🏊 <code>:swimmer:</code></td>\n<td>🏄 <code>:surfer:</code></td>\n<td>🎿 <code>:ski:</code></td>\n</tr>\n<tr>\n<td>♠️ <code>:spades:</code></td>\n<td>♥️ <code>:hearts:</code></td>\n<td>♣️ <code>:clubs:</code></td>\n</tr>\n<tr>\n<td>♦️ <code>:diamonds:</code></td>\n<td>💎 <code>:gem:</code></td>\n<td>💍 <code>:ring:</code></td>\n</tr>\n<tr>\n<td>🏆 <code>:trophy:</code></td>\n<td>🎼 <code>:musical_score:</code></td>\n<td>🎹 <code>:musical_keyboard:</code></td>\n</tr>\n<tr>\n<td>🎻 <code>:violin:</code></td>\n<td>👾 <code>:space_invader:</code></td>\n<td>🎮 <code>:video_game:</code></td>\n</tr>\n<tr>\n<td>🃏 <code>:black_joker:</code></td>\n<td>🎴 <code>:flower_playing_cards:</code></td>\n<td>🎲 <code>:game_die:</code></td>\n</tr>\n<tr>\n<td>🎯 <code>:dart:</code></td>\n<td>🀄️ <code>:mahjong:</code></td>\n<td>🎬 <code>:clapper:</code></td>\n</tr>\n<tr>\n<td>📝 <code>:memo:</code></td>\n<td>📝 <code>:pencil:</code></td>\n<td>📖 <code>:book:</code></td>\n</tr>\n<tr>\n<td>🎨 <code>:art:</code></td>\n<td>🎤 <code>:microphone:</code></td>\n<td>🎧 <code>:headphones:</code></td>\n</tr>\n<tr>\n<td>🎺 <code>:trumpet:</code></td>\n<td>🎷 <code>:saxophone:</code></td>\n<td>🎸 <code>:guitar:</code></td>\n</tr>\n<tr>\n<td>👞 <code>:shoe:</code></td>\n<td>👡 <code>:sandal:</code></td>\n<td>👠 <code>:high_heel:</code></td>\n</tr>\n<tr>\n<td>💄 <code>:lipstick:</code></td>\n<td>👢 <code>:boot:</code></td>\n<td>👕 <code>:shirt:</code></td>\n</tr>\n<tr>\n<td>👕 <code>:tshirt:</code></td>\n<td>👔 <code>:necktie:</code></td>\n<td>👚 <code>:womans_clothes:</code></td>\n</tr>\n<tr>\n<td>👗 <code>:dress:</code></td>\n<td>🎽 <code>:running_shirt_with_sash:</code></td>\n<td>👖 <code>:jeans:</code></td>\n</tr>\n<tr>\n<td>👘 <code>:kimono:</code></td>\n<td>👙 <code>:bikini:</code></td>\n<td>🎀 <code>:ribbon:</code></td>\n</tr>\n<tr>\n<td>🎩 <code>:tophat:</code></td>\n<td>👑 <code>:crown:</code></td>\n<td>👒 <code>:womans_hat:</code></td>\n</tr>\n<tr>\n<td>👞 <code>:mans_shoe:</code></td>\n<td>🌂 <code>:closed_umbrella:</code></td>\n<td>💼 <code>:briefcase:</code></td>\n</tr>\n<tr>\n<td>👜 <code>:handbag:</code></td>\n<td>👝 <code>:pouch:</code></td>\n<td>👛 <code>:purse:</code></td>\n</tr>\n<tr>\n<td>👓 <code>:eyeglasses:</code></td>\n<td>🎣 <code>:fishing_pole_and_fish:</code></td>\n<td>☕️ <code>:coffee:</code></td>\n</tr>\n<tr>\n<td>🍵 <code>:tea:</code></td>\n<td>🍶 <code>:sake:</code></td>\n<td>🍼 <code>:baby_bottle:</code></td>\n</tr>\n<tr>\n<td>🍺 <code>:beer:</code></td>\n<td>🍻 <code>:beers:</code></td>\n<td>🍸 <code>:cocktail:</code></td>\n</tr>\n<tr>\n<td>🍹 <code>:tropical_drink:</code></td>\n<td>🍷 <code>:wine_glass:</code></td>\n<td>🍴 <code>:fork_and_knife:</code></td>\n</tr>\n<tr>\n<td>🍕 <code>:pizza:</code></td>\n<td>🍔 <code>:hamburger:</code></td>\n<td>🍟 <code>:fries:</code></td>\n</tr>\n<tr>\n<td>🍗 <code>:poultry_leg:</code></td>\n<td>🍖 <code>:meat_on_bone:</code></td>\n<td>🍝 <code>:spaghetti:</code></td>\n</tr>\n<tr>\n<td>🍛 <code>:curry:</code></td>\n<td>🍤 <code>:fried_shrimp:</code></td>\n<td>🍱 <code>:bento:</code></td>\n</tr>\n<tr>\n<td>🍣 <code>:sushi:</code></td>\n<td>🍥 <code>:fish_cake:</code></td>\n<td>🍙 <code>:rice_ball:</code></td>\n</tr>\n<tr>\n<td>🍘 <code>:rice_cracker:</code></td>\n<td>🍚 <code>:rice:</code></td>\n<td>🍜 <code>:ramen:</code></td>\n</tr>\n<tr>\n<td>🍲 <code>:stew:</code></td>\n<td>🍢 <code>:oden:</code></td>\n<td>🍡 <code>:dango:</code></td>\n</tr>\n<tr>\n<td>🥚 <code>:egg:</code></td>\n<td>🍞 <code>:bread:</code></td>\n<td>🍩 <code>:doughnut:</code></td>\n</tr>\n<tr>\n<td>🍮 <code>:custard:</code></td>\n<td>🍦 <code>:icecream:</code></td>\n<td>🍨 <code>:ice_cream:</code></td>\n</tr>\n<tr>\n<td>🍧 <code>:shaved_ice:</code></td>\n<td>🎂 <code>:birthday:</code></td>\n<td>🍰 <code>:cake:</code></td>\n</tr>\n<tr>\n<td>🍪 <code>:cookie:</code></td>\n<td>🍫 <code>:chocolate_bar:</code></td>\n<td>🍬 <code>:candy:</code></td>\n</tr>\n<tr>\n<td>🍭 <code>:lollipop:</code></td>\n<td>🍯 <code>:honey_pot:</code></td>\n<td>🍎 <code>:apple:</code></td>\n</tr>\n<tr>\n<td>🍏 <code>:green_apple:</code></td>\n<td>🍊 <code>:tangerine:</code></td>\n<td>🍋 <code>:lemon:</code></td>\n</tr>\n<tr>\n<td>🍒 <code>:cherries:</code></td>\n<td>🍇 <code>:grapes:</code></td>\n<td>🍉 <code>:watermelon:</code></td>\n</tr>\n<tr>\n<td>🍓 <code>:strawberry:</code></td>\n<td>🍑 <code>:peach:</code></td>\n<td>🍈 <code>:melon:</code></td>\n</tr>\n<tr>\n<td>🍌 <code>:banana:</code></td>\n<td>🍐 <code>:pear:</code></td>\n<td>🍍 <code>:pineapple:</code></td>\n</tr>\n<tr>\n<td>🍠 <code>:sweet_potato:</code></td>\n<td>🍆 <code>:eggplant:</code></td>\n<td>🍅 <code>:tomato:</code></td>\n</tr>\n<tr>\n<td>🌽 <code>:corn:</code></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Places</p>\n<table>\n<thead>\n<tr>\n<th>🏠 <code>:house:</code></th>\n<th>🏡 <code>:house_with_garden:</code></th>\n<th>🏫 <code>:school:</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>🏢 <code>:office:</code></td>\n<td>🏣 <code>:post_office:</code></td>\n<td>🏥 <code>:hospital:</code></td>\n</tr>\n<tr>\n<td>🏦 <code>:bank:</code></td>\n<td>🏪 <code>:convenience_store:</code></td>\n<td>🏩 <code>:love_hotel:</code></td>\n</tr>\n<tr>\n<td>🏨 <code>:hotel:</code></td>\n<td>💒 <code>:wedding:</code></td>\n<td>⛪️ <code>:church:</code></td>\n</tr>\n<tr>\n<td>🏬 <code>:department_store:</code></td>\n<td>🏤 <code>:european_post_office:</code></td>\n<td>🌇 <code>:city_sunrise:</code></td>\n</tr>\n<tr>\n<td>🌆 <code>:city_sunset:</code></td>\n<td>🏯 <code>:japanese_castle:</code></td>\n<td>🏰 <code>:european_castle:</code></td>\n</tr>\n<tr>\n<td>⛺️ <code>:tent:</code></td>\n<td>🏭 <code>:factory:</code></td>\n<td>🗼 <code>:tokyo_tower:</code></td>\n</tr>\n<tr>\n<td>🗾 <code>:japan:</code></td>\n<td>🗻 <code>:mount_fuji:</code></td>\n<td>🌄 <code>:sunrise_over_mountains:</code></td>\n</tr>\n<tr>\n<td>🌅 <code>:sunrise:</code></td>\n<td>🌠 <code>:stars:</code></td>\n<td>🗽 <code>:statue_of_liberty:</code></td>\n</tr>\n<tr>\n<td>🌉 <code>:bridge_at_night:</code></td>\n<td>🎠 <code>:carousel_horse:</code></td>\n<td>🌈 <code>:rainbow:</code></td>\n</tr>\n<tr>\n<td>🎡 <code>:ferris_wheel:</code></td>\n<td>⛲️ <code>:fountain:</code></td>\n<td>🎢 <code>:roller_coaster:</code></td>\n</tr>\n<tr>\n<td>🚢 <code>:ship:</code></td>\n<td>🚤 <code>:speedboat:</code></td>\n<td>⛵️ <code>:boat:</code></td>\n</tr>\n<tr>\n<td>⛵️ <code>:sailboat:</code></td>\n<td>🚣 <code>:rowboat:</code></td>\n<td>⚓️ <code>:anchor:</code></td>\n</tr>\n<tr>\n<td>🚀 <code>:rocket:</code></td>\n<td>✈️ <code>:airplane:</code></td>\n<td>🚁 <code>:helicopter:</code></td>\n</tr>\n<tr>\n<td>🚂 <code>:steam_locomotive:</code></td>\n<td>🚊 <code>:tram:</code></td>\n<td>🚞 <code>:mountain_railway:</code></td>\n</tr>\n<tr>\n<td>🚲 <code>:bike:</code></td>\n<td>🚡 <code>:aerial_tramway:</code></td>\n<td>🚟 <code>:suspension_railway:</code></td>\n</tr>\n<tr>\n<td>🚠 <code>:mountain_cableway:</code></td>\n<td>🚜 <code>:tractor:</code></td>\n<td>🚙 <code>:blue_car:</code></td>\n</tr>\n<tr>\n<td>🚘 <code>:oncoming_automobile:</code></td>\n<td>🚗 <code>:car:</code></td>\n<td>🚗 <code>:red_car:</code></td>\n</tr>\n<tr>\n<td>🚕 <code>:taxi:</code></td>\n<td>🚖 <code>:oncoming_taxi:</code></td>\n<td>🚛 <code>:articulated_lorry:</code></td>\n</tr>\n<tr>\n<td>🚌 <code>:bus:</code></td>\n<td>🚍 <code>:oncoming_bus:</code></td>\n<td>🚨 <code>:rotating_light:</code></td>\n</tr>\n<tr>\n<td>🚓 <code>:police_car:</code></td>\n<td>🚔 <code>:oncoming_police_car:</code></td>\n<td>🚒 <code>:fire_engine:</code></td>\n</tr>\n<tr>\n<td>🚑 <code>:ambulance:</code></td>\n<td>🚐 <code>:minibus:</code></td>\n<td>🚚 <code>:truck:</code></td>\n</tr>\n<tr>\n<td>🚋 <code>:train:</code></td>\n<td>🚉 <code>:station:</code></td>\n<td>🚆 <code>:train2:</code></td>\n</tr>\n<tr>\n<td>🚅 <code>:bullettrain_front:</code></td>\n<td>🚄 <code>:bullettrain_side:</code></td>\n<td>🚈 <code>:light_rail:</code></td>\n</tr>\n<tr>\n<td>🚝 <code>:monorail:</code></td>\n<td>🚃 <code>:railway_car:</code></td>\n<td>🚎 <code>:trolleybus:</code></td>\n</tr>\n<tr>\n<td>🎫 <code>:ticket:</code></td>\n<td>⛽️ <code>:fuelpump:</code></td>\n<td>🚦 <code>:vertical_traffic_light:</code></td>\n</tr>\n<tr>\n<td>🚥 <code>:traffic_light:</code></td>\n<td>⚠️ <code>:warning:</code></td>\n<td>🚧 <code>:construction:</code></td>\n</tr>\n<tr>\n<td>🔰 <code>:beginner:</code></td>\n<td>🏧 <code>:atm:</code></td>\n<td>🎰 <code>:slot_machine:</code></td>\n</tr>\n<tr>\n<td>🚏 <code>:busstop:</code></td>\n<td>💈 <code>:barber:</code></td>\n<td>♨️ <code>:hotsprings:</code></td>\n</tr>\n<tr>\n<td>🏁 <code>:checkered_flag:</code></td>\n<td>🎌 <code>:crossed_flags:</code></td>\n<td>🏮 <code>:izakaya_lantern:</code></td>\n</tr>\n<tr>\n<td>🗿 <code>:moyai:</code></td>\n<td>🎪 <code>:circus_tent:</code></td>\n<td>🎭 <code>:performing_arts:</code></td>\n</tr>\n<tr>\n<td>📍 <code>:round_pushpin:</code></td>\n<td>🚩 <code>:triangular_flag_on_post:</code></td>\n<td>🇯🇵 <code>:jp:</code></td>\n</tr>\n<tr>\n<td>🇰🇷 <code>:kr:</code></td>\n<td>🇨🇳 <code>:cn:</code></td>\n<td>🇺🇸 <code>:us:</code></td>\n</tr>\n<tr>\n<td>🇫🇷 <code>:fr:</code></td>\n<td>🇪🇸 <code>:es:</code></td>\n<td>🇮🇹 <code>:it:</code></td>\n</tr>\n<tr>\n<td>🇷🇺 <code>:ru:</code></td>\n<td>🇬🇧 <code>:gb:</code></td>\n<td>🇬🇧 <code>:uk:</code></td>\n</tr>\n<tr>\n<td>🇩🇪 <code>:de:</code></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Symbols</p>\n<table>\n<thead>\n<tr>\n<th>1️⃣ <code>:one:</code></th>\n<th>2️⃣ <code>:two:</code></th>\n<th>3️⃣ <code>:three:</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4️⃣ <code>:four:</code></td>\n<td>5️⃣ <code>:five:</code></td>\n<td>6️⃣ <code>:six:</code></td>\n</tr>\n<tr>\n<td>7️⃣ <code>:seven:</code></td>\n<td>8️⃣ <code>:eight:</code></td>\n<td>9️⃣ <code>:nine:</code></td>\n</tr>\n<tr>\n<td>🔟 <code>:keycap_ten:</code></td>\n<td>🔢 <code>:1234:</code></td>\n<td>0️⃣ <code>:zero:</code></td>\n</tr>\n<tr>\n<td>#️⃣ <code>:hash:</code></td>\n<td>🔣 <code>:symbols:</code></td>\n<td>◀️ <code>:arrow_backward:</code></td>\n</tr>\n<tr>\n<td>⬇️ <code>:arrow_down:</code></td>\n<td>▶️ <code>:arrow_forward:</code></td>\n<td>⬅️ <code>:arrow_left:</code></td>\n</tr>\n<tr>\n<td>🔠 <code>:capital_abcd:</code></td>\n<td>🔡 <code>:abcd:</code></td>\n<td>🔤 <code>:abc:</code></td>\n</tr>\n<tr>\n<td>↙️ <code>:arrow_lower_left:</code></td>\n<td>↘️ <code>:arrow_lower_right:</code></td>\n<td>➡️ <code>:arrow_right:</code></td>\n</tr>\n<tr>\n<td>⬆️ <code>:arrow_up:</code></td>\n<td>↖️ <code>:arrow_upper_left:</code></td>\n<td>↗️ <code>:arrow_upper_right:</code></td>\n</tr>\n<tr>\n<td>⏬ <code>:arrow_double_down:</code></td>\n<td>⏫ <code>:arrow_double_up:</code></td>\n<td>🔽 <code>:arrow_down_small:</code></td>\n</tr>\n<tr>\n<td>⤵️ <code>:arrow_heading_down:</code></td>\n<td>⤴️ <code>:arrow_heading_up:</code></td>\n<td>↩️ <code>:leftwards_arrow_with_hook:</code></td>\n</tr>\n<tr>\n<td>↪️ <code>:arrow_right_hook:</code></td>\n<td>↔️ <code>:left_right_arrow:</code></td>\n<td>↕️ <code>:arrow_up_down:</code></td>\n</tr>\n<tr>\n<td>🔼 <code>:arrow_up_small:</code></td>\n<td>🔃 <code>:arrows_clockwise:</code></td>\n<td>🔄 <code>:arrows_counterclockwise:</code></td>\n</tr>\n<tr>\n<td>⏪ <code>:rewind:</code></td>\n<td>⏩ <code>:fast_forward:</code></td>\n<td>ℹ️ <code>:information_source:</code></td>\n</tr>\n<tr>\n<td>🆗 <code>:ok:</code></td>\n<td>🔀 <code>:twisted_rightwards_arrows:</code></td>\n<td>🔁 <code>:repeat:</code></td>\n</tr>\n<tr>\n<td>🔂 <code>:repeat_one:</code></td>\n<td>🆕 <code>:new:</code></td>\n<td>🔝 <code>:top:</code></td>\n</tr>\n<tr>\n<td>🆙 <code>:up:</code></td>\n<td>🆒 <code>:cool:</code></td>\n<td>🆓 <code>:free:</code></td>\n</tr>\n<tr>\n<td>🆖 <code>:ng:</code></td>\n<td>🎦 <code>:cinema:</code></td>\n<td>🈁 <code>:koko:</code></td>\n</tr>\n<tr>\n<td>📶 <code>:signal_strength:</code></td>\n<td>🈹 <code>:u5272:</code></td>\n<td>🈴 <code>:u5408:</code></td>\n</tr>\n<tr>\n<td>🈺 <code>:u55b6:</code></td>\n<td>🈯️ <code>:u6307:</code></td>\n<td>🈷️ <code>:u6708:</code></td>\n</tr>\n<tr>\n<td>🈶 <code>:u6709:</code></td>\n<td>🈵 <code>:u6e80:</code></td>\n<td>🈚️ <code>:u7121:</code></td>\n</tr>\n<tr>\n<td>🈸 <code>:u7533:</code></td>\n<td>🈳 <code>:u7a7a:</code></td>\n<td>🈲 <code>:u7981:</code></td>\n</tr>\n<tr>\n<td>🈂️ <code>:sa:</code></td>\n<td>🚻 <code>:restroom:</code></td>\n<td>🚹 <code>:mens:</code></td>\n</tr>\n<tr>\n<td>🚺 <code>:womens:</code></td>\n<td>🚼 <code>:baby_symbol:</code></td>\n<td>🚭 <code>:no_smoking:</code></td>\n</tr>\n<tr>\n<td>🅿️ <code>:parking:</code></td>\n<td>♿️ <code>:wheelchair:</code></td>\n<td>🚇 <code>:metro:</code></td>\n</tr>\n<tr>\n<td>🛄 <code>:baggage_claim:</code></td>\n<td>🉑<code>:accept:</code></td>\n<td>🚾 <code>:wc:</code></td>\n</tr>\n<tr>\n<td>🚰 <code>:potable_water:</code></td>\n<td>🚮 <code>:put_litter_in_its_place:</code></td>\n<td>㊙️ <code>:secret:</code></td>\n</tr>\n<tr>\n<td>㊗️ <code>:congratulations:</code></td>\n<td>Ⓜ️ <code>:m:</code></td>\n<td>🛂 <code>:passport_control:</code></td>\n</tr>\n<tr>\n<td>🛅 <code>:left_luggage:</code></td>\n<td>🛃 <code>:customs:</code></td>\n<td>🉐 <code>:ideograph_advantage:</code></td>\n</tr>\n<tr>\n<td>🆑 <code>:cl:</code></td>\n<td>🆘 <code>:sos:</code></td>\n<td>🆔 <code>:id:</code></td>\n</tr>\n<tr>\n<td>🚫 <code>:no_entry_sign:</code></td>\n<td>🔞 <code>:underage:</code></td>\n<td>📵 <code>:no_mobile_phones:</code></td>\n</tr>\n<tr>\n<td>🚯 <code>:do_not_litter:</code></td>\n<td>🚱 <code>:non-potable_water:</code></td>\n<td>🚳 <code>:no_bicycles:</code></td>\n</tr>\n<tr>\n<td>🚷 <code>:no_pedestrians:</code></td>\n<td>🚸 <code>:children_crossing:</code></td>\n<td>⛔️ <code>:no_entry:</code></td>\n</tr>\n<tr>\n<td>✳️ <code>:eight_spoked_asterisk:</code></td>\n<td>✴️ <code>:eight_pointed_black_star:</code></td>\n<td>💟 <code>:heart_decoration:</code></td>\n</tr>\n<tr>\n<td>🆚 <code>:vs:</code></td>\n<td>📳 <code>:vibration_mode:</code></td>\n<td>📴 <code>:mobile_phone_off:</code></td>\n</tr>\n<tr>\n<td>💹 <code>:chart:</code></td>\n<td>💱 <code>:currency_exchange:</code></td>\n<td>♈️ <code>:aries:</code></td>\n</tr>\n<tr>\n<td>♉️ <code>:taurus:</code></td>\n<td>♊️ <code>:gemini:</code></td>\n<td>♋️ <code>:cancer:</code></td>\n</tr>\n<tr>\n<td>♌️ <code>:leo:</code></td>\n<td>♍️ <code>:virgo:</code></td>\n<td>♎️ <code>:libra:</code></td>\n</tr>\n<tr>\n<td>♏️ <code>:scorpius:</code></td>\n<td>♐️ <code>:sagittarius:</code></td>\n<td>♑️ <code>:capricorn:</code></td>\n</tr>\n<tr>\n<td>♒️ <code>:aquarius:</code></td>\n<td>♓️ <code>:pisces:</code></td>\n<td>⛎ <code>:ophiuchus:</code></td>\n</tr>\n<tr>\n<td>🔯 <code>:six_pointed_star:</code></td>\n<td>❎ <code>:negative_squared_cross_mark:</code></td>\n<td>🅰️ <code>:a:</code></td>\n</tr>\n<tr>\n<td>🅱️ <code>:b:</code></td>\n<td>🆎 <code>:ab:</code></td>\n<td>🅾️ <code>:o2:</code></td>\n</tr>\n<tr>\n<td>💠 <code>:diamond_shape_with_a_dot_inside:</code></td>\n<td>♻️ <code>:recycle:</code></td>\n<td>🔚 <code>:end:</code></td>\n</tr>\n<tr>\n<td>🔛 <code>:on:</code></td>\n<td>🔜 <code>:soon:</code></td>\n<td>🕐 <code>:clock1:</code></td>\n</tr>\n<tr>\n<td>🕜 <code>:clock130:</code></td>\n<td>🕙 <code>:clock10:</code></td>\n<td>🕥 <code>:clock1030:</code></td>\n</tr>\n<tr>\n<td>🕚 <code>:clock11:</code></td>\n<td>🕦 <code>:clock1130:</code></td>\n<td>🕛 <code>:clock12:</code></td>\n</tr>\n<tr>\n<td>🕧 <code>:clock1230:</code></td>\n<td>🕑 <code>:clock2:</code></td>\n<td>🕝 <code>:clock230:</code></td>\n</tr>\n<tr>\n<td>🕒 <code>:clock3:</code></td>\n<td>🕞 <code>:clock330:</code></td>\n<td>🕓 <code>:clock4:</code></td>\n</tr>\n<tr>\n<td>🕟 <code>:clock430:</code></td>\n<td>🕔 <code>:clock5:</code></td>\n<td>🕠 <code>:clock530:</code></td>\n</tr>\n<tr>\n<td>🕕 <code>:clock6:</code></td>\n<td>🕡 <code>:clock630:</code></td>\n<td>🕖 <code>:clock7:</code></td>\n</tr>\n<tr>\n<td>🕢 <code>:clock730:</code></td>\n<td>🕗 <code>:clock8:</code></td>\n<td>🕣 <code>:clock830:</code></td>\n</tr>\n<tr>\n<td>🕘 <code>:clock9:</code></td>\n<td>🕤 <code>:clock930:</code></td>\n<td>💲 <code>:heavy_dollar_sign:</code></td>\n</tr>\n<tr>\n<td>©️ <code>:copyright:</code></td>\n<td>®️ <code>:registered:</code></td>\n<td>™️ <code>:tm:</code></td>\n</tr>\n<tr>\n<td>❌ <code>:x:</code></td>\n<td>❗️ <code>:heavy_exclamation_mark:</code></td>\n<td>‼️ <code>:bangbang:</code></td>\n</tr>\n<tr>\n<td>⁉️ <code>:interrobang:</code></td>\n<td>⭕️ <code>:o:</code></td>\n<td>✖️ <code>:heavy_multiplication_x:</code></td>\n</tr>\n<tr>\n<td>➕ <code>:heavy_plus_sign:</code></td>\n<td>➖ <code>:heavy_minus_sign:</code></td>\n<td>➗ <code>:heavy_division_sign:</code></td>\n</tr>\n<tr>\n<td>💮 <code>:white_flower:</code></td>\n<td>💯 <code>:100:</code></td>\n<td>✔️ <code>:heavy_check_mark:</code></td>\n</tr>\n<tr>\n<td>☑️ <code>:ballot_box_with_check:</code></td>\n<td>🔘 <code>:radio_button:</code></td>\n<td>🔗 <code>:link:</code></td>\n</tr>\n<tr>\n<td>➰ <code>:curly_loop:</code></td>\n<td>〰️ <code>:wavy_dash:</code></td>\n<td>〽️ <code>:part_alternation_mark:</code></td>\n</tr>\n<tr>\n<td>🔱 <code>:trident:</code></td>\n<td>:black_square:<code>:black_square:</code></td>\n<td>:white_square:<code>:white_square:</code></td>\n</tr>\n<tr>\n<td>✅ <code>:white_check_mark:</code></td>\n<td>🔲 <code>:black_square_button:</code></td>\n<td>🔳 <code>:white_square_button:</code></td>\n</tr>\n<tr>\n<td>⚫️ <code>:black_circle:</code></td>\n<td>⚪️ <code>:white_circle:</code></td>\n<td>🔴 <code>:red_circle:</code></td>\n</tr>\n<tr>\n<td>🔵 <code>:large_blue_circle:</code></td>\n<td>🔷 <code>:large_blue_diamond:</code></td>\n<td>🔶 <code>:large_orange_diamond:</code></td>\n</tr>\n<tr>\n<td>🔹 <code>:small_blue_diamond:</code></td>\n<td>🔸 <code>:small_orange_diamond:</code></td>\n<td>🔺 <code>:small_red_triangle:</code></td>\n</tr>\n<tr>\n<td>🔻 <code>:small_red_triangle_down:</code></td>\n<td>:shipit:<code>:shipit:</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"print(Hello picgo)","toc":"true# 是否启用内容索引","_content":"# 起因\n\n在hexo配置完成开始写博客，但是markdown的图片在xxxx.githun.io中显示不出来\n各方搜索，贴一个[解决方法](https://www.suyuanblog.xyz/2021/10/14/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/#:~:text=%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88,%E5%A4%B9%E9%87%8C%E6%96%B9%E4%BE%BF%E5%90%8E%E9%9D%A2%E5%BC%95%E7%94%A8%E3%80%82)。\n但是个人觉得有点麻烦，而且考虑到以后写markdown也实在不想再搞个文件夹存图片。\n\n于是，找到七牛云+picgo配置图云，把图片转为在线的\n\n# 七牛云配置\n\n1. 登陆注册略(50G的图片空间),[七牛云](https://portal.qiniu.com/home)\n2. 创建新的存储空间，名字随便起\n   ![](https://image.yayan.xyz/20221020131544.png)\n3. 配置key\n   ![](https://image.yayan.xyz/20221020131707.png)\n   ![](https://image.yayan.xyz/20221020131754.png)\n4. 记住分给自己的域名(这个能用一个月，一个月之后咋办我不知道)\n\n# picgo配置\n\n1. 下载[picgo](https://picgo-1251750343.cos.ap-chengdu.myqcloud.com/2.3.1-beta.6/PicGo-Setup-2.3.1-beta.6-x64.exe)\n2. 配置七牛云\n   ![](https://image.yayan.xyz/20221020132155.png)\n\n- AccessKey和SecretKey：上面记住的key\n- Bucket：第2步自己起的名字\n- 访问地址：分配给自己的域名\n- 存储区域：[七牛云的存储区域对应的代码](https://developer.qiniu.com/kodo/1671/region-endpoint-fq)（华东 z0，华北 z1，华南 z2，北美 na0，东南亚 as0 ）\n\n3. 设为默认图床之后就可以上传了，具体的使用方法可以自己摸索\n\n补充，设置为默认图床之后应该还要再输一遍，然后点确定\n\n![](https://image.yayan.xyz/20221020132516.png)\n复制图片之后点击，就可以直接Ctrl+V粘贴图片地址了\n","source":"_posts/hello-picgo.md","raw":"---\ntitle: print(Hello picgo)\ncategories:\n  - hexo博客配置\ntags:\n  - hexo博客配置picgo\ntoc: true# 是否启用内容索引\n---\n# 起因\n\n在hexo配置完成开始写博客，但是markdown的图片在xxxx.githun.io中显示不出来\n各方搜索，贴一个[解决方法](https://www.suyuanblog.xyz/2021/10/14/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/#:~:text=%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88,%E5%A4%B9%E9%87%8C%E6%96%B9%E4%BE%BF%E5%90%8E%E9%9D%A2%E5%BC%95%E7%94%A8%E3%80%82)。\n但是个人觉得有点麻烦，而且考虑到以后写markdown也实在不想再搞个文件夹存图片。\n\n于是，找到七牛云+picgo配置图云，把图片转为在线的\n\n# 七牛云配置\n\n1. 登陆注册略(50G的图片空间),[七牛云](https://portal.qiniu.com/home)\n2. 创建新的存储空间，名字随便起\n   ![](https://image.yayan.xyz/20221020131544.png)\n3. 配置key\n   ![](https://image.yayan.xyz/20221020131707.png)\n   ![](https://image.yayan.xyz/20221020131754.png)\n4. 记住分给自己的域名(这个能用一个月，一个月之后咋办我不知道)\n\n# picgo配置\n\n1. 下载[picgo](https://picgo-1251750343.cos.ap-chengdu.myqcloud.com/2.3.1-beta.6/PicGo-Setup-2.3.1-beta.6-x64.exe)\n2. 配置七牛云\n   ![](https://image.yayan.xyz/20221020132155.png)\n\n- AccessKey和SecretKey：上面记住的key\n- Bucket：第2步自己起的名字\n- 访问地址：分配给自己的域名\n- 存储区域：[七牛云的存储区域对应的代码](https://developer.qiniu.com/kodo/1671/region-endpoint-fq)（华东 z0，华北 z1，华南 z2，北美 na0，东南亚 as0 ）\n\n3. 设为默认图床之后就可以上传了，具体的使用方法可以自己摸索\n\n补充，设置为默认图床之后应该还要再输一遍，然后点确定\n\n![](https://image.yayan.xyz/20221020132516.png)\n复制图片之后点击，就可以直接Ctrl+V粘贴图片地址了\n","slug":"hello-picgo","published":1,"date":"2022-10-22T00:58:32.348Z","updated":"2022-10-22T02:41:47.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clee4vhat000tc8vq7s5yh6g3","content":"<h1 id=\"起因\"><a class=\"markdownIt-Anchor\" href=\"#起因\"></a> 起因</h1>\n<p>在hexo配置完成开始写博客，但是markdown的图片在xxxx.githun.io中显示不出来<br />\n各方搜索，贴一个<a href=\"https://www.suyuanblog.xyz/2021/10/14/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/#:~:text=%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88,%E5%A4%B9%E9%87%8C%E6%96%B9%E4%BE%BF%E5%90%8E%E9%9D%A2%E5%BC%95%E7%94%A8%E3%80%82\">解决方法</a>。<br />\n但是个人觉得有点麻烦，而且考虑到以后写markdown也实在不想再搞个文件夹存图片。</p>\n<p>于是，找到七牛云+picgo配置图云，把图片转为在线的</p>\n<h1 id=\"七牛云配置\"><a class=\"markdownIt-Anchor\" href=\"#七牛云配置\"></a> 七牛云配置</h1>\n<ol>\n<li>登陆注册略(50G的图片空间),<a href=\"https://portal.qiniu.com/home\">七牛云</a></li>\n<li>创建新的存储空间，名字随便起<br />\n<img src=\"https://image.yayan.xyz/20221020131544.png\" alt=\"\" /></li>\n<li>配置key<br />\n<img src=\"https://image.yayan.xyz/20221020131707.png\" alt=\"\" /><br />\n<img src=\"https://image.yayan.xyz/20221020131754.png\" alt=\"\" /></li>\n<li>记住分给自己的域名(这个能用一个月，一个月之后咋办我不知道)</li>\n</ol>\n<h1 id=\"picgo配置\"><a class=\"markdownIt-Anchor\" href=\"#picgo配置\"></a> picgo配置</h1>\n<ol>\n<li>下载<a href=\"https://picgo-1251750343.cos.ap-chengdu.myqcloud.com/2.3.1-beta.6/PicGo-Setup-2.3.1-beta.6-x64.exe\">picgo</a></li>\n<li>配置七牛云<br />\n<img src=\"https://image.yayan.xyz/20221020132155.png\" alt=\"\" /></li>\n</ol>\n<ul>\n<li>AccessKey和SecretKey：上面记住的key</li>\n<li>Bucket：第2步自己起的名字</li>\n<li>访问地址：分配给自己的域名</li>\n<li>存储区域：<a href=\"https://developer.qiniu.com/kodo/1671/region-endpoint-fq\">七牛云的存储区域对应的代码</a>（华东 z0，华北 z1，华南 z2，北美 na0，东南亚 as0 ）</li>\n</ul>\n<ol start=\"3\">\n<li>设为默认图床之后就可以上传了，具体的使用方法可以自己摸索</li>\n</ol>\n<p>补充，设置为默认图床之后应该还要再输一遍，然后点确定</p>\n<p><img src=\"https://image.yayan.xyz/20221020132516.png\" alt=\"\" /><br />\n复制图片之后点击，就可以直接Ctrl+V粘贴图片地址了</p>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h1 id=\"起因\"><a class=\"markdownIt-Anchor\" href=\"#起因\"></a> 起因</h1>\n<p>在hexo配置完成开始写博客，但是markdown的图片在xxxx.githun.io中显示不出来<br />\n各方搜索，贴一个<a href=\"https://www.suyuanblog.xyz/2021/10/14/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/#:~:text=%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88,%E5%A4%B9%E9%87%8C%E6%96%B9%E4%BE%BF%E5%90%8E%E9%9D%A2%E5%BC%95%E7%94%A8%E3%80%82\">解决方法</a>。<br />\n但是个人觉得有点麻烦，而且考虑到以后写markdown也实在不想再搞个文件夹存图片。</p>\n<p>于是，找到七牛云+picgo配置图云，把图片转为在线的</p>\n<h1 id=\"七牛云配置\"><a class=\"markdownIt-Anchor\" href=\"#七牛云配置\"></a> 七牛云配置</h1>\n<ol>\n<li>登陆注册略(50G的图片空间),<a href=\"https://portal.qiniu.com/home\">七牛云</a></li>\n<li>创建新的存储空间，名字随便起<br />\n<img src=\"https://image.yayan.xyz/20221020131544.png\" alt=\"\" /></li>\n<li>配置key<br />\n<img src=\"https://image.yayan.xyz/20221020131707.png\" alt=\"\" /><br />\n<img src=\"https://image.yayan.xyz/20221020131754.png\" alt=\"\" /></li>\n<li>记住分给自己的域名(这个能用一个月，一个月之后咋办我不知道)</li>\n</ol>\n<h1 id=\"picgo配置\"><a class=\"markdownIt-Anchor\" href=\"#picgo配置\"></a> picgo配置</h1>\n<ol>\n<li>下载<a href=\"https://picgo-1251750343.cos.ap-chengdu.myqcloud.com/2.3.1-beta.6/PicGo-Setup-2.3.1-beta.6-x64.exe\">picgo</a></li>\n<li>配置七牛云<br />\n<img src=\"https://image.yayan.xyz/20221020132155.png\" alt=\"\" /></li>\n</ol>\n<ul>\n<li>AccessKey和SecretKey：上面记住的key</li>\n<li>Bucket：第2步自己起的名字</li>\n<li>访问地址：分配给自己的域名</li>\n<li>存储区域：<a href=\"https://developer.qiniu.com/kodo/1671/region-endpoint-fq\">七牛云的存储区域对应的代码</a>（华东 z0，华北 z1，华南 z2，北美 na0，东南亚 as0 ）</li>\n</ul>\n<ol start=\"3\">\n<li>设为默认图床之后就可以上传了，具体的使用方法可以自己摸索</li>\n</ol>\n<p>补充，设置为默认图床之后应该还要再输一遍，然后点确定</p>\n<p><img src=\"https://image.yayan.xyz/20221020132516.png\" alt=\"\" /><br />\n复制图片之后点击，就可以直接Ctrl+V粘贴图片地址了</p>\n"},{"title":"print(Hello hexo) & github connected error","toc":"true# 是否启用内容索引","_content":"中间过程可能会出现链接不上github的情况，这个因人而异。\n不是操作问题，是墙的问题。\n自己尝试解决办法。\n\n# 配置简单博客\n\n## 安装前配置\n\n- git安装(下一步者)，测试：git -v\n- nodejs安装(下一步者)，测试：node -v\n- npm安装(装完node就有)，测试：npm -v\n- hexo安装(npm install hexo -g)，测试：hexo -v\n- 其他需要安装的依赖如下(主题部分会用到)(npm install depandence)，测试：npm init\n\n```bash\n+-- hexo-deployer-git@3.0.0\n+-- hexo-generator-archive@1.0.0\n+-- hexo-generator-baidu-sitemap@0.1.9\n+-- hexo-generator-category@1.0.0\n+-- hexo-generator-feed@3.0.0\n+-- hexo-generator-index@2.0.0\n+-- hexo-generator-json-content@4.2.3\n+-- hexo-generator-sitemap@3.0.1\n+-- hexo-generator-tag@1.0.0\n+-- hexo-renderer-ejs@1.0.0\n+-- hexo-renderer-markdown-it-plus@1.0.6\n+-- hexo-renderer-stylus@2.1.0\n+-- hexo-server@2.0.0\n+-- hexo-theme-landscape@0.0.3\n+-- hexo-wordcount@6.0.1\n+-- hexo@5.4.2\n```\n\n## github上的操作\n\n1. 新建一个仓库(repository)\n   ![](https://image.yayan.xyz/1666186035942.png)\n   **仓库名字一定是自己的用户名**\n   **xxxxx.github.io**\n2. git命令板链接仓库生成公钥\n\n```python\n#如果第一次下git应该要设置一下，我没设置后面报错了\ngit config --global user.name \"username\"\ngit config --global user.email \"email\"\n# 生成公钥\nssh-keygen -t rsa  -C \"email\"\n# 会在C:\\Users\\你的用户名\\.ssh下生成id_rsa和id_rsa.pub\n# 复制id_rsa.pub内容\n```\n\n![](https://image.yayan.xyz/1666186511107.png)\n在setting中\n![](https://image.yayan.xyz/1666186551655.png)\n![](https://image.yayan.xyz/1666186590011.png)\n![](https://image.yayan.xyz/1666186600564.png)\ntitle可以随便填，key就是id_rsa.pub中的内容\n\n然后在git命令版中测试：\n\n```\nssh -T git@gitbuh.com\n```\n\n中间可能会输个yes\n看见successfully就成功了\n\n## 本地hexo的操作\n\n1. 本地建一个空文件夹---暂且叫他dir方便后面说，这个就是博客全部内容\n2. 执行完下面命令，文件夹内会多出东西，\n\n```bash\n# 如果执行失败，去github找到hexo-starter的库，下载解压，记得改名字\nhexo init\n```\n\n3.如果不需要额外的hexo主题，执行下面命令就可以了完成了\n\n```bash\n# hexo 把本地的东西，生成静态文件(html,css这些)\nhexo g\n# hexo s在本地运行，可以进自己的浏览器看看\nhexo s \n# hexo d 部署文件到github\nhexo d\n\n# hexo d -g可以直接生成并部署\n# 访问xxxxx.github.io 就能看见自己的博客了\n```\n\n## 配置自己的信息\n\n修改dir文件夹内的_config.yml配置文件\n把链接什么的改成自己的链接就OK了\n\n### 网站的配置\n\n即dir文件夹下面的_config.yml\n\n```python\n# 1. 配置主题的文字，不然主题都是英文，这个必须在dir中配置，在主题中配置没有用\nlanguage: zh-CN\n\n# 2. 如果用主题，主题的配置，不是hexo-theme-pure，就是pure\ntheme: pure\n```\n\n# hexo 配置自己喜欢的主题\n\n**如果不是自己特别喜欢的主题，建议找一个大众的用的人多的主题，\n因为用的人多，出现的问题解决办法就多**\n\n以pure为例，更多的主题访问:\n[hexo官网](https://hexo.io/themes/)\n\n在配置主题过程中，建议参考pure官方文档:[hhexo-theme-pure](https://github.com/cofess/hexo-theme-pure)\n\n1. 先把主题下载下来，除了git命令，其他的都建议在windows的cmd中使用\n\n```bash\n# 如果失败了，同样可以去github，hexo-theme-pure 下载解压，注意改文件夹名字\ngit clone https://github.com/cofess/hexo-theme-pure.git themes/pure\n# 然后把官方文档建议的一大堆依赖下下来\n# 第一部分下过的可以省略\nnpm install hexo-wordcount --save\nnpm install hexo-generator-json-content --save\nnpm install hexo-generator-feed --save\nnpm install hexo-generator-sitemap --save\nnpm install hexo-generator-baidu-sitemap --save\n```\n\n2. 修改dir文件夹内的_config.yml中的theme\n\n如果没有自己添加\n\n```\ntheme: pure\n```\n\n## 文章增删改查\n\n增删改文件，直接在_post里修改md文件，上传即可。\n\n## 踩坑\n\n下面说几个自己踩过的坑，网站配置还好，\n主题的配置一堆，而且pure用的人不多，问题全靠自己解决\n以下的修改都在theme/pure/_cofig.yml文件中\n\n### 网站的配置\n\n1. 网站的名字和logo\n\n```\nsite:\n  logo:\n    enabled: true\n    width: 40\n    height: 40\n    url: ../images/logo.png\n  title: Gladdduck # 页面title\n  favicon: /favicon.png\n  board: <p>分享所思所见所想,欢迎留言交流!6666</p> # 站点公告\n  copyright: false # 底部版权信息\n# 修改logo一定不要修改logo.url里面的图片路径\n# 要修改favicon的路径，修改logo.url的路径没用，反而文章的详情页面不会出现logo了\n```\n\n2. 关于home，archives等不是中文的问题\n\n```\nmenu:\n  Home: .\n  Archives: archives  # 归档\n  Categories: categories  # 分类\n  Tags: tags  # 标签\n  Links: links  # 友链\n  About: about  # 关于\n# 把这个地方的Home等改了不起作用，应该修改dir文件夹下面的配置文件，增加language: zh-CN\n# ：后面的是访问url路径，需要和source文件夹下面的几个文件夹名字对应\n```\n\n3. 菜单栏无法访问 Connot get\n\n```\n需要把theme/pure/source文件夹下面的几个文件夹\n移动到dir文件夹下面的source中\n\n# 现在hexo s 打开浏览器应该就可以看见自己的博客了，点击对应的菜单也会跳转\n\n```\n\n4. 其他配置根据配置文件内的注释修改即可\n\n-- 后面会记录\n\n- GitHub+gitalk配置评论\n- 七牛云+PicGO配置图床，方便markdown书写\n\n# 连接Github显示code128(Time out error)\n\n**错误信息**\n\n```\nfatal: unable to access 'https://github.com/gladdduck/gladdduck.github.io.git/':\nFailed to connect to github.com port 443 after 21048 ms: Timed out\nFATAL {\n  err: Error: Spawn failed\n  at ChildProcess.<anonymous> (D:\\BaiduSyncdisk\\Blog\\node_modules\\hexo-util\\lib\\spawn.js:51:21)\n      at ChildProcess.emit (node:events:513:28)\n      at ChildProcess.cp.emit (D:\\BaiduSyncdisk\\Blog\\node_modules\\cross-spawn\\lib\\enoent.js:34:29)\n      at Process.ChildProcess._handle.onexit (node:internal/child_process:293:12) {\n    code: 128\n  }\n} Something's wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html\n```\n\n**解决办法**\n\n1. 设置host文件--没用\n2. 关闭VPN-- 没用\n3. 连手机热点--偶尔有用\n4. 取消代理--偶尔有用\n\n```\n取消全局代理：\ngit config --global --unset http.proxy\n \ngit config --global --unset https.proxy\n```\n\n5. 配置host文件\n\n在C:\\Windows\\System32\\drivers\\etc中的host文件下新增(没有访问权限可以copy一份在桌面修改完之后覆盖)\n\n```\n140.82.113.4 github.com \n199.232.69.194 github.global.ssl.fastly.net\n185.199.108.153 assets-cdn.github.com\n185.199.109.153 assets-cdn.github.com\n185.199.110.153 assets-cdn.github.com\n185.199.111.153 assets-cdn.github.com\n\n```\n\ncmd中**ipconfig /flushdns刷新dns缓存**\n\n!!!!!!!\n\n😳 😳 😳 😳\n单独刷新dns也能用!\ncmd中```ipconfig /flushdns```\n然后```hexo d -g``` 就完全Ok了\n😍 😍 😍 😍 ","source":"_posts/hello-hexo.md","raw":"---\ntitle: print(Hello hexo) & github connected error\ncategories:\n  - hexo博客配置\ntags:\n  - hexo博客配置pure\ntoc: true# 是否启用内容索引\n---\n中间过程可能会出现链接不上github的情况，这个因人而异。\n不是操作问题，是墙的问题。\n自己尝试解决办法。\n\n# 配置简单博客\n\n## 安装前配置\n\n- git安装(下一步者)，测试：git -v\n- nodejs安装(下一步者)，测试：node -v\n- npm安装(装完node就有)，测试：npm -v\n- hexo安装(npm install hexo -g)，测试：hexo -v\n- 其他需要安装的依赖如下(主题部分会用到)(npm install depandence)，测试：npm init\n\n```bash\n+-- hexo-deployer-git@3.0.0\n+-- hexo-generator-archive@1.0.0\n+-- hexo-generator-baidu-sitemap@0.1.9\n+-- hexo-generator-category@1.0.0\n+-- hexo-generator-feed@3.0.0\n+-- hexo-generator-index@2.0.0\n+-- hexo-generator-json-content@4.2.3\n+-- hexo-generator-sitemap@3.0.1\n+-- hexo-generator-tag@1.0.0\n+-- hexo-renderer-ejs@1.0.0\n+-- hexo-renderer-markdown-it-plus@1.0.6\n+-- hexo-renderer-stylus@2.1.0\n+-- hexo-server@2.0.0\n+-- hexo-theme-landscape@0.0.3\n+-- hexo-wordcount@6.0.1\n+-- hexo@5.4.2\n```\n\n## github上的操作\n\n1. 新建一个仓库(repository)\n   ![](https://image.yayan.xyz/1666186035942.png)\n   **仓库名字一定是自己的用户名**\n   **xxxxx.github.io**\n2. git命令板链接仓库生成公钥\n\n```python\n#如果第一次下git应该要设置一下，我没设置后面报错了\ngit config --global user.name \"username\"\ngit config --global user.email \"email\"\n# 生成公钥\nssh-keygen -t rsa  -C \"email\"\n# 会在C:\\Users\\你的用户名\\.ssh下生成id_rsa和id_rsa.pub\n# 复制id_rsa.pub内容\n```\n\n![](https://image.yayan.xyz/1666186511107.png)\n在setting中\n![](https://image.yayan.xyz/1666186551655.png)\n![](https://image.yayan.xyz/1666186590011.png)\n![](https://image.yayan.xyz/1666186600564.png)\ntitle可以随便填，key就是id_rsa.pub中的内容\n\n然后在git命令版中测试：\n\n```\nssh -T git@gitbuh.com\n```\n\n中间可能会输个yes\n看见successfully就成功了\n\n## 本地hexo的操作\n\n1. 本地建一个空文件夹---暂且叫他dir方便后面说，这个就是博客全部内容\n2. 执行完下面命令，文件夹内会多出东西，\n\n```bash\n# 如果执行失败，去github找到hexo-starter的库，下载解压，记得改名字\nhexo init\n```\n\n3.如果不需要额外的hexo主题，执行下面命令就可以了完成了\n\n```bash\n# hexo 把本地的东西，生成静态文件(html,css这些)\nhexo g\n# hexo s在本地运行，可以进自己的浏览器看看\nhexo s \n# hexo d 部署文件到github\nhexo d\n\n# hexo d -g可以直接生成并部署\n# 访问xxxxx.github.io 就能看见自己的博客了\n```\n\n## 配置自己的信息\n\n修改dir文件夹内的_config.yml配置文件\n把链接什么的改成自己的链接就OK了\n\n### 网站的配置\n\n即dir文件夹下面的_config.yml\n\n```python\n# 1. 配置主题的文字，不然主题都是英文，这个必须在dir中配置，在主题中配置没有用\nlanguage: zh-CN\n\n# 2. 如果用主题，主题的配置，不是hexo-theme-pure，就是pure\ntheme: pure\n```\n\n# hexo 配置自己喜欢的主题\n\n**如果不是自己特别喜欢的主题，建议找一个大众的用的人多的主题，\n因为用的人多，出现的问题解决办法就多**\n\n以pure为例，更多的主题访问:\n[hexo官网](https://hexo.io/themes/)\n\n在配置主题过程中，建议参考pure官方文档:[hhexo-theme-pure](https://github.com/cofess/hexo-theme-pure)\n\n1. 先把主题下载下来，除了git命令，其他的都建议在windows的cmd中使用\n\n```bash\n# 如果失败了，同样可以去github，hexo-theme-pure 下载解压，注意改文件夹名字\ngit clone https://github.com/cofess/hexo-theme-pure.git themes/pure\n# 然后把官方文档建议的一大堆依赖下下来\n# 第一部分下过的可以省略\nnpm install hexo-wordcount --save\nnpm install hexo-generator-json-content --save\nnpm install hexo-generator-feed --save\nnpm install hexo-generator-sitemap --save\nnpm install hexo-generator-baidu-sitemap --save\n```\n\n2. 修改dir文件夹内的_config.yml中的theme\n\n如果没有自己添加\n\n```\ntheme: pure\n```\n\n## 文章增删改查\n\n增删改文件，直接在_post里修改md文件，上传即可。\n\n## 踩坑\n\n下面说几个自己踩过的坑，网站配置还好，\n主题的配置一堆，而且pure用的人不多，问题全靠自己解决\n以下的修改都在theme/pure/_cofig.yml文件中\n\n### 网站的配置\n\n1. 网站的名字和logo\n\n```\nsite:\n  logo:\n    enabled: true\n    width: 40\n    height: 40\n    url: ../images/logo.png\n  title: Gladdduck # 页面title\n  favicon: /favicon.png\n  board: <p>分享所思所见所想,欢迎留言交流!6666</p> # 站点公告\n  copyright: false # 底部版权信息\n# 修改logo一定不要修改logo.url里面的图片路径\n# 要修改favicon的路径，修改logo.url的路径没用，反而文章的详情页面不会出现logo了\n```\n\n2. 关于home，archives等不是中文的问题\n\n```\nmenu:\n  Home: .\n  Archives: archives  # 归档\n  Categories: categories  # 分类\n  Tags: tags  # 标签\n  Links: links  # 友链\n  About: about  # 关于\n# 把这个地方的Home等改了不起作用，应该修改dir文件夹下面的配置文件，增加language: zh-CN\n# ：后面的是访问url路径，需要和source文件夹下面的几个文件夹名字对应\n```\n\n3. 菜单栏无法访问 Connot get\n\n```\n需要把theme/pure/source文件夹下面的几个文件夹\n移动到dir文件夹下面的source中\n\n# 现在hexo s 打开浏览器应该就可以看见自己的博客了，点击对应的菜单也会跳转\n\n```\n\n4. 其他配置根据配置文件内的注释修改即可\n\n-- 后面会记录\n\n- GitHub+gitalk配置评论\n- 七牛云+PicGO配置图床，方便markdown书写\n\n# 连接Github显示code128(Time out error)\n\n**错误信息**\n\n```\nfatal: unable to access 'https://github.com/gladdduck/gladdduck.github.io.git/':\nFailed to connect to github.com port 443 after 21048 ms: Timed out\nFATAL {\n  err: Error: Spawn failed\n  at ChildProcess.<anonymous> (D:\\BaiduSyncdisk\\Blog\\node_modules\\hexo-util\\lib\\spawn.js:51:21)\n      at ChildProcess.emit (node:events:513:28)\n      at ChildProcess.cp.emit (D:\\BaiduSyncdisk\\Blog\\node_modules\\cross-spawn\\lib\\enoent.js:34:29)\n      at Process.ChildProcess._handle.onexit (node:internal/child_process:293:12) {\n    code: 128\n  }\n} Something's wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html\n```\n\n**解决办法**\n\n1. 设置host文件--没用\n2. 关闭VPN-- 没用\n3. 连手机热点--偶尔有用\n4. 取消代理--偶尔有用\n\n```\n取消全局代理：\ngit config --global --unset http.proxy\n \ngit config --global --unset https.proxy\n```\n\n5. 配置host文件\n\n在C:\\Windows\\System32\\drivers\\etc中的host文件下新增(没有访问权限可以copy一份在桌面修改完之后覆盖)\n\n```\n140.82.113.4 github.com \n199.232.69.194 github.global.ssl.fastly.net\n185.199.108.153 assets-cdn.github.com\n185.199.109.153 assets-cdn.github.com\n185.199.110.153 assets-cdn.github.com\n185.199.111.153 assets-cdn.github.com\n\n```\n\ncmd中**ipconfig /flushdns刷新dns缓存**\n\n!!!!!!!\n\n😳 😳 😳 😳\n单独刷新dns也能用!\ncmd中```ipconfig /flushdns```\n然后```hexo d -g``` 就完全Ok了\n😍 😍 😍 😍 ","slug":"hello-hexo","published":1,"date":"2022-10-22T00:58:32.348Z","updated":"2022-11-03T10:38:27.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clee4vhau000wc8vqcc34dj44","content":"<p>中间过程可能会出现链接不上github的情况，这个因人而异。<br />\n不是操作问题，是墙的问题。<br />\n自己尝试解决办法。</p>\n<h1 id=\"配置简单博客\"><a class=\"markdownIt-Anchor\" href=\"#配置简单博客\"></a> 配置简单博客</h1>\n<h2 id=\"安装前配置\"><a class=\"markdownIt-Anchor\" href=\"#安装前配置\"></a> 安装前配置</h2>\n<ul>\n<li>git安装(下一步者)，测试：git -v</li>\n<li>nodejs安装(下一步者)，测试：node -v</li>\n<li>npm安装(装完node就有)，测试：npm -v</li>\n<li>hexo安装(npm install hexo -g)，测试：hexo -v</li>\n<li>其他需要安装的依赖如下(主题部分会用到)(npm install depandence)，测试：npm init</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-- hexo-deployer-git@3.0.0</span><br><span class=\"line\">+-- hexo-generator-archive@1.0.0</span><br><span class=\"line\">+-- hexo-generator-baidu-sitemap@0.1.9</span><br><span class=\"line\">+-- hexo-generator-category@1.0.0</span><br><span class=\"line\">+-- hexo-generator-feed@3.0.0</span><br><span class=\"line\">+-- hexo-generator-index@2.0.0</span><br><span class=\"line\">+-- hexo-generator-json-content@4.2.3</span><br><span class=\"line\">+-- hexo-generator-sitemap@3.0.1</span><br><span class=\"line\">+-- hexo-generator-tag@1.0.0</span><br><span class=\"line\">+-- hexo-renderer-ejs@1.0.0</span><br><span class=\"line\">+-- hexo-renderer-markdown-it-plus@1.0.6</span><br><span class=\"line\">+-- hexo-renderer-stylus@2.1.0</span><br><span class=\"line\">+-- hexo-server@2.0.0</span><br><span class=\"line\">+-- hexo-theme-landscape@0.0.3</span><br><span class=\"line\">+-- hexo-wordcount@6.0.1</span><br><span class=\"line\">+-- hexo@5.4.2</span><br></pre></td></tr></table></figure>\n<h2 id=\"github上的操作\"><a class=\"markdownIt-Anchor\" href=\"#github上的操作\"></a> github上的操作</h2>\n<ol>\n<li>新建一个仓库(repository)<br />\n<img src=\"https://image.yayan.xyz/1666186035942.png\" alt=\"\" /><br />\n<strong>仓库名字一定是自己的用户名</strong><br />\n<strong><a href=\"http://xxxxx.github.io\">xxxxx.github.io</a></strong></li>\n<li>git命令板链接仓库生成公钥</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#如果第一次下git应该要设置一下，我没设置后面报错了</span></span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> user.name <span class=\"string\">&quot;username&quot;</span></span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> user.email <span class=\"string\">&quot;email&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 生成公钥</span></span><br><span class=\"line\">ssh-keygen -t rsa  -C <span class=\"string\">&quot;email&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 会在C:\\Users\\你的用户名\\.ssh下生成id_rsa和id_rsa.pub</span></span><br><span class=\"line\"><span class=\"comment\"># 复制id_rsa.pub内容</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://image.yayan.xyz/1666186511107.png\" alt=\"\" /><br />\n在setting中<br />\n<img src=\"https://image.yayan.xyz/1666186551655.png\" alt=\"\" /><br />\n<img src=\"https://image.yayan.xyz/1666186590011.png\" alt=\"\" /><br />\n<img src=\"https://image.yayan.xyz/1666186600564.png\" alt=\"\" /><br />\ntitle可以随便填，key就是id_rsa.pub中的内容</p>\n<p>然后在git命令版中测试：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@gitbuh.com</span><br></pre></td></tr></table></figure>\n<p>中间可能会输个yes<br />\n看见successfully就成功了</p>\n<h2 id=\"本地hexo的操作\"><a class=\"markdownIt-Anchor\" href=\"#本地hexo的操作\"></a> 本地hexo的操作</h2>\n<ol>\n<li>本地建一个空文件夹—暂且叫他dir方便后面说，这个就是博客全部内容</li>\n<li>执行完下面命令，文件夹内会多出东西，</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果执行失败，去github找到hexo-starter的库，下载解压，记得改名字</span></span><br><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<p>3.如果不需要额外的hexo主题，执行下面命令就可以了完成了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># hexo 把本地的东西，生成静态文件(html,css这些)</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"><span class=\"comment\"># hexo s在本地运行，可以进自己的浏览器看看</span></span><br><span class=\"line\">hexo s </span><br><span class=\"line\"><span class=\"comment\"># hexo d 部署文件到github</span></span><br><span class=\"line\">hexo d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hexo d -g可以直接生成并部署</span></span><br><span class=\"line\"><span class=\"comment\"># 访问xxxxx.github.io 就能看见自己的博客了</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置自己的信息\"><a class=\"markdownIt-Anchor\" href=\"#配置自己的信息\"></a> 配置自己的信息</h2>\n<p>修改dir文件夹内的_config.yml配置文件<br />\n把链接什么的改成自己的链接就OK了</p>\n<h3 id=\"网站的配置\"><a class=\"markdownIt-Anchor\" href=\"#网站的配置\"></a> 网站的配置</h3>\n<p>即dir文件夹下面的_config.yml</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 配置主题的文字，不然主题都是英文，这个必须在dir中配置，在主题中配置没有用</span></span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 如果用主题，主题的配置，不是hexo-theme-pure，就是pure</span></span><br><span class=\"line\">theme: pure</span><br></pre></td></tr></table></figure>\n<h1 id=\"hexo-配置自己喜欢的主题\"><a class=\"markdownIt-Anchor\" href=\"#hexo-配置自己喜欢的主题\"></a> hexo 配置自己喜欢的主题</h1>\n<p><strong>如果不是自己特别喜欢的主题，建议找一个大众的用的人多的主题，<br />\n因为用的人多，出现的问题解决办法就多</strong></p>\n<p>以pure为例，更多的主题访问:<br />\n<a href=\"https://hexo.io/themes/\">hexo官网</a></p>\n<p>在配置主题过程中，建议参考pure官方文档:<a href=\"https://github.com/cofess/hexo-theme-pure\">hhexo-theme-pure</a></p>\n<ol>\n<li>先把主题下载下来，除了git命令，其他的都建议在windows的cmd中使用</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果失败了，同样可以去github，hexo-theme-pure 下载解压，注意改文件夹名字</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/cofess/hexo-theme-pure.git themes/pure</span><br><span class=\"line\"><span class=\"comment\"># 然后把官方文档建议的一大堆依赖下下来</span></span><br><span class=\"line\"><span class=\"comment\"># 第一部分下过的可以省略</span></span><br><span class=\"line\">npm install hexo-wordcount --save</span><br><span class=\"line\">npm install hexo-generator-json-content --save</span><br><span class=\"line\">npm install hexo-generator-feed --save</span><br><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改dir文件夹内的_config.yml中的theme</li>\n</ol>\n<p>如果没有自己添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: pure</span><br></pre></td></tr></table></figure>\n<h2 id=\"文章增删改查\"><a class=\"markdownIt-Anchor\" href=\"#文章增删改查\"></a> 文章增删改查</h2>\n<p>增删改文件，直接在_post里修改md文件，上传即可。</p>\n<h2 id=\"踩坑\"><a class=\"markdownIt-Anchor\" href=\"#踩坑\"></a> 踩坑</h2>\n<p>下面说几个自己踩过的坑，网站配置还好，<br />\n主题的配置一堆，而且pure用的人不多，问题全靠自己解决<br />\n以下的修改都在theme/pure/_cofig.yml文件中</p>\n<h3 id=\"网站的配置-2\"><a class=\"markdownIt-Anchor\" href=\"#网站的配置-2\"></a> 网站的配置</h3>\n<ol>\n<li>网站的名字和logo</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:</span><br><span class=\"line\">  logo:</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\">    width: 40</span><br><span class=\"line\">    height: 40</span><br><span class=\"line\">    url: ../images/logo.png</span><br><span class=\"line\">  title: Gladdduck # 页面title</span><br><span class=\"line\">  favicon: /favicon.png</span><br><span class=\"line\">  board: &lt;p&gt;分享所思所见所想,欢迎留言交流!6666&lt;/p&gt; # 站点公告</span><br><span class=\"line\">  copyright: false # 底部版权信息</span><br><span class=\"line\"># 修改logo一定不要修改logo.url里面的图片路径</span><br><span class=\"line\"># 要修改favicon的路径，修改logo.url的路径没用，反而文章的详情页面不会出现logo了</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>关于home，archives等不是中文的问题</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  Home: .</span><br><span class=\"line\">  Archives: archives  # 归档</span><br><span class=\"line\">  Categories: categories  # 分类</span><br><span class=\"line\">  Tags: tags  # 标签</span><br><span class=\"line\">  Links: links  # 友链</span><br><span class=\"line\">  About: about  # 关于</span><br><span class=\"line\"># 把这个地方的Home等改了不起作用，应该修改dir文件夹下面的配置文件，增加language: zh-CN</span><br><span class=\"line\"># ：后面的是访问url路径，需要和source文件夹下面的几个文件夹名字对应</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>菜单栏无法访问 Connot get</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">需要把theme/pure/source文件夹下面的几个文件夹</span><br><span class=\"line\">移动到dir文件夹下面的source中</span><br><span class=\"line\"></span><br><span class=\"line\"># 现在hexo s 打开浏览器应该就可以看见自己的博客了，点击对应的菜单也会跳转</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>其他配置根据配置文件内的注释修改即可</li>\n</ol>\n<p>– 后面会记录</p>\n<ul>\n<li>GitHub+gitalk配置评论</li>\n<li>七牛云+PicGO配置图床，方便markdown书写</li>\n</ul>\n<h1 id=\"连接github显示code128time-out-error\"><a class=\"markdownIt-Anchor\" href=\"#连接github显示code128time-out-error\"></a> 连接Github显示code128(Time out error)</h1>\n<p><strong>错误信息</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: unable to access &#x27;https://github.com/gladdduck/gladdduck.github.io.git/&#x27;:</span><br><span class=\"line\">Failed to connect to github.com port 443 after 21048 ms: Timed out</span><br><span class=\"line\">FATAL &#123;</span><br><span class=\"line\">  err: Error: Spawn failed</span><br><span class=\"line\">  at ChildProcess.&lt;anonymous&gt; (D:\\BaiduSyncdisk\\Blog\\node_modules\\hexo-util\\lib\\spawn.js:51:21)</span><br><span class=\"line\">      at ChildProcess.emit (node:events:513:28)</span><br><span class=\"line\">      at ChildProcess.cp.emit (D:\\BaiduSyncdisk\\Blog\\node_modules\\cross-spawn\\lib\\enoent.js:34:29)</span><br><span class=\"line\">      at Process.ChildProcess._handle.onexit (node:internal/child_process:293:12) &#123;</span><br><span class=\"line\">    code: 128</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure>\n<p><strong>解决办法</strong></p>\n<ol>\n<li>设置host文件–没用</li>\n<li>关闭VPN-- 没用</li>\n<li>连手机热点–偶尔有用</li>\n<li>取消代理–偶尔有用</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">取消全局代理：</span><br><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\"> </span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>配置host文件</li>\n</ol>\n<p>在C:\\Windows\\System32\\drivers\\etc中的host文件下新增(没有访问权限可以copy一份在桌面修改完之后覆盖)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">140.82.113.4 github.com </span><br><span class=\"line\">199.232.69.194 github.global.ssl.fastly.net</span><br><span class=\"line\">185.199.108.153 assets-cdn.github.com</span><br><span class=\"line\">185.199.109.153 assets-cdn.github.com</span><br><span class=\"line\">185.199.110.153 assets-cdn.github.com</span><br><span class=\"line\">185.199.111.153 assets-cdn.github.com</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>cmd中<strong>ipconfig /flushdns刷新dns缓存</strong></p>\n<p>!!!</p>\n<p>😳 😳 😳 😳<br />\n单独刷新dns也能用!<br />\ncmd中<code>ipconfig /flushdns</code><br />\n然后<code>hexo d -g</code> 就完全Ok了<br />\n😍 😍 😍 😍</p>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>中间过程可能会出现链接不上github的情况，这个因人而异。<br />\n不是操作问题，是墙的问题。<br />\n自己尝试解决办法。</p>\n<h1 id=\"配置简单博客\"><a class=\"markdownIt-Anchor\" href=\"#配置简单博客\"></a> 配置简单博客</h1>\n<h2 id=\"安装前配置\"><a class=\"markdownIt-Anchor\" href=\"#安装前配置\"></a> 安装前配置</h2>\n<ul>\n<li>git安装(下一步者)，测试：git -v</li>\n<li>nodejs安装(下一步者)，测试：node -v</li>\n<li>npm安装(装完node就有)，测试：npm -v</li>\n<li>hexo安装(npm install hexo -g)，测试：hexo -v</li>\n<li>其他需要安装的依赖如下(主题部分会用到)(npm install depandence)，测试：npm init</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-- hexo-deployer-git@3.0.0</span><br><span class=\"line\">+-- hexo-generator-archive@1.0.0</span><br><span class=\"line\">+-- hexo-generator-baidu-sitemap@0.1.9</span><br><span class=\"line\">+-- hexo-generator-category@1.0.0</span><br><span class=\"line\">+-- hexo-generator-feed@3.0.0</span><br><span class=\"line\">+-- hexo-generator-index@2.0.0</span><br><span class=\"line\">+-- hexo-generator-json-content@4.2.3</span><br><span class=\"line\">+-- hexo-generator-sitemap@3.0.1</span><br><span class=\"line\">+-- hexo-generator-tag@1.0.0</span><br><span class=\"line\">+-- hexo-renderer-ejs@1.0.0</span><br><span class=\"line\">+-- hexo-renderer-markdown-it-plus@1.0.6</span><br><span class=\"line\">+-- hexo-renderer-stylus@2.1.0</span><br><span class=\"line\">+-- hexo-server@2.0.0</span><br><span class=\"line\">+-- hexo-theme-landscape@0.0.3</span><br><span class=\"line\">+-- hexo-wordcount@6.0.1</span><br><span class=\"line\">+-- hexo@5.4.2</span><br></pre></td></tr></table></figure>\n<h2 id=\"github上的操作\"><a class=\"markdownIt-Anchor\" href=\"#github上的操作\"></a> github上的操作</h2>\n<ol>\n<li>新建一个仓库(repository)<br />\n<img src=\"https://image.yayan.xyz/1666186035942.png\" alt=\"\" /><br />\n<strong>仓库名字一定是自己的用户名</strong><br />\n<strong><a href=\"http://xxxxx.github.io\">xxxxx.github.io</a></strong></li>\n<li>git命令板链接仓库生成公钥</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#如果第一次下git应该要设置一下，我没设置后面报错了</span></span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> user.name <span class=\"string\">&quot;username&quot;</span></span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> user.email <span class=\"string\">&quot;email&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 生成公钥</span></span><br><span class=\"line\">ssh-keygen -t rsa  -C <span class=\"string\">&quot;email&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 会在C:\\Users\\你的用户名\\.ssh下生成id_rsa和id_rsa.pub</span></span><br><span class=\"line\"><span class=\"comment\"># 复制id_rsa.pub内容</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://image.yayan.xyz/1666186511107.png\" alt=\"\" /><br />\n在setting中<br />\n<img src=\"https://image.yayan.xyz/1666186551655.png\" alt=\"\" /><br />\n<img src=\"https://image.yayan.xyz/1666186590011.png\" alt=\"\" /><br />\n<img src=\"https://image.yayan.xyz/1666186600564.png\" alt=\"\" /><br />\ntitle可以随便填，key就是id_rsa.pub中的内容</p>\n<p>然后在git命令版中测试：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@gitbuh.com</span><br></pre></td></tr></table></figure>\n<p>中间可能会输个yes<br />\n看见successfully就成功了</p>\n<h2 id=\"本地hexo的操作\"><a class=\"markdownIt-Anchor\" href=\"#本地hexo的操作\"></a> 本地hexo的操作</h2>\n<ol>\n<li>本地建一个空文件夹—暂且叫他dir方便后面说，这个就是博客全部内容</li>\n<li>执行完下面命令，文件夹内会多出东西，</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果执行失败，去github找到hexo-starter的库，下载解压，记得改名字</span></span><br><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<p>3.如果不需要额外的hexo主题，执行下面命令就可以了完成了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># hexo 把本地的东西，生成静态文件(html,css这些)</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"><span class=\"comment\"># hexo s在本地运行，可以进自己的浏览器看看</span></span><br><span class=\"line\">hexo s </span><br><span class=\"line\"><span class=\"comment\"># hexo d 部署文件到github</span></span><br><span class=\"line\">hexo d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hexo d -g可以直接生成并部署</span></span><br><span class=\"line\"><span class=\"comment\"># 访问xxxxx.github.io 就能看见自己的博客了</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置自己的信息\"><a class=\"markdownIt-Anchor\" href=\"#配置自己的信息\"></a> 配置自己的信息</h2>\n<p>修改dir文件夹内的_config.yml配置文件<br />\n把链接什么的改成自己的链接就OK了</p>\n<h3 id=\"网站的配置\"><a class=\"markdownIt-Anchor\" href=\"#网站的配置\"></a> 网站的配置</h3>\n<p>即dir文件夹下面的_config.yml</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 配置主题的文字，不然主题都是英文，这个必须在dir中配置，在主题中配置没有用</span></span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 如果用主题，主题的配置，不是hexo-theme-pure，就是pure</span></span><br><span class=\"line\">theme: pure</span><br></pre></td></tr></table></figure>\n<h1 id=\"hexo-配置自己喜欢的主题\"><a class=\"markdownIt-Anchor\" href=\"#hexo-配置自己喜欢的主题\"></a> hexo 配置自己喜欢的主题</h1>\n<p><strong>如果不是自己特别喜欢的主题，建议找一个大众的用的人多的主题，<br />\n因为用的人多，出现的问题解决办法就多</strong></p>\n<p>以pure为例，更多的主题访问:<br />\n<a href=\"https://hexo.io/themes/\">hexo官网</a></p>\n<p>在配置主题过程中，建议参考pure官方文档:<a href=\"https://github.com/cofess/hexo-theme-pure\">hhexo-theme-pure</a></p>\n<ol>\n<li>先把主题下载下来，除了git命令，其他的都建议在windows的cmd中使用</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果失败了，同样可以去github，hexo-theme-pure 下载解压，注意改文件夹名字</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/cofess/hexo-theme-pure.git themes/pure</span><br><span class=\"line\"><span class=\"comment\"># 然后把官方文档建议的一大堆依赖下下来</span></span><br><span class=\"line\"><span class=\"comment\"># 第一部分下过的可以省略</span></span><br><span class=\"line\">npm install hexo-wordcount --save</span><br><span class=\"line\">npm install hexo-generator-json-content --save</span><br><span class=\"line\">npm install hexo-generator-feed --save</span><br><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改dir文件夹内的_config.yml中的theme</li>\n</ol>\n<p>如果没有自己添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: pure</span><br></pre></td></tr></table></figure>\n<h2 id=\"文章增删改查\"><a class=\"markdownIt-Anchor\" href=\"#文章增删改查\"></a> 文章增删改查</h2>\n<p>增删改文件，直接在_post里修改md文件，上传即可。</p>\n<h2 id=\"踩坑\"><a class=\"markdownIt-Anchor\" href=\"#踩坑\"></a> 踩坑</h2>\n<p>下面说几个自己踩过的坑，网站配置还好，<br />\n主题的配置一堆，而且pure用的人不多，问题全靠自己解决<br />\n以下的修改都在theme/pure/_cofig.yml文件中</p>\n<h3 id=\"网站的配置-2\"><a class=\"markdownIt-Anchor\" href=\"#网站的配置-2\"></a> 网站的配置</h3>\n<ol>\n<li>网站的名字和logo</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:</span><br><span class=\"line\">  logo:</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\">    width: 40</span><br><span class=\"line\">    height: 40</span><br><span class=\"line\">    url: ../images/logo.png</span><br><span class=\"line\">  title: Gladdduck # 页面title</span><br><span class=\"line\">  favicon: /favicon.png</span><br><span class=\"line\">  board: &lt;p&gt;分享所思所见所想,欢迎留言交流!6666&lt;/p&gt; # 站点公告</span><br><span class=\"line\">  copyright: false # 底部版权信息</span><br><span class=\"line\"># 修改logo一定不要修改logo.url里面的图片路径</span><br><span class=\"line\"># 要修改favicon的路径，修改logo.url的路径没用，反而文章的详情页面不会出现logo了</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>关于home，archives等不是中文的问题</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  Home: .</span><br><span class=\"line\">  Archives: archives  # 归档</span><br><span class=\"line\">  Categories: categories  # 分类</span><br><span class=\"line\">  Tags: tags  # 标签</span><br><span class=\"line\">  Links: links  # 友链</span><br><span class=\"line\">  About: about  # 关于</span><br><span class=\"line\"># 把这个地方的Home等改了不起作用，应该修改dir文件夹下面的配置文件，增加language: zh-CN</span><br><span class=\"line\"># ：后面的是访问url路径，需要和source文件夹下面的几个文件夹名字对应</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>菜单栏无法访问 Connot get</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">需要把theme/pure/source文件夹下面的几个文件夹</span><br><span class=\"line\">移动到dir文件夹下面的source中</span><br><span class=\"line\"></span><br><span class=\"line\"># 现在hexo s 打开浏览器应该就可以看见自己的博客了，点击对应的菜单也会跳转</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>其他配置根据配置文件内的注释修改即可</li>\n</ol>\n<p>– 后面会记录</p>\n<ul>\n<li>GitHub+gitalk配置评论</li>\n<li>七牛云+PicGO配置图床，方便markdown书写</li>\n</ul>\n<h1 id=\"连接github显示code128time-out-error\"><a class=\"markdownIt-Anchor\" href=\"#连接github显示code128time-out-error\"></a> 连接Github显示code128(Time out error)</h1>\n<p><strong>错误信息</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: unable to access &#x27;https://github.com/gladdduck/gladdduck.github.io.git/&#x27;:</span><br><span class=\"line\">Failed to connect to github.com port 443 after 21048 ms: Timed out</span><br><span class=\"line\">FATAL &#123;</span><br><span class=\"line\">  err: Error: Spawn failed</span><br><span class=\"line\">  at ChildProcess.&lt;anonymous&gt; (D:\\BaiduSyncdisk\\Blog\\node_modules\\hexo-util\\lib\\spawn.js:51:21)</span><br><span class=\"line\">      at ChildProcess.emit (node:events:513:28)</span><br><span class=\"line\">      at ChildProcess.cp.emit (D:\\BaiduSyncdisk\\Blog\\node_modules\\cross-spawn\\lib\\enoent.js:34:29)</span><br><span class=\"line\">      at Process.ChildProcess._handle.onexit (node:internal/child_process:293:12) &#123;</span><br><span class=\"line\">    code: 128</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure>\n<p><strong>解决办法</strong></p>\n<ol>\n<li>设置host文件–没用</li>\n<li>关闭VPN-- 没用</li>\n<li>连手机热点–偶尔有用</li>\n<li>取消代理–偶尔有用</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">取消全局代理：</span><br><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\"> </span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>配置host文件</li>\n</ol>\n<p>在C:\\Windows\\System32\\drivers\\etc中的host文件下新增(没有访问权限可以copy一份在桌面修改完之后覆盖)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">140.82.113.4 github.com </span><br><span class=\"line\">199.232.69.194 github.global.ssl.fastly.net</span><br><span class=\"line\">185.199.108.153 assets-cdn.github.com</span><br><span class=\"line\">185.199.109.153 assets-cdn.github.com</span><br><span class=\"line\">185.199.110.153 assets-cdn.github.com</span><br><span class=\"line\">185.199.111.153 assets-cdn.github.com</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>cmd中<strong>ipconfig /flushdns刷新dns缓存</strong></p>\n<p>!!!</p>\n<p>😳 😳 😳 😳<br />\n单独刷新dns也能用!<br />\ncmd中<code>ipconfig /flushdns</code><br />\n然后<code>hexo d -g</code> 就完全Ok了<br />\n😍 😍 😍 😍</p>\n"},{"title":"Cypher学习笔记","toc":"true# 是否启用内容索引","_content":"\n```python\n# CQL:C-ypher Q-uery L-nguage\n```\n\n\n```python\n# 中文:http://neo4j.com.cn/public/cypher/default.html\n# ★英文:https://neo4j.com/docs/cypher-manual/current/introduction/\n# 中文:https://www.w3cschool.cn/neo4j/\n```\n\n# 表达式\n\n\n\n```python\n%%cypher\nMATCH (n:Person)\nRETURN\nCASE \n  WHEN n.born>1980  THEN 1\n  WHEN n.born<1980 THEN 2\n  ELSE 3\nEND AS result\nlimit 5\n```\n\n\n\n\n    [{'result': 2}, {'result': 2}, {'result': 2}, {'result': 2}, {'result': 2}]\n\n\n\n### list\n\n\n```python\n%%cypher\nRETURN range(0, 10)[0..-5]\n//[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]左闭右开\n```\n\n\n\n\n    [{'range(0, 10)': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]\n\n\n\n\n```python\n%%cypher\nRETURN [x IN range(0,10) WHERE x % 2 = 0 ] AS result\n```\n\n\n```python\n%%cypher\nRETURN [x IN range(0,10) | x^3 ] AS result\n```\n\n\n```python\n%%cypher\nMATCH (a:Person {name: 'Keanu Reeves'})\nRETURN [(a)-->(b:Movie) WHERE b.title CONTAINS 'Matrix' | b.released] AS years\n```\n\n\n\n\n    [{'years': [1999, 2003, 2003]}]\n\n\n\n\n```python\n%%cypher\nMATCH (a:Person {name: 'Keanu Reeves'})\nWITH [(a)-->(b:Movie) | b.released] AS years\nUNWIND years AS year\nWITH year ORDER BY year\nRETURN COLLECT(year) AS sorted_years\n```\n\n\n\n\n    [{'sorted_years': [1995, 1997, 1999, 2000, 2003, 2003, 2003]}]\n\n\n\n### map\n\n\n```python\n%%cypher\nMATCH (actor:Person)-[:ACTED_IN]->(movie:Movie)\nWITH actor, count(movie) AS nbrOfMovies\nRETURN actor{.name, nbrOfMovies}\nlimit 5\n```\n\n\n\n\n    [{'actor': {'nbrOfMovies': 1, 'name': 'Emil Eifrem'}},\n     {'actor': {'nbrOfMovies': 7, 'name': 'Keanu Reeves'}},\n     {'actor': {'nbrOfMovies': 3, 'name': 'Laurence Fishburne'}},\n     {'actor': {'nbrOfMovies': 5, 'name': 'Hugo Weaving'}},\n     {'actor': {'nbrOfMovies': 3, 'name': 'Carrie-Anne Moss'}}]\n\n\n\n### null\n\n# 基础语法\n\n[官网](https://neo4j.com/docs/cypher-manual/current/clauses/)\n\n|  命令   | 作用  |\n|  ----  | ----  |\n|  CREATE  | 创建节点\\关系\\属性 |\n|  MATCH  | 检索节点\\关系\\属性 |\n|  RETURN  | 返回查询结果 |\n|  WHERE  | 提供过滤条件 |\n|  DELETE  | 删除节点\\关系 |\n|  REMOVE  | 删除节点\\关系的属性\\标签 |\n|  ORDER BY  | 排序检索数据 |\n|  SET  | 添加或更新标签 |\n\n\n```python\n%load_ext icypher\n%cypher http://neo4j:111222@localhost:7474/db/data\n```\n\n## CREATE\n- 创建没有属性的节点\n- 使用属性创建节点\n- 在没有属性的节点之间创建关系\n- 使用属性创建节点之间的关系\n- 为节点或关系创建单个或多个标签\n\n\n```python\n%%cypher\nCREATE (dept:Dept { deptno:10,dname:'Accounting',location:'苏州',isperson:true })\n//一个节点多个属性一个标签\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\ncreate (m:MOVIE:Cinema:Film:Picture{labels:true})\n//一个节点多个标签\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\nmatch (n:MOVIE:Cinema)\nreturn n\n//区分大小写\n```\n\n\n\n\n    [{'n': Node('Cinema', 'Film', 'MOVIE', 'Picture')},\n     {'n': Node('Cinema', 'Film', 'MOVIE', 'Picture', labels=True)}]\n\n\n\n\n```python\n# 配合json使用\n# {\n#   'props' : [ {\n#     'name' : 'Andy',\n#     'position' : 'Developer'\n#   }, {\n#     'name' : 'Michael',\n#     'position' : 'Developer'\n#   } ]\n# }\n# UNWIND $props AS map\n# CREATE (n)\n# SET n = map\n```\n\n## MATCH\n- 从数据库获取有关节点和属性的数据\n- 从数据库获取有关节点，关系和属性的数据\n- **需要和别的语句搭配使用**\n\n\n```python\n%%cypher\nMATCH (p:Dept {location:'苏州'}) RETURN p.location\n//这是注释 不能放上面\n```\n\n\n\n\n    [{'p.location': '苏州'}]\n\n\n\n\n```python\n%%cypher\nMATCH (p:Dept)\nWHERE p.location = '苏州'\nRETURN p\n//等价上面的\n```\n\n\n\n\n    [{'p': Node('Dept', deptno=10, dname='Accounting', isperson=True, location='苏州')}]\n\n\n\n\n```python\n%%cypher\nMATCH (director:Movie)--(movie)\nRETURN movie\nlimit 5\n//--表示关系 不考虑方向(-->)和属性\n```\n\n\n\n\n    [{'movie': Node('Person', born=1978, name='Emil Eifrem')},\n     {'movie': Node('Person', born=1952, name='Joel Silver')},\n     {'movie': Node('Person', born=1965, name='Lana Wachowski')},\n     {'movie': Node('Person', born=1967, name='Lilly Wachowski')},\n     {'movie': Node('Person', born=1960, name='Hugo Weaving')}]\n\n\n\n\n```python\n%%cypher\nMATCH (wallstreet {title: 'Joe Versus the Volcano'})<-[:ACTED_IN|DIRECTED]-(person)\nRETURN person.name\nlimit 5\n//查询多个关系\n//如果关系名字里面有空格 用反引号``\n//[:TYPE*minHops..maxHops] 代表关系的长度\n//shortestPath((martin)-[*..15]-(oliver)) 最短路径,最大长度为15\n```\n\n\n\n\n    [{'person.name': 'Meg Ryan'},\n     {'person.name': 'Tom Hanks'},\n     {'person.name': 'John Patrick Stanley'},\n     {'person.name': 'Nathan Lane'},\n     {'person.name': 'Meg Ryan'}]\n\n\n\n\n```python\n%%cypher\nMATCH (charlie {name: 'Tom Hanks'})-[:ACTED_IN]->(movie)<-[:DIRECTED]-(director)\nRETURN movie.title, director.name\nlimit 5\n```\n\n\n\n\n    [{'movie.title': \"You've Got Mail\", 'director.name': 'Nora Ephron'},\n     {'movie.title': 'Sleepless in Seattle', 'director.name': 'Nora Ephron'},\n     {'movie.title': 'Joe Versus the Volcano',\n      'director.name': 'John Patrick Stanley'},\n     {'movie.title': 'That Thing You Do', 'director.name': 'Tom Hanks'},\n     {'movie.title': 'Cloud Atlas', 'director.name': 'Tom Tykwer'}]\n\n\n\n\n```python\n# OPTIONAL MATCH \n# using nulls for missing parts \n```\n\n## RETURN\n- 检索节点的某些属性\n- 检索节点的所有属性\n- 检索节点和关联关系的某些属性\n- 检索节点和关联关系的所有属性\n- **需要和别的语句搭配使用**\n\n\n```python\n# return * return 所有出现过的变量\n```\n\n\n```python\n%%cypher\nMATCH (`This isn\\'t a common variable`)\nWHERE `This isn\\'t a common variable`.name = 'Kiefer Sutherland'\nRETURN `This isn\\'t a common variable`.born  as othername\n//DISTINCT 返回不重复的值\n```\n\n\n\n\n    [{'othername': 1966}, {'othername': 1966}]\n\n\n\n##  CREATE+MATCH+RETURN\n\n\n```python\n%%cypher\nCREATE (e:Customer{id:'1001',name:'Abc',dob:'01/10/1982'})\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\nCREATE (cc:CreditCard{id:'5001',number:'1234567890',cvv:'888',expiredate:'20/17'})\n```\n\n\n\n\n    []\n\n\n\n\n```python\n# 1. 使用现有节点创建没有属性的关系\n```\n\n\n```python\n\n%%cypher\nmatch (e:Customer),(cc:CreditCard)\ncreate (e)-[r:DO_SHOPPING_WITH]->(cc)\nRETURN r\n//不加return 也可以\n//只能创建有向关系,查询的时候可以查双向关系\n```\n\n\n\n\n    [{'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'))}]\n\n\n\n\n```python\n%%cypher\nMATCH (e:Customer)-[r ]->(cc) \nRETURN r\n```\n\n\n\n\n    [{'r': second_relation(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'))},\n     {'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'))}]\n\n\n\n\n```python\n%%cypher\nMATCH whole=(e)-[r ]->(cc:Movie) \nRETURN whole\nlimit 5\n```\n\n\n\n\n    [{'whole': Path(Node('Person', born=1978, name='Emil Eifrem'), ACTED_IN(Node('Person', born=1978, name='Emil Eifrem'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))},\n     {'whole': Path(Node('Person', born=1952, name='Joel Silver'), PRODUCED(Node('Person', born=1952, name='Joel Silver'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))},\n     {'whole': Path(Node('Person', born=1965, name='Lana Wachowski'), DIRECTED(Node('Person', born=1965, name='Lana Wachowski'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))},\n     {'whole': Path(Node('Person', born=1967, name='Lilly Wachowski'), DIRECTED(Node('Person', born=1967, name='Lilly Wachowski'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))},\n     {'whole': Path(Node('Person', born=1960, name='Hugo Weaving'), ACTED_IN(Node('Person', born=1960, name='Hugo Weaving'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))}]\n\n\n\n\n```python\n# 2. 使用现有节点创建有属性的关系\n```\n\n\n```python\n%%cypher\nmatch (e:Customer),(cc:CreditCard)\ncreate (e)-[r:DO_SHOPPING_WITH{shopdata:'12/12/2014',price:5500}]->(cc)\nRETURN r\n```\n\n\n\n\n    [{'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'), price=5500, shopdata='12/12/2014')}]\n\n\n\n\n```python\n# 3.使用新节点创建有/无属性的关系\n# 和1.2.的区别是 1.2.需要先match\n```\n\n\n```python\n%%cypher\ncreate (fb1:FaceBookProfile)-[like:LIKES]->(fb2:FaceBookProfile)\n//创建了两个新节点喝一个新关系\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\ncreate (video1:YoutubeVideo{title:'Action Movie1',update_by:'Abc',uploaded_data:'10/10/2010'})\n-[movie:ACTION_MOVIES{rating:1}]->\n(video2:YoutubeVideo{title:'Action Movie2',update_by:'Xyz',uploaded_data:'12/12/2012'})\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\nmatch (cust)-[r:DO_SHOPPING_WITH]->(cc)\nreturn cust,r,cc\n```\n\n\n\n\n    [{'cust': Node('Customer', dob='01/10/1982', id='1001', name='Abc'),\n      'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')),\n      'cc': Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')},\n     {'cust': Node('Customer', dob='01/10/1982', id='1001', name='Abc'),\n      'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')),\n      'cc': Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')},\n     {'cust': Node('Customer', dob='01/10/1982', id='1001', name='Abc'),\n      'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'), price=5500, shopdata='12/12/2014'),\n      'cc': Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')}]\n\n\n\n## WHERE\n\n```\nWHERE <condition> <boolean-operator> <condition> \n<condition>:            <property-name> <comparison-operator> <value>  \n<comparison-operator>:  =/<>/</>/<=/>=/=~(正则)\n<boolean-operator>:     AND/OR/NOT/XOR\n```\n\n\n```python\n%%cypher\nMATCH (emp:YoutubeVideo) \nWHERE emp.aaaaa = 'Xyz'\nRETURN id(emp)\n//没有的属性认为False\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\nMATCH (emp:YoutubeVideo) \nWHERE emp.update_by = 'Abc' OR emp.update_by = 'Xyz'\nRETURN id(emp)\n//查询\n```\n\n\n\n\n    [{'id(emp)': 231}, {'id(emp)': 232}]\n\n\n\n\n```python\n%%cypher\nmatch (n:Dept),(c:CreditCard)\nwhere n.location='苏州' and c.cvv='888'\ncreate (n)-[r:no_relations{prop:'随机创建的'}]->(c)\nreturn r\n\n//创建 数字也要用'',直接888查不到,创建的时候用''了\n```\n\n\n\n\n    [{'r': no_relations(Node('Dept', deptno=10, dname='Accounting', isperson=True, location='苏州'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'), prop='随机创建的')}]\n\n\n\n\n```python\n%%cypher\nMATCH (n:Person)\nWHERE n['born'] > 1980\nRETURN n.name, n.born\nlimit 5\n//n.name CONTAINS 'ete'\n//n.name ENDS WITH 'ter'\n//WHERE n.name STARTS WITH 'Pet'\n```\n\n\n\n\n    [{'n.name': 'Jonathan Lipnicki', 'n.born': 1996},\n     {'n.name': 'Natalie Portman', 'n.born': 1981},\n     {'n.name': 'Emile Hirsch', 'n.born': 1985},\n     {'n.name': 'Rain', 'n.born': 1982},\n     {'n.name': 'Jonathan Lipnicki', 'n.born': 1996}]\n\n\n\n\n```python\n%%cypher\nMATCH (n:Person)-[r]->()\nWHERE n.name='Angela Scope' AND type(r) =~ 'F.*'\nRETURN type(r), r\nlimit 5\n//A开头的关系\n```\n\n\n\n\n    [{'type(r)': 'FOLLOWS',\n      'r': FOLLOWS(Node('Person', name='Angela Scope'), Node('Person', name='Jessica Thompson'))},\n     {'type(r)': 'FOLLOWS',\n      'r': FOLLOWS(Node('Person', name='Angela Scope'), Node('Person', name='Jessica Thompson'))}]\n\n\n\n\n```python\n%%cypher\nMATCH (person:Person),(f:Person)\nWHERE EXISTS {\n  MATCH (person)-[:FOLLOWS]->(f)\n  WHERE person.name = 'Paul Blythe' \n}\nRETURN f.name AS name\n//嵌套查询 内层可用外层变量\n```\n\n\n\n\n    [{'name': 'Angela Scope'}, {'name': 'Angela Scope'}]\n\n\n\n## DELETE\n- 删除节点\n- 删除关系\n\n\n```python\n%%cypher\nMATCH (e:Film) delete  e\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\nmatch (n:Customer)-[r]-(c:CreditCard) delete n,c,r\n//删除节点时必要保证节点没有其他的关系相连\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\nMATCH (n:Movie)\nDETACH DELETE n\n//删除节点和相连的关系\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\nmatch (n)-[r]-(c:Dept) return r\n```\n\n\n\n\n    []\n\n\n\n## REMOVW\n- 删除节点或关系的标签\n- 删除节点或关系的属性\n- keys(n) 查看n的所有属性\n- labels(n) 查看n的所有标签\n\n\n```python\n%%cypher\ncreate (book:Book {id:122,title:'Neo4j TUtorial',pages:333,price:250})\nreturn book\n\n```\n\n\n\n\n    [{'book': Node('Book', id=122, pages=333, price=250, title='Neo4j TUtorial')}]\n\n\n\n\n```python\n%%cypher\nmatch (book:Book{id:122})\nremove book.noattr\nreturn book\n//没有这个属性也可以\n```\n\n\n\n\n    [{'book': Node('Book', id=122, pages=333, title='Neo4j TUtorial')}]\n\n\n\n\n```python\n%%cypher\nmatch (n:label1)\nremove n:label1\nreturn n\n```\n\n\n\n\n    [{'n': Node('label2', 'label3', 'label4', labels=True)}]\n\n\n\n## SET\n- 向现有节点或关系添加新属性\n- 添加或更新属性值\n\n\n```python\n%%cypher\nmatch (n:Dept)\nset n.dname='帅哥' ,n.type='666'\nreturn n\n//有就修改 没有添加\n```\n\n\n\n\n    [{'n': Node('Dept', deptno=10, dname='帅哥', location='Hyderabad', type='666')},\n     {'n': Node('Dept', deptno=10, dname='帅哥', isperson=True, location='苏州', type='666')}]\n\n\n\n\n```python\n%%cypher\nMATCH (book:Book{}) \nSET book+={title:'neo4j tutorial'}\nreturn book\n//book={offline:True}会把原有是属性值全部删掉 book+={offline:True} 不会删除原有属性 新增一个属性\n```\n\n\n\n\n    [{'book': Node('Book', offline=True, title='neo4j tutorial')}]\n\n\n\n\n```python\n%%cypher\nMATCH (book:Book{})  SET book:Knowledge RETURN book\n//新增一个标签\n```\n\n\n\n\n    [{'book': Node('Book', 'Knowledge', offline=True, title='neo4j tutorial')}]\n\n\n\n\n```python\n%%cypher\nMATCH (book:Book{}) \nSET book.addtitle=book.title\nremove book.title\nreturn book\n```\n\n\n\n\n    [{'book': Node('Book', 'Knowledge', addtitle='neo4j tutorial', offline=True)},\n     {'book': Node('Book')},\n     {'book': Node('Book', addtitle='neo4j start', offline=True)},\n     {'book': Node('Book', addtitle='neo4j end', offline=False)}]\n\n\n\n\n```python\n%%cypher\nMATCH (n {dname: '帅哥'})\nSET (CASE WHEN n.type = 666 THEN n END).worksIn = 'Malmo'\nRETURN n\n//只有n.type = 666 才设置\n```\n\n\n\n\n    [{'n': Node('Dept', deptno=10, dname='帅哥', location='Hyderabad', type='666')},\n     {'n': Node('Dept', deptno=10, dname='帅哥', isperson=True, location='苏州', type='666')}]\n\n\n\n\n```python\n# {\n#   'props' : {\n#     'name' : 'Andy',\n#     'position' : 'Developer'\n#   }\n# }\n# MATCH (n {name: 'Andy'})\n# SET n = $props\n# RETURN n.name, n.position, n.age, n.hungry\n```\n\n## ORDER BY\n- 默认是升序排列 DESC改为降序\n\n\n```python\n%%cypher\nmatch (movie:Movie)\nreturn movie.released,movie.title\norder by movie.released DESC , movie.title\nlimit 15\n//多个属性排列\n```\n\n\n\n\n    [{'movie.released': None, 'movie.title': 'The Matrix'},\n     {'movie.released': None, 'movie.title': 'The Matrix'},\n     {'movie.released': None, 'movie.title': 'The Matrix Reloaded'},\n     {'movie.released': None, 'movie.title': 'The Matrix Reloaded'},\n     {'movie.released': None, 'movie.title': 'The Matrix Revolutions'},\n     {'movie.released': None, 'movie.title': 'The Matrix Revolutions'}]\n\n\n\n## UNION [ALL]\n- 将两个不同的结果合并\n\n\n```python\n%%cypher\ncreate (n:CreditCard{id:1,name:'ABX XYZ',number:'1234567890',cvv:1230,valid_from:'6/14',valid_to:'6/24'})\n,(n1:CreditCard{id:2,name:'ABX1 XYZ1',number:'1234567891',cvv:1231,valid_from:'6/141',valid_to:'6/241'})\n,(n2:CreditCard{id:3,name:'ABX2 XYZ2',number:'1234567892',cvv:1232,valid_from:'6/142',valid_to:'6/242'})\n,(n3:CreditCard{id:4,name:'ABX3 XYZ3',number:'1234567893',cvv:1233,valid_from:'6/143',valid_to:'6/243'})\n,(n4:CreditCard{id:5,name:'ABX XYZ',number:'1234567890',cvv:123,valid_from:'6/14',valid_to:'6/24'})\n```\n\n\n```python\n%%cypher\ncreate (n:DebitCard{id:1,name:'ABX XYZ',number:'1234567890',cvv:1230,valid_from:'6/14',valid_to:'6/24'})\n,(n1:CreditCard{id:11,name:'ABX1 XYZ1',number:'1234567891',cvv:1231,valid_from:'6/141',valid_to:'6/241'})\n,(n2:CreditCard{id:12,name:'ABX2 XYZ2',number:'1234567892',cvv:1232,valid_from:'6/142',valid_to:'6/242'})\n,(n3:CreditCard{id:13,name:'ABX3 XYZ3',number:'1234567893',cvv:1233,valid_from:'6/143',valid_to:'6/243'})\n,(n4:CreditCard{id:14,name:'ABX XYZ',number:'1234567890',cvv:123,valid_from:'6/14',valid_to:'6/24'})\n```\n\n\n```python\n%%cypher\nmatch (cc:CreditCard) return cc.id as id ,cc.number as number\nUNION \nmatch (dc:DebitCard) return dc.id  as id ,dc.number as number\n//自动去掉重复从行 不用as\n//这里既有信用卡式和借记卡具有相同的属性名：身份证和号码，但他们有不同的节点名称前缀。\n//这就是为什么UNION命令显示此错误消息。为了避免这种错误，Neo4j的CQL提供“AS”子句。\n```\n\n\n\n\n    [{'id': '5001', 'number': '1234567890'},\n     {'id': 1, 'number': '1234567890'},\n     {'id': 2, 'number': '1234567891'},\n     {'id': 3, 'number': '1234567892'},\n     {'id': 4, 'number': '1234567893'},\n     {'id': 5, 'number': '1234567890'},\n     {'id': 11, 'number': '1234567891'},\n     {'id': 12, 'number': '1234567892'},\n     {'id': 13, 'number': '1234567893'},\n     {'id': 14, 'number': '1234567890'}]\n\n\n\n\n```python\n%%cypher\nmatch (cc:CreditCard) return cc.id as id ,cc.number as number\nUNION  ALL\nmatch (dc:DebitCard) return dc.id  as id ,dc.number as number\n//显示所有的行\n```\n\n\n\n\n    [{'id': '5001', 'number': '1234567890'},\n     {'id': 1, 'number': '1234567890'},\n     {'id': 2, 'number': '1234567891'},\n     {'id': 3, 'number': '1234567892'},\n     {'id': 4, 'number': '1234567893'},\n     {'id': 5, 'number': '1234567890'},\n     {'id': 11, 'number': '1234567891'},\n     {'id': 12, 'number': '1234567892'},\n     {'id': 13, 'number': '1234567893'},\n     {'id': 14, 'number': '1234567890'},\n     {'id': 1, 'number': '1234567890'}]\n\n\n\n## LIMIT & SKIP\n- limit n 只取结果的前n行\n- skip n 跳过结果的前n行\n- 可以放在一起用\n-  limit/skip 1 + toInteger(3 * rand())\n\n## MERGE\n- MERGE命令在图中搜索给定模式\n- 如果存在，则返回结果\n- 如果它不存在于图中，则它创建新的节点/关系并返回结果。\n\n\n```python\n%%cypher\nmatch (gp:GoogleProfile{ Id: 201402,Name:'Nokia'})\nreturn  id(gp)\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\nMERGE (gp:GoogleProfile{ Id: 201402,Name:'Nokia'})\nreturn id(gp)\n```\n\n\n\n\n    [{'id(gp)': 248}]\n\n\n\n\n```python\n%%cypher\nmerge (gp:GoogleProfile{Id:201402,Name:'Nokia'})\nreturn id(gp)\n```\n\n\n\n\n    [{'id(gp)': 248}]\n\n\n\n\n```python\n%%cypher\nMERGE (keanu:Person {name: 'mergecreated'})\nON CREATE\n  SET keanu.created = timestamp()\nRETURN keanu.name, keanu.created\n//如果没有就会创建 并添加一个timestamp\n```\n\n\n\n\n    [{'keanu.name': 'mergecreated', 'keanu.created': 1667637911668}]\n\n\n\n\n```python\n%%cypher\nMERGE (person:Person{name: 'mergecreatedfound'})\nON MATCH\n  SET person.found = true\nRETURN person.name, person.found\nlimit 5\n//如果找到了就添加  没找到就不添加found\n```\n\n\n\n\n    [{'person.name': 'mergecreatedfound', 'person.found': True}]\n\n\n\n\n```python\n%%cypher\nMERGE (keanu:Person {name: 'Keanu Reeves'})\nON CREATE\n  SET keanu.created = timestamp()\nON MATCH\n  SET keanu.lastSeen = timestamp()\nRETURN keanu.name, keanu.created, keanu.lastSeen\n//有就是lastSeen,没有就是created\n```\n\n\n\n\n    [{'keanu.name': 'Keanu Reeves',\n      'keanu.created': None,\n      'keanu.lastSeen': 1667638041825}]\n\n\n\n\n```python\n%%cypher\nMATCH (person:Person)\nMERGE (city:City {name: person.bornIn})\nMERGE (person)-[r:BORN_IN]->(city)\nRETURN person.name, person.bornIn, city\n```\n\n\n```python\n# CREATE CONSTRAINT ON (n:Person) ASSERT n.name IS UNIQUE;\n# CREATE CONSTRAINT ON (n:Person) ASSERT n.role IS UNIQUE;\n# For example, given two unique constraints on :Person(id) and :Person(ssn), \n# a query such as MERGE (n:Person {id: 12, ssn: 437}) will fail, \n# if there are two different nodes (one with id 12 and one with ssn 437) \n# or if there is only one node with only one of the properties. \n# In other words, there must be exactly one node that matches the pattern, or no matching nodes.\n```\n\n## NULL值\n\n\n```python\n%%cypher\ncreate (n:Book)\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\nMATCH (e:Book) \nRETURN e.offline,e.title,e.sal\n// None 就是NULL\n```\n\n\n\n\n    [{'e.offline': True, 'e.title': 'neo4j tutorial', 'e.sal': None},\n     {'e.offline': None, 'e.title': None, 'e.sal': None}]\n\n\n\n\n```python\n%%cypher\nmatch (book:Book)\nwhere book.offline is not null\nreturn book\n//where book.offline is null\n```\n\n\n\n\n    [{'book': Node('Book', 'Knowledge', offline=True, title='neo4j tutorial')}]\n\n\n\n## IN\n- 同 python IN\n\n\n```python\n%%cypher\nMATCH (e:Book) \nWHERE e.offline IN [true]\nRETURN e\n```\n\n\n\n\n    [{'e': Node('Book', 'Knowledge', offline=True, title='neo4j tutorial')},\n     {'e': Node('Book', offline=True, title='neo4j start')}]\n\n\n\n# CQL函数\n[官网](https://neo4j.com/docs/cypher-manual/current/clauses/listing-functions/)\n\n\n```python\n%%cypher\nreturn datetime()\n```\n\n\n\n\n    [{'datetime()': '2022-11-04T07:36:17.068Z'}]\n\n\n\n\n```python\n%%cypher\nSHOW FUNCTIONS yield name,category,description\nlimit 5\n```\n\n\n```python\n%%cypher\nMATCH (a)-[movie:ACTED_IN]->(b) \nRETURN STARTNODE(movie),ENDNODE(movie)\nlimit 5\n```\n\n\n\n\n    [{'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),\n      'ENDNODE(movie)': Node('Movie', released=2003, title=\"Something's Gotta Give\")},\n     {'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),\n      'ENDNODE(movie)': Node('Movie', released=2000, tagline='Pain heals, Chicks dig scars... Glory lasts forever', title='The Replacements')},\n     {'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),\n      'ENDNODE(movie)': Node('Movie', released=1995, tagline='The hottest data on earth. In the coolest head in town', title='Johnny Mnemonic')},\n     {'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),\n      'ENDNODE(movie)': Node('Movie', released=1997, tagline='Evil has its winning ways', title=\"The Devil's Advocate\")},\n     {'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),\n      'ENDNODE(movie)': Node('Movie', released=2003, tagline='Everything that has a beginning has an end', title='The Matrix Revolutions')}]\n\n\n\n\n```python\n%%cypher\nMATCH (a)-[movie:ACTED_IN]->(b) \nRETURN ID(movie),TYPE(movie)\nlimit 5\n//type 只能看relation\n```\n\n\n\n\n    [{'ID(movie)': 221, 'TYPE(movie)': 'ACTED_IN'},\n     {'ID(movie)': 114, 'TYPE(movie)': 'ACTED_IN'},\n     {'ID(movie)': 132, 'TYPE(movie)': 'ACTED_IN'},\n     {'ID(movie)': 22, 'TYPE(movie)': 'ACTED_IN'},\n     {'ID(movie)': 15, 'TYPE(movie)': 'ACTED_IN'}]\n\n\n\n### 创建索引\n\n\n```python\n%%cypher\nCREATE INDEX ON :Movie (title)\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\nDROP INDEX ON :Movie (title)\n```\n\n\n\n\n    []\n\n\n\n### 创建约束\n\n\n```python\n%%cypher\nMATCH (cc:CreditCard) \nRETURN cc.id,cc.number,cc.name,cc.expiredate,cc.cvv\nlimit 5\n```\n\n\n```python\n%%cypher\nCREATE CONSTRAINT ON (cc:CreditCard)\nASSERT cc.id IS UNIQUE\n//如果已经存在重复的就不能创建,把重复的删除\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\ncreate (cc:CreditCard{id:666})\n//Node(246) already exists with label `CreditCard` and property `id` = 14\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\nDROP CONSTRAINT ON (cc:CreditCard)\nASSERT cc.id IS UNIQUE\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\ncreate (cc:CreditCard{id:666})\n```\n\n\n\n\n    []\n\n\n\n# 补充\n\n## WITH\n- allows query parts to be chained together\n\n\n```python\n%%cypher\nMATCH (david {name: 'Jessica Thompson'})--(otherPerson)--()\nWITH otherPerson, count(*) AS foaf\nWHERE foaf > 0\nRETURN otherPerson.name\n```\n\n\n\n\n    [{'otherPerson.name': 'Angela Scope'}, {'otherPerson.name': 'Angela Scope'}]\n\n\n\n## UNWIND\n- expands a list into a sequence of rows.\n\n\n```python\n%%cypher\nUNWIND [1, 2, 3, null] AS x\nRETURN x, 'val' AS y\n```\n\n\n\n\n    [{'x': 1, 'y': 'val'},\n     {'x': 2, 'y': 'val'},\n     {'x': 3, 'y': 'val'},\n     {'x': None, 'y': 'val'}]\n\n\n\n\n```python\n%%cypher\nWITH [1, 1, 2, 2] AS coll\nUNWIND coll AS x\nWITH DISTINCT x\nRETURN collect(x) AS setOfVals\n//列表去重\n```\n\n\n\n\n    [{'setOfVals': [1, 2]}]\n\n\n\n\n```python\n%%cypher\nWITH\n  [1, 2] AS a,\n  [3, 4] AS b\nUNWIND (a + b) AS x\nRETURN x\n```\n\n\n\n\n    [{'x': 1}, {'x': 2}, {'x': 3}, {'x': 4}]\n\n\n\n\n```python\n%%cypher\nWITH [[1, 2], [3, 4], 5] AS nested\nUNWIND nested AS x\nUNWIND x AS y\nRETURN y\n//两重循环\n```\n\n\n\n\n    [{'y': 1}, {'y': 2}, {'y': 3}, {'y': 4}, {'y': 5}]\n\n\n\n\n```python\n%%cypher\nWITH [] AS list\nUNWIND\n  CASE\n    WHEN list = [] THEN [null]\n    ELSE list\n  END AS emptylist\nRETURN emptylist\n//避免列表为空\n```\n\n\n\n\n    [{'emptylist': None}]\n\n\n\n## FOREACH\n\n\n```python\n%%cypher\nMATCH p=(start)-[*]->(finish)\nWHERE start.name = 'Tom Hanks' AND finish.title starts with 'C'\nFOREACH (n IN nodes(p) | SET n.marked = true)\n```\n\n\n```python\n%%cypher\nMATCH (a {name: 'Tom Hanks' })\nFOREACH (name IN ['Mike', 'Carl', 'Bruce'] |\nCREATE (a)-[:FRIEND]->(:Person {name: name}))\n```\n\n\n\n\n    []\n\n\n\n## CALL\n- CALL {}\n- CALL procedure\n\n\n\n```python\n%%cypher\nUNWIND [0, 1, 2] AS x\nCALL {\n  WITH x\n  RETURN x * 10 AS y\n}\nRETURN x, y\n```\n\n\n\n\n    [{'x': 0, 'y': 0}, {'x': 1, 'y': 10}, {'x': 2, 'y': 20}]\n\n\n\nLOAD　CSV\n- LOAD CSV FROM 'file:///artists.csv' AS line -正常数据\n- USING PERIODIC COMMIT 1000 LOAD CSV FROM 'file:///artists.csv' AS line -大数据,1000提交一次事物\n\n\n```python\n# SHOW PROCEDURES YIELD *.\n# SHOW FUNCTIONS YIELD *.\n```\n","source":"_posts/cypther.md","raw":"---\ntitle: Cypher学习笔记\ncategories:\n  - 学习笔记\ntags:\n  - Cypher学习笔记\ntoc: true# 是否启用内容索引\n---\n\n```python\n# CQL:C-ypher Q-uery L-nguage\n```\n\n\n```python\n# 中文:http://neo4j.com.cn/public/cypher/default.html\n# ★英文:https://neo4j.com/docs/cypher-manual/current/introduction/\n# 中文:https://www.w3cschool.cn/neo4j/\n```\n\n# 表达式\n\n\n\n```python\n%%cypher\nMATCH (n:Person)\nRETURN\nCASE \n  WHEN n.born>1980  THEN 1\n  WHEN n.born<1980 THEN 2\n  ELSE 3\nEND AS result\nlimit 5\n```\n\n\n\n\n    [{'result': 2}, {'result': 2}, {'result': 2}, {'result': 2}, {'result': 2}]\n\n\n\n### list\n\n\n```python\n%%cypher\nRETURN range(0, 10)[0..-5]\n//[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]左闭右开\n```\n\n\n\n\n    [{'range(0, 10)': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]\n\n\n\n\n```python\n%%cypher\nRETURN [x IN range(0,10) WHERE x % 2 = 0 ] AS result\n```\n\n\n```python\n%%cypher\nRETURN [x IN range(0,10) | x^3 ] AS result\n```\n\n\n```python\n%%cypher\nMATCH (a:Person {name: 'Keanu Reeves'})\nRETURN [(a)-->(b:Movie) WHERE b.title CONTAINS 'Matrix' | b.released] AS years\n```\n\n\n\n\n    [{'years': [1999, 2003, 2003]}]\n\n\n\n\n```python\n%%cypher\nMATCH (a:Person {name: 'Keanu Reeves'})\nWITH [(a)-->(b:Movie) | b.released] AS years\nUNWIND years AS year\nWITH year ORDER BY year\nRETURN COLLECT(year) AS sorted_years\n```\n\n\n\n\n    [{'sorted_years': [1995, 1997, 1999, 2000, 2003, 2003, 2003]}]\n\n\n\n### map\n\n\n```python\n%%cypher\nMATCH (actor:Person)-[:ACTED_IN]->(movie:Movie)\nWITH actor, count(movie) AS nbrOfMovies\nRETURN actor{.name, nbrOfMovies}\nlimit 5\n```\n\n\n\n\n    [{'actor': {'nbrOfMovies': 1, 'name': 'Emil Eifrem'}},\n     {'actor': {'nbrOfMovies': 7, 'name': 'Keanu Reeves'}},\n     {'actor': {'nbrOfMovies': 3, 'name': 'Laurence Fishburne'}},\n     {'actor': {'nbrOfMovies': 5, 'name': 'Hugo Weaving'}},\n     {'actor': {'nbrOfMovies': 3, 'name': 'Carrie-Anne Moss'}}]\n\n\n\n### null\n\n# 基础语法\n\n[官网](https://neo4j.com/docs/cypher-manual/current/clauses/)\n\n|  命令   | 作用  |\n|  ----  | ----  |\n|  CREATE  | 创建节点\\关系\\属性 |\n|  MATCH  | 检索节点\\关系\\属性 |\n|  RETURN  | 返回查询结果 |\n|  WHERE  | 提供过滤条件 |\n|  DELETE  | 删除节点\\关系 |\n|  REMOVE  | 删除节点\\关系的属性\\标签 |\n|  ORDER BY  | 排序检索数据 |\n|  SET  | 添加或更新标签 |\n\n\n```python\n%load_ext icypher\n%cypher http://neo4j:111222@localhost:7474/db/data\n```\n\n## CREATE\n- 创建没有属性的节点\n- 使用属性创建节点\n- 在没有属性的节点之间创建关系\n- 使用属性创建节点之间的关系\n- 为节点或关系创建单个或多个标签\n\n\n```python\n%%cypher\nCREATE (dept:Dept { deptno:10,dname:'Accounting',location:'苏州',isperson:true })\n//一个节点多个属性一个标签\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\ncreate (m:MOVIE:Cinema:Film:Picture{labels:true})\n//一个节点多个标签\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\nmatch (n:MOVIE:Cinema)\nreturn n\n//区分大小写\n```\n\n\n\n\n    [{'n': Node('Cinema', 'Film', 'MOVIE', 'Picture')},\n     {'n': Node('Cinema', 'Film', 'MOVIE', 'Picture', labels=True)}]\n\n\n\n\n```python\n# 配合json使用\n# {\n#   'props' : [ {\n#     'name' : 'Andy',\n#     'position' : 'Developer'\n#   }, {\n#     'name' : 'Michael',\n#     'position' : 'Developer'\n#   } ]\n# }\n# UNWIND $props AS map\n# CREATE (n)\n# SET n = map\n```\n\n## MATCH\n- 从数据库获取有关节点和属性的数据\n- 从数据库获取有关节点，关系和属性的数据\n- **需要和别的语句搭配使用**\n\n\n```python\n%%cypher\nMATCH (p:Dept {location:'苏州'}) RETURN p.location\n//这是注释 不能放上面\n```\n\n\n\n\n    [{'p.location': '苏州'}]\n\n\n\n\n```python\n%%cypher\nMATCH (p:Dept)\nWHERE p.location = '苏州'\nRETURN p\n//等价上面的\n```\n\n\n\n\n    [{'p': Node('Dept', deptno=10, dname='Accounting', isperson=True, location='苏州')}]\n\n\n\n\n```python\n%%cypher\nMATCH (director:Movie)--(movie)\nRETURN movie\nlimit 5\n//--表示关系 不考虑方向(-->)和属性\n```\n\n\n\n\n    [{'movie': Node('Person', born=1978, name='Emil Eifrem')},\n     {'movie': Node('Person', born=1952, name='Joel Silver')},\n     {'movie': Node('Person', born=1965, name='Lana Wachowski')},\n     {'movie': Node('Person', born=1967, name='Lilly Wachowski')},\n     {'movie': Node('Person', born=1960, name='Hugo Weaving')}]\n\n\n\n\n```python\n%%cypher\nMATCH (wallstreet {title: 'Joe Versus the Volcano'})<-[:ACTED_IN|DIRECTED]-(person)\nRETURN person.name\nlimit 5\n//查询多个关系\n//如果关系名字里面有空格 用反引号``\n//[:TYPE*minHops..maxHops] 代表关系的长度\n//shortestPath((martin)-[*..15]-(oliver)) 最短路径,最大长度为15\n```\n\n\n\n\n    [{'person.name': 'Meg Ryan'},\n     {'person.name': 'Tom Hanks'},\n     {'person.name': 'John Patrick Stanley'},\n     {'person.name': 'Nathan Lane'},\n     {'person.name': 'Meg Ryan'}]\n\n\n\n\n```python\n%%cypher\nMATCH (charlie {name: 'Tom Hanks'})-[:ACTED_IN]->(movie)<-[:DIRECTED]-(director)\nRETURN movie.title, director.name\nlimit 5\n```\n\n\n\n\n    [{'movie.title': \"You've Got Mail\", 'director.name': 'Nora Ephron'},\n     {'movie.title': 'Sleepless in Seattle', 'director.name': 'Nora Ephron'},\n     {'movie.title': 'Joe Versus the Volcano',\n      'director.name': 'John Patrick Stanley'},\n     {'movie.title': 'That Thing You Do', 'director.name': 'Tom Hanks'},\n     {'movie.title': 'Cloud Atlas', 'director.name': 'Tom Tykwer'}]\n\n\n\n\n```python\n# OPTIONAL MATCH \n# using nulls for missing parts \n```\n\n## RETURN\n- 检索节点的某些属性\n- 检索节点的所有属性\n- 检索节点和关联关系的某些属性\n- 检索节点和关联关系的所有属性\n- **需要和别的语句搭配使用**\n\n\n```python\n# return * return 所有出现过的变量\n```\n\n\n```python\n%%cypher\nMATCH (`This isn\\'t a common variable`)\nWHERE `This isn\\'t a common variable`.name = 'Kiefer Sutherland'\nRETURN `This isn\\'t a common variable`.born  as othername\n//DISTINCT 返回不重复的值\n```\n\n\n\n\n    [{'othername': 1966}, {'othername': 1966}]\n\n\n\n##  CREATE+MATCH+RETURN\n\n\n```python\n%%cypher\nCREATE (e:Customer{id:'1001',name:'Abc',dob:'01/10/1982'})\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\nCREATE (cc:CreditCard{id:'5001',number:'1234567890',cvv:'888',expiredate:'20/17'})\n```\n\n\n\n\n    []\n\n\n\n\n```python\n# 1. 使用现有节点创建没有属性的关系\n```\n\n\n```python\n\n%%cypher\nmatch (e:Customer),(cc:CreditCard)\ncreate (e)-[r:DO_SHOPPING_WITH]->(cc)\nRETURN r\n//不加return 也可以\n//只能创建有向关系,查询的时候可以查双向关系\n```\n\n\n\n\n    [{'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'))}]\n\n\n\n\n```python\n%%cypher\nMATCH (e:Customer)-[r ]->(cc) \nRETURN r\n```\n\n\n\n\n    [{'r': second_relation(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'))},\n     {'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'))}]\n\n\n\n\n```python\n%%cypher\nMATCH whole=(e)-[r ]->(cc:Movie) \nRETURN whole\nlimit 5\n```\n\n\n\n\n    [{'whole': Path(Node('Person', born=1978, name='Emil Eifrem'), ACTED_IN(Node('Person', born=1978, name='Emil Eifrem'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))},\n     {'whole': Path(Node('Person', born=1952, name='Joel Silver'), PRODUCED(Node('Person', born=1952, name='Joel Silver'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))},\n     {'whole': Path(Node('Person', born=1965, name='Lana Wachowski'), DIRECTED(Node('Person', born=1965, name='Lana Wachowski'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))},\n     {'whole': Path(Node('Person', born=1967, name='Lilly Wachowski'), DIRECTED(Node('Person', born=1967, name='Lilly Wachowski'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))},\n     {'whole': Path(Node('Person', born=1960, name='Hugo Weaving'), ACTED_IN(Node('Person', born=1960, name='Hugo Weaving'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))}]\n\n\n\n\n```python\n# 2. 使用现有节点创建有属性的关系\n```\n\n\n```python\n%%cypher\nmatch (e:Customer),(cc:CreditCard)\ncreate (e)-[r:DO_SHOPPING_WITH{shopdata:'12/12/2014',price:5500}]->(cc)\nRETURN r\n```\n\n\n\n\n    [{'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'), price=5500, shopdata='12/12/2014')}]\n\n\n\n\n```python\n# 3.使用新节点创建有/无属性的关系\n# 和1.2.的区别是 1.2.需要先match\n```\n\n\n```python\n%%cypher\ncreate (fb1:FaceBookProfile)-[like:LIKES]->(fb2:FaceBookProfile)\n//创建了两个新节点喝一个新关系\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\ncreate (video1:YoutubeVideo{title:'Action Movie1',update_by:'Abc',uploaded_data:'10/10/2010'})\n-[movie:ACTION_MOVIES{rating:1}]->\n(video2:YoutubeVideo{title:'Action Movie2',update_by:'Xyz',uploaded_data:'12/12/2012'})\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\nmatch (cust)-[r:DO_SHOPPING_WITH]->(cc)\nreturn cust,r,cc\n```\n\n\n\n\n    [{'cust': Node('Customer', dob='01/10/1982', id='1001', name='Abc'),\n      'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')),\n      'cc': Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')},\n     {'cust': Node('Customer', dob='01/10/1982', id='1001', name='Abc'),\n      'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')),\n      'cc': Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')},\n     {'cust': Node('Customer', dob='01/10/1982', id='1001', name='Abc'),\n      'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'), price=5500, shopdata='12/12/2014'),\n      'cc': Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')}]\n\n\n\n## WHERE\n\n```\nWHERE <condition> <boolean-operator> <condition> \n<condition>:            <property-name> <comparison-operator> <value>  \n<comparison-operator>:  =/<>/</>/<=/>=/=~(正则)\n<boolean-operator>:     AND/OR/NOT/XOR\n```\n\n\n```python\n%%cypher\nMATCH (emp:YoutubeVideo) \nWHERE emp.aaaaa = 'Xyz'\nRETURN id(emp)\n//没有的属性认为False\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\nMATCH (emp:YoutubeVideo) \nWHERE emp.update_by = 'Abc' OR emp.update_by = 'Xyz'\nRETURN id(emp)\n//查询\n```\n\n\n\n\n    [{'id(emp)': 231}, {'id(emp)': 232}]\n\n\n\n\n```python\n%%cypher\nmatch (n:Dept),(c:CreditCard)\nwhere n.location='苏州' and c.cvv='888'\ncreate (n)-[r:no_relations{prop:'随机创建的'}]->(c)\nreturn r\n\n//创建 数字也要用'',直接888查不到,创建的时候用''了\n```\n\n\n\n\n    [{'r': no_relations(Node('Dept', deptno=10, dname='Accounting', isperson=True, location='苏州'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'), prop='随机创建的')}]\n\n\n\n\n```python\n%%cypher\nMATCH (n:Person)\nWHERE n['born'] > 1980\nRETURN n.name, n.born\nlimit 5\n//n.name CONTAINS 'ete'\n//n.name ENDS WITH 'ter'\n//WHERE n.name STARTS WITH 'Pet'\n```\n\n\n\n\n    [{'n.name': 'Jonathan Lipnicki', 'n.born': 1996},\n     {'n.name': 'Natalie Portman', 'n.born': 1981},\n     {'n.name': 'Emile Hirsch', 'n.born': 1985},\n     {'n.name': 'Rain', 'n.born': 1982},\n     {'n.name': 'Jonathan Lipnicki', 'n.born': 1996}]\n\n\n\n\n```python\n%%cypher\nMATCH (n:Person)-[r]->()\nWHERE n.name='Angela Scope' AND type(r) =~ 'F.*'\nRETURN type(r), r\nlimit 5\n//A开头的关系\n```\n\n\n\n\n    [{'type(r)': 'FOLLOWS',\n      'r': FOLLOWS(Node('Person', name='Angela Scope'), Node('Person', name='Jessica Thompson'))},\n     {'type(r)': 'FOLLOWS',\n      'r': FOLLOWS(Node('Person', name='Angela Scope'), Node('Person', name='Jessica Thompson'))}]\n\n\n\n\n```python\n%%cypher\nMATCH (person:Person),(f:Person)\nWHERE EXISTS {\n  MATCH (person)-[:FOLLOWS]->(f)\n  WHERE person.name = 'Paul Blythe' \n}\nRETURN f.name AS name\n//嵌套查询 内层可用外层变量\n```\n\n\n\n\n    [{'name': 'Angela Scope'}, {'name': 'Angela Scope'}]\n\n\n\n## DELETE\n- 删除节点\n- 删除关系\n\n\n```python\n%%cypher\nMATCH (e:Film) delete  e\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\nmatch (n:Customer)-[r]-(c:CreditCard) delete n,c,r\n//删除节点时必要保证节点没有其他的关系相连\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\nMATCH (n:Movie)\nDETACH DELETE n\n//删除节点和相连的关系\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\nmatch (n)-[r]-(c:Dept) return r\n```\n\n\n\n\n    []\n\n\n\n## REMOVW\n- 删除节点或关系的标签\n- 删除节点或关系的属性\n- keys(n) 查看n的所有属性\n- labels(n) 查看n的所有标签\n\n\n```python\n%%cypher\ncreate (book:Book {id:122,title:'Neo4j TUtorial',pages:333,price:250})\nreturn book\n\n```\n\n\n\n\n    [{'book': Node('Book', id=122, pages=333, price=250, title='Neo4j TUtorial')}]\n\n\n\n\n```python\n%%cypher\nmatch (book:Book{id:122})\nremove book.noattr\nreturn book\n//没有这个属性也可以\n```\n\n\n\n\n    [{'book': Node('Book', id=122, pages=333, title='Neo4j TUtorial')}]\n\n\n\n\n```python\n%%cypher\nmatch (n:label1)\nremove n:label1\nreturn n\n```\n\n\n\n\n    [{'n': Node('label2', 'label3', 'label4', labels=True)}]\n\n\n\n## SET\n- 向现有节点或关系添加新属性\n- 添加或更新属性值\n\n\n```python\n%%cypher\nmatch (n:Dept)\nset n.dname='帅哥' ,n.type='666'\nreturn n\n//有就修改 没有添加\n```\n\n\n\n\n    [{'n': Node('Dept', deptno=10, dname='帅哥', location='Hyderabad', type='666')},\n     {'n': Node('Dept', deptno=10, dname='帅哥', isperson=True, location='苏州', type='666')}]\n\n\n\n\n```python\n%%cypher\nMATCH (book:Book{}) \nSET book+={title:'neo4j tutorial'}\nreturn book\n//book={offline:True}会把原有是属性值全部删掉 book+={offline:True} 不会删除原有属性 新增一个属性\n```\n\n\n\n\n    [{'book': Node('Book', offline=True, title='neo4j tutorial')}]\n\n\n\n\n```python\n%%cypher\nMATCH (book:Book{})  SET book:Knowledge RETURN book\n//新增一个标签\n```\n\n\n\n\n    [{'book': Node('Book', 'Knowledge', offline=True, title='neo4j tutorial')}]\n\n\n\n\n```python\n%%cypher\nMATCH (book:Book{}) \nSET book.addtitle=book.title\nremove book.title\nreturn book\n```\n\n\n\n\n    [{'book': Node('Book', 'Knowledge', addtitle='neo4j tutorial', offline=True)},\n     {'book': Node('Book')},\n     {'book': Node('Book', addtitle='neo4j start', offline=True)},\n     {'book': Node('Book', addtitle='neo4j end', offline=False)}]\n\n\n\n\n```python\n%%cypher\nMATCH (n {dname: '帅哥'})\nSET (CASE WHEN n.type = 666 THEN n END).worksIn = 'Malmo'\nRETURN n\n//只有n.type = 666 才设置\n```\n\n\n\n\n    [{'n': Node('Dept', deptno=10, dname='帅哥', location='Hyderabad', type='666')},\n     {'n': Node('Dept', deptno=10, dname='帅哥', isperson=True, location='苏州', type='666')}]\n\n\n\n\n```python\n# {\n#   'props' : {\n#     'name' : 'Andy',\n#     'position' : 'Developer'\n#   }\n# }\n# MATCH (n {name: 'Andy'})\n# SET n = $props\n# RETURN n.name, n.position, n.age, n.hungry\n```\n\n## ORDER BY\n- 默认是升序排列 DESC改为降序\n\n\n```python\n%%cypher\nmatch (movie:Movie)\nreturn movie.released,movie.title\norder by movie.released DESC , movie.title\nlimit 15\n//多个属性排列\n```\n\n\n\n\n    [{'movie.released': None, 'movie.title': 'The Matrix'},\n     {'movie.released': None, 'movie.title': 'The Matrix'},\n     {'movie.released': None, 'movie.title': 'The Matrix Reloaded'},\n     {'movie.released': None, 'movie.title': 'The Matrix Reloaded'},\n     {'movie.released': None, 'movie.title': 'The Matrix Revolutions'},\n     {'movie.released': None, 'movie.title': 'The Matrix Revolutions'}]\n\n\n\n## UNION [ALL]\n- 将两个不同的结果合并\n\n\n```python\n%%cypher\ncreate (n:CreditCard{id:1,name:'ABX XYZ',number:'1234567890',cvv:1230,valid_from:'6/14',valid_to:'6/24'})\n,(n1:CreditCard{id:2,name:'ABX1 XYZ1',number:'1234567891',cvv:1231,valid_from:'6/141',valid_to:'6/241'})\n,(n2:CreditCard{id:3,name:'ABX2 XYZ2',number:'1234567892',cvv:1232,valid_from:'6/142',valid_to:'6/242'})\n,(n3:CreditCard{id:4,name:'ABX3 XYZ3',number:'1234567893',cvv:1233,valid_from:'6/143',valid_to:'6/243'})\n,(n4:CreditCard{id:5,name:'ABX XYZ',number:'1234567890',cvv:123,valid_from:'6/14',valid_to:'6/24'})\n```\n\n\n```python\n%%cypher\ncreate (n:DebitCard{id:1,name:'ABX XYZ',number:'1234567890',cvv:1230,valid_from:'6/14',valid_to:'6/24'})\n,(n1:CreditCard{id:11,name:'ABX1 XYZ1',number:'1234567891',cvv:1231,valid_from:'6/141',valid_to:'6/241'})\n,(n2:CreditCard{id:12,name:'ABX2 XYZ2',number:'1234567892',cvv:1232,valid_from:'6/142',valid_to:'6/242'})\n,(n3:CreditCard{id:13,name:'ABX3 XYZ3',number:'1234567893',cvv:1233,valid_from:'6/143',valid_to:'6/243'})\n,(n4:CreditCard{id:14,name:'ABX XYZ',number:'1234567890',cvv:123,valid_from:'6/14',valid_to:'6/24'})\n```\n\n\n```python\n%%cypher\nmatch (cc:CreditCard) return cc.id as id ,cc.number as number\nUNION \nmatch (dc:DebitCard) return dc.id  as id ,dc.number as number\n//自动去掉重复从行 不用as\n//这里既有信用卡式和借记卡具有相同的属性名：身份证和号码，但他们有不同的节点名称前缀。\n//这就是为什么UNION命令显示此错误消息。为了避免这种错误，Neo4j的CQL提供“AS”子句。\n```\n\n\n\n\n    [{'id': '5001', 'number': '1234567890'},\n     {'id': 1, 'number': '1234567890'},\n     {'id': 2, 'number': '1234567891'},\n     {'id': 3, 'number': '1234567892'},\n     {'id': 4, 'number': '1234567893'},\n     {'id': 5, 'number': '1234567890'},\n     {'id': 11, 'number': '1234567891'},\n     {'id': 12, 'number': '1234567892'},\n     {'id': 13, 'number': '1234567893'},\n     {'id': 14, 'number': '1234567890'}]\n\n\n\n\n```python\n%%cypher\nmatch (cc:CreditCard) return cc.id as id ,cc.number as number\nUNION  ALL\nmatch (dc:DebitCard) return dc.id  as id ,dc.number as number\n//显示所有的行\n```\n\n\n\n\n    [{'id': '5001', 'number': '1234567890'},\n     {'id': 1, 'number': '1234567890'},\n     {'id': 2, 'number': '1234567891'},\n     {'id': 3, 'number': '1234567892'},\n     {'id': 4, 'number': '1234567893'},\n     {'id': 5, 'number': '1234567890'},\n     {'id': 11, 'number': '1234567891'},\n     {'id': 12, 'number': '1234567892'},\n     {'id': 13, 'number': '1234567893'},\n     {'id': 14, 'number': '1234567890'},\n     {'id': 1, 'number': '1234567890'}]\n\n\n\n## LIMIT & SKIP\n- limit n 只取结果的前n行\n- skip n 跳过结果的前n行\n- 可以放在一起用\n-  limit/skip 1 + toInteger(3 * rand())\n\n## MERGE\n- MERGE命令在图中搜索给定模式\n- 如果存在，则返回结果\n- 如果它不存在于图中，则它创建新的节点/关系并返回结果。\n\n\n```python\n%%cypher\nmatch (gp:GoogleProfile{ Id: 201402,Name:'Nokia'})\nreturn  id(gp)\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\nMERGE (gp:GoogleProfile{ Id: 201402,Name:'Nokia'})\nreturn id(gp)\n```\n\n\n\n\n    [{'id(gp)': 248}]\n\n\n\n\n```python\n%%cypher\nmerge (gp:GoogleProfile{Id:201402,Name:'Nokia'})\nreturn id(gp)\n```\n\n\n\n\n    [{'id(gp)': 248}]\n\n\n\n\n```python\n%%cypher\nMERGE (keanu:Person {name: 'mergecreated'})\nON CREATE\n  SET keanu.created = timestamp()\nRETURN keanu.name, keanu.created\n//如果没有就会创建 并添加一个timestamp\n```\n\n\n\n\n    [{'keanu.name': 'mergecreated', 'keanu.created': 1667637911668}]\n\n\n\n\n```python\n%%cypher\nMERGE (person:Person{name: 'mergecreatedfound'})\nON MATCH\n  SET person.found = true\nRETURN person.name, person.found\nlimit 5\n//如果找到了就添加  没找到就不添加found\n```\n\n\n\n\n    [{'person.name': 'mergecreatedfound', 'person.found': True}]\n\n\n\n\n```python\n%%cypher\nMERGE (keanu:Person {name: 'Keanu Reeves'})\nON CREATE\n  SET keanu.created = timestamp()\nON MATCH\n  SET keanu.lastSeen = timestamp()\nRETURN keanu.name, keanu.created, keanu.lastSeen\n//有就是lastSeen,没有就是created\n```\n\n\n\n\n    [{'keanu.name': 'Keanu Reeves',\n      'keanu.created': None,\n      'keanu.lastSeen': 1667638041825}]\n\n\n\n\n```python\n%%cypher\nMATCH (person:Person)\nMERGE (city:City {name: person.bornIn})\nMERGE (person)-[r:BORN_IN]->(city)\nRETURN person.name, person.bornIn, city\n```\n\n\n```python\n# CREATE CONSTRAINT ON (n:Person) ASSERT n.name IS UNIQUE;\n# CREATE CONSTRAINT ON (n:Person) ASSERT n.role IS UNIQUE;\n# For example, given two unique constraints on :Person(id) and :Person(ssn), \n# a query such as MERGE (n:Person {id: 12, ssn: 437}) will fail, \n# if there are two different nodes (one with id 12 and one with ssn 437) \n# or if there is only one node with only one of the properties. \n# In other words, there must be exactly one node that matches the pattern, or no matching nodes.\n```\n\n## NULL值\n\n\n```python\n%%cypher\ncreate (n:Book)\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\nMATCH (e:Book) \nRETURN e.offline,e.title,e.sal\n// None 就是NULL\n```\n\n\n\n\n    [{'e.offline': True, 'e.title': 'neo4j tutorial', 'e.sal': None},\n     {'e.offline': None, 'e.title': None, 'e.sal': None}]\n\n\n\n\n```python\n%%cypher\nmatch (book:Book)\nwhere book.offline is not null\nreturn book\n//where book.offline is null\n```\n\n\n\n\n    [{'book': Node('Book', 'Knowledge', offline=True, title='neo4j tutorial')}]\n\n\n\n## IN\n- 同 python IN\n\n\n```python\n%%cypher\nMATCH (e:Book) \nWHERE e.offline IN [true]\nRETURN e\n```\n\n\n\n\n    [{'e': Node('Book', 'Knowledge', offline=True, title='neo4j tutorial')},\n     {'e': Node('Book', offline=True, title='neo4j start')}]\n\n\n\n# CQL函数\n[官网](https://neo4j.com/docs/cypher-manual/current/clauses/listing-functions/)\n\n\n```python\n%%cypher\nreturn datetime()\n```\n\n\n\n\n    [{'datetime()': '2022-11-04T07:36:17.068Z'}]\n\n\n\n\n```python\n%%cypher\nSHOW FUNCTIONS yield name,category,description\nlimit 5\n```\n\n\n```python\n%%cypher\nMATCH (a)-[movie:ACTED_IN]->(b) \nRETURN STARTNODE(movie),ENDNODE(movie)\nlimit 5\n```\n\n\n\n\n    [{'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),\n      'ENDNODE(movie)': Node('Movie', released=2003, title=\"Something's Gotta Give\")},\n     {'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),\n      'ENDNODE(movie)': Node('Movie', released=2000, tagline='Pain heals, Chicks dig scars... Glory lasts forever', title='The Replacements')},\n     {'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),\n      'ENDNODE(movie)': Node('Movie', released=1995, tagline='The hottest data on earth. In the coolest head in town', title='Johnny Mnemonic')},\n     {'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),\n      'ENDNODE(movie)': Node('Movie', released=1997, tagline='Evil has its winning ways', title=\"The Devil's Advocate\")},\n     {'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),\n      'ENDNODE(movie)': Node('Movie', released=2003, tagline='Everything that has a beginning has an end', title='The Matrix Revolutions')}]\n\n\n\n\n```python\n%%cypher\nMATCH (a)-[movie:ACTED_IN]->(b) \nRETURN ID(movie),TYPE(movie)\nlimit 5\n//type 只能看relation\n```\n\n\n\n\n    [{'ID(movie)': 221, 'TYPE(movie)': 'ACTED_IN'},\n     {'ID(movie)': 114, 'TYPE(movie)': 'ACTED_IN'},\n     {'ID(movie)': 132, 'TYPE(movie)': 'ACTED_IN'},\n     {'ID(movie)': 22, 'TYPE(movie)': 'ACTED_IN'},\n     {'ID(movie)': 15, 'TYPE(movie)': 'ACTED_IN'}]\n\n\n\n### 创建索引\n\n\n```python\n%%cypher\nCREATE INDEX ON :Movie (title)\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\nDROP INDEX ON :Movie (title)\n```\n\n\n\n\n    []\n\n\n\n### 创建约束\n\n\n```python\n%%cypher\nMATCH (cc:CreditCard) \nRETURN cc.id,cc.number,cc.name,cc.expiredate,cc.cvv\nlimit 5\n```\n\n\n```python\n%%cypher\nCREATE CONSTRAINT ON (cc:CreditCard)\nASSERT cc.id IS UNIQUE\n//如果已经存在重复的就不能创建,把重复的删除\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\ncreate (cc:CreditCard{id:666})\n//Node(246) already exists with label `CreditCard` and property `id` = 14\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\nDROP CONSTRAINT ON (cc:CreditCard)\nASSERT cc.id IS UNIQUE\n```\n\n\n\n\n    []\n\n\n\n\n```python\n%%cypher\ncreate (cc:CreditCard{id:666})\n```\n\n\n\n\n    []\n\n\n\n# 补充\n\n## WITH\n- allows query parts to be chained together\n\n\n```python\n%%cypher\nMATCH (david {name: 'Jessica Thompson'})--(otherPerson)--()\nWITH otherPerson, count(*) AS foaf\nWHERE foaf > 0\nRETURN otherPerson.name\n```\n\n\n\n\n    [{'otherPerson.name': 'Angela Scope'}, {'otherPerson.name': 'Angela Scope'}]\n\n\n\n## UNWIND\n- expands a list into a sequence of rows.\n\n\n```python\n%%cypher\nUNWIND [1, 2, 3, null] AS x\nRETURN x, 'val' AS y\n```\n\n\n\n\n    [{'x': 1, 'y': 'val'},\n     {'x': 2, 'y': 'val'},\n     {'x': 3, 'y': 'val'},\n     {'x': None, 'y': 'val'}]\n\n\n\n\n```python\n%%cypher\nWITH [1, 1, 2, 2] AS coll\nUNWIND coll AS x\nWITH DISTINCT x\nRETURN collect(x) AS setOfVals\n//列表去重\n```\n\n\n\n\n    [{'setOfVals': [1, 2]}]\n\n\n\n\n```python\n%%cypher\nWITH\n  [1, 2] AS a,\n  [3, 4] AS b\nUNWIND (a + b) AS x\nRETURN x\n```\n\n\n\n\n    [{'x': 1}, {'x': 2}, {'x': 3}, {'x': 4}]\n\n\n\n\n```python\n%%cypher\nWITH [[1, 2], [3, 4], 5] AS nested\nUNWIND nested AS x\nUNWIND x AS y\nRETURN y\n//两重循环\n```\n\n\n\n\n    [{'y': 1}, {'y': 2}, {'y': 3}, {'y': 4}, {'y': 5}]\n\n\n\n\n```python\n%%cypher\nWITH [] AS list\nUNWIND\n  CASE\n    WHEN list = [] THEN [null]\n    ELSE list\n  END AS emptylist\nRETURN emptylist\n//避免列表为空\n```\n\n\n\n\n    [{'emptylist': None}]\n\n\n\n## FOREACH\n\n\n```python\n%%cypher\nMATCH p=(start)-[*]->(finish)\nWHERE start.name = 'Tom Hanks' AND finish.title starts with 'C'\nFOREACH (n IN nodes(p) | SET n.marked = true)\n```\n\n\n```python\n%%cypher\nMATCH (a {name: 'Tom Hanks' })\nFOREACH (name IN ['Mike', 'Carl', 'Bruce'] |\nCREATE (a)-[:FRIEND]->(:Person {name: name}))\n```\n\n\n\n\n    []\n\n\n\n## CALL\n- CALL {}\n- CALL procedure\n\n\n\n```python\n%%cypher\nUNWIND [0, 1, 2] AS x\nCALL {\n  WITH x\n  RETURN x * 10 AS y\n}\nRETURN x, y\n```\n\n\n\n\n    [{'x': 0, 'y': 0}, {'x': 1, 'y': 10}, {'x': 2, 'y': 20}]\n\n\n\nLOAD　CSV\n- LOAD CSV FROM 'file:///artists.csv' AS line -正常数据\n- USING PERIODIC COMMIT 1000 LOAD CSV FROM 'file:///artists.csv' AS line -大数据,1000提交一次事物\n\n\n```python\n# SHOW PROCEDURES YIELD *.\n# SHOW FUNCTIONS YIELD *.\n```\n","slug":"cypther","published":1,"date":"2022-11-05T09:16:38.119Z","updated":"2022-11-05T09:19:43.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clee4vhav0010c8vq0esv2vqv","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CQL:C-ypher Q-uery L-nguage</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 中文:http://neo4j.com.cn/public/cypher/default.html</span></span><br><span class=\"line\"><span class=\"comment\"># ★英文:https://neo4j.com/docs/cypher-manual/current/introduction/</span></span><br><span class=\"line\"><span class=\"comment\"># 中文:https://www.w3cschool.cn/neo4j/</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"表达式\"><a class=\"markdownIt-Anchor\" href=\"#表达式\"></a> 表达式</h1>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (n:Person)</span><br><span class=\"line\">RETURN</span><br><span class=\"line\">CASE </span><br><span class=\"line\">  WHEN n.born&gt;<span class=\"number\">1980</span>  THEN <span class=\"number\">1</span></span><br><span class=\"line\">  WHEN n.born&lt;<span class=\"number\">1980</span> THEN <span class=\"number\">2</span></span><br><span class=\"line\">  ELSE <span class=\"number\">3</span></span><br><span class=\"line\">END AS result</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'result': 2&#125;, &#123;'result': 2&#125;, &#123;'result': 2&#125;, &#123;'result': 2&#125;, &#123;'result': 2&#125;]\n</code></pre>\n<h3 id=\"list\"><a class=\"markdownIt-Anchor\" href=\"#list\"></a> list</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">RETURN <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">10</span>)[<span class=\"number\">0.</span>.-<span class=\"number\">5</span>]</span><br><span class=\"line\">//[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]左闭右开</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'range(0, 10)': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">RETURN [x IN <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">10</span>) WHERE x % <span class=\"number\">2</span> = <span class=\"number\">0</span> ] AS result</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">RETURN [x IN <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">10</span>) | x^<span class=\"number\">3</span> ] AS result</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (a:Person &#123;name: <span class=\"string\">&#x27;Keanu Reeves&#x27;</span>&#125;)</span><br><span class=\"line\">RETURN [(a)--&gt;(b:Movie) WHERE b.title CONTAINS <span class=\"string\">&#x27;Matrix&#x27;</span> | b.released] AS years</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'years': [1999, 2003, 2003]&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (a:Person &#123;name: <span class=\"string\">&#x27;Keanu Reeves&#x27;</span>&#125;)</span><br><span class=\"line\">WITH [(a)--&gt;(b:Movie) | b.released] AS years</span><br><span class=\"line\">UNWIND years AS year</span><br><span class=\"line\">WITH year ORDER BY year</span><br><span class=\"line\">RETURN COLLECT(year) AS sorted_years</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'sorted_years': [1995, 1997, 1999, 2000, 2003, 2003, 2003]&#125;]\n</code></pre>\n<h3 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\"></a> map</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (actor:Person)-[:ACTED_IN]-&gt;(movie:Movie)</span><br><span class=\"line\">WITH actor, count(movie) AS nbrOfMovies</span><br><span class=\"line\">RETURN actor&#123;.name, nbrOfMovies&#125;</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'actor': &#123;'nbrOfMovies': 1, 'name': 'Emil Eifrem'&#125;&#125;,\n &#123;'actor': &#123;'nbrOfMovies': 7, 'name': 'Keanu Reeves'&#125;&#125;,\n &#123;'actor': &#123;'nbrOfMovies': 3, 'name': 'Laurence Fishburne'&#125;&#125;,\n &#123;'actor': &#123;'nbrOfMovies': 5, 'name': 'Hugo Weaving'&#125;&#125;,\n &#123;'actor': &#123;'nbrOfMovies': 3, 'name': 'Carrie-Anne Moss'&#125;&#125;]\n</code></pre>\n<h3 id=\"null\"><a class=\"markdownIt-Anchor\" href=\"#null\"></a> null</h3>\n<h1 id=\"基础语法\"><a class=\"markdownIt-Anchor\" href=\"#基础语法\"></a> 基础语法</h1>\n<p><a href=\"https://neo4j.com/docs/cypher-manual/current/clauses/\">官网</a></p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CREATE</td>\n<td>创建节点\\关系\\属性</td>\n</tr>\n<tr>\n<td>MATCH</td>\n<td>检索节点\\关系\\属性</td>\n</tr>\n<tr>\n<td>RETURN</td>\n<td>返回查询结果</td>\n</tr>\n<tr>\n<td>WHERE</td>\n<td>提供过滤条件</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>删除节点\\关系</td>\n</tr>\n<tr>\n<td>REMOVE</td>\n<td>删除节点\\关系的属性\\标签</td>\n</tr>\n<tr>\n<td>ORDER BY</td>\n<td>排序检索数据</td>\n</tr>\n<tr>\n<td>SET</td>\n<td>添加或更新标签</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%load_ext icypher</span><br><span class=\"line\">%cypher http://neo4j:<span class=\"number\">111222</span>@localhost:<span class=\"number\">7474</span>/db/data</span><br></pre></td></tr></table></figure>\n<h2 id=\"create\"><a class=\"markdownIt-Anchor\" href=\"#create\"></a> CREATE</h2>\n<ul>\n<li>创建没有属性的节点</li>\n<li>使用属性创建节点</li>\n<li>在没有属性的节点之间创建关系</li>\n<li>使用属性创建节点之间的关系</li>\n<li>为节点或关系创建单个或多个标签</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">CREATE (dept:Dept &#123; deptno:<span class=\"number\">10</span>,dname:<span class=\"string\">&#x27;Accounting&#x27;</span>,location:<span class=\"string\">&#x27;苏州&#x27;</span>,isperson:true &#125;)</span><br><span class=\"line\">//一个节点多个属性一个标签</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">create (m:MOVIE:Cinema:Film:Picture&#123;labels:true&#125;)</span><br><span class=\"line\">//一个节点多个标签</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (n:MOVIE:Cinema)</span><br><span class=\"line\"><span class=\"keyword\">return</span> n</span><br><span class=\"line\">//区分大小写</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'n': Node('Cinema', 'Film', 'MOVIE', 'Picture')&#125;,\n &#123;'n': Node('Cinema', 'Film', 'MOVIE', 'Picture', labels=True)&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配合json使用</span></span><br><span class=\"line\"><span class=\"comment\"># &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#   &#x27;props&#x27; : [ &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#     &#x27;name&#x27; : &#x27;Andy&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">#     &#x27;position&#x27; : &#x27;Developer&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#   &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#     &#x27;name&#x27; : &#x27;Michael&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">#     &#x27;position&#x27; : &#x27;Developer&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#   &#125; ]</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"><span class=\"comment\"># UNWIND $props AS map</span></span><br><span class=\"line\"><span class=\"comment\"># CREATE (n)</span></span><br><span class=\"line\"><span class=\"comment\"># SET n = map</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"match\"><a class=\"markdownIt-Anchor\" href=\"#match\"></a> MATCH</h2>\n<ul>\n<li>从数据库获取有关节点和属性的数据</li>\n<li>从数据库获取有关节点，关系和属性的数据</li>\n<li><strong>需要和别的语句搭配使用</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (p:Dept &#123;location:<span class=\"string\">&#x27;苏州&#x27;</span>&#125;) RETURN p.location</span><br><span class=\"line\">//这是注释 不能放上面</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'p.location': '苏州'&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (p:Dept)</span><br><span class=\"line\">WHERE p.location = <span class=\"string\">&#x27;苏州&#x27;</span></span><br><span class=\"line\">RETURN p</span><br><span class=\"line\">//等价上面的</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'p': Node('Dept', deptno=10, dname='Accounting', isperson=True, location='苏州')&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (director:Movie)--(movie)</span><br><span class=\"line\">RETURN movie</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br><span class=\"line\">//--表示关系 不考虑方向(--&gt;)和属性</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'movie': Node('Person', born=1978, name='Emil Eifrem')&#125;,\n &#123;'movie': Node('Person', born=1952, name='Joel Silver')&#125;,\n &#123;'movie': Node('Person', born=1965, name='Lana Wachowski')&#125;,\n &#123;'movie': Node('Person', born=1967, name='Lilly Wachowski')&#125;,\n &#123;'movie': Node('Person', born=1960, name='Hugo Weaving')&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (wallstreet &#123;title: <span class=\"string\">&#x27;Joe Versus the Volcano&#x27;</span>&#125;)&lt;-[:ACTED_IN|DIRECTED]-(person)</span><br><span class=\"line\">RETURN person.name</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br><span class=\"line\">//查询多个关系</span><br><span class=\"line\">//如果关系名字里面有空格 用反引号``</span><br><span class=\"line\">//[:TYPE*minHops..maxHops] 代表关系的长度</span><br><span class=\"line\">//shortestPath((martin)-[*.<span class=\"number\">.15</span>]-(oliver)) 最短路径,最大长度为<span class=\"number\">15</span></span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'person.name': 'Meg Ryan'&#125;,\n &#123;'person.name': 'Tom Hanks'&#125;,\n &#123;'person.name': 'John Patrick Stanley'&#125;,\n &#123;'person.name': 'Nathan Lane'&#125;,\n &#123;'person.name': 'Meg Ryan'&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (charlie &#123;name: <span class=\"string\">&#x27;Tom Hanks&#x27;</span>&#125;)-[:ACTED_IN]-&gt;(movie)&lt;-[:DIRECTED]-(director)</span><br><span class=\"line\">RETURN movie.title, director.name</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'movie.title': &quot;You've Got Mail&quot;, 'director.name': 'Nora Ephron'&#125;,\n &#123;'movie.title': 'Sleepless in Seattle', 'director.name': 'Nora Ephron'&#125;,\n &#123;'movie.title': 'Joe Versus the Volcano',\n  'director.name': 'John Patrick Stanley'&#125;,\n &#123;'movie.title': 'That Thing You Do', 'director.name': 'Tom Hanks'&#125;,\n &#123;'movie.title': 'Cloud Atlas', 'director.name': 'Tom Tykwer'&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># OPTIONAL MATCH </span></span><br><span class=\"line\"><span class=\"comment\"># using nulls for missing parts </span></span><br></pre></td></tr></table></figure>\n<h2 id=\"return\"><a class=\"markdownIt-Anchor\" href=\"#return\"></a> RETURN</h2>\n<ul>\n<li>检索节点的某些属性</li>\n<li>检索节点的所有属性</li>\n<li>检索节点和关联关系的某些属性</li>\n<li>检索节点和关联关系的所有属性</li>\n<li><strong>需要和别的语句搭配使用</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># return * return 所有出现过的变量</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (`This isn\\<span class=\"string\">&#x27;t a common variable`)</span></span><br><span class=\"line\"><span class=\"string\">WHERE `This isn\\&#x27;t a common variable`.name = &#x27;</span>Kiefer Sutherland<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">RETURN `This isn\\&#x27;t a common variable`.born  as othername</span></span><br><span class=\"line\"><span class=\"string\">//DISTINCT 返回不重复的值</span></span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'othername': 1966&#125;, &#123;'othername': 1966&#125;]\n</code></pre>\n<h2 id=\"creatematchreturn\"><a class=\"markdownIt-Anchor\" href=\"#creatematchreturn\"></a> CREATE+MATCH+RETURN</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">CREATE (e:Customer&#123;<span class=\"built_in\">id</span>:<span class=\"string\">&#x27;1001&#x27;</span>,name:<span class=\"string\">&#x27;Abc&#x27;</span>,dob:<span class=\"string\">&#x27;01/10/1982&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">CREATE (cc:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"string\">&#x27;5001&#x27;</span>,number:<span class=\"string\">&#x27;1234567890&#x27;</span>,cvv:<span class=\"string\">&#x27;888&#x27;</span>,expiredate:<span class=\"string\">&#x27;20/17&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 使用现有节点创建没有属性的关系</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (e:Customer),(cc:CreditCard)</span><br><span class=\"line\">create (e)-[r:DO_SHOPPING_WITH]-&gt;(cc)</span><br><span class=\"line\">RETURN r</span><br><span class=\"line\">//不加<span class=\"keyword\">return</span> 也可以</span><br><span class=\"line\">//只能创建有向关系,查询的时候可以查双向关系</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'))&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (e:Customer)-[r ]-&gt;(cc) </span><br><span class=\"line\">RETURN r</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'r': second_relation(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'))&#125;,\n &#123;'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'))&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH whole=(e)-[r ]-&gt;(cc:Movie) </span><br><span class=\"line\">RETURN whole</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'whole': Path(Node('Person', born=1978, name='Emil Eifrem'), ACTED_IN(Node('Person', born=1978, name='Emil Eifrem'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))&#125;,\n &#123;'whole': Path(Node('Person', born=1952, name='Joel Silver'), PRODUCED(Node('Person', born=1952, name='Joel Silver'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))&#125;,\n &#123;'whole': Path(Node('Person', born=1965, name='Lana Wachowski'), DIRECTED(Node('Person', born=1965, name='Lana Wachowski'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))&#125;,\n &#123;'whole': Path(Node('Person', born=1967, name='Lilly Wachowski'), DIRECTED(Node('Person', born=1967, name='Lilly Wachowski'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))&#125;,\n &#123;'whole': Path(Node('Person', born=1960, name='Hugo Weaving'), ACTED_IN(Node('Person', born=1960, name='Hugo Weaving'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 2. 使用现有节点创建有属性的关系</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (e:Customer),(cc:CreditCard)</span><br><span class=\"line\">create (e)-[r:DO_SHOPPING_WITH&#123;shopdata:<span class=\"string\">&#x27;12/12/2014&#x27;</span>,price:<span class=\"number\">5500</span>&#125;]-&gt;(cc)</span><br><span class=\"line\">RETURN r</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'), price=5500, shopdata='12/12/2014')&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 3.使用新节点创建有/无属性的关系</span></span><br><span class=\"line\"><span class=\"comment\"># 和1.2.的区别是 1.2.需要先match</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">create (fb1:FaceBookProfile)-[like:LIKES]-&gt;(fb2:FaceBookProfile)</span><br><span class=\"line\">//创建了两个新节点喝一个新关系</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">create (video1:YoutubeVideo&#123;title:<span class=\"string\">&#x27;Action Movie1&#x27;</span>,update_by:<span class=\"string\">&#x27;Abc&#x27;</span>,uploaded_data:<span class=\"string\">&#x27;10/10/2010&#x27;</span>&#125;)</span><br><span class=\"line\">-[movie:ACTION_MOVIES&#123;rating:<span class=\"number\">1</span>&#125;]-&gt;</span><br><span class=\"line\">(video2:YoutubeVideo&#123;title:<span class=\"string\">&#x27;Action Movie2&#x27;</span>,update_by:<span class=\"string\">&#x27;Xyz&#x27;</span>,uploaded_data:<span class=\"string\">&#x27;12/12/2012&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (cust)-[r:DO_SHOPPING_WITH]-&gt;(cc)</span><br><span class=\"line\"><span class=\"keyword\">return</span> cust,r,cc</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'cust': Node('Customer', dob='01/10/1982', id='1001', name='Abc'),\n  'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')),\n  'cc': Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')&#125;,\n &#123;'cust': Node('Customer', dob='01/10/1982', id='1001', name='Abc'),\n  'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')),\n  'cc': Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')&#125;,\n &#123;'cust': Node('Customer', dob='01/10/1982', id='1001', name='Abc'),\n  'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'), price=5500, shopdata='12/12/2014'),\n  'cc': Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')&#125;]\n</code></pre>\n<h2 id=\"where\"><a class=\"markdownIt-Anchor\" href=\"#where\"></a> WHERE</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WHERE &lt;condition&gt; &lt;boolean-operator&gt; &lt;condition&gt; </span><br><span class=\"line\">&lt;condition&gt;:            &lt;property-name&gt; &lt;comparison-operator&gt; &lt;value&gt;  </span><br><span class=\"line\">&lt;comparison-operator&gt;:  =/&lt;&gt;/&lt;/&gt;/&lt;=/&gt;=/=~(正则)</span><br><span class=\"line\">&lt;boolean-operator&gt;:     AND/OR/NOT/XOR</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (emp:YoutubeVideo) </span><br><span class=\"line\">WHERE emp.aaaaa = <span class=\"string\">&#x27;Xyz&#x27;</span></span><br><span class=\"line\">RETURN <span class=\"built_in\">id</span>(emp)</span><br><span class=\"line\">//没有的属性认为<span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (emp:YoutubeVideo) </span><br><span class=\"line\">WHERE emp.update_by = <span class=\"string\">&#x27;Abc&#x27;</span> OR emp.update_by = <span class=\"string\">&#x27;Xyz&#x27;</span></span><br><span class=\"line\">RETURN <span class=\"built_in\">id</span>(emp)</span><br><span class=\"line\">//查询</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'id(emp)': 231&#125;, &#123;'id(emp)': 232&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (n:Dept),(c:CreditCard)</span><br><span class=\"line\">where n.location=<span class=\"string\">&#x27;苏州&#x27;</span> <span class=\"keyword\">and</span> c.cvv=<span class=\"string\">&#x27;888&#x27;</span></span><br><span class=\"line\">create (n)-[r:no_relations&#123;prop:<span class=\"string\">&#x27;随机创建的&#x27;</span>&#125;]-&gt;(c)</span><br><span class=\"line\"><span class=\"keyword\">return</span> r</span><br><span class=\"line\"></span><br><span class=\"line\">//创建 数字也要用<span class=\"string\">&#x27;&#x27;</span>,直接<span class=\"number\">888</span>查不到,创建的时候用<span class=\"string\">&#x27;&#x27;</span>了</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'r': no_relations(Node('Dept', deptno=10, dname='Accounting', isperson=True, location='苏州'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'), prop='随机创建的')&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (n:Person)</span><br><span class=\"line\">WHERE n[<span class=\"string\">&#x27;born&#x27;</span>] &gt; <span class=\"number\">1980</span></span><br><span class=\"line\">RETURN n.name, n.born</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br><span class=\"line\">//n.name CONTAINS <span class=\"string\">&#x27;ete&#x27;</span></span><br><span class=\"line\">//n.name ENDS WITH <span class=\"string\">&#x27;ter&#x27;</span></span><br><span class=\"line\">//WHERE n.name STARTS WITH <span class=\"string\">&#x27;Pet&#x27;</span></span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'n.name': 'Jonathan Lipnicki', 'n.born': 1996&#125;,\n &#123;'n.name': 'Natalie Portman', 'n.born': 1981&#125;,\n &#123;'n.name': 'Emile Hirsch', 'n.born': 1985&#125;,\n &#123;'n.name': 'Rain', 'n.born': 1982&#125;,\n &#123;'n.name': 'Jonathan Lipnicki', 'n.born': 1996&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (n:Person)-[r]-&gt;()</span><br><span class=\"line\">WHERE n.name=<span class=\"string\">&#x27;Angela Scope&#x27;</span> AND <span class=\"built_in\">type</span>(r) =~ <span class=\"string\">&#x27;F.*&#x27;</span></span><br><span class=\"line\">RETURN <span class=\"built_in\">type</span>(r), r</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br><span class=\"line\">//A开头的关系</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'type(r)': 'FOLLOWS',\n  'r': FOLLOWS(Node('Person', name='Angela Scope'), Node('Person', name='Jessica Thompson'))&#125;,\n &#123;'type(r)': 'FOLLOWS',\n  'r': FOLLOWS(Node('Person', name='Angela Scope'), Node('Person', name='Jessica Thompson'))&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (person:Person),(f:Person)</span><br><span class=\"line\">WHERE EXISTS &#123;</span><br><span class=\"line\">  MATCH (person)-[:FOLLOWS]-&gt;(f)</span><br><span class=\"line\">  WHERE person.name = <span class=\"string\">&#x27;Paul Blythe&#x27;</span> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">RETURN f.name AS name</span><br><span class=\"line\">//嵌套查询 内层可用外层变量</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'name': 'Angela Scope'&#125;, &#123;'name': 'Angela Scope'&#125;]\n</code></pre>\n<h2 id=\"delete\"><a class=\"markdownIt-Anchor\" href=\"#delete\"></a> DELETE</h2>\n<ul>\n<li>删除节点</li>\n<li>删除关系</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (e:Film) delete  e</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (n:Customer)-[r]-(c:CreditCard) delete n,c,r</span><br><span class=\"line\">//删除节点时必要保证节点没有其他的关系相连</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (n:Movie)</span><br><span class=\"line\">DETACH DELETE n</span><br><span class=\"line\">//删除节点和相连的关系</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (n)-[r]-(c:Dept) <span class=\"keyword\">return</span> r</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<h2 id=\"removw\"><a class=\"markdownIt-Anchor\" href=\"#removw\"></a> REMOVW</h2>\n<ul>\n<li>删除节点或关系的标签</li>\n<li>删除节点或关系的属性</li>\n<li>keys(n) 查看n的所有属性</li>\n<li>labels(n) 查看n的所有标签</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">create (book:Book &#123;<span class=\"built_in\">id</span>:<span class=\"number\">122</span>,title:<span class=\"string\">&#x27;Neo4j TUtorial&#x27;</span>,pages:<span class=\"number\">333</span>,price:<span class=\"number\">250</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">return</span> book</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'book': Node('Book', id=122, pages=333, price=250, title='Neo4j TUtorial')&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (book:Book&#123;<span class=\"built_in\">id</span>:<span class=\"number\">122</span>&#125;)</span><br><span class=\"line\">remove book.noattr</span><br><span class=\"line\"><span class=\"keyword\">return</span> book</span><br><span class=\"line\">//没有这个属性也可以</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'book': Node('Book', id=122, pages=333, title='Neo4j TUtorial')&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (n:label1)</span><br><span class=\"line\">remove n:label1</span><br><span class=\"line\"><span class=\"keyword\">return</span> n</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'n': Node('label2', 'label3', 'label4', labels=True)&#125;]\n</code></pre>\n<h2 id=\"set\"><a class=\"markdownIt-Anchor\" href=\"#set\"></a> SET</h2>\n<ul>\n<li>向现有节点或关系添加新属性</li>\n<li>添加或更新属性值</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (n:Dept)</span><br><span class=\"line\"><span class=\"built_in\">set</span> n.dname=<span class=\"string\">&#x27;帅哥&#x27;</span> ,n.<span class=\"built_in\">type</span>=<span class=\"string\">&#x27;666&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> n</span><br><span class=\"line\">//有就修改 没有添加</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'n': Node('Dept', deptno=10, dname='帅哥', location='Hyderabad', type='666')&#125;,\n &#123;'n': Node('Dept', deptno=10, dname='帅哥', isperson=True, location='苏州', type='666')&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (book:Book&#123;&#125;) </span><br><span class=\"line\">SET book+=&#123;title:<span class=\"string\">&#x27;neo4j tutorial&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> book</span><br><span class=\"line\">//book=&#123;offline:<span class=\"literal\">True</span>&#125;会把原有是属性值全部删掉 book+=&#123;offline:<span class=\"literal\">True</span>&#125; 不会删除原有属性 新增一个属性</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'book': Node('Book', offline=True, title='neo4j tutorial')&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (book:Book&#123;&#125;)  SET book:Knowledge RETURN book</span><br><span class=\"line\">//新增一个标签</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'book': Node('Book', 'Knowledge', offline=True, title='neo4j tutorial')&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (book:Book&#123;&#125;) </span><br><span class=\"line\">SET book.addtitle=book.title</span><br><span class=\"line\">remove book.title</span><br><span class=\"line\"><span class=\"keyword\">return</span> book</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'book': Node('Book', 'Knowledge', addtitle='neo4j tutorial', offline=True)&#125;,\n &#123;'book': Node('Book')&#125;,\n &#123;'book': Node('Book', addtitle='neo4j start', offline=True)&#125;,\n &#123;'book': Node('Book', addtitle='neo4j end', offline=False)&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (n &#123;dname: <span class=\"string\">&#x27;帅哥&#x27;</span>&#125;)</span><br><span class=\"line\">SET (CASE WHEN n.<span class=\"built_in\">type</span> = <span class=\"number\">666</span> THEN n END).worksIn = <span class=\"string\">&#x27;Malmo&#x27;</span></span><br><span class=\"line\">RETURN n</span><br><span class=\"line\">//只有n.<span class=\"built_in\">type</span> = <span class=\"number\">666</span> 才设置</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'n': Node('Dept', deptno=10, dname='帅哥', location='Hyderabad', type='666')&#125;,\n &#123;'n': Node('Dept', deptno=10, dname='帅哥', isperson=True, location='苏州', type='666')&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#   &#x27;props&#x27; : &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#     &#x27;name&#x27; : &#x27;Andy&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">#     &#x27;position&#x27; : &#x27;Developer&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#   &#125;</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"><span class=\"comment\"># MATCH (n &#123;name: &#x27;Andy&#x27;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\"># SET n = $props</span></span><br><span class=\"line\"><span class=\"comment\"># RETURN n.name, n.position, n.age, n.hungry</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"order-by\"><a class=\"markdownIt-Anchor\" href=\"#order-by\"></a> ORDER BY</h2>\n<ul>\n<li>默认是升序排列 DESC改为降序</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (movie:Movie)</span><br><span class=\"line\"><span class=\"keyword\">return</span> movie.released,movie.title</span><br><span class=\"line\">order by movie.released DESC , movie.title</span><br><span class=\"line\">limit <span class=\"number\">15</span></span><br><span class=\"line\">//多个属性排列</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'movie.released': None, 'movie.title': 'The Matrix'&#125;,\n &#123;'movie.released': None, 'movie.title': 'The Matrix'&#125;,\n &#123;'movie.released': None, 'movie.title': 'The Matrix Reloaded'&#125;,\n &#123;'movie.released': None, 'movie.title': 'The Matrix Reloaded'&#125;,\n &#123;'movie.released': None, 'movie.title': 'The Matrix Revolutions'&#125;,\n &#123;'movie.released': None, 'movie.title': 'The Matrix Revolutions'&#125;]\n</code></pre>\n<h2 id=\"union-all\"><a class=\"markdownIt-Anchor\" href=\"#union-all\"></a> UNION [ALL]</h2>\n<ul>\n<li>将两个不同的结果合并</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">create (n:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">1</span>,name:<span class=\"string\">&#x27;ABX XYZ&#x27;</span>,number:<span class=\"string\">&#x27;1234567890&#x27;</span>,cvv:<span class=\"number\">1230</span>,valid_from:<span class=\"string\">&#x27;6/14&#x27;</span>,valid_to:<span class=\"string\">&#x27;6/24&#x27;</span>&#125;)</span><br><span class=\"line\">,(n1:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">2</span>,name:<span class=\"string\">&#x27;ABX1 XYZ1&#x27;</span>,number:<span class=\"string\">&#x27;1234567891&#x27;</span>,cvv:<span class=\"number\">1231</span>,valid_from:<span class=\"string\">&#x27;6/141&#x27;</span>,valid_to:<span class=\"string\">&#x27;6/241&#x27;</span>&#125;)</span><br><span class=\"line\">,(n2:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">3</span>,name:<span class=\"string\">&#x27;ABX2 XYZ2&#x27;</span>,number:<span class=\"string\">&#x27;1234567892&#x27;</span>,cvv:<span class=\"number\">1232</span>,valid_from:<span class=\"string\">&#x27;6/142&#x27;</span>,valid_to:<span class=\"string\">&#x27;6/242&#x27;</span>&#125;)</span><br><span class=\"line\">,(n3:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">4</span>,name:<span class=\"string\">&#x27;ABX3 XYZ3&#x27;</span>,number:<span class=\"string\">&#x27;1234567893&#x27;</span>,cvv:<span class=\"number\">1233</span>,valid_from:<span class=\"string\">&#x27;6/143&#x27;</span>,valid_to:<span class=\"string\">&#x27;6/243&#x27;</span>&#125;)</span><br><span class=\"line\">,(n4:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">5</span>,name:<span class=\"string\">&#x27;ABX XYZ&#x27;</span>,number:<span class=\"string\">&#x27;1234567890&#x27;</span>,cvv:<span class=\"number\">123</span>,valid_from:<span class=\"string\">&#x27;6/14&#x27;</span>,valid_to:<span class=\"string\">&#x27;6/24&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">create (n:DebitCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">1</span>,name:<span class=\"string\">&#x27;ABX XYZ&#x27;</span>,number:<span class=\"string\">&#x27;1234567890&#x27;</span>,cvv:<span class=\"number\">1230</span>,valid_from:<span class=\"string\">&#x27;6/14&#x27;</span>,valid_to:<span class=\"string\">&#x27;6/24&#x27;</span>&#125;)</span><br><span class=\"line\">,(n1:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">11</span>,name:<span class=\"string\">&#x27;ABX1 XYZ1&#x27;</span>,number:<span class=\"string\">&#x27;1234567891&#x27;</span>,cvv:<span class=\"number\">1231</span>,valid_from:<span class=\"string\">&#x27;6/141&#x27;</span>,valid_to:<span class=\"string\">&#x27;6/241&#x27;</span>&#125;)</span><br><span class=\"line\">,(n2:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">12</span>,name:<span class=\"string\">&#x27;ABX2 XYZ2&#x27;</span>,number:<span class=\"string\">&#x27;1234567892&#x27;</span>,cvv:<span class=\"number\">1232</span>,valid_from:<span class=\"string\">&#x27;6/142&#x27;</span>,valid_to:<span class=\"string\">&#x27;6/242&#x27;</span>&#125;)</span><br><span class=\"line\">,(n3:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">13</span>,name:<span class=\"string\">&#x27;ABX3 XYZ3&#x27;</span>,number:<span class=\"string\">&#x27;1234567893&#x27;</span>,cvv:<span class=\"number\">1233</span>,valid_from:<span class=\"string\">&#x27;6/143&#x27;</span>,valid_to:<span class=\"string\">&#x27;6/243&#x27;</span>&#125;)</span><br><span class=\"line\">,(n4:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">14</span>,name:<span class=\"string\">&#x27;ABX XYZ&#x27;</span>,number:<span class=\"string\">&#x27;1234567890&#x27;</span>,cvv:<span class=\"number\">123</span>,valid_from:<span class=\"string\">&#x27;6/14&#x27;</span>,valid_to:<span class=\"string\">&#x27;6/24&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (cc:CreditCard) <span class=\"keyword\">return</span> cc.<span class=\"built_in\">id</span> <span class=\"keyword\">as</span> <span class=\"built_in\">id</span> ,cc.number <span class=\"keyword\">as</span> number</span><br><span class=\"line\">UNION </span><br><span class=\"line\"><span class=\"keyword\">match</span> (dc:DebitCard) <span class=\"keyword\">return</span> dc.<span class=\"built_in\">id</span>  <span class=\"keyword\">as</span> <span class=\"built_in\">id</span> ,dc.number <span class=\"keyword\">as</span> number</span><br><span class=\"line\">//自动去掉重复从行 不用<span class=\"keyword\">as</span></span><br><span class=\"line\">//这里既有信用卡式和借记卡具有相同的属性名：身份证和号码，但他们有不同的节点名称前缀。</span><br><span class=\"line\">//这就是为什么UNION命令显示此错误消息。为了避免这种错误，Neo4j的CQL提供“AS”子句。</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'id': '5001', 'number': '1234567890'&#125;,\n &#123;'id': 1, 'number': '1234567890'&#125;,\n &#123;'id': 2, 'number': '1234567891'&#125;,\n &#123;'id': 3, 'number': '1234567892'&#125;,\n &#123;'id': 4, 'number': '1234567893'&#125;,\n &#123;'id': 5, 'number': '1234567890'&#125;,\n &#123;'id': 11, 'number': '1234567891'&#125;,\n &#123;'id': 12, 'number': '1234567892'&#125;,\n &#123;'id': 13, 'number': '1234567893'&#125;,\n &#123;'id': 14, 'number': '1234567890'&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (cc:CreditCard) <span class=\"keyword\">return</span> cc.<span class=\"built_in\">id</span> <span class=\"keyword\">as</span> <span class=\"built_in\">id</span> ,cc.number <span class=\"keyword\">as</span> number</span><br><span class=\"line\">UNION  ALL</span><br><span class=\"line\"><span class=\"keyword\">match</span> (dc:DebitCard) <span class=\"keyword\">return</span> dc.<span class=\"built_in\">id</span>  <span class=\"keyword\">as</span> <span class=\"built_in\">id</span> ,dc.number <span class=\"keyword\">as</span> number</span><br><span class=\"line\">//显示所有的行</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'id': '5001', 'number': '1234567890'&#125;,\n &#123;'id': 1, 'number': '1234567890'&#125;,\n &#123;'id': 2, 'number': '1234567891'&#125;,\n &#123;'id': 3, 'number': '1234567892'&#125;,\n &#123;'id': 4, 'number': '1234567893'&#125;,\n &#123;'id': 5, 'number': '1234567890'&#125;,\n &#123;'id': 11, 'number': '1234567891'&#125;,\n &#123;'id': 12, 'number': '1234567892'&#125;,\n &#123;'id': 13, 'number': '1234567893'&#125;,\n &#123;'id': 14, 'number': '1234567890'&#125;,\n &#123;'id': 1, 'number': '1234567890'&#125;]\n</code></pre>\n<h2 id=\"limit-skip\"><a class=\"markdownIt-Anchor\" href=\"#limit-skip\"></a> LIMIT &amp; SKIP</h2>\n<ul>\n<li>limit n 只取结果的前n行</li>\n<li>skip n 跳过结果的前n行</li>\n<li>可以放在一起用</li>\n<li>limit/skip 1 + toInteger(3 * rand())</li>\n</ul>\n<h2 id=\"merge\"><a class=\"markdownIt-Anchor\" href=\"#merge\"></a> MERGE</h2>\n<ul>\n<li>MERGE命令在图中搜索给定模式</li>\n<li>如果存在，则返回结果</li>\n<li>如果它不存在于图中，则它创建新的节点/关系并返回结果。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (gp:GoogleProfile&#123; Id: <span class=\"number\">201402</span>,Name:<span class=\"string\">&#x27;Nokia&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">return</span>  <span class=\"built_in\">id</span>(gp)</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MERGE (gp:GoogleProfile&#123; Id: <span class=\"number\">201402</span>,Name:<span class=\"string\">&#x27;Nokia&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">id</span>(gp)</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'id(gp)': 248&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">merge (gp:GoogleProfile&#123;Id:<span class=\"number\">201402</span>,Name:<span class=\"string\">&#x27;Nokia&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">id</span>(gp)</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'id(gp)': 248&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MERGE (keanu:Person &#123;name: <span class=\"string\">&#x27;mergecreated&#x27;</span>&#125;)</span><br><span class=\"line\">ON CREATE</span><br><span class=\"line\">  SET keanu.created = timestamp()</span><br><span class=\"line\">RETURN keanu.name, keanu.created</span><br><span class=\"line\">//如果没有就会创建 并添加一个timestamp</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'keanu.name': 'mergecreated', 'keanu.created': 1667637911668&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MERGE (person:Person&#123;name: <span class=\"string\">&#x27;mergecreatedfound&#x27;</span>&#125;)</span><br><span class=\"line\">ON MATCH</span><br><span class=\"line\">  SET person.found = true</span><br><span class=\"line\">RETURN person.name, person.found</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br><span class=\"line\">//如果找到了就添加  没找到就不添加found</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'person.name': 'mergecreatedfound', 'person.found': True&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MERGE (keanu:Person &#123;name: <span class=\"string\">&#x27;Keanu Reeves&#x27;</span>&#125;)</span><br><span class=\"line\">ON CREATE</span><br><span class=\"line\">  SET keanu.created = timestamp()</span><br><span class=\"line\">ON MATCH</span><br><span class=\"line\">  SET keanu.lastSeen = timestamp()</span><br><span class=\"line\">RETURN keanu.name, keanu.created, keanu.lastSeen</span><br><span class=\"line\">//有就是lastSeen,没有就是created</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'keanu.name': 'Keanu Reeves',\n  'keanu.created': None,\n  'keanu.lastSeen': 1667638041825&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (person:Person)</span><br><span class=\"line\">MERGE (city:City &#123;name: person.bornIn&#125;)</span><br><span class=\"line\">MERGE (person)-[r:BORN_IN]-&gt;(city)</span><br><span class=\"line\">RETURN person.name, person.bornIn, city</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CREATE CONSTRAINT ON (n:Person) ASSERT n.name IS UNIQUE;</span></span><br><span class=\"line\"><span class=\"comment\"># CREATE CONSTRAINT ON (n:Person) ASSERT n.role IS UNIQUE;</span></span><br><span class=\"line\"><span class=\"comment\"># For example, given two unique constraints on :Person(id) and :Person(ssn), </span></span><br><span class=\"line\"><span class=\"comment\"># a query such as MERGE (n:Person &#123;id: 12, ssn: 437&#125;) will fail, </span></span><br><span class=\"line\"><span class=\"comment\"># if there are two different nodes (one with id 12 and one with ssn 437) </span></span><br><span class=\"line\"><span class=\"comment\"># or if there is only one node with only one of the properties. </span></span><br><span class=\"line\"><span class=\"comment\"># In other words, there must be exactly one node that matches the pattern, or no matching nodes.</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"null值\"><a class=\"markdownIt-Anchor\" href=\"#null值\"></a> NULL值</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">create (n:Book)</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (e:Book) </span><br><span class=\"line\">RETURN e.offline,e.title,e.sal</span><br><span class=\"line\">// <span class=\"literal\">None</span> 就是NULL</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'e.offline': True, 'e.title': 'neo4j tutorial', 'e.sal': None&#125;,\n &#123;'e.offline': None, 'e.title': None, 'e.sal': None&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (book:Book)</span><br><span class=\"line\">where book.offline <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> null</span><br><span class=\"line\"><span class=\"keyword\">return</span> book</span><br><span class=\"line\">//where book.offline <span class=\"keyword\">is</span> null</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'book': Node('Book', 'Knowledge', offline=True, title='neo4j tutorial')&#125;]\n</code></pre>\n<h2 id=\"in\"><a class=\"markdownIt-Anchor\" href=\"#in\"></a> IN</h2>\n<ul>\n<li>同 python IN</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (e:Book) </span><br><span class=\"line\">WHERE e.offline IN [true]</span><br><span class=\"line\">RETURN e</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'e': Node('Book', 'Knowledge', offline=True, title='neo4j tutorial')&#125;,\n &#123;'e': Node('Book', offline=True, title='neo4j start')&#125;]\n</code></pre>\n<h1 id=\"cql函数\"><a class=\"markdownIt-Anchor\" href=\"#cql函数\"></a> CQL函数</h1>\n<p><a href=\"https://neo4j.com/docs/cypher-manual/current/clauses/listing-functions/\">官网</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">return</span> datetime()</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'datetime()': '2022-11-04T07:36:17.068Z'&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">SHOW FUNCTIONS <span class=\"keyword\">yield</span> name,category,description</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (a)-[movie:ACTED_IN]-&gt;(b) </span><br><span class=\"line\">RETURN STARTNODE(movie),ENDNODE(movie)</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),\n  'ENDNODE(movie)': Node('Movie', released=2003, title=&quot;Something's Gotta Give&quot;)&#125;,\n &#123;'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),\n  'ENDNODE(movie)': Node('Movie', released=2000, tagline='Pain heals, Chicks dig scars... Glory lasts forever', title='The Replacements')&#125;,\n &#123;'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),\n  'ENDNODE(movie)': Node('Movie', released=1995, tagline='The hottest data on earth. In the coolest head in town', title='Johnny Mnemonic')&#125;,\n &#123;'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),\n  'ENDNODE(movie)': Node('Movie', released=1997, tagline='Evil has its winning ways', title=&quot;The Devil's Advocate&quot;)&#125;,\n &#123;'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),\n  'ENDNODE(movie)': Node('Movie', released=2003, tagline='Everything that has a beginning has an end', title='The Matrix Revolutions')&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (a)-[movie:ACTED_IN]-&gt;(b) </span><br><span class=\"line\">RETURN ID(movie),TYPE(movie)</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br><span class=\"line\">//<span class=\"built_in\">type</span> 只能看relation</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'ID(movie)': 221, 'TYPE(movie)': 'ACTED_IN'&#125;,\n &#123;'ID(movie)': 114, 'TYPE(movie)': 'ACTED_IN'&#125;,\n &#123;'ID(movie)': 132, 'TYPE(movie)': 'ACTED_IN'&#125;,\n &#123;'ID(movie)': 22, 'TYPE(movie)': 'ACTED_IN'&#125;,\n &#123;'ID(movie)': 15, 'TYPE(movie)': 'ACTED_IN'&#125;]\n</code></pre>\n<h3 id=\"创建索引\"><a class=\"markdownIt-Anchor\" href=\"#创建索引\"></a> 创建索引</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">CREATE INDEX ON :Movie (title)</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">DROP INDEX ON :Movie (title)</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<h3 id=\"创建约束\"><a class=\"markdownIt-Anchor\" href=\"#创建约束\"></a> 创建约束</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (cc:CreditCard) </span><br><span class=\"line\">RETURN cc.<span class=\"built_in\">id</span>,cc.number,cc.name,cc.expiredate,cc.cvv</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">CREATE CONSTRAINT ON (cc:CreditCard)</span><br><span class=\"line\">ASSERT cc.<span class=\"built_in\">id</span> IS UNIQUE</span><br><span class=\"line\">//如果已经存在重复的就不能创建,把重复的删除</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">create (cc:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">666</span>&#125;)</span><br><span class=\"line\">//Node(<span class=\"number\">246</span>) already exists <span class=\"keyword\">with</span> label `CreditCard` <span class=\"keyword\">and</span> <span class=\"built_in\">property</span> `<span class=\"built_in\">id</span>` = <span class=\"number\">14</span></span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">DROP CONSTRAINT ON (cc:CreditCard)</span><br><span class=\"line\">ASSERT cc.<span class=\"built_in\">id</span> IS UNIQUE</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">create (cc:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">666</span>&#125;)</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<h1 id=\"补充\"><a class=\"markdownIt-Anchor\" href=\"#补充\"></a> 补充</h1>\n<h2 id=\"with\"><a class=\"markdownIt-Anchor\" href=\"#with\"></a> WITH</h2>\n<ul>\n<li>allows query parts to be chained together</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (david &#123;name: <span class=\"string\">&#x27;Jessica Thompson&#x27;</span>&#125;)--(otherPerson)--()</span><br><span class=\"line\">WITH otherPerson, count(*) AS foaf</span><br><span class=\"line\">WHERE foaf &gt; <span class=\"number\">0</span></span><br><span class=\"line\">RETURN otherPerson.name</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'otherPerson.name': 'Angela Scope'&#125;, &#123;'otherPerson.name': 'Angela Scope'&#125;]\n</code></pre>\n<h2 id=\"unwind\"><a class=\"markdownIt-Anchor\" href=\"#unwind\"></a> UNWIND</h2>\n<ul>\n<li>expands a list into a sequence of rows.</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">UNWIND [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, null] AS x</span><br><span class=\"line\">RETURN x, <span class=\"string\">&#x27;val&#x27;</span> AS y</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'x': 1, 'y': 'val'&#125;,\n &#123;'x': 2, 'y': 'val'&#125;,\n &#123;'x': 3, 'y': 'val'&#125;,\n &#123;'x': None, 'y': 'val'&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">WITH [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>] AS coll</span><br><span class=\"line\">UNWIND coll AS x</span><br><span class=\"line\">WITH DISTINCT x</span><br><span class=\"line\">RETURN collect(x) AS setOfVals</span><br><span class=\"line\">//列表去重</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'setOfVals': [1, 2]&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">WITH</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"number\">2</span>] AS a,</span><br><span class=\"line\">  [<span class=\"number\">3</span>, <span class=\"number\">4</span>] AS b</span><br><span class=\"line\">UNWIND (a + b) AS x</span><br><span class=\"line\">RETURN x</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'x': 1&#125;, &#123;'x': 2&#125;, &#123;'x': 3&#125;, &#123;'x': 4&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">WITH [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>] AS nested</span><br><span class=\"line\">UNWIND nested AS x</span><br><span class=\"line\">UNWIND x AS y</span><br><span class=\"line\">RETURN y</span><br><span class=\"line\">//两重循环</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'y': 1&#125;, &#123;'y': 2&#125;, &#123;'y': 3&#125;, &#123;'y': 4&#125;, &#123;'y': 5&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">WITH [] AS <span class=\"built_in\">list</span></span><br><span class=\"line\">UNWIND</span><br><span class=\"line\">  CASE</span><br><span class=\"line\">    WHEN <span class=\"built_in\">list</span> = [] THEN [null]</span><br><span class=\"line\">    ELSE <span class=\"built_in\">list</span></span><br><span class=\"line\">  END AS emptylist</span><br><span class=\"line\">RETURN emptylist</span><br><span class=\"line\">//避免列表为空</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'emptylist': None&#125;]\n</code></pre>\n<h2 id=\"foreach\"><a class=\"markdownIt-Anchor\" href=\"#foreach\"></a> FOREACH</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH p=(start)-[*]-&gt;(finish)</span><br><span class=\"line\">WHERE start.name = <span class=\"string\">&#x27;Tom Hanks&#x27;</span> AND finish.title starts <span class=\"keyword\">with</span> <span class=\"string\">&#x27;C&#x27;</span></span><br><span class=\"line\">FOREACH (n IN nodes(p) | SET n.marked = true)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (a &#123;name: <span class=\"string\">&#x27;Tom Hanks&#x27;</span> &#125;)</span><br><span class=\"line\">FOREACH (name IN [<span class=\"string\">&#x27;Mike&#x27;</span>, <span class=\"string\">&#x27;Carl&#x27;</span>, <span class=\"string\">&#x27;Bruce&#x27;</span>] |</span><br><span class=\"line\">CREATE (a)-[:FRIEND]-&gt;(:Person &#123;name: name&#125;))</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<h2 id=\"call\"><a class=\"markdownIt-Anchor\" href=\"#call\"></a> CALL</h2>\n<ul>\n<li>CALL {}</li>\n<li>CALL procedure</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">UNWIND [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>] AS x</span><br><span class=\"line\">CALL &#123;</span><br><span class=\"line\">  WITH x</span><br><span class=\"line\">  RETURN x * <span class=\"number\">10</span> AS y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">RETURN x, y</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'x': 0, 'y': 0&#125;, &#123;'x': 1, 'y': 10&#125;, &#123;'x': 2, 'y': 20&#125;]\n</code></pre>\n<p>LOAD　CSV</p>\n<ul>\n<li>LOAD CSV FROM ‘file:///artists.csv’ AS line -正常数据</li>\n<li>USING PERIODIC COMMIT 1000 LOAD CSV FROM ‘file:///artists.csv’ AS line -大数据,1000提交一次事物</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># SHOW PROCEDURES YIELD *.</span></span><br><span class=\"line\"><span class=\"comment\"># SHOW FUNCTIONS YIELD *.</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CQL:C-ypher Q-uery L-nguage</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 中文:http://neo4j.com.cn/public/cypher/default.html</span></span><br><span class=\"line\"><span class=\"comment\"># ★英文:https://neo4j.com/docs/cypher-manual/current/introduction/</span></span><br><span class=\"line\"><span class=\"comment\"># 中文:https://www.w3cschool.cn/neo4j/</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"表达式\"><a class=\"markdownIt-Anchor\" href=\"#表达式\"></a> 表达式</h1>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (n:Person)</span><br><span class=\"line\">RETURN</span><br><span class=\"line\">CASE </span><br><span class=\"line\">  WHEN n.born&gt;<span class=\"number\">1980</span>  THEN <span class=\"number\">1</span></span><br><span class=\"line\">  WHEN n.born&lt;<span class=\"number\">1980</span> THEN <span class=\"number\">2</span></span><br><span class=\"line\">  ELSE <span class=\"number\">3</span></span><br><span class=\"line\">END AS result</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'result': 2&#125;, &#123;'result': 2&#125;, &#123;'result': 2&#125;, &#123;'result': 2&#125;, &#123;'result': 2&#125;]\n</code></pre>\n<h3 id=\"list\"><a class=\"markdownIt-Anchor\" href=\"#list\"></a> list</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">RETURN <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">10</span>)[<span class=\"number\">0.</span>.-<span class=\"number\">5</span>]</span><br><span class=\"line\">//[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]左闭右开</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'range(0, 10)': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">RETURN [x IN <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">10</span>) WHERE x % <span class=\"number\">2</span> = <span class=\"number\">0</span> ] AS result</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">RETURN [x IN <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">10</span>) | x^<span class=\"number\">3</span> ] AS result</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (a:Person &#123;name: <span class=\"string\">&#x27;Keanu Reeves&#x27;</span>&#125;)</span><br><span class=\"line\">RETURN [(a)--&gt;(b:Movie) WHERE b.title CONTAINS <span class=\"string\">&#x27;Matrix&#x27;</span> | b.released] AS years</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'years': [1999, 2003, 2003]&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (a:Person &#123;name: <span class=\"string\">&#x27;Keanu Reeves&#x27;</span>&#125;)</span><br><span class=\"line\">WITH [(a)--&gt;(b:Movie) | b.released] AS years</span><br><span class=\"line\">UNWIND years AS year</span><br><span class=\"line\">WITH year ORDER BY year</span><br><span class=\"line\">RETURN COLLECT(year) AS sorted_years</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'sorted_years': [1995, 1997, 1999, 2000, 2003, 2003, 2003]&#125;]\n</code></pre>\n<h3 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\"></a> map</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (actor:Person)-[:ACTED_IN]-&gt;(movie:Movie)</span><br><span class=\"line\">WITH actor, count(movie) AS nbrOfMovies</span><br><span class=\"line\">RETURN actor&#123;.name, nbrOfMovies&#125;</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'actor': &#123;'nbrOfMovies': 1, 'name': 'Emil Eifrem'&#125;&#125;,\n &#123;'actor': &#123;'nbrOfMovies': 7, 'name': 'Keanu Reeves'&#125;&#125;,\n &#123;'actor': &#123;'nbrOfMovies': 3, 'name': 'Laurence Fishburne'&#125;&#125;,\n &#123;'actor': &#123;'nbrOfMovies': 5, 'name': 'Hugo Weaving'&#125;&#125;,\n &#123;'actor': &#123;'nbrOfMovies': 3, 'name': 'Carrie-Anne Moss'&#125;&#125;]\n</code></pre>\n<h3 id=\"null\"><a class=\"markdownIt-Anchor\" href=\"#null\"></a> null</h3>\n<h1 id=\"基础语法\"><a class=\"markdownIt-Anchor\" href=\"#基础语法\"></a> 基础语法</h1>\n<p><a href=\"https://neo4j.com/docs/cypher-manual/current/clauses/\">官网</a></p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CREATE</td>\n<td>创建节点\\关系\\属性</td>\n</tr>\n<tr>\n<td>MATCH</td>\n<td>检索节点\\关系\\属性</td>\n</tr>\n<tr>\n<td>RETURN</td>\n<td>返回查询结果</td>\n</tr>\n<tr>\n<td>WHERE</td>\n<td>提供过滤条件</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>删除节点\\关系</td>\n</tr>\n<tr>\n<td>REMOVE</td>\n<td>删除节点\\关系的属性\\标签</td>\n</tr>\n<tr>\n<td>ORDER BY</td>\n<td>排序检索数据</td>\n</tr>\n<tr>\n<td>SET</td>\n<td>添加或更新标签</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%load_ext icypher</span><br><span class=\"line\">%cypher http://neo4j:<span class=\"number\">111222</span>@localhost:<span class=\"number\">7474</span>/db/data</span><br></pre></td></tr></table></figure>\n<h2 id=\"create\"><a class=\"markdownIt-Anchor\" href=\"#create\"></a> CREATE</h2>\n<ul>\n<li>创建没有属性的节点</li>\n<li>使用属性创建节点</li>\n<li>在没有属性的节点之间创建关系</li>\n<li>使用属性创建节点之间的关系</li>\n<li>为节点或关系创建单个或多个标签</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">CREATE (dept:Dept &#123; deptno:<span class=\"number\">10</span>,dname:<span class=\"string\">&#x27;Accounting&#x27;</span>,location:<span class=\"string\">&#x27;苏州&#x27;</span>,isperson:true &#125;)</span><br><span class=\"line\">//一个节点多个属性一个标签</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">create (m:MOVIE:Cinema:Film:Picture&#123;labels:true&#125;)</span><br><span class=\"line\">//一个节点多个标签</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (n:MOVIE:Cinema)</span><br><span class=\"line\"><span class=\"keyword\">return</span> n</span><br><span class=\"line\">//区分大小写</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'n': Node('Cinema', 'Film', 'MOVIE', 'Picture')&#125;,\n &#123;'n': Node('Cinema', 'Film', 'MOVIE', 'Picture', labels=True)&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配合json使用</span></span><br><span class=\"line\"><span class=\"comment\"># &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#   &#x27;props&#x27; : [ &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#     &#x27;name&#x27; : &#x27;Andy&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">#     &#x27;position&#x27; : &#x27;Developer&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#   &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#     &#x27;name&#x27; : &#x27;Michael&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">#     &#x27;position&#x27; : &#x27;Developer&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#   &#125; ]</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"><span class=\"comment\"># UNWIND $props AS map</span></span><br><span class=\"line\"><span class=\"comment\"># CREATE (n)</span></span><br><span class=\"line\"><span class=\"comment\"># SET n = map</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"match\"><a class=\"markdownIt-Anchor\" href=\"#match\"></a> MATCH</h2>\n<ul>\n<li>从数据库获取有关节点和属性的数据</li>\n<li>从数据库获取有关节点，关系和属性的数据</li>\n<li><strong>需要和别的语句搭配使用</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (p:Dept &#123;location:<span class=\"string\">&#x27;苏州&#x27;</span>&#125;) RETURN p.location</span><br><span class=\"line\">//这是注释 不能放上面</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'p.location': '苏州'&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (p:Dept)</span><br><span class=\"line\">WHERE p.location = <span class=\"string\">&#x27;苏州&#x27;</span></span><br><span class=\"line\">RETURN p</span><br><span class=\"line\">//等价上面的</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'p': Node('Dept', deptno=10, dname='Accounting', isperson=True, location='苏州')&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (director:Movie)--(movie)</span><br><span class=\"line\">RETURN movie</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br><span class=\"line\">//--表示关系 不考虑方向(--&gt;)和属性</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'movie': Node('Person', born=1978, name='Emil Eifrem')&#125;,\n &#123;'movie': Node('Person', born=1952, name='Joel Silver')&#125;,\n &#123;'movie': Node('Person', born=1965, name='Lana Wachowski')&#125;,\n &#123;'movie': Node('Person', born=1967, name='Lilly Wachowski')&#125;,\n &#123;'movie': Node('Person', born=1960, name='Hugo Weaving')&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (wallstreet &#123;title: <span class=\"string\">&#x27;Joe Versus the Volcano&#x27;</span>&#125;)&lt;-[:ACTED_IN|DIRECTED]-(person)</span><br><span class=\"line\">RETURN person.name</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br><span class=\"line\">//查询多个关系</span><br><span class=\"line\">//如果关系名字里面有空格 用反引号``</span><br><span class=\"line\">//[:TYPE*minHops..maxHops] 代表关系的长度</span><br><span class=\"line\">//shortestPath((martin)-[*.<span class=\"number\">.15</span>]-(oliver)) 最短路径,最大长度为<span class=\"number\">15</span></span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'person.name': 'Meg Ryan'&#125;,\n &#123;'person.name': 'Tom Hanks'&#125;,\n &#123;'person.name': 'John Patrick Stanley'&#125;,\n &#123;'person.name': 'Nathan Lane'&#125;,\n &#123;'person.name': 'Meg Ryan'&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (charlie &#123;name: <span class=\"string\">&#x27;Tom Hanks&#x27;</span>&#125;)-[:ACTED_IN]-&gt;(movie)&lt;-[:DIRECTED]-(director)</span><br><span class=\"line\">RETURN movie.title, director.name</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'movie.title': &quot;You've Got Mail&quot;, 'director.name': 'Nora Ephron'&#125;,\n &#123;'movie.title': 'Sleepless in Seattle', 'director.name': 'Nora Ephron'&#125;,\n &#123;'movie.title': 'Joe Versus the Volcano',\n  'director.name': 'John Patrick Stanley'&#125;,\n &#123;'movie.title': 'That Thing You Do', 'director.name': 'Tom Hanks'&#125;,\n &#123;'movie.title': 'Cloud Atlas', 'director.name': 'Tom Tykwer'&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># OPTIONAL MATCH </span></span><br><span class=\"line\"><span class=\"comment\"># using nulls for missing parts </span></span><br></pre></td></tr></table></figure>\n<h2 id=\"return\"><a class=\"markdownIt-Anchor\" href=\"#return\"></a> RETURN</h2>\n<ul>\n<li>检索节点的某些属性</li>\n<li>检索节点的所有属性</li>\n<li>检索节点和关联关系的某些属性</li>\n<li>检索节点和关联关系的所有属性</li>\n<li><strong>需要和别的语句搭配使用</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># return * return 所有出现过的变量</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (`This isn\\<span class=\"string\">&#x27;t a common variable`)</span></span><br><span class=\"line\"><span class=\"string\">WHERE `This isn\\&#x27;t a common variable`.name = &#x27;</span>Kiefer Sutherland<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">RETURN `This isn\\&#x27;t a common variable`.born  as othername</span></span><br><span class=\"line\"><span class=\"string\">//DISTINCT 返回不重复的值</span></span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'othername': 1966&#125;, &#123;'othername': 1966&#125;]\n</code></pre>\n<h2 id=\"creatematchreturn\"><a class=\"markdownIt-Anchor\" href=\"#creatematchreturn\"></a> CREATE+MATCH+RETURN</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">CREATE (e:Customer&#123;<span class=\"built_in\">id</span>:<span class=\"string\">&#x27;1001&#x27;</span>,name:<span class=\"string\">&#x27;Abc&#x27;</span>,dob:<span class=\"string\">&#x27;01/10/1982&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">CREATE (cc:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"string\">&#x27;5001&#x27;</span>,number:<span class=\"string\">&#x27;1234567890&#x27;</span>,cvv:<span class=\"string\">&#x27;888&#x27;</span>,expiredate:<span class=\"string\">&#x27;20/17&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 使用现有节点创建没有属性的关系</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (e:Customer),(cc:CreditCard)</span><br><span class=\"line\">create (e)-[r:DO_SHOPPING_WITH]-&gt;(cc)</span><br><span class=\"line\">RETURN r</span><br><span class=\"line\">//不加<span class=\"keyword\">return</span> 也可以</span><br><span class=\"line\">//只能创建有向关系,查询的时候可以查双向关系</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'))&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (e:Customer)-[r ]-&gt;(cc) </span><br><span class=\"line\">RETURN r</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'r': second_relation(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'))&#125;,\n &#123;'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'))&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH whole=(e)-[r ]-&gt;(cc:Movie) </span><br><span class=\"line\">RETURN whole</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'whole': Path(Node('Person', born=1978, name='Emil Eifrem'), ACTED_IN(Node('Person', born=1978, name='Emil Eifrem'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))&#125;,\n &#123;'whole': Path(Node('Person', born=1952, name='Joel Silver'), PRODUCED(Node('Person', born=1952, name='Joel Silver'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))&#125;,\n &#123;'whole': Path(Node('Person', born=1965, name='Lana Wachowski'), DIRECTED(Node('Person', born=1965, name='Lana Wachowski'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))&#125;,\n &#123;'whole': Path(Node('Person', born=1967, name='Lilly Wachowski'), DIRECTED(Node('Person', born=1967, name='Lilly Wachowski'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))&#125;,\n &#123;'whole': Path(Node('Person', born=1960, name='Hugo Weaving'), ACTED_IN(Node('Person', born=1960, name='Hugo Weaving'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 2. 使用现有节点创建有属性的关系</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (e:Customer),(cc:CreditCard)</span><br><span class=\"line\">create (e)-[r:DO_SHOPPING_WITH&#123;shopdata:<span class=\"string\">&#x27;12/12/2014&#x27;</span>,price:<span class=\"number\">5500</span>&#125;]-&gt;(cc)</span><br><span class=\"line\">RETURN r</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'), price=5500, shopdata='12/12/2014')&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 3.使用新节点创建有/无属性的关系</span></span><br><span class=\"line\"><span class=\"comment\"># 和1.2.的区别是 1.2.需要先match</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">create (fb1:FaceBookProfile)-[like:LIKES]-&gt;(fb2:FaceBookProfile)</span><br><span class=\"line\">//创建了两个新节点喝一个新关系</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">create (video1:YoutubeVideo&#123;title:<span class=\"string\">&#x27;Action Movie1&#x27;</span>,update_by:<span class=\"string\">&#x27;Abc&#x27;</span>,uploaded_data:<span class=\"string\">&#x27;10/10/2010&#x27;</span>&#125;)</span><br><span class=\"line\">-[movie:ACTION_MOVIES&#123;rating:<span class=\"number\">1</span>&#125;]-&gt;</span><br><span class=\"line\">(video2:YoutubeVideo&#123;title:<span class=\"string\">&#x27;Action Movie2&#x27;</span>,update_by:<span class=\"string\">&#x27;Xyz&#x27;</span>,uploaded_data:<span class=\"string\">&#x27;12/12/2012&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (cust)-[r:DO_SHOPPING_WITH]-&gt;(cc)</span><br><span class=\"line\"><span class=\"keyword\">return</span> cust,r,cc</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'cust': Node('Customer', dob='01/10/1982', id='1001', name='Abc'),\n  'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')),\n  'cc': Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')&#125;,\n &#123;'cust': Node('Customer', dob='01/10/1982', id='1001', name='Abc'),\n  'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')),\n  'cc': Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')&#125;,\n &#123;'cust': Node('Customer', dob='01/10/1982', id='1001', name='Abc'),\n  'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'), price=5500, shopdata='12/12/2014'),\n  'cc': Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')&#125;]\n</code></pre>\n<h2 id=\"where\"><a class=\"markdownIt-Anchor\" href=\"#where\"></a> WHERE</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WHERE &lt;condition&gt; &lt;boolean-operator&gt; &lt;condition&gt; </span><br><span class=\"line\">&lt;condition&gt;:            &lt;property-name&gt; &lt;comparison-operator&gt; &lt;value&gt;  </span><br><span class=\"line\">&lt;comparison-operator&gt;:  =/&lt;&gt;/&lt;/&gt;/&lt;=/&gt;=/=~(正则)</span><br><span class=\"line\">&lt;boolean-operator&gt;:     AND/OR/NOT/XOR</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (emp:YoutubeVideo) </span><br><span class=\"line\">WHERE emp.aaaaa = <span class=\"string\">&#x27;Xyz&#x27;</span></span><br><span class=\"line\">RETURN <span class=\"built_in\">id</span>(emp)</span><br><span class=\"line\">//没有的属性认为<span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (emp:YoutubeVideo) </span><br><span class=\"line\">WHERE emp.update_by = <span class=\"string\">&#x27;Abc&#x27;</span> OR emp.update_by = <span class=\"string\">&#x27;Xyz&#x27;</span></span><br><span class=\"line\">RETURN <span class=\"built_in\">id</span>(emp)</span><br><span class=\"line\">//查询</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'id(emp)': 231&#125;, &#123;'id(emp)': 232&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (n:Dept),(c:CreditCard)</span><br><span class=\"line\">where n.location=<span class=\"string\">&#x27;苏州&#x27;</span> <span class=\"keyword\">and</span> c.cvv=<span class=\"string\">&#x27;888&#x27;</span></span><br><span class=\"line\">create (n)-[r:no_relations&#123;prop:<span class=\"string\">&#x27;随机创建的&#x27;</span>&#125;]-&gt;(c)</span><br><span class=\"line\"><span class=\"keyword\">return</span> r</span><br><span class=\"line\"></span><br><span class=\"line\">//创建 数字也要用<span class=\"string\">&#x27;&#x27;</span>,直接<span class=\"number\">888</span>查不到,创建的时候用<span class=\"string\">&#x27;&#x27;</span>了</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'r': no_relations(Node('Dept', deptno=10, dname='Accounting', isperson=True, location='苏州'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'), prop='随机创建的')&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (n:Person)</span><br><span class=\"line\">WHERE n[<span class=\"string\">&#x27;born&#x27;</span>] &gt; <span class=\"number\">1980</span></span><br><span class=\"line\">RETURN n.name, n.born</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br><span class=\"line\">//n.name CONTAINS <span class=\"string\">&#x27;ete&#x27;</span></span><br><span class=\"line\">//n.name ENDS WITH <span class=\"string\">&#x27;ter&#x27;</span></span><br><span class=\"line\">//WHERE n.name STARTS WITH <span class=\"string\">&#x27;Pet&#x27;</span></span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'n.name': 'Jonathan Lipnicki', 'n.born': 1996&#125;,\n &#123;'n.name': 'Natalie Portman', 'n.born': 1981&#125;,\n &#123;'n.name': 'Emile Hirsch', 'n.born': 1985&#125;,\n &#123;'n.name': 'Rain', 'n.born': 1982&#125;,\n &#123;'n.name': 'Jonathan Lipnicki', 'n.born': 1996&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (n:Person)-[r]-&gt;()</span><br><span class=\"line\">WHERE n.name=<span class=\"string\">&#x27;Angela Scope&#x27;</span> AND <span class=\"built_in\">type</span>(r) =~ <span class=\"string\">&#x27;F.*&#x27;</span></span><br><span class=\"line\">RETURN <span class=\"built_in\">type</span>(r), r</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br><span class=\"line\">//A开头的关系</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'type(r)': 'FOLLOWS',\n  'r': FOLLOWS(Node('Person', name='Angela Scope'), Node('Person', name='Jessica Thompson'))&#125;,\n &#123;'type(r)': 'FOLLOWS',\n  'r': FOLLOWS(Node('Person', name='Angela Scope'), Node('Person', name='Jessica Thompson'))&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (person:Person),(f:Person)</span><br><span class=\"line\">WHERE EXISTS &#123;</span><br><span class=\"line\">  MATCH (person)-[:FOLLOWS]-&gt;(f)</span><br><span class=\"line\">  WHERE person.name = <span class=\"string\">&#x27;Paul Blythe&#x27;</span> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">RETURN f.name AS name</span><br><span class=\"line\">//嵌套查询 内层可用外层变量</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'name': 'Angela Scope'&#125;, &#123;'name': 'Angela Scope'&#125;]\n</code></pre>\n<h2 id=\"delete\"><a class=\"markdownIt-Anchor\" href=\"#delete\"></a> DELETE</h2>\n<ul>\n<li>删除节点</li>\n<li>删除关系</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (e:Film) delete  e</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (n:Customer)-[r]-(c:CreditCard) delete n,c,r</span><br><span class=\"line\">//删除节点时必要保证节点没有其他的关系相连</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (n:Movie)</span><br><span class=\"line\">DETACH DELETE n</span><br><span class=\"line\">//删除节点和相连的关系</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (n)-[r]-(c:Dept) <span class=\"keyword\">return</span> r</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<h2 id=\"removw\"><a class=\"markdownIt-Anchor\" href=\"#removw\"></a> REMOVW</h2>\n<ul>\n<li>删除节点或关系的标签</li>\n<li>删除节点或关系的属性</li>\n<li>keys(n) 查看n的所有属性</li>\n<li>labels(n) 查看n的所有标签</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">create (book:Book &#123;<span class=\"built_in\">id</span>:<span class=\"number\">122</span>,title:<span class=\"string\">&#x27;Neo4j TUtorial&#x27;</span>,pages:<span class=\"number\">333</span>,price:<span class=\"number\">250</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">return</span> book</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'book': Node('Book', id=122, pages=333, price=250, title='Neo4j TUtorial')&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (book:Book&#123;<span class=\"built_in\">id</span>:<span class=\"number\">122</span>&#125;)</span><br><span class=\"line\">remove book.noattr</span><br><span class=\"line\"><span class=\"keyword\">return</span> book</span><br><span class=\"line\">//没有这个属性也可以</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'book': Node('Book', id=122, pages=333, title='Neo4j TUtorial')&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (n:label1)</span><br><span class=\"line\">remove n:label1</span><br><span class=\"line\"><span class=\"keyword\">return</span> n</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'n': Node('label2', 'label3', 'label4', labels=True)&#125;]\n</code></pre>\n<h2 id=\"set\"><a class=\"markdownIt-Anchor\" href=\"#set\"></a> SET</h2>\n<ul>\n<li>向现有节点或关系添加新属性</li>\n<li>添加或更新属性值</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (n:Dept)</span><br><span class=\"line\"><span class=\"built_in\">set</span> n.dname=<span class=\"string\">&#x27;帅哥&#x27;</span> ,n.<span class=\"built_in\">type</span>=<span class=\"string\">&#x27;666&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> n</span><br><span class=\"line\">//有就修改 没有添加</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'n': Node('Dept', deptno=10, dname='帅哥', location='Hyderabad', type='666')&#125;,\n &#123;'n': Node('Dept', deptno=10, dname='帅哥', isperson=True, location='苏州', type='666')&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (book:Book&#123;&#125;) </span><br><span class=\"line\">SET book+=&#123;title:<span class=\"string\">&#x27;neo4j tutorial&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> book</span><br><span class=\"line\">//book=&#123;offline:<span class=\"literal\">True</span>&#125;会把原有是属性值全部删掉 book+=&#123;offline:<span class=\"literal\">True</span>&#125; 不会删除原有属性 新增一个属性</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'book': Node('Book', offline=True, title='neo4j tutorial')&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (book:Book&#123;&#125;)  SET book:Knowledge RETURN book</span><br><span class=\"line\">//新增一个标签</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'book': Node('Book', 'Knowledge', offline=True, title='neo4j tutorial')&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (book:Book&#123;&#125;) </span><br><span class=\"line\">SET book.addtitle=book.title</span><br><span class=\"line\">remove book.title</span><br><span class=\"line\"><span class=\"keyword\">return</span> book</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'book': Node('Book', 'Knowledge', addtitle='neo4j tutorial', offline=True)&#125;,\n &#123;'book': Node('Book')&#125;,\n &#123;'book': Node('Book', addtitle='neo4j start', offline=True)&#125;,\n &#123;'book': Node('Book', addtitle='neo4j end', offline=False)&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (n &#123;dname: <span class=\"string\">&#x27;帅哥&#x27;</span>&#125;)</span><br><span class=\"line\">SET (CASE WHEN n.<span class=\"built_in\">type</span> = <span class=\"number\">666</span> THEN n END).worksIn = <span class=\"string\">&#x27;Malmo&#x27;</span></span><br><span class=\"line\">RETURN n</span><br><span class=\"line\">//只有n.<span class=\"built_in\">type</span> = <span class=\"number\">666</span> 才设置</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'n': Node('Dept', deptno=10, dname='帅哥', location='Hyderabad', type='666')&#125;,\n &#123;'n': Node('Dept', deptno=10, dname='帅哥', isperson=True, location='苏州', type='666')&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#   &#x27;props&#x27; : &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#     &#x27;name&#x27; : &#x27;Andy&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">#     &#x27;position&#x27; : &#x27;Developer&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#   &#125;</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"><span class=\"comment\"># MATCH (n &#123;name: &#x27;Andy&#x27;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\"># SET n = $props</span></span><br><span class=\"line\"><span class=\"comment\"># RETURN n.name, n.position, n.age, n.hungry</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"order-by\"><a class=\"markdownIt-Anchor\" href=\"#order-by\"></a> ORDER BY</h2>\n<ul>\n<li>默认是升序排列 DESC改为降序</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (movie:Movie)</span><br><span class=\"line\"><span class=\"keyword\">return</span> movie.released,movie.title</span><br><span class=\"line\">order by movie.released DESC , movie.title</span><br><span class=\"line\">limit <span class=\"number\">15</span></span><br><span class=\"line\">//多个属性排列</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'movie.released': None, 'movie.title': 'The Matrix'&#125;,\n &#123;'movie.released': None, 'movie.title': 'The Matrix'&#125;,\n &#123;'movie.released': None, 'movie.title': 'The Matrix Reloaded'&#125;,\n &#123;'movie.released': None, 'movie.title': 'The Matrix Reloaded'&#125;,\n &#123;'movie.released': None, 'movie.title': 'The Matrix Revolutions'&#125;,\n &#123;'movie.released': None, 'movie.title': 'The Matrix Revolutions'&#125;]\n</code></pre>\n<h2 id=\"union-all\"><a class=\"markdownIt-Anchor\" href=\"#union-all\"></a> UNION [ALL]</h2>\n<ul>\n<li>将两个不同的结果合并</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">create (n:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">1</span>,name:<span class=\"string\">&#x27;ABX XYZ&#x27;</span>,number:<span class=\"string\">&#x27;1234567890&#x27;</span>,cvv:<span class=\"number\">1230</span>,valid_from:<span class=\"string\">&#x27;6/14&#x27;</span>,valid_to:<span class=\"string\">&#x27;6/24&#x27;</span>&#125;)</span><br><span class=\"line\">,(n1:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">2</span>,name:<span class=\"string\">&#x27;ABX1 XYZ1&#x27;</span>,number:<span class=\"string\">&#x27;1234567891&#x27;</span>,cvv:<span class=\"number\">1231</span>,valid_from:<span class=\"string\">&#x27;6/141&#x27;</span>,valid_to:<span class=\"string\">&#x27;6/241&#x27;</span>&#125;)</span><br><span class=\"line\">,(n2:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">3</span>,name:<span class=\"string\">&#x27;ABX2 XYZ2&#x27;</span>,number:<span class=\"string\">&#x27;1234567892&#x27;</span>,cvv:<span class=\"number\">1232</span>,valid_from:<span class=\"string\">&#x27;6/142&#x27;</span>,valid_to:<span class=\"string\">&#x27;6/242&#x27;</span>&#125;)</span><br><span class=\"line\">,(n3:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">4</span>,name:<span class=\"string\">&#x27;ABX3 XYZ3&#x27;</span>,number:<span class=\"string\">&#x27;1234567893&#x27;</span>,cvv:<span class=\"number\">1233</span>,valid_from:<span class=\"string\">&#x27;6/143&#x27;</span>,valid_to:<span class=\"string\">&#x27;6/243&#x27;</span>&#125;)</span><br><span class=\"line\">,(n4:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">5</span>,name:<span class=\"string\">&#x27;ABX XYZ&#x27;</span>,number:<span class=\"string\">&#x27;1234567890&#x27;</span>,cvv:<span class=\"number\">123</span>,valid_from:<span class=\"string\">&#x27;6/14&#x27;</span>,valid_to:<span class=\"string\">&#x27;6/24&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">create (n:DebitCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">1</span>,name:<span class=\"string\">&#x27;ABX XYZ&#x27;</span>,number:<span class=\"string\">&#x27;1234567890&#x27;</span>,cvv:<span class=\"number\">1230</span>,valid_from:<span class=\"string\">&#x27;6/14&#x27;</span>,valid_to:<span class=\"string\">&#x27;6/24&#x27;</span>&#125;)</span><br><span class=\"line\">,(n1:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">11</span>,name:<span class=\"string\">&#x27;ABX1 XYZ1&#x27;</span>,number:<span class=\"string\">&#x27;1234567891&#x27;</span>,cvv:<span class=\"number\">1231</span>,valid_from:<span class=\"string\">&#x27;6/141&#x27;</span>,valid_to:<span class=\"string\">&#x27;6/241&#x27;</span>&#125;)</span><br><span class=\"line\">,(n2:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">12</span>,name:<span class=\"string\">&#x27;ABX2 XYZ2&#x27;</span>,number:<span class=\"string\">&#x27;1234567892&#x27;</span>,cvv:<span class=\"number\">1232</span>,valid_from:<span class=\"string\">&#x27;6/142&#x27;</span>,valid_to:<span class=\"string\">&#x27;6/242&#x27;</span>&#125;)</span><br><span class=\"line\">,(n3:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">13</span>,name:<span class=\"string\">&#x27;ABX3 XYZ3&#x27;</span>,number:<span class=\"string\">&#x27;1234567893&#x27;</span>,cvv:<span class=\"number\">1233</span>,valid_from:<span class=\"string\">&#x27;6/143&#x27;</span>,valid_to:<span class=\"string\">&#x27;6/243&#x27;</span>&#125;)</span><br><span class=\"line\">,(n4:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">14</span>,name:<span class=\"string\">&#x27;ABX XYZ&#x27;</span>,number:<span class=\"string\">&#x27;1234567890&#x27;</span>,cvv:<span class=\"number\">123</span>,valid_from:<span class=\"string\">&#x27;6/14&#x27;</span>,valid_to:<span class=\"string\">&#x27;6/24&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (cc:CreditCard) <span class=\"keyword\">return</span> cc.<span class=\"built_in\">id</span> <span class=\"keyword\">as</span> <span class=\"built_in\">id</span> ,cc.number <span class=\"keyword\">as</span> number</span><br><span class=\"line\">UNION </span><br><span class=\"line\"><span class=\"keyword\">match</span> (dc:DebitCard) <span class=\"keyword\">return</span> dc.<span class=\"built_in\">id</span>  <span class=\"keyword\">as</span> <span class=\"built_in\">id</span> ,dc.number <span class=\"keyword\">as</span> number</span><br><span class=\"line\">//自动去掉重复从行 不用<span class=\"keyword\">as</span></span><br><span class=\"line\">//这里既有信用卡式和借记卡具有相同的属性名：身份证和号码，但他们有不同的节点名称前缀。</span><br><span class=\"line\">//这就是为什么UNION命令显示此错误消息。为了避免这种错误，Neo4j的CQL提供“AS”子句。</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'id': '5001', 'number': '1234567890'&#125;,\n &#123;'id': 1, 'number': '1234567890'&#125;,\n &#123;'id': 2, 'number': '1234567891'&#125;,\n &#123;'id': 3, 'number': '1234567892'&#125;,\n &#123;'id': 4, 'number': '1234567893'&#125;,\n &#123;'id': 5, 'number': '1234567890'&#125;,\n &#123;'id': 11, 'number': '1234567891'&#125;,\n &#123;'id': 12, 'number': '1234567892'&#125;,\n &#123;'id': 13, 'number': '1234567893'&#125;,\n &#123;'id': 14, 'number': '1234567890'&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (cc:CreditCard) <span class=\"keyword\">return</span> cc.<span class=\"built_in\">id</span> <span class=\"keyword\">as</span> <span class=\"built_in\">id</span> ,cc.number <span class=\"keyword\">as</span> number</span><br><span class=\"line\">UNION  ALL</span><br><span class=\"line\"><span class=\"keyword\">match</span> (dc:DebitCard) <span class=\"keyword\">return</span> dc.<span class=\"built_in\">id</span>  <span class=\"keyword\">as</span> <span class=\"built_in\">id</span> ,dc.number <span class=\"keyword\">as</span> number</span><br><span class=\"line\">//显示所有的行</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'id': '5001', 'number': '1234567890'&#125;,\n &#123;'id': 1, 'number': '1234567890'&#125;,\n &#123;'id': 2, 'number': '1234567891'&#125;,\n &#123;'id': 3, 'number': '1234567892'&#125;,\n &#123;'id': 4, 'number': '1234567893'&#125;,\n &#123;'id': 5, 'number': '1234567890'&#125;,\n &#123;'id': 11, 'number': '1234567891'&#125;,\n &#123;'id': 12, 'number': '1234567892'&#125;,\n &#123;'id': 13, 'number': '1234567893'&#125;,\n &#123;'id': 14, 'number': '1234567890'&#125;,\n &#123;'id': 1, 'number': '1234567890'&#125;]\n</code></pre>\n<h2 id=\"limit-skip\"><a class=\"markdownIt-Anchor\" href=\"#limit-skip\"></a> LIMIT &amp; SKIP</h2>\n<ul>\n<li>limit n 只取结果的前n行</li>\n<li>skip n 跳过结果的前n行</li>\n<li>可以放在一起用</li>\n<li>limit/skip 1 + toInteger(3 * rand())</li>\n</ul>\n<h2 id=\"merge\"><a class=\"markdownIt-Anchor\" href=\"#merge\"></a> MERGE</h2>\n<ul>\n<li>MERGE命令在图中搜索给定模式</li>\n<li>如果存在，则返回结果</li>\n<li>如果它不存在于图中，则它创建新的节点/关系并返回结果。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (gp:GoogleProfile&#123; Id: <span class=\"number\">201402</span>,Name:<span class=\"string\">&#x27;Nokia&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">return</span>  <span class=\"built_in\">id</span>(gp)</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MERGE (gp:GoogleProfile&#123; Id: <span class=\"number\">201402</span>,Name:<span class=\"string\">&#x27;Nokia&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">id</span>(gp)</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'id(gp)': 248&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">merge (gp:GoogleProfile&#123;Id:<span class=\"number\">201402</span>,Name:<span class=\"string\">&#x27;Nokia&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">id</span>(gp)</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'id(gp)': 248&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MERGE (keanu:Person &#123;name: <span class=\"string\">&#x27;mergecreated&#x27;</span>&#125;)</span><br><span class=\"line\">ON CREATE</span><br><span class=\"line\">  SET keanu.created = timestamp()</span><br><span class=\"line\">RETURN keanu.name, keanu.created</span><br><span class=\"line\">//如果没有就会创建 并添加一个timestamp</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'keanu.name': 'mergecreated', 'keanu.created': 1667637911668&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MERGE (person:Person&#123;name: <span class=\"string\">&#x27;mergecreatedfound&#x27;</span>&#125;)</span><br><span class=\"line\">ON MATCH</span><br><span class=\"line\">  SET person.found = true</span><br><span class=\"line\">RETURN person.name, person.found</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br><span class=\"line\">//如果找到了就添加  没找到就不添加found</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'person.name': 'mergecreatedfound', 'person.found': True&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MERGE (keanu:Person &#123;name: <span class=\"string\">&#x27;Keanu Reeves&#x27;</span>&#125;)</span><br><span class=\"line\">ON CREATE</span><br><span class=\"line\">  SET keanu.created = timestamp()</span><br><span class=\"line\">ON MATCH</span><br><span class=\"line\">  SET keanu.lastSeen = timestamp()</span><br><span class=\"line\">RETURN keanu.name, keanu.created, keanu.lastSeen</span><br><span class=\"line\">//有就是lastSeen,没有就是created</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'keanu.name': 'Keanu Reeves',\n  'keanu.created': None,\n  'keanu.lastSeen': 1667638041825&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (person:Person)</span><br><span class=\"line\">MERGE (city:City &#123;name: person.bornIn&#125;)</span><br><span class=\"line\">MERGE (person)-[r:BORN_IN]-&gt;(city)</span><br><span class=\"line\">RETURN person.name, person.bornIn, city</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CREATE CONSTRAINT ON (n:Person) ASSERT n.name IS UNIQUE;</span></span><br><span class=\"line\"><span class=\"comment\"># CREATE CONSTRAINT ON (n:Person) ASSERT n.role IS UNIQUE;</span></span><br><span class=\"line\"><span class=\"comment\"># For example, given two unique constraints on :Person(id) and :Person(ssn), </span></span><br><span class=\"line\"><span class=\"comment\"># a query such as MERGE (n:Person &#123;id: 12, ssn: 437&#125;) will fail, </span></span><br><span class=\"line\"><span class=\"comment\"># if there are two different nodes (one with id 12 and one with ssn 437) </span></span><br><span class=\"line\"><span class=\"comment\"># or if there is only one node with only one of the properties. </span></span><br><span class=\"line\"><span class=\"comment\"># In other words, there must be exactly one node that matches the pattern, or no matching nodes.</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"null值\"><a class=\"markdownIt-Anchor\" href=\"#null值\"></a> NULL值</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">create (n:Book)</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (e:Book) </span><br><span class=\"line\">RETURN e.offline,e.title,e.sal</span><br><span class=\"line\">// <span class=\"literal\">None</span> 就是NULL</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'e.offline': True, 'e.title': 'neo4j tutorial', 'e.sal': None&#125;,\n &#123;'e.offline': None, 'e.title': None, 'e.sal': None&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">match</span> (book:Book)</span><br><span class=\"line\">where book.offline <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> null</span><br><span class=\"line\"><span class=\"keyword\">return</span> book</span><br><span class=\"line\">//where book.offline <span class=\"keyword\">is</span> null</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'book': Node('Book', 'Knowledge', offline=True, title='neo4j tutorial')&#125;]\n</code></pre>\n<h2 id=\"in\"><a class=\"markdownIt-Anchor\" href=\"#in\"></a> IN</h2>\n<ul>\n<li>同 python IN</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (e:Book) </span><br><span class=\"line\">WHERE e.offline IN [true]</span><br><span class=\"line\">RETURN e</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'e': Node('Book', 'Knowledge', offline=True, title='neo4j tutorial')&#125;,\n &#123;'e': Node('Book', offline=True, title='neo4j start')&#125;]\n</code></pre>\n<h1 id=\"cql函数\"><a class=\"markdownIt-Anchor\" href=\"#cql函数\"></a> CQL函数</h1>\n<p><a href=\"https://neo4j.com/docs/cypher-manual/current/clauses/listing-functions/\">官网</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\"><span class=\"keyword\">return</span> datetime()</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'datetime()': '2022-11-04T07:36:17.068Z'&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">SHOW FUNCTIONS <span class=\"keyword\">yield</span> name,category,description</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (a)-[movie:ACTED_IN]-&gt;(b) </span><br><span class=\"line\">RETURN STARTNODE(movie),ENDNODE(movie)</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),\n  'ENDNODE(movie)': Node('Movie', released=2003, title=&quot;Something's Gotta Give&quot;)&#125;,\n &#123;'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),\n  'ENDNODE(movie)': Node('Movie', released=2000, tagline='Pain heals, Chicks dig scars... Glory lasts forever', title='The Replacements')&#125;,\n &#123;'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),\n  'ENDNODE(movie)': Node('Movie', released=1995, tagline='The hottest data on earth. In the coolest head in town', title='Johnny Mnemonic')&#125;,\n &#123;'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),\n  'ENDNODE(movie)': Node('Movie', released=1997, tagline='Evil has its winning ways', title=&quot;The Devil's Advocate&quot;)&#125;,\n &#123;'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),\n  'ENDNODE(movie)': Node('Movie', released=2003, tagline='Everything that has a beginning has an end', title='The Matrix Revolutions')&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (a)-[movie:ACTED_IN]-&gt;(b) </span><br><span class=\"line\">RETURN ID(movie),TYPE(movie)</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br><span class=\"line\">//<span class=\"built_in\">type</span> 只能看relation</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'ID(movie)': 221, 'TYPE(movie)': 'ACTED_IN'&#125;,\n &#123;'ID(movie)': 114, 'TYPE(movie)': 'ACTED_IN'&#125;,\n &#123;'ID(movie)': 132, 'TYPE(movie)': 'ACTED_IN'&#125;,\n &#123;'ID(movie)': 22, 'TYPE(movie)': 'ACTED_IN'&#125;,\n &#123;'ID(movie)': 15, 'TYPE(movie)': 'ACTED_IN'&#125;]\n</code></pre>\n<h3 id=\"创建索引\"><a class=\"markdownIt-Anchor\" href=\"#创建索引\"></a> 创建索引</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">CREATE INDEX ON :Movie (title)</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">DROP INDEX ON :Movie (title)</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<h3 id=\"创建约束\"><a class=\"markdownIt-Anchor\" href=\"#创建约束\"></a> 创建约束</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (cc:CreditCard) </span><br><span class=\"line\">RETURN cc.<span class=\"built_in\">id</span>,cc.number,cc.name,cc.expiredate,cc.cvv</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">CREATE CONSTRAINT ON (cc:CreditCard)</span><br><span class=\"line\">ASSERT cc.<span class=\"built_in\">id</span> IS UNIQUE</span><br><span class=\"line\">//如果已经存在重复的就不能创建,把重复的删除</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">create (cc:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">666</span>&#125;)</span><br><span class=\"line\">//Node(<span class=\"number\">246</span>) already exists <span class=\"keyword\">with</span> label `CreditCard` <span class=\"keyword\">and</span> <span class=\"built_in\">property</span> `<span class=\"built_in\">id</span>` = <span class=\"number\">14</span></span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">DROP CONSTRAINT ON (cc:CreditCard)</span><br><span class=\"line\">ASSERT cc.<span class=\"built_in\">id</span> IS UNIQUE</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">create (cc:CreditCard&#123;<span class=\"built_in\">id</span>:<span class=\"number\">666</span>&#125;)</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<h1 id=\"补充\"><a class=\"markdownIt-Anchor\" href=\"#补充\"></a> 补充</h1>\n<h2 id=\"with\"><a class=\"markdownIt-Anchor\" href=\"#with\"></a> WITH</h2>\n<ul>\n<li>allows query parts to be chained together</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (david &#123;name: <span class=\"string\">&#x27;Jessica Thompson&#x27;</span>&#125;)--(otherPerson)--()</span><br><span class=\"line\">WITH otherPerson, count(*) AS foaf</span><br><span class=\"line\">WHERE foaf &gt; <span class=\"number\">0</span></span><br><span class=\"line\">RETURN otherPerson.name</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'otherPerson.name': 'Angela Scope'&#125;, &#123;'otherPerson.name': 'Angela Scope'&#125;]\n</code></pre>\n<h2 id=\"unwind\"><a class=\"markdownIt-Anchor\" href=\"#unwind\"></a> UNWIND</h2>\n<ul>\n<li>expands a list into a sequence of rows.</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">UNWIND [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, null] AS x</span><br><span class=\"line\">RETURN x, <span class=\"string\">&#x27;val&#x27;</span> AS y</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'x': 1, 'y': 'val'&#125;,\n &#123;'x': 2, 'y': 'val'&#125;,\n &#123;'x': 3, 'y': 'val'&#125;,\n &#123;'x': None, 'y': 'val'&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">WITH [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>] AS coll</span><br><span class=\"line\">UNWIND coll AS x</span><br><span class=\"line\">WITH DISTINCT x</span><br><span class=\"line\">RETURN collect(x) AS setOfVals</span><br><span class=\"line\">//列表去重</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'setOfVals': [1, 2]&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">WITH</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"number\">2</span>] AS a,</span><br><span class=\"line\">  [<span class=\"number\">3</span>, <span class=\"number\">4</span>] AS b</span><br><span class=\"line\">UNWIND (a + b) AS x</span><br><span class=\"line\">RETURN x</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'x': 1&#125;, &#123;'x': 2&#125;, &#123;'x': 3&#125;, &#123;'x': 4&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">WITH [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>] AS nested</span><br><span class=\"line\">UNWIND nested AS x</span><br><span class=\"line\">UNWIND x AS y</span><br><span class=\"line\">RETURN y</span><br><span class=\"line\">//两重循环</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'y': 1&#125;, &#123;'y': 2&#125;, &#123;'y': 3&#125;, &#123;'y': 4&#125;, &#123;'y': 5&#125;]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">WITH [] AS <span class=\"built_in\">list</span></span><br><span class=\"line\">UNWIND</span><br><span class=\"line\">  CASE</span><br><span class=\"line\">    WHEN <span class=\"built_in\">list</span> = [] THEN [null]</span><br><span class=\"line\">    ELSE <span class=\"built_in\">list</span></span><br><span class=\"line\">  END AS emptylist</span><br><span class=\"line\">RETURN emptylist</span><br><span class=\"line\">//避免列表为空</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'emptylist': None&#125;]\n</code></pre>\n<h2 id=\"foreach\"><a class=\"markdownIt-Anchor\" href=\"#foreach\"></a> FOREACH</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH p=(start)-[*]-&gt;(finish)</span><br><span class=\"line\">WHERE start.name = <span class=\"string\">&#x27;Tom Hanks&#x27;</span> AND finish.title starts <span class=\"keyword\">with</span> <span class=\"string\">&#x27;C&#x27;</span></span><br><span class=\"line\">FOREACH (n IN nodes(p) | SET n.marked = true)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">MATCH (a &#123;name: <span class=\"string\">&#x27;Tom Hanks&#x27;</span> &#125;)</span><br><span class=\"line\">FOREACH (name IN [<span class=\"string\">&#x27;Mike&#x27;</span>, <span class=\"string\">&#x27;Carl&#x27;</span>, <span class=\"string\">&#x27;Bruce&#x27;</span>] |</span><br><span class=\"line\">CREATE (a)-[:FRIEND]-&gt;(:Person &#123;name: name&#125;))</span><br></pre></td></tr></table></figure>\n<pre><code>[]\n</code></pre>\n<h2 id=\"call\"><a class=\"markdownIt-Anchor\" href=\"#call\"></a> CALL</h2>\n<ul>\n<li>CALL {}</li>\n<li>CALL procedure</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%cypher</span><br><span class=\"line\">UNWIND [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>] AS x</span><br><span class=\"line\">CALL &#123;</span><br><span class=\"line\">  WITH x</span><br><span class=\"line\">  RETURN x * <span class=\"number\">10</span> AS y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">RETURN x, y</span><br></pre></td></tr></table></figure>\n<pre><code>[&#123;'x': 0, 'y': 0&#125;, &#123;'x': 1, 'y': 10&#125;, &#123;'x': 2, 'y': 20&#125;]\n</code></pre>\n<p>LOAD　CSV</p>\n<ul>\n<li>LOAD CSV FROM ‘file:///artists.csv’ AS line -正常数据</li>\n<li>USING PERIODIC COMMIT 1000 LOAD CSV FROM ‘file:///artists.csv’ AS line -大数据,1000提交一次事物</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># SHOW PROCEDURES YIELD *.</span></span><br><span class=\"line\"><span class=\"comment\"># SHOW FUNCTIONS YIELD *.</span></span><br></pre></td></tr></table></figure>\n"},{"title":"python100天16-30","toc":true,"_content":"\n```python\n# 01-15python基础\n\n# 16-20python进阶\n\n# 21-30前端概述\n\n# 31-35Linux\n\n# 36-40MySQL\n\n# 41-55Django\n\n# 56-60FaskAPI\n\n# 61-65爬虫与并发编程\n\n# 66-80numpy&pandas\n\n# 81-90机器学习&pytorch\n\n# 91-100项目\n\n```\n## Python100天学习16-20\n\n`Python语言进阶`\n\n[资料连接](https://github.com/jackfrued/Python-100-Days)\n\n\n### 重要知识点\n\n1.生成式,推导式\n\n2.嵌套列表\n\n3.heapq模块(堆排序)\n```python\n\"\"\"\n从列表中找出最大的或最小的N个元素\n堆结构(大根堆/小根堆)\n\"\"\"\nimport heapq\n\nlist1 = [34, 25, 12, 99, 87, 63, 58, 78, 88, 92]\nlist2 = [\n    {'name': 'IBM', 'shares': 100, 'price': 91.1},\n    {'name': 'AAPL', 'shares': 50, 'price': 543.22},\n    {'name': 'FB', 'shares': 200, 'price': 21.09},\n    {'name': 'HPQ', 'shares': 35, 'price': 31.75},\n    {'name': 'YHOO', 'shares': 45, 'price': 16.35},\n    {'name': 'ACME', 'shares': 75, 'price': 115.65}\n]\nprint(heapq.nlargest(3, list1))\nprint(heapq.nsmallest(3, list1))\nprint(heapq.nlargest(2, list2, key=lambda x: x['price']))\nprint(heapq.nlargest(2, list2, key=lambda x: x['shares']))\n\n```\n\n4.itertools模块\n```python\n\"\"\"\n迭代工具模块\n\"\"\"\nimport itertools\n\n# 产生ABCD的全排列\nitertools.permutations('ABCD')\n# 产生ABCDE的五选三组合\nitertools.combinations('ABCDE', 3)\n# 产生ABCD和123的笛卡尔积\nitertools.product('ABCD', '123')\n# 产生ABC的无限循环序列\nitertools.cycle(('A', 'B', 'C'))\n\n```\n\n5.collections模块\n\n- `namedtuple`：命令元组，它是一个类工厂，接受类型的名称和属性列表来创建一个类。\n- `deque`：双端队列，是列表的替代实现。Python中的列表底层是基于数组来实现的，而deque底层是双向链表，因此当你需要在头尾添加和删除元素时，deque会表现出更好的性能，渐近时间复杂度为$O(1)$。\n- `Counter`：`dict`的子类，键是元素，值是元素的计数，它的`most_common()`方法可以帮助我们获取出现频率最高的元素。\n- `OrderedDict`：`dict`的子类，它记录了键值对插入的顺序，看起来既有字典的行为，也有链表的行为。\n- `defaultdict`：类似于字典类型，但是可以通过默认的工厂函数来获得键对应的默认值，相比字典中的`setdefault()`方法，这种做法更加高效。\n\n### 数据结构和算法\n\n`选择排序`\n```python\ndef select_sort(items, comp=lambda x, y: x < y):\n    \"\"\"简单选择排序\"\"\"\n    items = items[:]\n    for i in range(len(items) - 1):\n        min_index = i\n        for j in range(i + 1, len(items)):\n            if comp(items[j], items[min_index]):\n                min_index = j\n        items[i], items[min_index] = items[min_index], items[i]\n    return items\n```\n\n`冒泡排序`\n```python\ndef bubble_sort(items, comp=lambda x, y: x > y):\n    \"\"\"冒泡排序\"\"\"\n    items = items[:]\n    for i in range(len(items) - 1):\n        swapped = False\n        for j in range(len(items) - 1 - i):\n            if comp(items[j], items[j + 1]):\n                items[j], items[j + 1] = items[j + 1], items[j]\n                swapped = True\n        if not swapped:\n            break\n    return items\n```\n\n`归并排序`\n```python\ndef merge(items1, items2, comp=lambda x, y: x < y):\n    \"\"\"合并(将两个有序的列表合并成一个有序的列表)\"\"\"\n    items = []\n    index1, index2 = 0, 0\n    while index1 < len(items1) and index2 < len(items2):\n        if comp(items1[index1], items2[index2]):\n            items.append(items1[index1])\n            index1 += 1\n        else:\n            items.append(items2[index2])\n            index2 += 1\n    items += items1[index1:]\n    items += items2[index2:]\n    return items\n\n\ndef merge_sort(items, comp=lambda x, y: x < y):\n    return _merge_sort(list(items), comp)\n\n\ndef _merge_sort(items, comp):\n    \"\"\"归并排序\"\"\"\n    if len(items) < 2:\n        return items\n    mid = len(items) // 2\n    left = _merge_sort(items[:mid], comp)\n    right = _merge_sort(items[mid:], comp)\n    return merge(left, right, comp)\n```\n\n`快速排序`\n```python\n\"\"\"\n快速排序 - 选择枢轴对元素进行划分，左边都比枢轴小右边都比枢轴大\n\"\"\"\ndef quick_sort(items, comp=lambda x, y: x <= y):\n    items = list(items)[:]\n    _quick_sort(items, 0, len(items) - 1, comp)\n    return items\n\n\ndef _quick_sort(items, start, end, comp):\n    if start < end:\n        pos = _partition(items, start, end, comp)\n        _quick_sort(items, start, pos - 1, comp)\n        _quick_sort(items, pos + 1, end, comp)\n\n\ndef _partition(items, start, end, comp):\n    pivot = items[end]\n    i = start - 1\n    for j in range(start, end):\n        if comp(items[j], pivot):\n            i += 1\n            items[i], items[j] = items[j], items[i]\n    items[i + 1], items[end] = items[end], items[i + 1]\n    return i + 1\n```\n\n`选择排序`\n```python\ndef select_sort(items, comp=lambda x, y: x < y):\n    \"\"\"简单选择排序\"\"\"\n    items = items[:]\n    for i in range(len(items) - 1):\n        min_index = i\n        for j in range(i + 1, len(items)):\n            if comp(items[j], items[min_index]):\n                min_index = j\n        items[i], items[min_index] = items[min_index], items[i]\n    return items\n\n```\n`二分查找`\n\n```python\ndef bin_search(items, key):\n    \"\"\"折半查找\"\"\"\n    start, end = 0, len(items) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if key > items[mid]:\n            start = mid + 1\n        elif key < items[mid]:\n            end = mid - 1\n        else:\n            return mid\n    return -1\n```\n\n`穷举`\n`贪心`\n`动态规划`\n`分治`\n`回溯`\n### 函数的使用方式\n`map``filter`\n```python \nitems1 = list(map(lambda x: x ** 2, filter(lambda x: x % 2, range(1, 10))))\nitems2 = [x ** 2 for x in range(1, 10) if x % 2]\n\n```\n\n`位置参数、可变参数、关键字参数、命名关键字参数`\n\n`Local >>> Embedded >>> Global >>> Built-in`\n\n`装饰器`\n\n### 面向对象相关知识\n导致引用计数+1的情况：\n\n- 对象被创建，例如`a = 23`\n- 对象被引用，例如`b = a`\n- 对象被作为参数，传入到一个函数中，例如`f(a)`\n- 对象作为一个元素，存储在容器中，例如`list1 = [a, a]`\n\n导致引用计数-1的情况：\n\n- 对象的别名被显式销毁，例如`del a`\n- 对象的别名被赋予新的对象，例如`a = 24`\n- 一个对象离开它的作用域，例如f函数执行完毕时，f函数中的局部变量（全局变量不会）\n- 对象所在的容器被销毁，或从容器中删除对象\n\n引用计数可能会导致循环引用问题，而循环引用会导致内存泄露，如下面的代码所示。为了解决这个问题，Python中引入了“标记-清除”和“分代收集”。在创建一个对象的时候，对象被放在第一代中，如果在第一代的垃圾检查中对象存活了下来，该对象就会被放到第二代中，同理在第二代的垃圾检查中对象存活下来，该对象就会被放到第三代中。\n\n```Python\n# 循环引用会导致内存泄露 - Python除了引用技术还引入了标记清理和分代回收\n# 在Python 3.6以前如果重写__del__魔术方法会导致循环引用处理失效\n# 如果不想造成循环引用可以使用弱引用\nlist1 = []\nlist2 = [] \nlist1.append(list2)\nlist2.append(list1)\n```\n以下情况会导致垃圾回收：\n\n- 调用`gc.collect()`\n- `gc`模块的计数器达到阀值\n- 程序退出\n\n\n`面向对象的设计原则`\n\n`几种设计模式`\n\n### 迭代器和生成器\n\n\n\n### 并发编程\n>Python中有GIL来防止多个线程同时执行本地字节码，这个锁对于CPython是必须的，因为CPython的内存管理并不是线程安全的，因为GIL的存在多线程并不能发挥CPU的多核特性。\n\n\n\n\n\n\n## Python100天学习21-30\n\n`Web前端概述`\n\n[资料连接](https://github.com/jackfrued/Python-100-Days)\n\n\n### 第二十一天-第三十天\n\n> HTML5 标签\n\n> CSS3语法\n\n> JavaScript语法\n\n> JQuery概述\n\n> Ajax\n\n> Vue、vue-cli：渐进式框架\n\n> Element：UI框架\n\n> Echarts：报表框架\n\n> Bulma:基于弹性盒子的CSS框架\n\n> Bootstrap:响应式布局框架\n","source":"_posts/python100天16-30.md","raw":"---\ntitle: python100天16-30\ncategories:\n  - 学习笔记\ntags:\n  - Python学习笔记\ntoc: true\n---\n\n```python\n# 01-15python基础\n\n# 16-20python进阶\n\n# 21-30前端概述\n\n# 31-35Linux\n\n# 36-40MySQL\n\n# 41-55Django\n\n# 56-60FaskAPI\n\n# 61-65爬虫与并发编程\n\n# 66-80numpy&pandas\n\n# 81-90机器学习&pytorch\n\n# 91-100项目\n\n```\n## Python100天学习16-20\n\n`Python语言进阶`\n\n[资料连接](https://github.com/jackfrued/Python-100-Days)\n\n\n### 重要知识点\n\n1.生成式,推导式\n\n2.嵌套列表\n\n3.heapq模块(堆排序)\n```python\n\"\"\"\n从列表中找出最大的或最小的N个元素\n堆结构(大根堆/小根堆)\n\"\"\"\nimport heapq\n\nlist1 = [34, 25, 12, 99, 87, 63, 58, 78, 88, 92]\nlist2 = [\n    {'name': 'IBM', 'shares': 100, 'price': 91.1},\n    {'name': 'AAPL', 'shares': 50, 'price': 543.22},\n    {'name': 'FB', 'shares': 200, 'price': 21.09},\n    {'name': 'HPQ', 'shares': 35, 'price': 31.75},\n    {'name': 'YHOO', 'shares': 45, 'price': 16.35},\n    {'name': 'ACME', 'shares': 75, 'price': 115.65}\n]\nprint(heapq.nlargest(3, list1))\nprint(heapq.nsmallest(3, list1))\nprint(heapq.nlargest(2, list2, key=lambda x: x['price']))\nprint(heapq.nlargest(2, list2, key=lambda x: x['shares']))\n\n```\n\n4.itertools模块\n```python\n\"\"\"\n迭代工具模块\n\"\"\"\nimport itertools\n\n# 产生ABCD的全排列\nitertools.permutations('ABCD')\n# 产生ABCDE的五选三组合\nitertools.combinations('ABCDE', 3)\n# 产生ABCD和123的笛卡尔积\nitertools.product('ABCD', '123')\n# 产生ABC的无限循环序列\nitertools.cycle(('A', 'B', 'C'))\n\n```\n\n5.collections模块\n\n- `namedtuple`：命令元组，它是一个类工厂，接受类型的名称和属性列表来创建一个类。\n- `deque`：双端队列，是列表的替代实现。Python中的列表底层是基于数组来实现的，而deque底层是双向链表，因此当你需要在头尾添加和删除元素时，deque会表现出更好的性能，渐近时间复杂度为$O(1)$。\n- `Counter`：`dict`的子类，键是元素，值是元素的计数，它的`most_common()`方法可以帮助我们获取出现频率最高的元素。\n- `OrderedDict`：`dict`的子类，它记录了键值对插入的顺序，看起来既有字典的行为，也有链表的行为。\n- `defaultdict`：类似于字典类型，但是可以通过默认的工厂函数来获得键对应的默认值，相比字典中的`setdefault()`方法，这种做法更加高效。\n\n### 数据结构和算法\n\n`选择排序`\n```python\ndef select_sort(items, comp=lambda x, y: x < y):\n    \"\"\"简单选择排序\"\"\"\n    items = items[:]\n    for i in range(len(items) - 1):\n        min_index = i\n        for j in range(i + 1, len(items)):\n            if comp(items[j], items[min_index]):\n                min_index = j\n        items[i], items[min_index] = items[min_index], items[i]\n    return items\n```\n\n`冒泡排序`\n```python\ndef bubble_sort(items, comp=lambda x, y: x > y):\n    \"\"\"冒泡排序\"\"\"\n    items = items[:]\n    for i in range(len(items) - 1):\n        swapped = False\n        for j in range(len(items) - 1 - i):\n            if comp(items[j], items[j + 1]):\n                items[j], items[j + 1] = items[j + 1], items[j]\n                swapped = True\n        if not swapped:\n            break\n    return items\n```\n\n`归并排序`\n```python\ndef merge(items1, items2, comp=lambda x, y: x < y):\n    \"\"\"合并(将两个有序的列表合并成一个有序的列表)\"\"\"\n    items = []\n    index1, index2 = 0, 0\n    while index1 < len(items1) and index2 < len(items2):\n        if comp(items1[index1], items2[index2]):\n            items.append(items1[index1])\n            index1 += 1\n        else:\n            items.append(items2[index2])\n            index2 += 1\n    items += items1[index1:]\n    items += items2[index2:]\n    return items\n\n\ndef merge_sort(items, comp=lambda x, y: x < y):\n    return _merge_sort(list(items), comp)\n\n\ndef _merge_sort(items, comp):\n    \"\"\"归并排序\"\"\"\n    if len(items) < 2:\n        return items\n    mid = len(items) // 2\n    left = _merge_sort(items[:mid], comp)\n    right = _merge_sort(items[mid:], comp)\n    return merge(left, right, comp)\n```\n\n`快速排序`\n```python\n\"\"\"\n快速排序 - 选择枢轴对元素进行划分，左边都比枢轴小右边都比枢轴大\n\"\"\"\ndef quick_sort(items, comp=lambda x, y: x <= y):\n    items = list(items)[:]\n    _quick_sort(items, 0, len(items) - 1, comp)\n    return items\n\n\ndef _quick_sort(items, start, end, comp):\n    if start < end:\n        pos = _partition(items, start, end, comp)\n        _quick_sort(items, start, pos - 1, comp)\n        _quick_sort(items, pos + 1, end, comp)\n\n\ndef _partition(items, start, end, comp):\n    pivot = items[end]\n    i = start - 1\n    for j in range(start, end):\n        if comp(items[j], pivot):\n            i += 1\n            items[i], items[j] = items[j], items[i]\n    items[i + 1], items[end] = items[end], items[i + 1]\n    return i + 1\n```\n\n`选择排序`\n```python\ndef select_sort(items, comp=lambda x, y: x < y):\n    \"\"\"简单选择排序\"\"\"\n    items = items[:]\n    for i in range(len(items) - 1):\n        min_index = i\n        for j in range(i + 1, len(items)):\n            if comp(items[j], items[min_index]):\n                min_index = j\n        items[i], items[min_index] = items[min_index], items[i]\n    return items\n\n```\n`二分查找`\n\n```python\ndef bin_search(items, key):\n    \"\"\"折半查找\"\"\"\n    start, end = 0, len(items) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if key > items[mid]:\n            start = mid + 1\n        elif key < items[mid]:\n            end = mid - 1\n        else:\n            return mid\n    return -1\n```\n\n`穷举`\n`贪心`\n`动态规划`\n`分治`\n`回溯`\n### 函数的使用方式\n`map``filter`\n```python \nitems1 = list(map(lambda x: x ** 2, filter(lambda x: x % 2, range(1, 10))))\nitems2 = [x ** 2 for x in range(1, 10) if x % 2]\n\n```\n\n`位置参数、可变参数、关键字参数、命名关键字参数`\n\n`Local >>> Embedded >>> Global >>> Built-in`\n\n`装饰器`\n\n### 面向对象相关知识\n导致引用计数+1的情况：\n\n- 对象被创建，例如`a = 23`\n- 对象被引用，例如`b = a`\n- 对象被作为参数，传入到一个函数中，例如`f(a)`\n- 对象作为一个元素，存储在容器中，例如`list1 = [a, a]`\n\n导致引用计数-1的情况：\n\n- 对象的别名被显式销毁，例如`del a`\n- 对象的别名被赋予新的对象，例如`a = 24`\n- 一个对象离开它的作用域，例如f函数执行完毕时，f函数中的局部变量（全局变量不会）\n- 对象所在的容器被销毁，或从容器中删除对象\n\n引用计数可能会导致循环引用问题，而循环引用会导致内存泄露，如下面的代码所示。为了解决这个问题，Python中引入了“标记-清除”和“分代收集”。在创建一个对象的时候，对象被放在第一代中，如果在第一代的垃圾检查中对象存活了下来，该对象就会被放到第二代中，同理在第二代的垃圾检查中对象存活下来，该对象就会被放到第三代中。\n\n```Python\n# 循环引用会导致内存泄露 - Python除了引用技术还引入了标记清理和分代回收\n# 在Python 3.6以前如果重写__del__魔术方法会导致循环引用处理失效\n# 如果不想造成循环引用可以使用弱引用\nlist1 = []\nlist2 = [] \nlist1.append(list2)\nlist2.append(list1)\n```\n以下情况会导致垃圾回收：\n\n- 调用`gc.collect()`\n- `gc`模块的计数器达到阀值\n- 程序退出\n\n\n`面向对象的设计原则`\n\n`几种设计模式`\n\n### 迭代器和生成器\n\n\n\n### 并发编程\n>Python中有GIL来防止多个线程同时执行本地字节码，这个锁对于CPython是必须的，因为CPython的内存管理并不是线程安全的，因为GIL的存在多线程并不能发挥CPU的多核特性。\n\n\n\n\n\n\n## Python100天学习21-30\n\n`Web前端概述`\n\n[资料连接](https://github.com/jackfrued/Python-100-Days)\n\n\n### 第二十一天-第三十天\n\n> HTML5 标签\n\n> CSS3语法\n\n> JavaScript语法\n\n> JQuery概述\n\n> Ajax\n\n> Vue、vue-cli：渐进式框架\n\n> Element：UI框架\n\n> Echarts：报表框架\n\n> Bulma:基于弹性盒子的CSS框架\n\n> Bootstrap:响应式布局框架\n","slug":"python100天16-30","published":1,"date":"2023-02-18T08:22:29.557Z","updated":"2023-02-21T10:23:48.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clee4vhaw0012c8vqf0dedd12","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 01-15python基础</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 16-20python进阶</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 21-30前端概述</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 31-35Linux</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 36-40MySQL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 41-55Django</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 56-60FaskAPI</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 61-65爬虫与并发编程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 66-80numpy&amp;pandas</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 81-90机器学习&amp;pytorch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 91-100项目</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"python100天学习16-20\"><a class=\"markdownIt-Anchor\" href=\"#python100天学习16-20\"></a> Python100天学习16-20</h2>\n<p><code>Python语言进阶</code></p>\n<p><a href=\"https://github.com/jackfrued/Python-100-Days\">资料连接</a></p>\n<h3 id=\"重要知识点\"><a class=\"markdownIt-Anchor\" href=\"#重要知识点\"></a> 重要知识点</h3>\n<p>1.生成式,推导式</p>\n<p>2.嵌套列表</p>\n<p>3.heapq模块(堆排序)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">从列表中找出最大的或最小的N个元素</span></span><br><span class=\"line\"><span class=\"string\">堆结构(大根堆/小根堆)</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"></span><br><span class=\"line\">list1 = [<span class=\"number\">34</span>, <span class=\"number\">25</span>, <span class=\"number\">12</span>, <span class=\"number\">99</span>, <span class=\"number\">87</span>, <span class=\"number\">63</span>, <span class=\"number\">58</span>, <span class=\"number\">78</span>, <span class=\"number\">88</span>, <span class=\"number\">92</span>]</span><br><span class=\"line\">list2 = [</span><br><span class=\"line\">    &#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;IBM&#x27;</span>, <span class=\"string\">&#x27;shares&#x27;</span>: <span class=\"number\">100</span>, <span class=\"string\">&#x27;price&#x27;</span>: <span class=\"number\">91.1</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;AAPL&#x27;</span>, <span class=\"string\">&#x27;shares&#x27;</span>: <span class=\"number\">50</span>, <span class=\"string\">&#x27;price&#x27;</span>: <span class=\"number\">543.22</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;FB&#x27;</span>, <span class=\"string\">&#x27;shares&#x27;</span>: <span class=\"number\">200</span>, <span class=\"string\">&#x27;price&#x27;</span>: <span class=\"number\">21.09</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;HPQ&#x27;</span>, <span class=\"string\">&#x27;shares&#x27;</span>: <span class=\"number\">35</span>, <span class=\"string\">&#x27;price&#x27;</span>: <span class=\"number\">31.75</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;YHOO&#x27;</span>, <span class=\"string\">&#x27;shares&#x27;</span>: <span class=\"number\">45</span>, <span class=\"string\">&#x27;price&#x27;</span>: <span class=\"number\">16.35</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;ACME&#x27;</span>, <span class=\"string\">&#x27;shares&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;price&#x27;</span>: <span class=\"number\">115.65</span>&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(heapq.nlargest(<span class=\"number\">3</span>, list1))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(heapq.nsmallest(<span class=\"number\">3</span>, list1))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(heapq.nlargest(<span class=\"number\">2</span>, list2, key=<span class=\"keyword\">lambda</span> x: x[<span class=\"string\">&#x27;price&#x27;</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(heapq.nlargest(<span class=\"number\">2</span>, list2, key=<span class=\"keyword\">lambda</span> x: x[<span class=\"string\">&#x27;shares&#x27;</span>]))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>4.itertools模块</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">迭代工具模块</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> itertools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 产生ABCD的全排列</span></span><br><span class=\"line\">itertools.permutations(<span class=\"string\">&#x27;ABCD&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 产生ABCDE的五选三组合</span></span><br><span class=\"line\">itertools.combinations(<span class=\"string\">&#x27;ABCDE&#x27;</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># 产生ABCD和123的笛卡尔积</span></span><br><span class=\"line\">itertools.product(<span class=\"string\">&#x27;ABCD&#x27;</span>, <span class=\"string\">&#x27;123&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 产生ABC的无限循环序列</span></span><br><span class=\"line\">itertools.cycle((<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>5.collections模块</p>\n<ul>\n<li><code>namedtuple</code>：命令元组，它是一个类工厂，接受类型的名称和属性列表来创建一个类。</li>\n<li><code>deque</code>：双端队列，是列表的替代实现。Python中的列表底层是基于数组来实现的，而deque底层是双向链表，因此当你需要在头尾添加和删除元素时，deque会表现出更好的性能，渐近时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n<li><code>Counter</code>：<code>dict</code>的子类，键是元素，值是元素的计数，它的<code>most_common()</code>方法可以帮助我们获取出现频率最高的元素。</li>\n<li><code>OrderedDict</code>：<code>dict</code>的子类，它记录了键值对插入的顺序，看起来既有字典的行为，也有链表的行为。</li>\n<li><code>defaultdict</code>：类似于字典类型，但是可以通过默认的工厂函数来获得键对应的默认值，相比字典中的<code>setdefault()</code>方法，这种做法更加高效。</li>\n</ul>\n<h3 id=\"数据结构和算法\"><a class=\"markdownIt-Anchor\" href=\"#数据结构和算法\"></a> 数据结构和算法</h3>\n<p><code>选择排序</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">select_sort</span>(<span class=\"params\">items, comp=<span class=\"keyword\">lambda</span> x, y: x &lt; y</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;简单选择排序&quot;&quot;&quot;</span></span><br><span class=\"line\">    items = items[:]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(items) - <span class=\"number\">1</span>):</span><br><span class=\"line\">        min_index = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(items)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> comp(items[j], items[min_index]):</span><br><span class=\"line\">                min_index = j</span><br><span class=\"line\">        items[i], items[min_index] = items[min_index], items[i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items</span><br></pre></td></tr></table></figure>\n<p><code>冒泡排序</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bubble_sort</span>(<span class=\"params\">items, comp=<span class=\"keyword\">lambda</span> x, y: x &gt; y</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;冒泡排序&quot;&quot;&quot;</span></span><br><span class=\"line\">    items = items[:]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(items) - <span class=\"number\">1</span>):</span><br><span class=\"line\">        swapped = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(items) - <span class=\"number\">1</span> - i):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> comp(items[j], items[j + <span class=\"number\">1</span>]):</span><br><span class=\"line\">                items[j], items[j + <span class=\"number\">1</span>] = items[j + <span class=\"number\">1</span>], items[j]</span><br><span class=\"line\">                swapped = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> swapped:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> items</span><br></pre></td></tr></table></figure>\n<p><code>归并排序</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">merge</span>(<span class=\"params\">items1, items2, comp=<span class=\"keyword\">lambda</span> x, y: x &lt; y</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;合并(将两个有序的列表合并成一个有序的列表)&quot;&quot;&quot;</span></span><br><span class=\"line\">    items = []</span><br><span class=\"line\">    index1, index2 = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> index1 &lt; <span class=\"built_in\">len</span>(items1) <span class=\"keyword\">and</span> index2 &lt; <span class=\"built_in\">len</span>(items2):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> comp(items1[index1], items2[index2]):</span><br><span class=\"line\">            items.append(items1[index1])</span><br><span class=\"line\">            index1 += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            items.append(items2[index2])</span><br><span class=\"line\">            index2 += <span class=\"number\">1</span></span><br><span class=\"line\">    items += items1[index1:]</span><br><span class=\"line\">    items += items2[index2:]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">merge_sort</span>(<span class=\"params\">items, comp=<span class=\"keyword\">lambda</span> x, y: x &lt; y</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _merge_sort(<span class=\"built_in\">list</span>(items), comp)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_merge_sort</span>(<span class=\"params\">items, comp</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;归并排序&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(items) &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items</span><br><span class=\"line\">    mid = <span class=\"built_in\">len</span>(items) // <span class=\"number\">2</span></span><br><span class=\"line\">    left = _merge_sort(items[:mid], comp)</span><br><span class=\"line\">    right = _merge_sort(items[mid:], comp)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> merge(left, right, comp)</span><br></pre></td></tr></table></figure>\n<p><code>快速排序</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">快速排序 - 选择枢轴对元素进行划分，左边都比枢轴小右边都比枢轴大</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">quick_sort</span>(<span class=\"params\">items, comp=<span class=\"keyword\">lambda</span> x, y: x &lt;= y</span>):</span><br><span class=\"line\">    items = <span class=\"built_in\">list</span>(items)[:]</span><br><span class=\"line\">    _quick_sort(items, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(items) - <span class=\"number\">1</span>, comp)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_quick_sort</span>(<span class=\"params\">items, start, end, comp</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> start &lt; end:</span><br><span class=\"line\">        pos = _partition(items, start, end, comp)</span><br><span class=\"line\">        _quick_sort(items, start, pos - <span class=\"number\">1</span>, comp)</span><br><span class=\"line\">        _quick_sort(items, pos + <span class=\"number\">1</span>, end, comp)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_partition</span>(<span class=\"params\">items, start, end, comp</span>):</span><br><span class=\"line\">    pivot = items[end]</span><br><span class=\"line\">    i = start - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(start, end):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> comp(items[j], pivot):</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">            items[i], items[j] = items[j], items[i]</span><br><span class=\"line\">    items[i + <span class=\"number\">1</span>], items[end] = items[end], items[i + <span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><code>选择排序</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">select_sort</span>(<span class=\"params\">items, comp=<span class=\"keyword\">lambda</span> x, y: x &lt; y</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;简单选择排序&quot;&quot;&quot;</span></span><br><span class=\"line\">    items = items[:]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(items) - <span class=\"number\">1</span>):</span><br><span class=\"line\">        min_index = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(items)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> comp(items[j], items[min_index]):</span><br><span class=\"line\">                min_index = j</span><br><span class=\"line\">        items[i], items[min_index] = items[min_index], items[i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>二分查找</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bin_search</span>(<span class=\"params\">items, key</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;折半查找&quot;&quot;&quot;</span></span><br><span class=\"line\">    start, end = <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(items) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> start &lt;= end:</span><br><span class=\"line\">        mid = (start + end) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key &gt; items[mid]:</span><br><span class=\"line\">            start = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> key &lt; items[mid]:</span><br><span class=\"line\">            end = mid - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><code>穷举</code><br />\n<code>贪心</code><br />\n<code>动态规划</code><br />\n<code>分治</code><br />\n<code>回溯</code></p>\n<h3 id=\"函数的使用方式\"><a class=\"markdownIt-Anchor\" href=\"#函数的使用方式\"></a> 函数的使用方式</h3>\n<p><code>map``filter</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">items1 = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x: x ** <span class=\"number\">2</span>, <span class=\"built_in\">filter</span>(<span class=\"keyword\">lambda</span> x: x % <span class=\"number\">2</span>, <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>))))</span><br><span class=\"line\">items2 = [x ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>) <span class=\"keyword\">if</span> x % <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>位置参数、可变参数、关键字参数、命名关键字参数</code></p>\n<p><code>Local &gt;&gt;&gt; Embedded &gt;&gt;&gt; Global &gt;&gt;&gt; Built-in</code></p>\n<p><code>装饰器</code></p>\n<h3 id=\"面向对象相关知识\"><a class=\"markdownIt-Anchor\" href=\"#面向对象相关知识\"></a> 面向对象相关知识</h3>\n<p>导致引用计数+1的情况：</p>\n<ul>\n<li>对象被创建，例如<code>a = 23</code></li>\n<li>对象被引用，例如<code>b = a</code></li>\n<li>对象被作为参数，传入到一个函数中，例如<code>f(a)</code></li>\n<li>对象作为一个元素，存储在容器中，例如<code>list1 = [a, a]</code></li>\n</ul>\n<p>导致引用计数-1的情况：</p>\n<ul>\n<li>对象的别名被显式销毁，例如<code>del a</code></li>\n<li>对象的别名被赋予新的对象，例如<code>a = 24</code></li>\n<li>一个对象离开它的作用域，例如f函数执行完毕时，f函数中的局部变量（全局变量不会）</li>\n<li>对象所在的容器被销毁，或从容器中删除对象</li>\n</ul>\n<p>引用计数可能会导致循环引用问题，而循环引用会导致内存泄露，如下面的代码所示。为了解决这个问题，Python中引入了“标记-清除”和“分代收集”。在创建一个对象的时候，对象被放在第一代中，如果在第一代的垃圾检查中对象存活了下来，该对象就会被放到第二代中，同理在第二代的垃圾检查中对象存活下来，该对象就会被放到第三代中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 循环引用会导致内存泄露 - Python除了引用技术还引入了标记清理和分代回收</span></span><br><span class=\"line\"><span class=\"comment\"># 在Python 3.6以前如果重写__del__魔术方法会导致循环引用处理失效</span></span><br><span class=\"line\"><span class=\"comment\"># 如果不想造成循环引用可以使用弱引用</span></span><br><span class=\"line\">list1 = []</span><br><span class=\"line\">list2 = [] </span><br><span class=\"line\">list1.append(list2)</span><br><span class=\"line\">list2.append(list1)</span><br></pre></td></tr></table></figure>\n<p>以下情况会导致垃圾回收：</p>\n<ul>\n<li>调用<code>gc.collect()</code></li>\n<li><code>gc</code>模块的计数器达到阀值</li>\n<li>程序退出</li>\n</ul>\n<p><code>面向对象的设计原则</code></p>\n<p><code>几种设计模式</code></p>\n<h3 id=\"迭代器和生成器\"><a class=\"markdownIt-Anchor\" href=\"#迭代器和生成器\"></a> 迭代器和生成器</h3>\n<h3 id=\"并发编程\"><a class=\"markdownIt-Anchor\" href=\"#并发编程\"></a> 并发编程</h3>\n<blockquote>\n<p>Python中有GIL来防止多个线程同时执行本地字节码，这个锁对于CPython是必须的，因为CPython的内存管理并不是线程安全的，因为GIL的存在多线程并不能发挥CPU的多核特性。</p>\n</blockquote>\n<h2 id=\"python100天学习21-30\"><a class=\"markdownIt-Anchor\" href=\"#python100天学习21-30\"></a> Python100天学习21-30</h2>\n<p><code>Web前端概述</code></p>\n<p><a href=\"https://github.com/jackfrued/Python-100-Days\">资料连接</a></p>\n<h3 id=\"第二十一天-第三十天\"><a class=\"markdownIt-Anchor\" href=\"#第二十一天-第三十天\"></a> 第二十一天-第三十天</h3>\n<blockquote>\n<p>HTML5 标签</p>\n</blockquote>\n<blockquote>\n<p>CSS3语法</p>\n</blockquote>\n<blockquote>\n<p>JavaScript语法</p>\n</blockquote>\n<blockquote>\n<p>JQuery概述</p>\n</blockquote>\n<blockquote>\n<p>Ajax</p>\n</blockquote>\n<blockquote>\n<p>Vue、vue-cli：渐进式框架</p>\n</blockquote>\n<blockquote>\n<p>Element：UI框架</p>\n</blockquote>\n<blockquote>\n<p>Echarts：报表框架</p>\n</blockquote>\n<blockquote>\n<p>Bulma:基于弹性盒子的CSS框架</p>\n</blockquote>\n<blockquote>\n<p>Bootstrap:响应式布局框架</p>\n</blockquote>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 01-15python基础</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 16-20python进阶</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 21-30前端概述</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 31-35Linux</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 36-40MySQL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 41-55Django</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 56-60FaskAPI</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 61-65爬虫与并发编程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 66-80numpy&amp;pandas</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 81-90机器学习&amp;pytorch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 91-100项目</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"python100天学习16-20\"><a class=\"markdownIt-Anchor\" href=\"#python100天学习16-20\"></a> Python100天学习16-20</h2>\n<p><code>Python语言进阶</code></p>\n<p><a href=\"https://github.com/jackfrued/Python-100-Days\">资料连接</a></p>\n<h3 id=\"重要知识点\"><a class=\"markdownIt-Anchor\" href=\"#重要知识点\"></a> 重要知识点</h3>\n<p>1.生成式,推导式</p>\n<p>2.嵌套列表</p>\n<p>3.heapq模块(堆排序)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">从列表中找出最大的或最小的N个元素</span></span><br><span class=\"line\"><span class=\"string\">堆结构(大根堆/小根堆)</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"></span><br><span class=\"line\">list1 = [<span class=\"number\">34</span>, <span class=\"number\">25</span>, <span class=\"number\">12</span>, <span class=\"number\">99</span>, <span class=\"number\">87</span>, <span class=\"number\">63</span>, <span class=\"number\">58</span>, <span class=\"number\">78</span>, <span class=\"number\">88</span>, <span class=\"number\">92</span>]</span><br><span class=\"line\">list2 = [</span><br><span class=\"line\">    &#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;IBM&#x27;</span>, <span class=\"string\">&#x27;shares&#x27;</span>: <span class=\"number\">100</span>, <span class=\"string\">&#x27;price&#x27;</span>: <span class=\"number\">91.1</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;AAPL&#x27;</span>, <span class=\"string\">&#x27;shares&#x27;</span>: <span class=\"number\">50</span>, <span class=\"string\">&#x27;price&#x27;</span>: <span class=\"number\">543.22</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;FB&#x27;</span>, <span class=\"string\">&#x27;shares&#x27;</span>: <span class=\"number\">200</span>, <span class=\"string\">&#x27;price&#x27;</span>: <span class=\"number\">21.09</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;HPQ&#x27;</span>, <span class=\"string\">&#x27;shares&#x27;</span>: <span class=\"number\">35</span>, <span class=\"string\">&#x27;price&#x27;</span>: <span class=\"number\">31.75</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;YHOO&#x27;</span>, <span class=\"string\">&#x27;shares&#x27;</span>: <span class=\"number\">45</span>, <span class=\"string\">&#x27;price&#x27;</span>: <span class=\"number\">16.35</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;ACME&#x27;</span>, <span class=\"string\">&#x27;shares&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;price&#x27;</span>: <span class=\"number\">115.65</span>&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(heapq.nlargest(<span class=\"number\">3</span>, list1))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(heapq.nsmallest(<span class=\"number\">3</span>, list1))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(heapq.nlargest(<span class=\"number\">2</span>, list2, key=<span class=\"keyword\">lambda</span> x: x[<span class=\"string\">&#x27;price&#x27;</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(heapq.nlargest(<span class=\"number\">2</span>, list2, key=<span class=\"keyword\">lambda</span> x: x[<span class=\"string\">&#x27;shares&#x27;</span>]))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>4.itertools模块</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">迭代工具模块</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> itertools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 产生ABCD的全排列</span></span><br><span class=\"line\">itertools.permutations(<span class=\"string\">&#x27;ABCD&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 产生ABCDE的五选三组合</span></span><br><span class=\"line\">itertools.combinations(<span class=\"string\">&#x27;ABCDE&#x27;</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># 产生ABCD和123的笛卡尔积</span></span><br><span class=\"line\">itertools.product(<span class=\"string\">&#x27;ABCD&#x27;</span>, <span class=\"string\">&#x27;123&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 产生ABC的无限循环序列</span></span><br><span class=\"line\">itertools.cycle((<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>5.collections模块</p>\n<ul>\n<li><code>namedtuple</code>：命令元组，它是一个类工厂，接受类型的名称和属性列表来创建一个类。</li>\n<li><code>deque</code>：双端队列，是列表的替代实现。Python中的列表底层是基于数组来实现的，而deque底层是双向链表，因此当你需要在头尾添加和删除元素时，deque会表现出更好的性能，渐近时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n<li><code>Counter</code>：<code>dict</code>的子类，键是元素，值是元素的计数，它的<code>most_common()</code>方法可以帮助我们获取出现频率最高的元素。</li>\n<li><code>OrderedDict</code>：<code>dict</code>的子类，它记录了键值对插入的顺序，看起来既有字典的行为，也有链表的行为。</li>\n<li><code>defaultdict</code>：类似于字典类型，但是可以通过默认的工厂函数来获得键对应的默认值，相比字典中的<code>setdefault()</code>方法，这种做法更加高效。</li>\n</ul>\n<h3 id=\"数据结构和算法\"><a class=\"markdownIt-Anchor\" href=\"#数据结构和算法\"></a> 数据结构和算法</h3>\n<p><code>选择排序</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">select_sort</span>(<span class=\"params\">items, comp=<span class=\"keyword\">lambda</span> x, y: x &lt; y</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;简单选择排序&quot;&quot;&quot;</span></span><br><span class=\"line\">    items = items[:]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(items) - <span class=\"number\">1</span>):</span><br><span class=\"line\">        min_index = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(items)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> comp(items[j], items[min_index]):</span><br><span class=\"line\">                min_index = j</span><br><span class=\"line\">        items[i], items[min_index] = items[min_index], items[i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items</span><br></pre></td></tr></table></figure>\n<p><code>冒泡排序</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bubble_sort</span>(<span class=\"params\">items, comp=<span class=\"keyword\">lambda</span> x, y: x &gt; y</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;冒泡排序&quot;&quot;&quot;</span></span><br><span class=\"line\">    items = items[:]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(items) - <span class=\"number\">1</span>):</span><br><span class=\"line\">        swapped = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(items) - <span class=\"number\">1</span> - i):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> comp(items[j], items[j + <span class=\"number\">1</span>]):</span><br><span class=\"line\">                items[j], items[j + <span class=\"number\">1</span>] = items[j + <span class=\"number\">1</span>], items[j]</span><br><span class=\"line\">                swapped = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> swapped:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> items</span><br></pre></td></tr></table></figure>\n<p><code>归并排序</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">merge</span>(<span class=\"params\">items1, items2, comp=<span class=\"keyword\">lambda</span> x, y: x &lt; y</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;合并(将两个有序的列表合并成一个有序的列表)&quot;&quot;&quot;</span></span><br><span class=\"line\">    items = []</span><br><span class=\"line\">    index1, index2 = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> index1 &lt; <span class=\"built_in\">len</span>(items1) <span class=\"keyword\">and</span> index2 &lt; <span class=\"built_in\">len</span>(items2):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> comp(items1[index1], items2[index2]):</span><br><span class=\"line\">            items.append(items1[index1])</span><br><span class=\"line\">            index1 += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            items.append(items2[index2])</span><br><span class=\"line\">            index2 += <span class=\"number\">1</span></span><br><span class=\"line\">    items += items1[index1:]</span><br><span class=\"line\">    items += items2[index2:]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">merge_sort</span>(<span class=\"params\">items, comp=<span class=\"keyword\">lambda</span> x, y: x &lt; y</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _merge_sort(<span class=\"built_in\">list</span>(items), comp)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_merge_sort</span>(<span class=\"params\">items, comp</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;归并排序&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(items) &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items</span><br><span class=\"line\">    mid = <span class=\"built_in\">len</span>(items) // <span class=\"number\">2</span></span><br><span class=\"line\">    left = _merge_sort(items[:mid], comp)</span><br><span class=\"line\">    right = _merge_sort(items[mid:], comp)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> merge(left, right, comp)</span><br></pre></td></tr></table></figure>\n<p><code>快速排序</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">快速排序 - 选择枢轴对元素进行划分，左边都比枢轴小右边都比枢轴大</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">quick_sort</span>(<span class=\"params\">items, comp=<span class=\"keyword\">lambda</span> x, y: x &lt;= y</span>):</span><br><span class=\"line\">    items = <span class=\"built_in\">list</span>(items)[:]</span><br><span class=\"line\">    _quick_sort(items, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(items) - <span class=\"number\">1</span>, comp)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_quick_sort</span>(<span class=\"params\">items, start, end, comp</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> start &lt; end:</span><br><span class=\"line\">        pos = _partition(items, start, end, comp)</span><br><span class=\"line\">        _quick_sort(items, start, pos - <span class=\"number\">1</span>, comp)</span><br><span class=\"line\">        _quick_sort(items, pos + <span class=\"number\">1</span>, end, comp)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_partition</span>(<span class=\"params\">items, start, end, comp</span>):</span><br><span class=\"line\">    pivot = items[end]</span><br><span class=\"line\">    i = start - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(start, end):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> comp(items[j], pivot):</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">            items[i], items[j] = items[j], items[i]</span><br><span class=\"line\">    items[i + <span class=\"number\">1</span>], items[end] = items[end], items[i + <span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><code>选择排序</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">select_sort</span>(<span class=\"params\">items, comp=<span class=\"keyword\">lambda</span> x, y: x &lt; y</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;简单选择排序&quot;&quot;&quot;</span></span><br><span class=\"line\">    items = items[:]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(items) - <span class=\"number\">1</span>):</span><br><span class=\"line\">        min_index = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(items)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> comp(items[j], items[min_index]):</span><br><span class=\"line\">                min_index = j</span><br><span class=\"line\">        items[i], items[min_index] = items[min_index], items[i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>二分查找</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bin_search</span>(<span class=\"params\">items, key</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;折半查找&quot;&quot;&quot;</span></span><br><span class=\"line\">    start, end = <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(items) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> start &lt;= end:</span><br><span class=\"line\">        mid = (start + end) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key &gt; items[mid]:</span><br><span class=\"line\">            start = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> key &lt; items[mid]:</span><br><span class=\"line\">            end = mid - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><code>穷举</code><br />\n<code>贪心</code><br />\n<code>动态规划</code><br />\n<code>分治</code><br />\n<code>回溯</code></p>\n<h3 id=\"函数的使用方式\"><a class=\"markdownIt-Anchor\" href=\"#函数的使用方式\"></a> 函数的使用方式</h3>\n<p><code>map``filter</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">items1 = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x: x ** <span class=\"number\">2</span>, <span class=\"built_in\">filter</span>(<span class=\"keyword\">lambda</span> x: x % <span class=\"number\">2</span>, <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>))))</span><br><span class=\"line\">items2 = [x ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>) <span class=\"keyword\">if</span> x % <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>位置参数、可变参数、关键字参数、命名关键字参数</code></p>\n<p><code>Local &gt;&gt;&gt; Embedded &gt;&gt;&gt; Global &gt;&gt;&gt; Built-in</code></p>\n<p><code>装饰器</code></p>\n<h3 id=\"面向对象相关知识\"><a class=\"markdownIt-Anchor\" href=\"#面向对象相关知识\"></a> 面向对象相关知识</h3>\n<p>导致引用计数+1的情况：</p>\n<ul>\n<li>对象被创建，例如<code>a = 23</code></li>\n<li>对象被引用，例如<code>b = a</code></li>\n<li>对象被作为参数，传入到一个函数中，例如<code>f(a)</code></li>\n<li>对象作为一个元素，存储在容器中，例如<code>list1 = [a, a]</code></li>\n</ul>\n<p>导致引用计数-1的情况：</p>\n<ul>\n<li>对象的别名被显式销毁，例如<code>del a</code></li>\n<li>对象的别名被赋予新的对象，例如<code>a = 24</code></li>\n<li>一个对象离开它的作用域，例如f函数执行完毕时，f函数中的局部变量（全局变量不会）</li>\n<li>对象所在的容器被销毁，或从容器中删除对象</li>\n</ul>\n<p>引用计数可能会导致循环引用问题，而循环引用会导致内存泄露，如下面的代码所示。为了解决这个问题，Python中引入了“标记-清除”和“分代收集”。在创建一个对象的时候，对象被放在第一代中，如果在第一代的垃圾检查中对象存活了下来，该对象就会被放到第二代中，同理在第二代的垃圾检查中对象存活下来，该对象就会被放到第三代中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 循环引用会导致内存泄露 - Python除了引用技术还引入了标记清理和分代回收</span></span><br><span class=\"line\"><span class=\"comment\"># 在Python 3.6以前如果重写__del__魔术方法会导致循环引用处理失效</span></span><br><span class=\"line\"><span class=\"comment\"># 如果不想造成循环引用可以使用弱引用</span></span><br><span class=\"line\">list1 = []</span><br><span class=\"line\">list2 = [] </span><br><span class=\"line\">list1.append(list2)</span><br><span class=\"line\">list2.append(list1)</span><br></pre></td></tr></table></figure>\n<p>以下情况会导致垃圾回收：</p>\n<ul>\n<li>调用<code>gc.collect()</code></li>\n<li><code>gc</code>模块的计数器达到阀值</li>\n<li>程序退出</li>\n</ul>\n<p><code>面向对象的设计原则</code></p>\n<p><code>几种设计模式</code></p>\n<h3 id=\"迭代器和生成器\"><a class=\"markdownIt-Anchor\" href=\"#迭代器和生成器\"></a> 迭代器和生成器</h3>\n<h3 id=\"并发编程\"><a class=\"markdownIt-Anchor\" href=\"#并发编程\"></a> 并发编程</h3>\n<blockquote>\n<p>Python中有GIL来防止多个线程同时执行本地字节码，这个锁对于CPython是必须的，因为CPython的内存管理并不是线程安全的，因为GIL的存在多线程并不能发挥CPU的多核特性。</p>\n</blockquote>\n<h2 id=\"python100天学习21-30\"><a class=\"markdownIt-Anchor\" href=\"#python100天学习21-30\"></a> Python100天学习21-30</h2>\n<p><code>Web前端概述</code></p>\n<p><a href=\"https://github.com/jackfrued/Python-100-Days\">资料连接</a></p>\n<h3 id=\"第二十一天-第三十天\"><a class=\"markdownIt-Anchor\" href=\"#第二十一天-第三十天\"></a> 第二十一天-第三十天</h3>\n<blockquote>\n<p>HTML5 标签</p>\n</blockquote>\n<blockquote>\n<p>CSS3语法</p>\n</blockquote>\n<blockquote>\n<p>JavaScript语法</p>\n</blockquote>\n<blockquote>\n<p>JQuery概述</p>\n</blockquote>\n<blockquote>\n<p>Ajax</p>\n</blockquote>\n<blockquote>\n<p>Vue、vue-cli：渐进式框架</p>\n</blockquote>\n<blockquote>\n<p>Element：UI框架</p>\n</blockquote>\n<blockquote>\n<p>Echarts：报表框架</p>\n</blockquote>\n<blockquote>\n<p>Bulma:基于弹性盒子的CSS框架</p>\n</blockquote>\n<blockquote>\n<p>Bootstrap:响应式布局框架</p>\n</blockquote>\n"},{"title":"多个域名访问同一个服务器","toc":"true# 是否启用内容索引","_content":"\n## 需求\n\n有时候服务器少，但是项目多，好几个项目部署到一个服务器上。\n或者不同的项目有不同的端口。\n但是只有一个域名，是不是只能用一个项目呢？\n\nNONONO\n🙅🙅🙅🙅🙅\n\n比如\n我有三个域名(A,B,C)(怎么把一个域名变成三个域名，在有办法)，三个项目在服务器上(a,b,c)\n\n研究一下怎么把A-a，B-b，C-c\n\n\n##  首先，把一个域名变成多个\n\n比如，我在腾讯云上申请了一个**yayan.xyz**的域名(其他云没搞过，但是同理)。\n\n1. 打开[腾讯云的控制台](https://console.dnspod.cn/dns)，域名解析，点进要解析的域名\n\n![](https://image.yayan.xyz/20221026152805.png)\n\n2. 讲解一下重要的字段\n\n![](https://image.yayan.xyz/20221026152932.png)\n```txt\n主机记录：就是我们想要的域名，比如主机记录填\"aaa\",那么就有一个新的域名aaa.yayan.xyz\n记录类型:用的不多，选A就行，有CHAME(加速?)，TXT(验证?),NS(DNS)?\n记录值:如果是A就是自己域名绑定的ip，其他的要根据你干啥填\nTTL:路由跳转的最大跳数，不重要吧?\n```\n\n3. 点击新增字段，输入自己想要的域名，确定之后，几分钟就行了\n![](https://image.yayan.xyz/20221026153242.png)\n\n## 然后，服务器配置\n1. 服务器下个nginx(之前觉得麻烦，没想到这么好用)\n这个网上很多，一个命令就行了，忘了是啥了，可以搜搜\n\n2. 修改nginx配置文件\n我的是：\n```bash\n/etc/nginx/sites-available/default\n```\n**vscode连接服务器的在前一篇**\n\n3. 修改监听端口对应的域名\n我用的http所以是80，\nhttps应该是443\n>一个例子\n```bash\nserver {\n\tlisten\t80;\n\tlisten [::]:80;\n\tserver_name unsplash.yayan.xyz;\n\tlocation / {\n\t\tproxy_pass http://服务器ip:6666;\n\t}\n}\nserver {\n\tlisten\t80;\n\tlisten [::]:80;\n\tserver_name www.yayan.xyz;\n\tlocation / {\n\t\troot /anaconda/pythoncode/ChargingMonitor;\n\t\tindex index.html index.php index.jsp;\n\t}\n}\n```\n**重启nginx服务**\n```bash\nservice nginx restart\n```\n>现在：\n访问unsplash.yayan.xyz 就会跳转到6666端口对应的服务，比如gradio或者flask搭的项目接口\n访问\nwww.yayan.xyz 就会跳转到/anaconda/pythoncode/ChargingMonitor文件夹下对应的index.html或者其他\n\n💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪","source":"_posts/一个服务器使用多个域名.md","raw":"---\ntitle: 多个域名访问同一个服务器\ncategories:\n  - 杂七杂八配置\ntags:\n  - 多个域名访问同一个服务器\ntoc: true# 是否启用内容索引\n---\n\n## 需求\n\n有时候服务器少，但是项目多，好几个项目部署到一个服务器上。\n或者不同的项目有不同的端口。\n但是只有一个域名，是不是只能用一个项目呢？\n\nNONONO\n🙅🙅🙅🙅🙅\n\n比如\n我有三个域名(A,B,C)(怎么把一个域名变成三个域名，在有办法)，三个项目在服务器上(a,b,c)\n\n研究一下怎么把A-a，B-b，C-c\n\n\n##  首先，把一个域名变成多个\n\n比如，我在腾讯云上申请了一个**yayan.xyz**的域名(其他云没搞过，但是同理)。\n\n1. 打开[腾讯云的控制台](https://console.dnspod.cn/dns)，域名解析，点进要解析的域名\n\n![](https://image.yayan.xyz/20221026152805.png)\n\n2. 讲解一下重要的字段\n\n![](https://image.yayan.xyz/20221026152932.png)\n```txt\n主机记录：就是我们想要的域名，比如主机记录填\"aaa\",那么就有一个新的域名aaa.yayan.xyz\n记录类型:用的不多，选A就行，有CHAME(加速?)，TXT(验证?),NS(DNS)?\n记录值:如果是A就是自己域名绑定的ip，其他的要根据你干啥填\nTTL:路由跳转的最大跳数，不重要吧?\n```\n\n3. 点击新增字段，输入自己想要的域名，确定之后，几分钟就行了\n![](https://image.yayan.xyz/20221026153242.png)\n\n## 然后，服务器配置\n1. 服务器下个nginx(之前觉得麻烦，没想到这么好用)\n这个网上很多，一个命令就行了，忘了是啥了，可以搜搜\n\n2. 修改nginx配置文件\n我的是：\n```bash\n/etc/nginx/sites-available/default\n```\n**vscode连接服务器的在前一篇**\n\n3. 修改监听端口对应的域名\n我用的http所以是80，\nhttps应该是443\n>一个例子\n```bash\nserver {\n\tlisten\t80;\n\tlisten [::]:80;\n\tserver_name unsplash.yayan.xyz;\n\tlocation / {\n\t\tproxy_pass http://服务器ip:6666;\n\t}\n}\nserver {\n\tlisten\t80;\n\tlisten [::]:80;\n\tserver_name www.yayan.xyz;\n\tlocation / {\n\t\troot /anaconda/pythoncode/ChargingMonitor;\n\t\tindex index.html index.php index.jsp;\n\t}\n}\n```\n**重启nginx服务**\n```bash\nservice nginx restart\n```\n>现在：\n访问unsplash.yayan.xyz 就会跳转到6666端口对应的服务，比如gradio或者flask搭的项目接口\n访问\nwww.yayan.xyz 就会跳转到/anaconda/pythoncode/ChargingMonitor文件夹下对应的index.html或者其他\n\n💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪","slug":"一个服务器使用多个域名","published":1,"date":"2022-10-26T07:22:34.389Z","updated":"2022-10-26T07:41:55.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clee4vhay0015c8vq0jg37uk3","content":"<h2 id=\"需求\"><a class=\"markdownIt-Anchor\" href=\"#需求\"></a> 需求</h2>\n<p>有时候服务器少，但是项目多，好几个项目部署到一个服务器上。<br />\n或者不同的项目有不同的端口。<br />\n但是只有一个域名，是不是只能用一个项目呢？</p>\n<p>NONONO<br />\n🙅🙅🙅🙅🙅</p>\n<p>比如<br />\n我有三个域名(A,B,C)(怎么把一个域名变成三个域名，在有办法)，三个项目在服务器上(a,b,c)</p>\n<p>研究一下怎么把A-a，B-b，C-c</p>\n<h2 id=\"首先把一个域名变成多个\"><a class=\"markdownIt-Anchor\" href=\"#首先把一个域名变成多个\"></a> 首先，把一个域名变成多个</h2>\n<p>比如，我在腾讯云上申请了一个<strong>yayan.xyz</strong>的域名(其他云没搞过，但是同理)。</p>\n<ol>\n<li>打开<a href=\"https://console.dnspod.cn/dns\">腾讯云的控制台</a>，域名解析，点进要解析的域名</li>\n</ol>\n<p><img src=\"https://image.yayan.xyz/20221026152805.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>讲解一下重要的字段</li>\n</ol>\n<p><img src=\"https://image.yayan.xyz/20221026152932.png\" alt=\"\" /></p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主机记录：就是我们想要的域名，比如主机记录填&quot;aaa&quot;,那么就有一个新的域名aaa.yayan.xyz</span><br><span class=\"line\">记录类型:用的不多，选A就行，有CHAME(加速?)，TXT(验证?),NS(DNS)?</span><br><span class=\"line\">记录值:如果是A就是自己域名绑定的ip，其他的要根据你干啥填</span><br><span class=\"line\">TTL:路由跳转的最大跳数，不重要吧?</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>点击新增字段，输入自己想要的域名，确定之后，几分钟就行了<br />\n<img src=\"https://image.yayan.xyz/20221026153242.png\" alt=\"\" /></li>\n</ol>\n<h2 id=\"然后服务器配置\"><a class=\"markdownIt-Anchor\" href=\"#然后服务器配置\"></a> 然后，服务器配置</h2>\n<ol>\n<li>\n<p>服务器下个nginx(之前觉得麻烦，没想到这么好用)<br />\n这个网上很多，一个命令就行了，忘了是啥了，可以搜搜</p>\n</li>\n<li>\n<p>修改nginx配置文件<br />\n我的是：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>\n<p><strong>vscode连接服务器的在前一篇</strong></p>\n<ol start=\"3\">\n<li>修改监听端口对应的域名<br />\n我用的http所以是80，<br />\nhttps应该是443</li>\n</ol>\n<blockquote>\n<p>一个例子</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">\tlisten\t80;</span><br><span class=\"line\">\tlisten [::]:80;</span><br><span class=\"line\">\tserver_name unsplash.yayan.xyz;</span><br><span class=\"line\">\tlocation / &#123;</span><br><span class=\"line\">\t\tproxy_pass http://服务器ip:6666;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">\tlisten\t80;</span><br><span class=\"line\">\tlisten [::]:80;</span><br><span class=\"line\">\tserver_name www.yayan.xyz;</span><br><span class=\"line\">\tlocation / &#123;</span><br><span class=\"line\">\t\troot /anaconda/pythoncode/ChargingMonitor;</span><br><span class=\"line\">\t\tindex index.html index.php index.jsp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>重启nginx服务</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx restart</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>现在：<br />\n访问unsplash.yayan.xyz 就会跳转到6666端口对应的服务，比如gradio或者flask搭的项目接口<br />\n访问<br />\nwww.yayan.xyz 就会跳转到/anaconda/pythoncode/ChargingMonitor文件夹下对应的index.html或者其他</p>\n</blockquote>\n<p>💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪</p>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h2 id=\"需求\"><a class=\"markdownIt-Anchor\" href=\"#需求\"></a> 需求</h2>\n<p>有时候服务器少，但是项目多，好几个项目部署到一个服务器上。<br />\n或者不同的项目有不同的端口。<br />\n但是只有一个域名，是不是只能用一个项目呢？</p>\n<p>NONONO<br />\n🙅🙅🙅🙅🙅</p>\n<p>比如<br />\n我有三个域名(A,B,C)(怎么把一个域名变成三个域名，在有办法)，三个项目在服务器上(a,b,c)</p>\n<p>研究一下怎么把A-a，B-b，C-c</p>\n<h2 id=\"首先把一个域名变成多个\"><a class=\"markdownIt-Anchor\" href=\"#首先把一个域名变成多个\"></a> 首先，把一个域名变成多个</h2>\n<p>比如，我在腾讯云上申请了一个<strong>yayan.xyz</strong>的域名(其他云没搞过，但是同理)。</p>\n<ol>\n<li>打开<a href=\"https://console.dnspod.cn/dns\">腾讯云的控制台</a>，域名解析，点进要解析的域名</li>\n</ol>\n<p><img src=\"https://image.yayan.xyz/20221026152805.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>讲解一下重要的字段</li>\n</ol>\n<p><img src=\"https://image.yayan.xyz/20221026152932.png\" alt=\"\" /></p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主机记录：就是我们想要的域名，比如主机记录填&quot;aaa&quot;,那么就有一个新的域名aaa.yayan.xyz</span><br><span class=\"line\">记录类型:用的不多，选A就行，有CHAME(加速?)，TXT(验证?),NS(DNS)?</span><br><span class=\"line\">记录值:如果是A就是自己域名绑定的ip，其他的要根据你干啥填</span><br><span class=\"line\">TTL:路由跳转的最大跳数，不重要吧?</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>点击新增字段，输入自己想要的域名，确定之后，几分钟就行了<br />\n<img src=\"https://image.yayan.xyz/20221026153242.png\" alt=\"\" /></li>\n</ol>\n<h2 id=\"然后服务器配置\"><a class=\"markdownIt-Anchor\" href=\"#然后服务器配置\"></a> 然后，服务器配置</h2>\n<ol>\n<li>\n<p>服务器下个nginx(之前觉得麻烦，没想到这么好用)<br />\n这个网上很多，一个命令就行了，忘了是啥了，可以搜搜</p>\n</li>\n<li>\n<p>修改nginx配置文件<br />\n我的是：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>\n<p><strong>vscode连接服务器的在前一篇</strong></p>\n<ol start=\"3\">\n<li>修改监听端口对应的域名<br />\n我用的http所以是80，<br />\nhttps应该是443</li>\n</ol>\n<blockquote>\n<p>一个例子</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">\tlisten\t80;</span><br><span class=\"line\">\tlisten [::]:80;</span><br><span class=\"line\">\tserver_name unsplash.yayan.xyz;</span><br><span class=\"line\">\tlocation / &#123;</span><br><span class=\"line\">\t\tproxy_pass http://服务器ip:6666;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">\tlisten\t80;</span><br><span class=\"line\">\tlisten [::]:80;</span><br><span class=\"line\">\tserver_name www.yayan.xyz;</span><br><span class=\"line\">\tlocation / &#123;</span><br><span class=\"line\">\t\troot /anaconda/pythoncode/ChargingMonitor;</span><br><span class=\"line\">\t\tindex index.html index.php index.jsp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>重启nginx服务</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx restart</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>现在：<br />\n访问unsplash.yayan.xyz 就会跳转到6666端口对应的服务，比如gradio或者flask搭的项目接口<br />\n访问<br />\nwww.yayan.xyz 就会跳转到/anaconda/pythoncode/ChargingMonitor文件夹下对应的index.html或者其他</p>\n</blockquote>\n<p>💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪</p>\n"},{"title":"python100天1-15","toc":true,"_content":"\n```python\n# 01-15python基础\n\n# 16-20python进阶\n\n# 21-30前端概述\n\n# 31-35Linux\n\n# 36-40MySQL\n\n# 41-55Django\n\n# 56-60FaskAPI\n\n# 61-65爬虫与并发编程\n\n# 66-80numpy&pandas\n\n# 81-90机器学习&pytorch\n\n# 91-100项目\n\n```\n\n## Python100天学习1-15\n\n[资料连接](https://github.com/jackfrued/Python-100-Days)\n\n### 第一天-初识python\n\n```python\n# 1. python历史\n# 2. python优缺点\n# 3. python安装\n# 4. print的简单使用\n# print函数可以输出多个值，多个值之间可以用 , 进行分隔，输出的内容之间默认以空格分开。\nprint('你好', '世界')\nprint('hello', 'world', sep=', ', end='!')\nprint('goodbye, world', end='!\\n')\n\n# 5.turtle画国旗和佩奇\n```\n\n### 第二天-语言元素\n\n```python\n# 1. 程序,变量和类型\n# 2. 变量命名原则\n# 3. 类型转换\n\n- chr()：将整数转换成该编码对应的字符串（一个字符）。\n- ord()：将字符串（一个字符）转换成对应的编码（整数）。\n- int(): 将字符串表示的n进制数字转换为十进制表示\n- bin(), oct(), hex(): 将十进制数字转为2/8/16进制字符串表示\n\n# 4. 运算符及其优先级\n```\n\n`# 3. 类型转换`\n\n<img src=\"https://image.yayan.xyz/20230212101043.png\" width = \"300\" height = \"300\" alt=\"类型转换\" align=\"center\" />\n\n`# 4. 运算符及其优先级`\n\n| 运算符                                                            | 描述                           |\n| ----------------------------------------------------------------- | ------------------------------ |\n| `[]` `[:]`                                                    | 下标，切片                     |\n| `**`                                                            | 指数                           |\n| `~` `+` `-`                                                 | 按位取反, 正负号               |\n| `*` `/` `%` `//`                                          | 乘，除，模，整除               |\n| `+` `-`                                                       | 加，减                         |\n| `>>` `<<`                                                     | 右移，左移                     |\n| `&`                                                             | 按位与                         |\n| `^` `\\|`                                                       | 按位异或，按位或               |\n| `<=` `<` `>` `>=`                                         | 小于等于，小于，大于，大于等于 |\n| `==` `!=`                                                     | 等于，不等于                   |\n| `is`  `is not`                                                | 身份运算符                     |\n| `in` `not in`                                                 | 成员运算符                     |\n| `not` `or` `and`                                            | 逻辑运算符                     |\n| `=` `+=` `-=` `*=` `/=` `%=` `//=` `**=` `&=` ` | =^=>>=<<=`                     |\n\n> **说明：** 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。\n\n### 第三天-分支结构\n\n--\n\n### 第四天-循环结构\n\n--\n\n### 第五天-构造程序逻辑\n\n--\n\n### 第六天-函数和模块的使用\n\n```python\n# 1.可变参数\n可变参数允许传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。\n\n# 2.关键字参数\n关键字参数允许传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。\n\n\n# 3.导入模块\n如果导入的模块除了定义函数之外还有可以执行代码，那么Python解释器在导入这个模块时就会执行这些代码\n\n# 4.变量作用域\nif __name__ == '__main__':\n    # 这里声明的变量属于全局作用域\n\ndef a():\n\n    def b():\n\n        # 这里修改全局变量需要声明global\n        # 这里修改a函数里面的变量需要声明nonlocal\n\n        # 仅仅使用不需要声明\n\n        # 如果没有全局变量但是声明了,会新建一个全局变量\n        # 如果没有nonlocal但是声明了，会报错\n\n```\n\n### 第七天-字符串和常用数据结构\n\n`字符串函数`\n\n**可以使用*复制字符串**\n\n> 因此a=[[0] * 3]*5  a里面的list都是同一个地址,修改一个就会修改全部\n> 但是[0] * 3 数字是直接存的对象  修改这个就是直接换了个对象 不糊修改对象的内容\n\n```python\nstr1 = 'hello, world!'\n# 通过内置函数len计算字符串的长度\n# len()  复杂度为O(1)  调用__len__\nprint(len(str1)) # 13\n# 获得字符串首字母大写的拷贝\nprint(str1.capitalize()) # Hello, world!\n# 获得字符串每个单词首字母大写的拷贝\nprint(str1.title()) # Hello, World!\n# 获得字符串变大写后的拷贝\nprint(str1.upper()) # HELLO, WORLD!\n# 从字符串中查找子串所在位置,rfind 最后一次出现的位置\nprint(str1.find('or')) # 8\nprint(str1.find('shit')) # -1\n# 与find类似但找不到子串时会引发异常 rindex最后一次出现的位置\n# print(str1.index('or'))\n# print(str1.index('shit'))\n# 检查字符串是否以指定的字符串开头\nprint(str1.startswith('He')) # False\nprint(str1.startswith('hel')) # True\n# 检查字符串是否以指定的字符串结尾\nprint(str1.endswith('!')) # True\n# 将字符串以指定的宽度居中并在两侧填充指定的字符\nprint(str1.center(50, '*'))\n# 将字符串以指定的宽度靠右(左:ljust)放置左侧填充指定的字符\nprint(str1.rjust(50, ' '))\nstr2 = 'abc123456'\n# 检查字符串是否由数字构成\nprint(str2.isdigit())  # False\nprint(str2.isdecimal())  # False\nprint(str2.isnumeric())  # False\n# 检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写。\nprint(str2.istitle())\n# 检测字符串是否只由空格组成。\nprint(str2.isspace())\n# 检查字符串是否以字母构成\nprint(str2.isalpha())  # False\n# 检查字符串是否以数字和字母构成\nprint(str2.isalnum())  # True\nstr3 = '  jackfrued@126.com '\nprint(str3)\n# 获得字符串修剪左右(lstrip,rstrip)两侧空格之后的拷贝\nprint(str3.strip())\n# 根据指定的分隔符将字符串进行分割。\n# 如果字符串包含指定的分隔符，则返回一个3元的元组，第一个为分隔符左边的子串，第二个为分隔符本身，第三个为分隔符右边的子串。 rpartition 最右边一个\nprint(str3.partition('@')) #('  jackfrued', '@', '126.com ')\n# 大小写字符的转换\nprint(str3.swapcase())\n```\n\n`字符串格式化`\n\n```python\n# 1.\na, b = 5, 10\nprint('%d * %d = %d' % (a, b, a * b))\n# 2.\na, b = 5, 10\nprint('{} * {} = {}'.format(a, b, a * b))\nprint('{0} * {1} = {2}'.format(a, b, a * b))\nprint('{aaa} * {bbb} = {ccc}'.format(aaa=a, bbb=b, ccc=a * b))\n# 3.\na, b = 5, 10\nprint(f'{a} * {b} = {a * b}')\n```\n\n`列表`\n\n**列表容器中并没有保存真正的对象，它保存的仅仅是对象的引用(堆中的地址)。**\n\n```python\nlist1 = [1, 3, 5, 7, 100]\n# 添加元素\nlist1.append(200)\nlist1.insert(1, 400)\n# 合并两个列表\nlist1.extend([1000, 2000])\nlist1 += [1000, 2000]\n# 根据值删除元素 删除第一个\nlist1.remove(1234)\n# 根据下标删除元素\nlist1.pop(0)\n\n# 切片返回的是拷贝，修改新数组，原数组不动\n# https://pythontutor.com/python-debugger.html#mode=edit\nfruits = [ [66666,77777777], 'apple', 'strawberry', 'waxberry']\nfruits3 = fruits[:4]\nprint(fruits3) \n# 数组里面存的是列表的地址，拷贝的也是列表的地址，修改还是到列表的地址去修改，所以会变\nfruits3[0][0]=000\nfruits3[2]='aaaaaaaaa'\nprint(fruits3)\nprint(fruits)\n# [[66666, 77777777], 'apple', 'strawberry', 'waxberry']\n# [[0, 77777777], 'apple', 'aaaaaaaaa', 'waxberry']\n# [[0, 77777777], 'apple', 'strawberry', 'waxberry']\n```\n\n`什么时候不用数组`\n\n```python\n# array 类似C的数组\n# 必须指定类型\n\n```\n\n`生成器`\n\n```python\nimport sys\n# 用列表的生成表达式语法创建列表容器\n# 用这种语法创建列表之后元素已经准备就绪所以需要耗费较多的内存空间\nf = [x ** 2 for x in range(1, 1000)]\nprint(sys.getsizeof(f))  # 查看对象占用内存的字节数\n# 请注意下面的代码创建的不是一个列表而是一个生成器对象\n# 通过生成器可以获取到数据但它不占用额外的空间存储数据\n# 每次需要数据的时候就通过内部的运算得到数据(需要花费额外的时间)\nf = (x ** 2 for x in range(1, 1000))\nprint(sys.getsizeof(f))  # 相比生成式生成器不占用存储数据的空间\nfor val in f:\n    print(val)\n\nyield：生成函数\n```\n\n`元组`\n\n> 元组在创建时间和占用的空间上面都优于列表\n\n`集合`\n\n`字典`\n\n`序列的抽象基类`\n\n`MutavleSequence:可变序列抽象基类(setitem,delitem)`\n`Sequence:不可变序列抽象基类`\n\n**+,+=,extend区别**\n\n```python\n# +=实际上是调用了extend方法\n# +=返回的本身,在原地址上修改\n# a=a+ 会返回一个新对象\n# append会把参数当成一个对象加进去\n# extend参数必须是可迭代对象,一个个加进去\na=[1,2]\nprint(id(a))\n\na.extend((777,))\na+=[666]\n# 报错\n# a+=(777)\nprint(id(a))\n\na=a+[666]\nprint(id(a))\n\na.append([666,777])\nprint(id(a))\n# 2358526812672\n# 2358526812672\n# 2358526332032\n# 2358526332032\n```\n\n`可切片对象`\n\n```python\n\nalist[len(alist):]=[9]\n# 末尾追加元素\nalist[:0]=[1,2]\n# 开头追加元素\nalist[3:3]=[1,2]\n# 索引位置追加元素\n# 结束位置大于长度会返回长度\n# 开始位置大于长度会返回空列表\n# 切片赋值长度必须相等\n```\n\n### 第八天-面向对象编程基础\n\n[python三个知识点:is和==,嵌套列表,类的私有属性](https://blog.csdn.net/jackfrued/article/details/79521404)\n\n```python\n# 1.类的私有属性可以在属性名前面加两个下划线\n# __len__不是私有成员,因为后面也有__\nclass Test:\n\n    def __init__(self, foo):\n        self.__foo = foo\n\n    def __bar(self):\n        print(self.__foo)\n        print('__bar')\n\n\ndef main():\n    test = Test('hello')\n    # AttributeError: 'Test' object has no attribute '__bar'\n    test.__bar()\n    # AttributeError: 'Test' object has no attribute '__foo'\n    print(test.__foo)\n\n\n    test = Test('hello')\n    test._Test__bar()\n    print(test._Test__foo)\n\n\nif __name__ == \"__main__\":\n    main()\n\n# 2.Python并没有从语法上严格保证私有属性或方法的私密性，它只是给私有的属性和方法换了一个名字来妨碍对它们的访问,更换名字的规则仍然可以访问到它们\n\n```\n\n### 第九天-面向对象进阶\n\n> class用于声明一个类,用type创建类\n> object是所有类的父类，所有类是type的实例\n\n`类的属性`\n\n```python\n# 1.@property装饰器\nclass Person(object):\n    def __init__(self, name, age):\n        self._name = name\n        self._age = age\n    # 访问器 - getter方法\n    @property\n    def name(self):\n        return self._name\n    # 访问器 - getter方法\n    @property\n    def age(self):\n        return self._age\n    # 修改器 - setter方法\n    @age.setter\n    def age(self, age):\n        self._age = age\n  \n# 属性名字和@property修饰的方法名字不能一样,不然会死循环\n# 把一个getter方法变成属性，只需要加上@property就可以了\n# @property本身又创建了另一个装饰器@score.setter，负责把一个setter方法变成属性赋值\n# 上面name是只读属性,age是读写属性\n\n\n# 2.__slots__魔法 ,只有slots内的属性才能被添加,对子类没有用,如果子类有,就是父类和子类的并集\nclass Person(object):\n    # 限定Person对象只能绑定_name, _age和_gender属性\n    __slots__ = ('_name', '_age', '_gender')\n    def __init__(self, name, age):\n        self._name = name\n        self._age = age\n        # 会报错\n        # self.hhhh=666\nPerson._gender = '男'\n# 这样能绑定?\nPerson.sex = '?'\nperson = Person('王大锤', 22)\n# 这样会报错,但是加上Person._sex = '?' 就变成了只读,不能修改\nperson.sex=66\n\n```\n\n`类的方法`\n\n```python\n# 1.静态方法\n\n# @staticmethod修饰,不用self,和C++类似\n\n# 2.类方法\n# @classmethod修饰,默认传递了cls参数,调用类本身,\n@classmethod\ndef now(cls):\n    print(cls)\n\n# 3.实例方法\n# self 就是实例本身\n```\n\n`继承和多态`\n\n```python\n\n# 子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，这个动作称之为方法重写（override）。通过方法重写我们可以让父类的同一个行为在子类中拥有不同的实现版本，当我们调用这个经过子类重写的方法时，不同的子类对象会表现出不同的行为，这个就是多态\n\n\n# 抽象类\nfrom abc import ABCMeta, abstractmethod\nclass Pet(object, metaclass=ABCMeta):\n    def __init__(self, nickname):\n        self._nickname = nickname\n    @abstractmethod\n    def make_voice(self):\n        pass\n\n```\n\n`定制类-魔法函数(不是继承,python自带)`\n\n```python\n# __str__打印输出变成自定义字符串\n# __repr__ 直接调用类时打印(jupyter)\ndef __str__(self):\n    return '6666'\n__repr__ = __str__\n# __iter__可用for循环迭代\n# __next__去下一个对象\nclass Fib(object):\n    def __init__(self):\n        self.a, self.b = 0, 1 # 初始化两个计数器a，b\n    def __iter__(self):\n        return self # 实例本身就是迭代对象，故返回自己\n    def __next__(self):\n        self.a, self.b = self.b, self.a + self.b # 计算下一个值\n        if self.a > 100000: # 退出循环的条件\n            raise StopIteration()\n        return self.a # 返回下一个值\n# __getitem__像列表一样取值  也可以改成字典形式 也可以用for循环\nif isinstance(n, int): # n是索引\nif isinstance(n, slice): # n是切片\n\n# 如果这个对象被for时，会首先调用__iter__方法返回一个iterator,然后再对这个iterator循环调用__next__方法，直到碰到StopIteration时则停止退出。\n\n# 如果for的对象没有__iter__方法，则无法获得一个迭代器，那么就会报错，但是，如果这个类实现了__getitem__方法，会从0开始依次读取相应的下标，直到发生IndexError为止\n\n# __iter__是优先读取的\n\n# __getattr__获取类的属性,已经定义的属性不会调用,使用没有定义的属性才会调用\n# __call__ 可以直接对实例进行调用\n# __bases__查看父类\n# __enter__ with进入\n# __exit__with退出\nclass Sample:\n    def __enter__(self):\n        print( \"enter\")\n        return self\n    def __exit__(self, exc_type,exc_val,exc_tb):\n        print ( \"exit\")\n    def do_something(self):\n        print ( \"doing something\" )\nwith Sample() as sample:\n    sample.do_something()\n# @contextlib.contextmanger \n\n# __dict__与dir()的区别：\n# dir()是一个函数，返回的是list；\n# __dict__是一个字典，键为属性名，值为属性值(类和实例不一样,可以通过修改这个增加属性)；\n# dir()用来寻找一个对象的所有属性，包括__dict__中的属性，__dict__是dir()的子集；\n```\n\n`如果要获得一个对象的所有属性和方法，可以使用dir()函数`\n\n`dir('abc')`\n\n### 第十天-图形用户界面和游戏开发\n\n--\n\n### 第十一天-文件和异常\n\n--\n\n```python\n# 1.json\nimport json\n# 字符串处理\ndata = {\n    'name' : 'ACME',\n    'shares' : 100,\n    'price' : 542.23\n}\njson_str = json.dumps(data)\ndata = json.loads(json_str)\n# 文件处理\n#  Writing JSON data\nwith open('data.json', 'w') as f:\n    json.dump(data, f)\n\n# Reading data back\nwith open('data.json', 'r') as f:\n    data = json.load(f)\n\n\n# 2.异常\n# 1.except语句不是必须的，finally语句也不是必须的，但是二者必须要有一个，否则就没有try的意义了。\n# 2.except语句可以有多个，Python会按except语句的顺序依次匹配你指定的异常，如果异常已经处理就不会再进入后面的except语句。\n# 3.except语句可以以元组形式同时指定多个异常，参见实例代码。\n# 4.except语句后面如果不指定异常类型，则默认捕获所有异常，你可以通过logging或者sys模块获取当前异常。\n# 5.如果要捕获异常后要重复抛出，请使用raise，后面不要带任何参数或信息。\n# 6.不建议捕获并抛出同一个异常，请考虑重构你的代码。\n# 7.不建议在不清楚逻辑的情况下捕获所有异常，有可能你隐藏了很严重的问题。\n# 8.尽量使用内置的异常处理语句来替换try/except语句，比如with语句，getattr()方法。\n```\n\n### 第十二天-字符串和正则表达式\n\n[正则表达式练习](https://regexlearn.com/zh-cn/learn/regex101)\n[正则表达式规则](https://www.runoob.com/regexp/regexp-syntax.html)\n\n```python\n# re模块处理\n\n# pattern:r'自己写的表达式'\n\n# str:待匹配字符串\n\n```\n\n| 函数                                         | 说明                                                                         |\n| -------------------------------------------- | ---------------------------------------------------------------------------- |\n| compile(pattern, flags=0)                    | 编译正则表达式返回正则表达式对象                                             |\n| match(pattern, string, flags=0)              | 用正则表达式匹配字符串 成功返回匹配对象 否则返回None                         |\n| search(pattern, string, flags=0)             | 搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None         |\n| split(pattern, string, maxsplit=0, flags=0)  | 用正则表达式指定的模式分隔符拆分字符串 返回列表                              |\n| sub(pattern, repl, string, count=0, flags=0) | 用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数 |\n| fullmatch(pattern, string, flags=0)          | match函数的完全匹配（从字符串开头到结尾）版本                                |\n| findall(pattern, string, flags=0)            | 查找字符串所有与正则表达式匹配的模式 返回字符串的列表                        |\n| finditer(pattern, string, flags=0)           | 查找字符串所有与正则表达式匹配的模式 返回一个迭代器                          |\n| purge()                                      | 清除隐式编译的正则表达式的缓存                                               |\n| re.I / re.IGNORECASE                         | 忽略大小写匹配标记                                                           |\n| re.M / re.MULTILINE                          | 多行匹配标记                                                                 |\n\n### 第十三天-进程和线程\n\n> 进程线程知识参考操作系统\n\n`多进程`\n\n```python\n# Unix和Linux操作系统上提供了 `fork()`系统调用来创建进程，调用 `fork()`函数的是父进程，创建出的是子进程\n# Windows没有fork调用\nfrom multiprocessing import Process\nfrom os import getpid\nfrom random import randint\nfrom time import time, sleep\ndef download_task(filename):\n    print('启动下载进程，进程号[%d].' % getpid())\n    print('开始下载%s...' % filename)\n    time_to_download = randint(5, 10)\n    sleep(time_to_download)\n    print('%s下载完成! 耗费了%d秒' % (filename, time_to_download))\ndef main():\n    start = time()\n    p1 = Process(target=download_task, args=('Python从入门到住院.pdf', ))\n    p1.start()\n    p2 = Process(target=download_task, args=('Peking Hot.avi', ))\n    p2.start()\n    p1.join()\n    p2.join()\n    end = time()\n    print('总共耗费了%.2f秒.' % (end - start))\nif __name__ == '__main__':\n    main()\n\n# 进程池\ndef main():\n    start = time()\n    p = Pool(4)\n    # 这里进程池有四个进程但是用了五个任务\n    # task 0，1，2，3是立刻执行的，而task 4要等待前面某个task完成后才执行\n    for i in range(5):\n        p.apply_async(download_task, args=(i,))\n    p.close()\n    p.join()\n    print('总共耗费了%.2f秒.' % (end - start))\n\n# 进程通信\nfrom multiprocessing import Process, Queue\nimport os, time, random\n# 写数据进程执行的代码:\ndef write(q):\n    print('Process to write: %s' % os.getpid())\n    for value in ['A', 'B', 'C']:\n        print('Put %s to queue...' % value)\n        q.put(value)\n        time.sleep(random.random())\n# 读数据进程执行的代码:\ndef read(q):\n    print('Process to read: %s' % os.getpid())\n    while True:\n        value = q.get(True)\n        print('Get %s from queue.' % value)\nif __name__=='__main__':\n    # 父进程创建Queue，并传给各个子进程：\n    q = Queue()\n    pw = Process(target=write, args=(q,))\n    pr = Process(target=read, args=(q,))\n    # 启动子进程pw，写入:\n    pw.start()\n    # 启动子进程pr，读取:\n    pr.start()\n    # 等待pw结束:\n    pw.join()\n    # pr进程里是死循环，无法等待其结束，只能强行终止:\n    pr.terminate()\n'''\nProcess to write: 50563\nPut A to queue...\nProcess to read: 50564\nGet A from queue.\nPut B to queue...\nGet B from queue.\nPut C to queue...\nGet C from queue.\n'''\n```\n\n`多线程`\n\n```python\nfrom random import randint\n# 在Python早期的版本中就引入了thread模块（现在名为_thread）来实现多线程编程，然而该模块过于底层，而且很多功能都没有提供\n# 因此目前的多线程开发我们推荐使用threading模块，该模块对多线程编程提供了更好的面向对象的封装。\nfrom threading import Thread\nfrom time import time, sleep\ndef download(filename):\n    print('开始下载%s...' % filename)\n    time_to_download = randint(5, 10)\n    sleep(time_to_download)\n    print('%s下载完成! 耗费了%d秒' % (filename, time_to_download))\ndef main():\n    start = time()\n    t1 = Thread(target=download, args=('Python从入门到住院.pdf',))\n    t1.start()\n    t2 = Thread(target=download, args=('Peking Hot.avi',))\n    t2.start()\n    t1.join()\n    t2.join()\n    end = time()\n    print('总共耗费了%.3f秒' % (end - start))\nif __name__ == '__main__':\n    main()\n\n# 继承 `Thread`类的方式来创建自定义的线程类\nfrom random import randint\nfrom threading import Thread\nfrom time import time, sleep\nclass DownloadTask(Thread):\n    def __init__(self, filename):\n        # 可以穿name给线程命名\n        super().__init__()\n        self._filename = filename\n    def run(self):\n        print('开始下载%s...' % self._filename)\n        time_to_download = randint(5, 10)\n        sleep(time_to_download)\n        print('%s下载完成! 耗费了%d秒' % (self._filename, time_to_download))\ndef main():\n    start = time()\n    t1 = DownloadTask('Python从入门到住院.pdf')\n    t1.start()\n    t2 = DownloadTask('Peking Hot.avi')\n    t2.start()\n    t1.join()\n    t2.join()\n    end = time()\n    print('总共耗费了%.2f秒.' % (end - start))\nif __name__ == '__main__':\n    main()\n\n# 线程上锁\nfrom time import sleep\nfrom threading import Thread, Lock\n# RLock 可重用锁,同一线程中可以多次调用acquire,但是release要调用一样的次数\nclass Account(object):\n    def __init__(self):\n        self._balance = 0\n        self._lock = Lock()\n    def deposit(self, money):\n        # 先获取锁才能执行后续的代码\n        self._lock.acquire()\n        try:\n            new_balance = self._balance + money\n            sleep(0.01)\n            self._balance = new_balance\n        finally:\n            # 在finally中执行释放锁的操作保证正常异常锁都能释放\n            self._lock.release()\n    @property\n    def balance(self):\n        return self._balance\nclass AddMoneyThread(Thread):\n    def __init__(self, account, money):\n        super().__init__()\n        self._account = account\n        self._money = money\n\n    def run(self):\n        self._account.deposit(self._money)\ndef main():\n    account = Account()\n    threads = []\n    for _ in range(100):\n        t = AddMoneyThread(account, 1)\n        threads.append(t)\n        t.start()\n    for t in threads:\n        t.join()\n    print('账户余额为: ￥%d元' % account.balance)\nif __name__ == '__main__':\n    main()\n\n# 线程通信\nfrom queue import Queue\n\n# queue.Queue：这是一个线程安全的队列，可以被用来在线程之间传递数据。\n\n# queue.LifoQueue：这是一个线程安全的栈，可以被用来在线程之间传递数据。\n\n# queue.PriorityQueue：这是一个线程安全的优先队列，可以被用来在线程之间传递数据。\n\n# collections.deque：这是一个线程安全的双端队列，可以被用来在线程之间传递数据。\n\n# multiprocessing.Queue：这是一个线程安全的队列，可以被用来在进程之间传递数据。\n\n```\n\n### 第十四天-网络编程入门和网络应用开发\n\n> 计算机网络基础知识补充\n\n`发邮件`\n\n`发短信`\n\n`网络服务`\n\n```python\n# 多线程网络服务\n\n# 服务器端\n\nfrom socket import socket, SOCK_STREAM, AF_INET\nfrom base64 import b64encode\nfrom json import dumps\nfrom threading import Thread\ndef main():\n    # 自定义线程类\n    class FileTransferHandler(Thread):\n        def __init__(self, cclient):\n            super().__init__()\n            self.cclient = cclient\n        def run(self):\n            my_dict = {}\n            my_dict['filename'] = 'guido.jpg'\n            # JSON是纯文本不能携带二进制数据\n            # 所以图片的二进制数据要处理成base64编码\n            my_dict['filedata'] = data\n            # 通过dumps函数将字典处理成JSON字符串\n            json_str = dumps(my_dict)\n            # 发送JSON字符串\n            self.cclient.send(json_str.encode('utf-8'))\n            self.cclient.close()\n\n    # 1.创建套接字对象并指定使用哪种传输服务\n    server = socket()\n    # 2.绑定IP地址和端口(区分不同的服务)\n    server.bind(('192.168.1.2', 5566))\n    # 3.开启监听 - 监听客户端连接到服务器\n    server.listen(512)\n    print('服务器启动开始监听...')\n    with open('guido.jpg', 'rb') as f:\n        # 将二进制数据处理成base64再解码成字符串\n        data = b64encode(f.read()).decode('utf-8')\n    while True:\n        client, addr = server.accept()\n        # 启动一个线程来处理客户端的请求\n        FileTransferHandler(client).start()\nif __name__ == '__main__':\n    main()\n\n# 客户端\n\nfrom socket import socket\nfrom json import loads\nfrom base64 import b64decode\ndef main():\n    client = socket()\n    client.connect(('192.168.1.2', 5566))\n    # 定义一个保存二进制数据的对象\n    in_data = bytes()\n    # 由于不知道服务器发送的数据有多大每次接收1024字节\n    data = client.recv(1024)\n    while data:\n        # 将收到的数据拼接起来\n        in_data += data\n        data = client.recv(1024)\n    # 将收到的二进制数据解码成JSON字符串并转换成字典\n    # loads函数的作用就是将JSON字符串转成字典对象\n    my_dict = loads(in_data.decode('utf-8'))\n    filename = my_dict['filename']\n    filedata = my_dict['filedata'].encode('utf-8')\n    with open('/Users/Hao/' + filename, 'wb') as f:\n        # 将base64格式的数据解码成二进制数据并写入文件\n        f.write(b64decode(filedata))\n    print('图片已保存.')\nif __name__ == '__main__':\n    main()\n```\n\n### 第十五天-图像和办公文档处理\n\n`图像`\n\n```python\n>>> from PIL import Image\n>>>\n>>> image = Image.open('./res/guido.jpg')\n>>> image.format, image.size, image.mode\n('JPEG', (500, 750), 'RGB')\n>>> image.show()\n\n# 裁剪图像\n>>> image = Image.open('./res/guido.jpg')\n>>> rect = 80, 20, 310, 360\n>>> image.crop(rect).show()\n# 略缩图\n>>> image = Image.open('./res/guido.jpg')\n>>> size = 128, 128\n>>> image.thumbnail(size)\n>>> image.show()\n# 缩放粘贴图像\n>>> image1 = Image.open('./res/luohao.png')\n>>> image2 = Image.open('./res/guido.jpg')\n>>> rect = 80, 20, 310, 360\n>>> guido_head = image2.crop(rect)\n>>> width, height = guido_head.size\n>>> image1.paste(guido_head.resize((int(width / 1.5), int(height / 1.5))), (172, 40))\n# 旋转和反转\n>>> image = Image.open('./res/guido.png')\n>>> image.rotate(180).show()\n>>> image.transpose(Image.FLIP_LEFT_RIGHT).show()\n# 操作像素\n>>> image = Image.open('./res/guido.jpg')\n>>> for x in range(80, 310):\n...     for y in range(20, 360):\n...         image.putpixel((x, y), (128, 128, 128))\n... \n>>> image.show()\n# 滤镜\n>>> from PIL import Image, ImageFilter\n>>>\n>>> image = Image.open('./res/guido.jpg')\n>>> image.filter(ImageFilter.CONTOUR).show()\n\n```\n\n`Excel`\n\n`Word`\n\n### B站视频总结\n\n`元类编程`\n**元类:创建类的类**\n\n#### 1.动态属性\n\n```python\n#get\n@property修饰\n#set\n@aaa.setter\n#查找不到进入\n__getattr__\n#先进入这个\n__getattribute__\n\ngetattr(类,属性)==类.属性\n```\n\n#### 2.属性描述符\n\n```python\n# 数据描述符\nclass IntField:\n    def __get__( self, instance，owner):\n        return self.value\n    def __set__(self, instance, value):\n        if not isinstance(value, numbers.Integral):\n            raise ValueError( \"int value need\")\n        if value < 0:\n            raise ValueError( \"positive value need\")\n        self.value = value\n    def __delete__(self, instance):\n        pass\n\nclass User:\n    # 自定义类型检测\n    age = IntField()\n\n```\n\n#### 3.类属性取值过程\n\n> 如果user是某个类的实例，那么user.age（以及等价的getattr(user, 'age'))首先调用__getattribute__。如果类定义了_getattr_方法，\n> 那么在_getattribute__抛出 AttributeError的时候就会调用到_getattr_,而对于描述符(__get__)的调用，则是发生在__getattribute__内部的。\n\nuser = User()，那么user.age顺序如下:\n\n(1) 如果\"age”是出现在user或其基类的__dict__中，且age是data descriptor，那么调用其__get__方法 ,否则\n\n(2) 如果\"age\"出现在obj的__dict__中，那么直接返回 obj.__dict__[ 'age']，否则\n\n(3) 如果\"age\"出现在User或其基类的__dict__中\n\n(3.1) 如果age是non-data descriptor，那么调用其__get__方法，否则\n(3.2) 返回__dict__[ 'age']\n\n(4) 如果User有__getattr__方法，调用__getattr__方法，否则\n\n(5) 抛出AttributeError\n\n#### 4.__new__和__init__区别\n\nnew传的类本身\n\ninit传的对象实例\n\n先进new后进init\n\nnew不返回对象,不会进init\n\n#### 5.type动态创建类\n\ntype(\"类名\",(父类),{属性,函数})\n\n**控制类的创建过程**\nclass user(metaclass=自定义元类)\n\n**元类编程->封装**\n\n#### 6.可迭代,迭代器,生成器\n\n迭代器和迭代序列分离\n\n__iter__ 可迭代\n\n__next__ 迭代器\n\n```python\nclass company(object):\n    def _init_(self, employee_list):\n        self.employee = employee_list\n    def _iter_( self):\n        return MyIterator( self.employee)\n\nclass MyIterator(Iterator ) :\n    def _init_(self, employee_list):\n        self.iter_list = employee_listself.index = 0\n    def  inext_(self):\n        #真正返回迭代值的逻辑\n        try:\n            word = self.iter_list[ self.index]\n        except IndexError:\n            raise stopIteration\n        self.index +=1\n        return word\n```\n\n`生成器`\n\n```python\ndef gen_fib(index):\n    n,a,b = 0,0,1\n    while n<index:\n        yie1d b\n        a,b = b,a+b\n        n += 1\nfor data in gen_fib(10):\n    print (data)\nI\nPyGenObject\ngi_frame\ngi_code\n会保存上一次执行的位置和代码\n\n```\n\n`大文件读取`\n\n```python\ndef myreadlines(f, newline) :buf = \"\"\nwhile True:\n    while newline in buf:\n        pos = buf.index( newline)\n        yield buf[:pos]\n        buf = buf[pos + len(newline) : ]\n    chunk = f.read(4096*10)\n    if not chunk :\n        # 文件结尾\n        yield buf\n        break\n    buf += chunk\n\nwith open(\"input.txt\" ) as f:\n    for line in myreadlines(f，\"{\"):\n        print (line)\n```\n\n#### 7.socket编程\n\n见网络编程\n\n#### 8.多线程\n\n1.GIL\n全局解释器锁\npython中一个线程对应c语言的一个线程\ngil使得同一时刻只有一个线程运行在一个cpu上运行字节码\n不能把多个线程映射到多个cpu上\ngil会根据执行的字节码行数及时间片释放gil\n遇见io操作也会主动释放(适合io频繁)\n\n2.线程同步,通信\n**多线程实现**\n使用线程传递函数\n继承多线程类,实现run\n**线程通信**\n共享变量:不好\nQueue:还有其他线程安全的数据结构\n**线程同步**\nLock,RLock\n**Lock**:获取两次就会死锁\n**RLock**:允许多线程环境下多次acquire,但是release要一样的数量\n**condition**:wait()和notify() 等待和唤醒\n先等待才能唤醒\n把waiter的锁放入一个双端队列\nnotify把队列弹一个出来释放\nwith condition 就是获取锁释放锁(默认RLock)\nwith之后才能wait和notify,wait把condition的锁释放掉\ncon't wait on a un-acquire lock\n**Semaphore**:用于控制进入数量的锁\nthreading.Semaphore(3)\n\n3.线程池&进程池\nfrom concurrent import futures\n\n```python\nexecutor = ThreadPoo1Executor(max_workers=1)\n#通过submit函数提交执行的函数到线程池中,submit是立即返回\ntask1 = executor. submit(get_htm1,(3))\ntask2 = executor. submit(get_htm1,(2))\n\n# done用于判断是否完成\ntask1.done()\n\n\n# result获取函数返回结果\ntask1.result()\n\n\n#要获取已经成功的task的返回\nurls = [3,2,4]\nall_task = [executor. submit(get_html,(url)) for url in urls]\n# yield已经完成的线程\nfor future in as_completed(all_task):\n    data = future.result()\n    print( \"get ipage success\".format(data))\n\n\n#通过executor获取已经完成的task返回值,返回顺序一致\nfor data in executor.map(get_html, urls):\n    print( \"get {fpage\".format(data))\n\n# 阻塞主线程,等全部还是等一个\nwait()\n```\n\n---\n\n进程适合计算密集\n线程适合io密集\n\n父进程和子进程各有数据\n\n子进程会把创建进程下面的代码单独运行一遍\n\nProcessPoolExecutor用的multiprocessing\n\n不能用queue.Queue\n不能用共享变量\n\nfrom queue import Queue\nfrom multiprocessing import Queue\nfrom multiprocessing.Manager import Queue\n#Manager 有很多数据结构\npipe只能用于两个进程\n性能高于Queue\n\n#### 9.IO复用\n\n并发\n并发是指一个时间段内有几个程序在同一个cpu运行，但是任意时刻只有一个程序在cpu上运行\n并行\n并行是指任意时刻点上，有多个程序同时运行在多个cpu\n\n同步\n同步是指代码调用IO操作时必须等待IO操作完成才返\n回的调用方式。\n异步\n异步是指代码调用IO操作时，不必等IO操作完成就返回的调用方式。\n\n阻塞\n阻塞是指调用函数时候当前线程被挂起。\n非阻塞\n非阻塞是指调用函数时候当前线程不会被挂起，而是立即返回。\n\n#### 10.回调协程\n\n\n#### 11.asynch await\n\n\n#### 12.事件循环\n","source":"_posts/python100天1-15.md","raw":"---\ntitle: python100天1-15\ncategories:\n  - 学习笔记\ntags:\n  - Python学习笔记\ntoc: true\n---\n\n```python\n# 01-15python基础\n\n# 16-20python进阶\n\n# 21-30前端概述\n\n# 31-35Linux\n\n# 36-40MySQL\n\n# 41-55Django\n\n# 56-60FaskAPI\n\n# 61-65爬虫与并发编程\n\n# 66-80numpy&pandas\n\n# 81-90机器学习&pytorch\n\n# 91-100项目\n\n```\n\n## Python100天学习1-15\n\n[资料连接](https://github.com/jackfrued/Python-100-Days)\n\n### 第一天-初识python\n\n```python\n# 1. python历史\n# 2. python优缺点\n# 3. python安装\n# 4. print的简单使用\n# print函数可以输出多个值，多个值之间可以用 , 进行分隔，输出的内容之间默认以空格分开。\nprint('你好', '世界')\nprint('hello', 'world', sep=', ', end='!')\nprint('goodbye, world', end='!\\n')\n\n# 5.turtle画国旗和佩奇\n```\n\n### 第二天-语言元素\n\n```python\n# 1. 程序,变量和类型\n# 2. 变量命名原则\n# 3. 类型转换\n\n- chr()：将整数转换成该编码对应的字符串（一个字符）。\n- ord()：将字符串（一个字符）转换成对应的编码（整数）。\n- int(): 将字符串表示的n进制数字转换为十进制表示\n- bin(), oct(), hex(): 将十进制数字转为2/8/16进制字符串表示\n\n# 4. 运算符及其优先级\n```\n\n`# 3. 类型转换`\n\n<img src=\"https://image.yayan.xyz/20230212101043.png\" width = \"300\" height = \"300\" alt=\"类型转换\" align=\"center\" />\n\n`# 4. 运算符及其优先级`\n\n| 运算符                                                            | 描述                           |\n| ----------------------------------------------------------------- | ------------------------------ |\n| `[]` `[:]`                                                    | 下标，切片                     |\n| `**`                                                            | 指数                           |\n| `~` `+` `-`                                                 | 按位取反, 正负号               |\n| `*` `/` `%` `//`                                          | 乘，除，模，整除               |\n| `+` `-`                                                       | 加，减                         |\n| `>>` `<<`                                                     | 右移，左移                     |\n| `&`                                                             | 按位与                         |\n| `^` `\\|`                                                       | 按位异或，按位或               |\n| `<=` `<` `>` `>=`                                         | 小于等于，小于，大于，大于等于 |\n| `==` `!=`                                                     | 等于，不等于                   |\n| `is`  `is not`                                                | 身份运算符                     |\n| `in` `not in`                                                 | 成员运算符                     |\n| `not` `or` `and`                                            | 逻辑运算符                     |\n| `=` `+=` `-=` `*=` `/=` `%=` `//=` `**=` `&=` ` | =^=>>=<<=`                     |\n\n> **说明：** 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。\n\n### 第三天-分支结构\n\n--\n\n### 第四天-循环结构\n\n--\n\n### 第五天-构造程序逻辑\n\n--\n\n### 第六天-函数和模块的使用\n\n```python\n# 1.可变参数\n可变参数允许传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。\n\n# 2.关键字参数\n关键字参数允许传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。\n\n\n# 3.导入模块\n如果导入的模块除了定义函数之外还有可以执行代码，那么Python解释器在导入这个模块时就会执行这些代码\n\n# 4.变量作用域\nif __name__ == '__main__':\n    # 这里声明的变量属于全局作用域\n\ndef a():\n\n    def b():\n\n        # 这里修改全局变量需要声明global\n        # 这里修改a函数里面的变量需要声明nonlocal\n\n        # 仅仅使用不需要声明\n\n        # 如果没有全局变量但是声明了,会新建一个全局变量\n        # 如果没有nonlocal但是声明了，会报错\n\n```\n\n### 第七天-字符串和常用数据结构\n\n`字符串函数`\n\n**可以使用*复制字符串**\n\n> 因此a=[[0] * 3]*5  a里面的list都是同一个地址,修改一个就会修改全部\n> 但是[0] * 3 数字是直接存的对象  修改这个就是直接换了个对象 不糊修改对象的内容\n\n```python\nstr1 = 'hello, world!'\n# 通过内置函数len计算字符串的长度\n# len()  复杂度为O(1)  调用__len__\nprint(len(str1)) # 13\n# 获得字符串首字母大写的拷贝\nprint(str1.capitalize()) # Hello, world!\n# 获得字符串每个单词首字母大写的拷贝\nprint(str1.title()) # Hello, World!\n# 获得字符串变大写后的拷贝\nprint(str1.upper()) # HELLO, WORLD!\n# 从字符串中查找子串所在位置,rfind 最后一次出现的位置\nprint(str1.find('or')) # 8\nprint(str1.find('shit')) # -1\n# 与find类似但找不到子串时会引发异常 rindex最后一次出现的位置\n# print(str1.index('or'))\n# print(str1.index('shit'))\n# 检查字符串是否以指定的字符串开头\nprint(str1.startswith('He')) # False\nprint(str1.startswith('hel')) # True\n# 检查字符串是否以指定的字符串结尾\nprint(str1.endswith('!')) # True\n# 将字符串以指定的宽度居中并在两侧填充指定的字符\nprint(str1.center(50, '*'))\n# 将字符串以指定的宽度靠右(左:ljust)放置左侧填充指定的字符\nprint(str1.rjust(50, ' '))\nstr2 = 'abc123456'\n# 检查字符串是否由数字构成\nprint(str2.isdigit())  # False\nprint(str2.isdecimal())  # False\nprint(str2.isnumeric())  # False\n# 检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写。\nprint(str2.istitle())\n# 检测字符串是否只由空格组成。\nprint(str2.isspace())\n# 检查字符串是否以字母构成\nprint(str2.isalpha())  # False\n# 检查字符串是否以数字和字母构成\nprint(str2.isalnum())  # True\nstr3 = '  jackfrued@126.com '\nprint(str3)\n# 获得字符串修剪左右(lstrip,rstrip)两侧空格之后的拷贝\nprint(str3.strip())\n# 根据指定的分隔符将字符串进行分割。\n# 如果字符串包含指定的分隔符，则返回一个3元的元组，第一个为分隔符左边的子串，第二个为分隔符本身，第三个为分隔符右边的子串。 rpartition 最右边一个\nprint(str3.partition('@')) #('  jackfrued', '@', '126.com ')\n# 大小写字符的转换\nprint(str3.swapcase())\n```\n\n`字符串格式化`\n\n```python\n# 1.\na, b = 5, 10\nprint('%d * %d = %d' % (a, b, a * b))\n# 2.\na, b = 5, 10\nprint('{} * {} = {}'.format(a, b, a * b))\nprint('{0} * {1} = {2}'.format(a, b, a * b))\nprint('{aaa} * {bbb} = {ccc}'.format(aaa=a, bbb=b, ccc=a * b))\n# 3.\na, b = 5, 10\nprint(f'{a} * {b} = {a * b}')\n```\n\n`列表`\n\n**列表容器中并没有保存真正的对象，它保存的仅仅是对象的引用(堆中的地址)。**\n\n```python\nlist1 = [1, 3, 5, 7, 100]\n# 添加元素\nlist1.append(200)\nlist1.insert(1, 400)\n# 合并两个列表\nlist1.extend([1000, 2000])\nlist1 += [1000, 2000]\n# 根据值删除元素 删除第一个\nlist1.remove(1234)\n# 根据下标删除元素\nlist1.pop(0)\n\n# 切片返回的是拷贝，修改新数组，原数组不动\n# https://pythontutor.com/python-debugger.html#mode=edit\nfruits = [ [66666,77777777], 'apple', 'strawberry', 'waxberry']\nfruits3 = fruits[:4]\nprint(fruits3) \n# 数组里面存的是列表的地址，拷贝的也是列表的地址，修改还是到列表的地址去修改，所以会变\nfruits3[0][0]=000\nfruits3[2]='aaaaaaaaa'\nprint(fruits3)\nprint(fruits)\n# [[66666, 77777777], 'apple', 'strawberry', 'waxberry']\n# [[0, 77777777], 'apple', 'aaaaaaaaa', 'waxberry']\n# [[0, 77777777], 'apple', 'strawberry', 'waxberry']\n```\n\n`什么时候不用数组`\n\n```python\n# array 类似C的数组\n# 必须指定类型\n\n```\n\n`生成器`\n\n```python\nimport sys\n# 用列表的生成表达式语法创建列表容器\n# 用这种语法创建列表之后元素已经准备就绪所以需要耗费较多的内存空间\nf = [x ** 2 for x in range(1, 1000)]\nprint(sys.getsizeof(f))  # 查看对象占用内存的字节数\n# 请注意下面的代码创建的不是一个列表而是一个生成器对象\n# 通过生成器可以获取到数据但它不占用额外的空间存储数据\n# 每次需要数据的时候就通过内部的运算得到数据(需要花费额外的时间)\nf = (x ** 2 for x in range(1, 1000))\nprint(sys.getsizeof(f))  # 相比生成式生成器不占用存储数据的空间\nfor val in f:\n    print(val)\n\nyield：生成函数\n```\n\n`元组`\n\n> 元组在创建时间和占用的空间上面都优于列表\n\n`集合`\n\n`字典`\n\n`序列的抽象基类`\n\n`MutavleSequence:可变序列抽象基类(setitem,delitem)`\n`Sequence:不可变序列抽象基类`\n\n**+,+=,extend区别**\n\n```python\n# +=实际上是调用了extend方法\n# +=返回的本身,在原地址上修改\n# a=a+ 会返回一个新对象\n# append会把参数当成一个对象加进去\n# extend参数必须是可迭代对象,一个个加进去\na=[1,2]\nprint(id(a))\n\na.extend((777,))\na+=[666]\n# 报错\n# a+=(777)\nprint(id(a))\n\na=a+[666]\nprint(id(a))\n\na.append([666,777])\nprint(id(a))\n# 2358526812672\n# 2358526812672\n# 2358526332032\n# 2358526332032\n```\n\n`可切片对象`\n\n```python\n\nalist[len(alist):]=[9]\n# 末尾追加元素\nalist[:0]=[1,2]\n# 开头追加元素\nalist[3:3]=[1,2]\n# 索引位置追加元素\n# 结束位置大于长度会返回长度\n# 开始位置大于长度会返回空列表\n# 切片赋值长度必须相等\n```\n\n### 第八天-面向对象编程基础\n\n[python三个知识点:is和==,嵌套列表,类的私有属性](https://blog.csdn.net/jackfrued/article/details/79521404)\n\n```python\n# 1.类的私有属性可以在属性名前面加两个下划线\n# __len__不是私有成员,因为后面也有__\nclass Test:\n\n    def __init__(self, foo):\n        self.__foo = foo\n\n    def __bar(self):\n        print(self.__foo)\n        print('__bar')\n\n\ndef main():\n    test = Test('hello')\n    # AttributeError: 'Test' object has no attribute '__bar'\n    test.__bar()\n    # AttributeError: 'Test' object has no attribute '__foo'\n    print(test.__foo)\n\n\n    test = Test('hello')\n    test._Test__bar()\n    print(test._Test__foo)\n\n\nif __name__ == \"__main__\":\n    main()\n\n# 2.Python并没有从语法上严格保证私有属性或方法的私密性，它只是给私有的属性和方法换了一个名字来妨碍对它们的访问,更换名字的规则仍然可以访问到它们\n\n```\n\n### 第九天-面向对象进阶\n\n> class用于声明一个类,用type创建类\n> object是所有类的父类，所有类是type的实例\n\n`类的属性`\n\n```python\n# 1.@property装饰器\nclass Person(object):\n    def __init__(self, name, age):\n        self._name = name\n        self._age = age\n    # 访问器 - getter方法\n    @property\n    def name(self):\n        return self._name\n    # 访问器 - getter方法\n    @property\n    def age(self):\n        return self._age\n    # 修改器 - setter方法\n    @age.setter\n    def age(self, age):\n        self._age = age\n  \n# 属性名字和@property修饰的方法名字不能一样,不然会死循环\n# 把一个getter方法变成属性，只需要加上@property就可以了\n# @property本身又创建了另一个装饰器@score.setter，负责把一个setter方法变成属性赋值\n# 上面name是只读属性,age是读写属性\n\n\n# 2.__slots__魔法 ,只有slots内的属性才能被添加,对子类没有用,如果子类有,就是父类和子类的并集\nclass Person(object):\n    # 限定Person对象只能绑定_name, _age和_gender属性\n    __slots__ = ('_name', '_age', '_gender')\n    def __init__(self, name, age):\n        self._name = name\n        self._age = age\n        # 会报错\n        # self.hhhh=666\nPerson._gender = '男'\n# 这样能绑定?\nPerson.sex = '?'\nperson = Person('王大锤', 22)\n# 这样会报错,但是加上Person._sex = '?' 就变成了只读,不能修改\nperson.sex=66\n\n```\n\n`类的方法`\n\n```python\n# 1.静态方法\n\n# @staticmethod修饰,不用self,和C++类似\n\n# 2.类方法\n# @classmethod修饰,默认传递了cls参数,调用类本身,\n@classmethod\ndef now(cls):\n    print(cls)\n\n# 3.实例方法\n# self 就是实例本身\n```\n\n`继承和多态`\n\n```python\n\n# 子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，这个动作称之为方法重写（override）。通过方法重写我们可以让父类的同一个行为在子类中拥有不同的实现版本，当我们调用这个经过子类重写的方法时，不同的子类对象会表现出不同的行为，这个就是多态\n\n\n# 抽象类\nfrom abc import ABCMeta, abstractmethod\nclass Pet(object, metaclass=ABCMeta):\n    def __init__(self, nickname):\n        self._nickname = nickname\n    @abstractmethod\n    def make_voice(self):\n        pass\n\n```\n\n`定制类-魔法函数(不是继承,python自带)`\n\n```python\n# __str__打印输出变成自定义字符串\n# __repr__ 直接调用类时打印(jupyter)\ndef __str__(self):\n    return '6666'\n__repr__ = __str__\n# __iter__可用for循环迭代\n# __next__去下一个对象\nclass Fib(object):\n    def __init__(self):\n        self.a, self.b = 0, 1 # 初始化两个计数器a，b\n    def __iter__(self):\n        return self # 实例本身就是迭代对象，故返回自己\n    def __next__(self):\n        self.a, self.b = self.b, self.a + self.b # 计算下一个值\n        if self.a > 100000: # 退出循环的条件\n            raise StopIteration()\n        return self.a # 返回下一个值\n# __getitem__像列表一样取值  也可以改成字典形式 也可以用for循环\nif isinstance(n, int): # n是索引\nif isinstance(n, slice): # n是切片\n\n# 如果这个对象被for时，会首先调用__iter__方法返回一个iterator,然后再对这个iterator循环调用__next__方法，直到碰到StopIteration时则停止退出。\n\n# 如果for的对象没有__iter__方法，则无法获得一个迭代器，那么就会报错，但是，如果这个类实现了__getitem__方法，会从0开始依次读取相应的下标，直到发生IndexError为止\n\n# __iter__是优先读取的\n\n# __getattr__获取类的属性,已经定义的属性不会调用,使用没有定义的属性才会调用\n# __call__ 可以直接对实例进行调用\n# __bases__查看父类\n# __enter__ with进入\n# __exit__with退出\nclass Sample:\n    def __enter__(self):\n        print( \"enter\")\n        return self\n    def __exit__(self, exc_type,exc_val,exc_tb):\n        print ( \"exit\")\n    def do_something(self):\n        print ( \"doing something\" )\nwith Sample() as sample:\n    sample.do_something()\n# @contextlib.contextmanger \n\n# __dict__与dir()的区别：\n# dir()是一个函数，返回的是list；\n# __dict__是一个字典，键为属性名，值为属性值(类和实例不一样,可以通过修改这个增加属性)；\n# dir()用来寻找一个对象的所有属性，包括__dict__中的属性，__dict__是dir()的子集；\n```\n\n`如果要获得一个对象的所有属性和方法，可以使用dir()函数`\n\n`dir('abc')`\n\n### 第十天-图形用户界面和游戏开发\n\n--\n\n### 第十一天-文件和异常\n\n--\n\n```python\n# 1.json\nimport json\n# 字符串处理\ndata = {\n    'name' : 'ACME',\n    'shares' : 100,\n    'price' : 542.23\n}\njson_str = json.dumps(data)\ndata = json.loads(json_str)\n# 文件处理\n#  Writing JSON data\nwith open('data.json', 'w') as f:\n    json.dump(data, f)\n\n# Reading data back\nwith open('data.json', 'r') as f:\n    data = json.load(f)\n\n\n# 2.异常\n# 1.except语句不是必须的，finally语句也不是必须的，但是二者必须要有一个，否则就没有try的意义了。\n# 2.except语句可以有多个，Python会按except语句的顺序依次匹配你指定的异常，如果异常已经处理就不会再进入后面的except语句。\n# 3.except语句可以以元组形式同时指定多个异常，参见实例代码。\n# 4.except语句后面如果不指定异常类型，则默认捕获所有异常，你可以通过logging或者sys模块获取当前异常。\n# 5.如果要捕获异常后要重复抛出，请使用raise，后面不要带任何参数或信息。\n# 6.不建议捕获并抛出同一个异常，请考虑重构你的代码。\n# 7.不建议在不清楚逻辑的情况下捕获所有异常，有可能你隐藏了很严重的问题。\n# 8.尽量使用内置的异常处理语句来替换try/except语句，比如with语句，getattr()方法。\n```\n\n### 第十二天-字符串和正则表达式\n\n[正则表达式练习](https://regexlearn.com/zh-cn/learn/regex101)\n[正则表达式规则](https://www.runoob.com/regexp/regexp-syntax.html)\n\n```python\n# re模块处理\n\n# pattern:r'自己写的表达式'\n\n# str:待匹配字符串\n\n```\n\n| 函数                                         | 说明                                                                         |\n| -------------------------------------------- | ---------------------------------------------------------------------------- |\n| compile(pattern, flags=0)                    | 编译正则表达式返回正则表达式对象                                             |\n| match(pattern, string, flags=0)              | 用正则表达式匹配字符串 成功返回匹配对象 否则返回None                         |\n| search(pattern, string, flags=0)             | 搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None         |\n| split(pattern, string, maxsplit=0, flags=0)  | 用正则表达式指定的模式分隔符拆分字符串 返回列表                              |\n| sub(pattern, repl, string, count=0, flags=0) | 用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数 |\n| fullmatch(pattern, string, flags=0)          | match函数的完全匹配（从字符串开头到结尾）版本                                |\n| findall(pattern, string, flags=0)            | 查找字符串所有与正则表达式匹配的模式 返回字符串的列表                        |\n| finditer(pattern, string, flags=0)           | 查找字符串所有与正则表达式匹配的模式 返回一个迭代器                          |\n| purge()                                      | 清除隐式编译的正则表达式的缓存                                               |\n| re.I / re.IGNORECASE                         | 忽略大小写匹配标记                                                           |\n| re.M / re.MULTILINE                          | 多行匹配标记                                                                 |\n\n### 第十三天-进程和线程\n\n> 进程线程知识参考操作系统\n\n`多进程`\n\n```python\n# Unix和Linux操作系统上提供了 `fork()`系统调用来创建进程，调用 `fork()`函数的是父进程，创建出的是子进程\n# Windows没有fork调用\nfrom multiprocessing import Process\nfrom os import getpid\nfrom random import randint\nfrom time import time, sleep\ndef download_task(filename):\n    print('启动下载进程，进程号[%d].' % getpid())\n    print('开始下载%s...' % filename)\n    time_to_download = randint(5, 10)\n    sleep(time_to_download)\n    print('%s下载完成! 耗费了%d秒' % (filename, time_to_download))\ndef main():\n    start = time()\n    p1 = Process(target=download_task, args=('Python从入门到住院.pdf', ))\n    p1.start()\n    p2 = Process(target=download_task, args=('Peking Hot.avi', ))\n    p2.start()\n    p1.join()\n    p2.join()\n    end = time()\n    print('总共耗费了%.2f秒.' % (end - start))\nif __name__ == '__main__':\n    main()\n\n# 进程池\ndef main():\n    start = time()\n    p = Pool(4)\n    # 这里进程池有四个进程但是用了五个任务\n    # task 0，1，2，3是立刻执行的，而task 4要等待前面某个task完成后才执行\n    for i in range(5):\n        p.apply_async(download_task, args=(i,))\n    p.close()\n    p.join()\n    print('总共耗费了%.2f秒.' % (end - start))\n\n# 进程通信\nfrom multiprocessing import Process, Queue\nimport os, time, random\n# 写数据进程执行的代码:\ndef write(q):\n    print('Process to write: %s' % os.getpid())\n    for value in ['A', 'B', 'C']:\n        print('Put %s to queue...' % value)\n        q.put(value)\n        time.sleep(random.random())\n# 读数据进程执行的代码:\ndef read(q):\n    print('Process to read: %s' % os.getpid())\n    while True:\n        value = q.get(True)\n        print('Get %s from queue.' % value)\nif __name__=='__main__':\n    # 父进程创建Queue，并传给各个子进程：\n    q = Queue()\n    pw = Process(target=write, args=(q,))\n    pr = Process(target=read, args=(q,))\n    # 启动子进程pw，写入:\n    pw.start()\n    # 启动子进程pr，读取:\n    pr.start()\n    # 等待pw结束:\n    pw.join()\n    # pr进程里是死循环，无法等待其结束，只能强行终止:\n    pr.terminate()\n'''\nProcess to write: 50563\nPut A to queue...\nProcess to read: 50564\nGet A from queue.\nPut B to queue...\nGet B from queue.\nPut C to queue...\nGet C from queue.\n'''\n```\n\n`多线程`\n\n```python\nfrom random import randint\n# 在Python早期的版本中就引入了thread模块（现在名为_thread）来实现多线程编程，然而该模块过于底层，而且很多功能都没有提供\n# 因此目前的多线程开发我们推荐使用threading模块，该模块对多线程编程提供了更好的面向对象的封装。\nfrom threading import Thread\nfrom time import time, sleep\ndef download(filename):\n    print('开始下载%s...' % filename)\n    time_to_download = randint(5, 10)\n    sleep(time_to_download)\n    print('%s下载完成! 耗费了%d秒' % (filename, time_to_download))\ndef main():\n    start = time()\n    t1 = Thread(target=download, args=('Python从入门到住院.pdf',))\n    t1.start()\n    t2 = Thread(target=download, args=('Peking Hot.avi',))\n    t2.start()\n    t1.join()\n    t2.join()\n    end = time()\n    print('总共耗费了%.3f秒' % (end - start))\nif __name__ == '__main__':\n    main()\n\n# 继承 `Thread`类的方式来创建自定义的线程类\nfrom random import randint\nfrom threading import Thread\nfrom time import time, sleep\nclass DownloadTask(Thread):\n    def __init__(self, filename):\n        # 可以穿name给线程命名\n        super().__init__()\n        self._filename = filename\n    def run(self):\n        print('开始下载%s...' % self._filename)\n        time_to_download = randint(5, 10)\n        sleep(time_to_download)\n        print('%s下载完成! 耗费了%d秒' % (self._filename, time_to_download))\ndef main():\n    start = time()\n    t1 = DownloadTask('Python从入门到住院.pdf')\n    t1.start()\n    t2 = DownloadTask('Peking Hot.avi')\n    t2.start()\n    t1.join()\n    t2.join()\n    end = time()\n    print('总共耗费了%.2f秒.' % (end - start))\nif __name__ == '__main__':\n    main()\n\n# 线程上锁\nfrom time import sleep\nfrom threading import Thread, Lock\n# RLock 可重用锁,同一线程中可以多次调用acquire,但是release要调用一样的次数\nclass Account(object):\n    def __init__(self):\n        self._balance = 0\n        self._lock = Lock()\n    def deposit(self, money):\n        # 先获取锁才能执行后续的代码\n        self._lock.acquire()\n        try:\n            new_balance = self._balance + money\n            sleep(0.01)\n            self._balance = new_balance\n        finally:\n            # 在finally中执行释放锁的操作保证正常异常锁都能释放\n            self._lock.release()\n    @property\n    def balance(self):\n        return self._balance\nclass AddMoneyThread(Thread):\n    def __init__(self, account, money):\n        super().__init__()\n        self._account = account\n        self._money = money\n\n    def run(self):\n        self._account.deposit(self._money)\ndef main():\n    account = Account()\n    threads = []\n    for _ in range(100):\n        t = AddMoneyThread(account, 1)\n        threads.append(t)\n        t.start()\n    for t in threads:\n        t.join()\n    print('账户余额为: ￥%d元' % account.balance)\nif __name__ == '__main__':\n    main()\n\n# 线程通信\nfrom queue import Queue\n\n# queue.Queue：这是一个线程安全的队列，可以被用来在线程之间传递数据。\n\n# queue.LifoQueue：这是一个线程安全的栈，可以被用来在线程之间传递数据。\n\n# queue.PriorityQueue：这是一个线程安全的优先队列，可以被用来在线程之间传递数据。\n\n# collections.deque：这是一个线程安全的双端队列，可以被用来在线程之间传递数据。\n\n# multiprocessing.Queue：这是一个线程安全的队列，可以被用来在进程之间传递数据。\n\n```\n\n### 第十四天-网络编程入门和网络应用开发\n\n> 计算机网络基础知识补充\n\n`发邮件`\n\n`发短信`\n\n`网络服务`\n\n```python\n# 多线程网络服务\n\n# 服务器端\n\nfrom socket import socket, SOCK_STREAM, AF_INET\nfrom base64 import b64encode\nfrom json import dumps\nfrom threading import Thread\ndef main():\n    # 自定义线程类\n    class FileTransferHandler(Thread):\n        def __init__(self, cclient):\n            super().__init__()\n            self.cclient = cclient\n        def run(self):\n            my_dict = {}\n            my_dict['filename'] = 'guido.jpg'\n            # JSON是纯文本不能携带二进制数据\n            # 所以图片的二进制数据要处理成base64编码\n            my_dict['filedata'] = data\n            # 通过dumps函数将字典处理成JSON字符串\n            json_str = dumps(my_dict)\n            # 发送JSON字符串\n            self.cclient.send(json_str.encode('utf-8'))\n            self.cclient.close()\n\n    # 1.创建套接字对象并指定使用哪种传输服务\n    server = socket()\n    # 2.绑定IP地址和端口(区分不同的服务)\n    server.bind(('192.168.1.2', 5566))\n    # 3.开启监听 - 监听客户端连接到服务器\n    server.listen(512)\n    print('服务器启动开始监听...')\n    with open('guido.jpg', 'rb') as f:\n        # 将二进制数据处理成base64再解码成字符串\n        data = b64encode(f.read()).decode('utf-8')\n    while True:\n        client, addr = server.accept()\n        # 启动一个线程来处理客户端的请求\n        FileTransferHandler(client).start()\nif __name__ == '__main__':\n    main()\n\n# 客户端\n\nfrom socket import socket\nfrom json import loads\nfrom base64 import b64decode\ndef main():\n    client = socket()\n    client.connect(('192.168.1.2', 5566))\n    # 定义一个保存二进制数据的对象\n    in_data = bytes()\n    # 由于不知道服务器发送的数据有多大每次接收1024字节\n    data = client.recv(1024)\n    while data:\n        # 将收到的数据拼接起来\n        in_data += data\n        data = client.recv(1024)\n    # 将收到的二进制数据解码成JSON字符串并转换成字典\n    # loads函数的作用就是将JSON字符串转成字典对象\n    my_dict = loads(in_data.decode('utf-8'))\n    filename = my_dict['filename']\n    filedata = my_dict['filedata'].encode('utf-8')\n    with open('/Users/Hao/' + filename, 'wb') as f:\n        # 将base64格式的数据解码成二进制数据并写入文件\n        f.write(b64decode(filedata))\n    print('图片已保存.')\nif __name__ == '__main__':\n    main()\n```\n\n### 第十五天-图像和办公文档处理\n\n`图像`\n\n```python\n>>> from PIL import Image\n>>>\n>>> image = Image.open('./res/guido.jpg')\n>>> image.format, image.size, image.mode\n('JPEG', (500, 750), 'RGB')\n>>> image.show()\n\n# 裁剪图像\n>>> image = Image.open('./res/guido.jpg')\n>>> rect = 80, 20, 310, 360\n>>> image.crop(rect).show()\n# 略缩图\n>>> image = Image.open('./res/guido.jpg')\n>>> size = 128, 128\n>>> image.thumbnail(size)\n>>> image.show()\n# 缩放粘贴图像\n>>> image1 = Image.open('./res/luohao.png')\n>>> image2 = Image.open('./res/guido.jpg')\n>>> rect = 80, 20, 310, 360\n>>> guido_head = image2.crop(rect)\n>>> width, height = guido_head.size\n>>> image1.paste(guido_head.resize((int(width / 1.5), int(height / 1.5))), (172, 40))\n# 旋转和反转\n>>> image = Image.open('./res/guido.png')\n>>> image.rotate(180).show()\n>>> image.transpose(Image.FLIP_LEFT_RIGHT).show()\n# 操作像素\n>>> image = Image.open('./res/guido.jpg')\n>>> for x in range(80, 310):\n...     for y in range(20, 360):\n...         image.putpixel((x, y), (128, 128, 128))\n... \n>>> image.show()\n# 滤镜\n>>> from PIL import Image, ImageFilter\n>>>\n>>> image = Image.open('./res/guido.jpg')\n>>> image.filter(ImageFilter.CONTOUR).show()\n\n```\n\n`Excel`\n\n`Word`\n\n### B站视频总结\n\n`元类编程`\n**元类:创建类的类**\n\n#### 1.动态属性\n\n```python\n#get\n@property修饰\n#set\n@aaa.setter\n#查找不到进入\n__getattr__\n#先进入这个\n__getattribute__\n\ngetattr(类,属性)==类.属性\n```\n\n#### 2.属性描述符\n\n```python\n# 数据描述符\nclass IntField:\n    def __get__( self, instance，owner):\n        return self.value\n    def __set__(self, instance, value):\n        if not isinstance(value, numbers.Integral):\n            raise ValueError( \"int value need\")\n        if value < 0:\n            raise ValueError( \"positive value need\")\n        self.value = value\n    def __delete__(self, instance):\n        pass\n\nclass User:\n    # 自定义类型检测\n    age = IntField()\n\n```\n\n#### 3.类属性取值过程\n\n> 如果user是某个类的实例，那么user.age（以及等价的getattr(user, 'age'))首先调用__getattribute__。如果类定义了_getattr_方法，\n> 那么在_getattribute__抛出 AttributeError的时候就会调用到_getattr_,而对于描述符(__get__)的调用，则是发生在__getattribute__内部的。\n\nuser = User()，那么user.age顺序如下:\n\n(1) 如果\"age”是出现在user或其基类的__dict__中，且age是data descriptor，那么调用其__get__方法 ,否则\n\n(2) 如果\"age\"出现在obj的__dict__中，那么直接返回 obj.__dict__[ 'age']，否则\n\n(3) 如果\"age\"出现在User或其基类的__dict__中\n\n(3.1) 如果age是non-data descriptor，那么调用其__get__方法，否则\n(3.2) 返回__dict__[ 'age']\n\n(4) 如果User有__getattr__方法，调用__getattr__方法，否则\n\n(5) 抛出AttributeError\n\n#### 4.__new__和__init__区别\n\nnew传的类本身\n\ninit传的对象实例\n\n先进new后进init\n\nnew不返回对象,不会进init\n\n#### 5.type动态创建类\n\ntype(\"类名\",(父类),{属性,函数})\n\n**控制类的创建过程**\nclass user(metaclass=自定义元类)\n\n**元类编程->封装**\n\n#### 6.可迭代,迭代器,生成器\n\n迭代器和迭代序列分离\n\n__iter__ 可迭代\n\n__next__ 迭代器\n\n```python\nclass company(object):\n    def _init_(self, employee_list):\n        self.employee = employee_list\n    def _iter_( self):\n        return MyIterator( self.employee)\n\nclass MyIterator(Iterator ) :\n    def _init_(self, employee_list):\n        self.iter_list = employee_listself.index = 0\n    def  inext_(self):\n        #真正返回迭代值的逻辑\n        try:\n            word = self.iter_list[ self.index]\n        except IndexError:\n            raise stopIteration\n        self.index +=1\n        return word\n```\n\n`生成器`\n\n```python\ndef gen_fib(index):\n    n,a,b = 0,0,1\n    while n<index:\n        yie1d b\n        a,b = b,a+b\n        n += 1\nfor data in gen_fib(10):\n    print (data)\nI\nPyGenObject\ngi_frame\ngi_code\n会保存上一次执行的位置和代码\n\n```\n\n`大文件读取`\n\n```python\ndef myreadlines(f, newline) :buf = \"\"\nwhile True:\n    while newline in buf:\n        pos = buf.index( newline)\n        yield buf[:pos]\n        buf = buf[pos + len(newline) : ]\n    chunk = f.read(4096*10)\n    if not chunk :\n        # 文件结尾\n        yield buf\n        break\n    buf += chunk\n\nwith open(\"input.txt\" ) as f:\n    for line in myreadlines(f，\"{\"):\n        print (line)\n```\n\n#### 7.socket编程\n\n见网络编程\n\n#### 8.多线程\n\n1.GIL\n全局解释器锁\npython中一个线程对应c语言的一个线程\ngil使得同一时刻只有一个线程运行在一个cpu上运行字节码\n不能把多个线程映射到多个cpu上\ngil会根据执行的字节码行数及时间片释放gil\n遇见io操作也会主动释放(适合io频繁)\n\n2.线程同步,通信\n**多线程实现**\n使用线程传递函数\n继承多线程类,实现run\n**线程通信**\n共享变量:不好\nQueue:还有其他线程安全的数据结构\n**线程同步**\nLock,RLock\n**Lock**:获取两次就会死锁\n**RLock**:允许多线程环境下多次acquire,但是release要一样的数量\n**condition**:wait()和notify() 等待和唤醒\n先等待才能唤醒\n把waiter的锁放入一个双端队列\nnotify把队列弹一个出来释放\nwith condition 就是获取锁释放锁(默认RLock)\nwith之后才能wait和notify,wait把condition的锁释放掉\ncon't wait on a un-acquire lock\n**Semaphore**:用于控制进入数量的锁\nthreading.Semaphore(3)\n\n3.线程池&进程池\nfrom concurrent import futures\n\n```python\nexecutor = ThreadPoo1Executor(max_workers=1)\n#通过submit函数提交执行的函数到线程池中,submit是立即返回\ntask1 = executor. submit(get_htm1,(3))\ntask2 = executor. submit(get_htm1,(2))\n\n# done用于判断是否完成\ntask1.done()\n\n\n# result获取函数返回结果\ntask1.result()\n\n\n#要获取已经成功的task的返回\nurls = [3,2,4]\nall_task = [executor. submit(get_html,(url)) for url in urls]\n# yield已经完成的线程\nfor future in as_completed(all_task):\n    data = future.result()\n    print( \"get ipage success\".format(data))\n\n\n#通过executor获取已经完成的task返回值,返回顺序一致\nfor data in executor.map(get_html, urls):\n    print( \"get {fpage\".format(data))\n\n# 阻塞主线程,等全部还是等一个\nwait()\n```\n\n---\n\n进程适合计算密集\n线程适合io密集\n\n父进程和子进程各有数据\n\n子进程会把创建进程下面的代码单独运行一遍\n\nProcessPoolExecutor用的multiprocessing\n\n不能用queue.Queue\n不能用共享变量\n\nfrom queue import Queue\nfrom multiprocessing import Queue\nfrom multiprocessing.Manager import Queue\n#Manager 有很多数据结构\npipe只能用于两个进程\n性能高于Queue\n\n#### 9.IO复用\n\n并发\n并发是指一个时间段内有几个程序在同一个cpu运行，但是任意时刻只有一个程序在cpu上运行\n并行\n并行是指任意时刻点上，有多个程序同时运行在多个cpu\n\n同步\n同步是指代码调用IO操作时必须等待IO操作完成才返\n回的调用方式。\n异步\n异步是指代码调用IO操作时，不必等IO操作完成就返回的调用方式。\n\n阻塞\n阻塞是指调用函数时候当前线程被挂起。\n非阻塞\n非阻塞是指调用函数时候当前线程不会被挂起，而是立即返回。\n\n#### 10.回调协程\n\n\n#### 11.asynch await\n\n\n#### 12.事件循环\n","slug":"python100天1-15","published":1,"date":"2023-02-28T03:49:42.199Z","updated":"2023-02-27T09:08:35.000Z","_id":"clee4vhaz0018c8vqhgr9ggf0","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 01-15python基础</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 16-20python进阶</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 21-30前端概述</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 31-35Linux</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 36-40MySQL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 41-55Django</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 56-60FaskAPI</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 61-65爬虫与并发编程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 66-80numpy&amp;pandas</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 81-90机器学习&amp;pytorch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 91-100项目</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"python100天学习1-15\"><a class=\"markdownIt-Anchor\" href=\"#python100天学习1-15\"></a> Python100天学习1-15</h2>\n<p><a href=\"https://github.com/jackfrued/Python-100-Days\">资料连接</a></p>\n<h3 id=\"第一天-初识python\"><a class=\"markdownIt-Anchor\" href=\"#第一天-初识python\"></a> 第一天-初识python</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. python历史</span></span><br><span class=\"line\"><span class=\"comment\"># 2. python优缺点</span></span><br><span class=\"line\"><span class=\"comment\"># 3. python安装</span></span><br><span class=\"line\"><span class=\"comment\"># 4. print的简单使用</span></span><br><span class=\"line\"><span class=\"comment\"># print函数可以输出多个值，多个值之间可以用 , 进行分隔，输出的内容之间默认以空格分开。</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你好&#x27;</span>, <span class=\"string\">&#x27;世界&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"string\">&#x27;world&#x27;</span>, sep=<span class=\"string\">&#x27;, &#x27;</span>, end=<span class=\"string\">&#x27;!&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;goodbye, world&#x27;</span>, end=<span class=\"string\">&#x27;!\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.turtle画国旗和佩奇</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第二天-语言元素\"><a class=\"markdownIt-Anchor\" href=\"#第二天-语言元素\"></a> 第二天-语言元素</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 程序,变量和类型</span></span><br><span class=\"line\"><span class=\"comment\"># 2. 变量命名原则</span></span><br><span class=\"line\"><span class=\"comment\"># 3. 类型转换</span></span><br><span class=\"line\"></span><br><span class=\"line\">- <span class=\"built_in\">chr</span>()：将整数转换成该编码对应的字符串（一个字符）。</span><br><span class=\"line\">- <span class=\"built_in\">ord</span>()：将字符串（一个字符）转换成对应的编码（整数）。</span><br><span class=\"line\">- <span class=\"built_in\">int</span>(): 将字符串表示的n进制数字转换为十进制表示</span><br><span class=\"line\">- <span class=\"built_in\">bin</span>(), <span class=\"built_in\">oct</span>(), <span class=\"built_in\">hex</span>(): 将十进制数字转为<span class=\"number\">2</span>/<span class=\"number\">8</span>/<span class=\"number\">16</span>进制字符串表示</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 运算符及其优先级</span></span><br></pre></td></tr></table></figure>\n<p><code># 3. 类型转换</code></p>\n<img src=\"https://image.yayan.xyz/20230212101043.png\" width = \"300\" height = \"300\" alt=\"类型转换\" align=\"center\" />\n<p><code># 4. 运算符及其优先级</code></p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>[]</code> <code>[:]</code></td>\n<td>下标，切片</td>\n</tr>\n<tr>\n<td><code>**</code></td>\n<td>指数</td>\n</tr>\n<tr>\n<td><code>~</code> <code>+</code> <code>-</code></td>\n<td>按位取反, 正负号</td>\n</tr>\n<tr>\n<td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td>\n<td>乘，除，模，整除</td>\n</tr>\n<tr>\n<td><code>+</code> <code>-</code></td>\n<td>加，减</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td>\n<td>右移，左移</td>\n</tr>\n<tr>\n<td><code>&amp;</code></td>\n<td>按位与</td>\n</tr>\n<tr>\n<td><code>^</code> <code>|</code></td>\n<td>按位异或，按位或</td>\n</tr>\n<tr>\n<td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td>\n<td>小于等于，小于，大于，大于等于</td>\n</tr>\n<tr>\n<td><code>==</code> <code>!=</code></td>\n<td>等于，不等于</td>\n</tr>\n<tr>\n<td><code>is</code>  <code>is not</code></td>\n<td>身份运算符</td>\n</tr>\n<tr>\n<td><code>in</code> <code>not in</code></td>\n<td>成员运算符</td>\n</tr>\n<tr>\n<td><code>not</code> <code>or</code> <code>and</code></td>\n<td>逻辑运算符</td>\n</tr>\n<tr>\n<td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code> <code>&amp;=</code> `</td>\n<td>=^=&gt;&gt;=&lt;&lt;=`</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>说明：</strong> 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。</p>\n</blockquote>\n<h3 id=\"第三天-分支结构\"><a class=\"markdownIt-Anchor\" href=\"#第三天-分支结构\"></a> 第三天-分支结构</h3>\n<p>–</p>\n<h3 id=\"第四天-循环结构\"><a class=\"markdownIt-Anchor\" href=\"#第四天-循环结构\"></a> 第四天-循环结构</h3>\n<p>–</p>\n<h3 id=\"第五天-构造程序逻辑\"><a class=\"markdownIt-Anchor\" href=\"#第五天-构造程序逻辑\"></a> 第五天-构造程序逻辑</h3>\n<p>–</p>\n<h3 id=\"第六天-函数和模块的使用\"><a class=\"markdownIt-Anchor\" href=\"#第六天-函数和模块的使用\"></a> 第六天-函数和模块的使用</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.可变参数</span></span><br><span class=\"line\">可变参数允许传入<span class=\"number\">0</span>个或任意个参数，这些可变参数在函数调用时自动组装为一个<span class=\"built_in\">tuple</span>。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.关键字参数</span></span><br><span class=\"line\">关键字参数允许传入<span class=\"number\">0</span>个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个<span class=\"built_in\">dict</span>。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.导入模块</span></span><br><span class=\"line\">如果导入的模块除了定义函数之外还有可以执行代码，那么Python解释器在导入这个模块时就会执行这些代码</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.变量作用域</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 这里声明的变量属于全局作用域</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">a</span>():</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">b</span>():</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 这里修改全局变量需要声明global</span></span><br><span class=\"line\">        <span class=\"comment\"># 这里修改a函数里面的变量需要声明nonlocal</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 仅仅使用不需要声明</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 如果没有全局变量但是声明了,会新建一个全局变量</span></span><br><span class=\"line\">        <span class=\"comment\"># 如果没有nonlocal但是声明了，会报错</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"第七天-字符串和常用数据结构\"><a class=\"markdownIt-Anchor\" href=\"#第七天-字符串和常用数据结构\"></a> 第七天-字符串和常用数据结构</h3>\n<p><code>字符串函数</code></p>\n<p><strong>可以使用*复制字符串</strong></p>\n<blockquote>\n<p>因此a=[[0] * 3]*5  a里面的list都是同一个地址,修改一个就会修改全部<br />\n但是[0] * 3 数字是直接存的对象  修改这个就是直接换了个对象 不糊修改对象的内容</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = <span class=\"string\">&#x27;hello, world!&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 通过内置函数len计算字符串的长度</span></span><br><span class=\"line\"><span class=\"comment\"># len()  复杂度为O(1)  调用__len__</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(str1)) <span class=\"comment\"># 13</span></span><br><span class=\"line\"><span class=\"comment\"># 获得字符串首字母大写的拷贝</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.capitalize()) <span class=\"comment\"># Hello, world!</span></span><br><span class=\"line\"><span class=\"comment\"># 获得字符串每个单词首字母大写的拷贝</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.title()) <span class=\"comment\"># Hello, World!</span></span><br><span class=\"line\"><span class=\"comment\"># 获得字符串变大写后的拷贝</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.upper()) <span class=\"comment\"># HELLO, WORLD!</span></span><br><span class=\"line\"><span class=\"comment\"># 从字符串中查找子串所在位置,rfind 最后一次出现的位置</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.find(<span class=\"string\">&#x27;or&#x27;</span>)) <span class=\"comment\"># 8</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.find(<span class=\"string\">&#x27;shit&#x27;</span>)) <span class=\"comment\"># -1</span></span><br><span class=\"line\"><span class=\"comment\"># 与find类似但找不到子串时会引发异常 rindex最后一次出现的位置</span></span><br><span class=\"line\"><span class=\"comment\"># print(str1.index(&#x27;or&#x27;))</span></span><br><span class=\"line\"><span class=\"comment\"># print(str1.index(&#x27;shit&#x27;))</span></span><br><span class=\"line\"><span class=\"comment\"># 检查字符串是否以指定的字符串开头</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.startswith(<span class=\"string\">&#x27;He&#x27;</span>)) <span class=\"comment\"># False</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.startswith(<span class=\"string\">&#x27;hel&#x27;</span>)) <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"comment\"># 检查字符串是否以指定的字符串结尾</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.endswith(<span class=\"string\">&#x27;!&#x27;</span>)) <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"comment\"># 将字符串以指定的宽度居中并在两侧填充指定的字符</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.center(<span class=\"number\">50</span>, <span class=\"string\">&#x27;*&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\"># 将字符串以指定的宽度靠右(左:ljust)放置左侧填充指定的字符</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.rjust(<span class=\"number\">50</span>, <span class=\"string\">&#x27; &#x27;</span>))</span><br><span class=\"line\">str2 = <span class=\"string\">&#x27;abc123456&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 检查字符串是否由数字构成</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str2.isdigit())  <span class=\"comment\"># False</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str2.isdecimal())  <span class=\"comment\"># False</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str2.isnumeric())  <span class=\"comment\"># False</span></span><br><span class=\"line\"><span class=\"comment\"># 检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写。</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str2.istitle())</span><br><span class=\"line\"><span class=\"comment\"># 检测字符串是否只由空格组成。</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str2.isspace())</span><br><span class=\"line\"><span class=\"comment\"># 检查字符串是否以字母构成</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str2.isalpha())  <span class=\"comment\"># False</span></span><br><span class=\"line\"><span class=\"comment\"># 检查字符串是否以数字和字母构成</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str2.isalnum())  <span class=\"comment\"># True</span></span><br><span class=\"line\">str3 = <span class=\"string\">&#x27;  jackfrued@126.com &#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str3)</span><br><span class=\"line\"><span class=\"comment\"># 获得字符串修剪左右(lstrip,rstrip)两侧空格之后的拷贝</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str3.strip())</span><br><span class=\"line\"><span class=\"comment\"># 根据指定的分隔符将字符串进行分割。</span></span><br><span class=\"line\"><span class=\"comment\"># 如果字符串包含指定的分隔符，则返回一个3元的元组，第一个为分隔符左边的子串，第二个为分隔符本身，第三个为分隔符右边的子串。 rpartition 最右边一个</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str3.partition(<span class=\"string\">&#x27;@&#x27;</span>)) <span class=\"comment\">#(&#x27;  jackfrued&#x27;, &#x27;@&#x27;, &#x27;126.com &#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># 大小写字符的转换</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str3.swapcase())</span><br></pre></td></tr></table></figure>\n<p><code>字符串格式化</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.</span></span><br><span class=\"line\">a, b = <span class=\"number\">5</span>, <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;%d * %d = %d&#x27;</span> % (a, b, a * b))</span><br><span class=\"line\"><span class=\"comment\"># 2.</span></span><br><span class=\"line\">a, b = <span class=\"number\">5</span>, <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;&#125; * &#123;&#125; = &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(a, b, a * b))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&#x27;</span>.<span class=\"built_in\">format</span>(a, b, a * b))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;aaa&#125; * &#123;bbb&#125; = &#123;ccc&#125;&#x27;</span>.<span class=\"built_in\">format</span>(aaa=a, bbb=b, ccc=a * b))</span><br><span class=\"line\"><span class=\"comment\"># 3.</span></span><br><span class=\"line\">a, b = <span class=\"number\">5</span>, <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;a&#125;</span> * <span class=\"subst\">&#123;b&#125;</span> = <span class=\"subst\">&#123;a * b&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>列表</code></p>\n<p><strong>列表容器中并没有保存真正的对象，它保存的仅仅是对象的引用(堆中的地址)。</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">100</span>]</span><br><span class=\"line\"><span class=\"comment\"># 添加元素</span></span><br><span class=\"line\">list1.append(<span class=\"number\">200</span>)</span><br><span class=\"line\">list1.insert(<span class=\"number\">1</span>, <span class=\"number\">400</span>)</span><br><span class=\"line\"><span class=\"comment\"># 合并两个列表</span></span><br><span class=\"line\">list1.extend([<span class=\"number\">1000</span>, <span class=\"number\">2000</span>])</span><br><span class=\"line\">list1 += [<span class=\"number\">1000</span>, <span class=\"number\">2000</span>]</span><br><span class=\"line\"><span class=\"comment\"># 根据值删除元素 删除第一个</span></span><br><span class=\"line\">list1.remove(<span class=\"number\">1234</span>)</span><br><span class=\"line\"><span class=\"comment\"># 根据下标删除元素</span></span><br><span class=\"line\">list1.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切片返回的是拷贝，修改新数组，原数组不动</span></span><br><span class=\"line\"><span class=\"comment\"># https://pythontutor.com/python-debugger.html#mode=edit</span></span><br><span class=\"line\">fruits = [ [<span class=\"number\">66666</span>,<span class=\"number\">77777777</span>], <span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"string\">&#x27;strawberry&#x27;</span>, <span class=\"string\">&#x27;waxberry&#x27;</span>]</span><br><span class=\"line\">fruits3 = fruits[:<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fruits3) </span><br><span class=\"line\"><span class=\"comment\"># 数组里面存的是列表的地址，拷贝的也是列表的地址，修改还是到列表的地址去修改，所以会变</span></span><br><span class=\"line\">fruits3[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"number\">000</span></span><br><span class=\"line\">fruits3[<span class=\"number\">2</span>]=<span class=\"string\">&#x27;aaaaaaaaa&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(fruits3)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fruits)</span><br><span class=\"line\"><span class=\"comment\"># [[66666, 77777777], &#x27;apple&#x27;, &#x27;strawberry&#x27;, &#x27;waxberry&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\"># [[0, 77777777], &#x27;apple&#x27;, &#x27;aaaaaaaaa&#x27;, &#x27;waxberry&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\"># [[0, 77777777], &#x27;apple&#x27;, &#x27;strawberry&#x27;, &#x27;waxberry&#x27;]</span></span><br></pre></td></tr></table></figure>\n<p><code>什么时候不用数组</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># array 类似C的数组</span></span><br><span class=\"line\"><span class=\"comment\"># 必须指定类型</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>生成器</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"comment\"># 用列表的生成表达式语法创建列表容器</span></span><br><span class=\"line\"><span class=\"comment\"># 用这种语法创建列表之后元素已经准备就绪所以需要耗费较多的内存空间</span></span><br><span class=\"line\">f = [x ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">1000</span>)]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sys.getsizeof(f))  <span class=\"comment\"># 查看对象占用内存的字节数</span></span><br><span class=\"line\"><span class=\"comment\"># 请注意下面的代码创建的不是一个列表而是一个生成器对象</span></span><br><span class=\"line\"><span class=\"comment\"># 通过生成器可以获取到数据但它不占用额外的空间存储数据</span></span><br><span class=\"line\"><span class=\"comment\"># 每次需要数据的时候就通过内部的运算得到数据(需要花费额外的时间)</span></span><br><span class=\"line\">f = (x ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">1000</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sys.getsizeof(f))  <span class=\"comment\"># 相比生成式生成器不占用存储数据的空间</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(val)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">yield</span>：生成函数</span><br></pre></td></tr></table></figure>\n<p><code>元组</code></p>\n<blockquote>\n<p>元组在创建时间和占用的空间上面都优于列表</p>\n</blockquote>\n<p><code>集合</code></p>\n<p><code>字典</code></p>\n<p><code>序列的抽象基类</code></p>\n<p><code>MutavleSequence:可变序列抽象基类(setitem,delitem)</code><br />\n<code>Sequence:不可变序列抽象基类</code></p>\n<p><strong>+,+=,extend区别</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># +=实际上是调用了extend方法</span></span><br><span class=\"line\"><span class=\"comment\"># +=返回的本身,在原地址上修改</span></span><br><span class=\"line\"><span class=\"comment\"># a=a+ 会返回一个新对象</span></span><br><span class=\"line\"><span class=\"comment\"># append会把参数当成一个对象加进去</span></span><br><span class=\"line\"><span class=\"comment\"># extend参数必须是可迭代对象,一个个加进去</span></span><br><span class=\"line\">a=[<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(a))</span><br><span class=\"line\"></span><br><span class=\"line\">a.extend((<span class=\"number\">777</span>,))</span><br><span class=\"line\">a+=[<span class=\"number\">666</span>]</span><br><span class=\"line\"><span class=\"comment\"># 报错</span></span><br><span class=\"line\"><span class=\"comment\"># a+=(777)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(a))</span><br><span class=\"line\"></span><br><span class=\"line\">a=a+[<span class=\"number\">666</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(a))</span><br><span class=\"line\"></span><br><span class=\"line\">a.append([<span class=\"number\">666</span>,<span class=\"number\">777</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(a))</span><br><span class=\"line\"><span class=\"comment\"># 2358526812672</span></span><br><span class=\"line\"><span class=\"comment\"># 2358526812672</span></span><br><span class=\"line\"><span class=\"comment\"># 2358526332032</span></span><br><span class=\"line\"><span class=\"comment\"># 2358526332032</span></span><br></pre></td></tr></table></figure>\n<p><code>可切片对象</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">alist[<span class=\"built_in\">len</span>(alist):]=[<span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"comment\"># 末尾追加元素</span></span><br><span class=\"line\">alist[:<span class=\"number\">0</span>]=[<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"comment\"># 开头追加元素</span></span><br><span class=\"line\">alist[<span class=\"number\">3</span>:<span class=\"number\">3</span>]=[<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"comment\"># 索引位置追加元素</span></span><br><span class=\"line\"><span class=\"comment\"># 结束位置大于长度会返回长度</span></span><br><span class=\"line\"><span class=\"comment\"># 开始位置大于长度会返回空列表</span></span><br><span class=\"line\"><span class=\"comment\"># 切片赋值长度必须相等</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第八天-面向对象编程基础\"><a class=\"markdownIt-Anchor\" href=\"#第八天-面向对象编程基础\"></a> 第八天-面向对象编程基础</h3>\n<p><a href=\"https://blog.csdn.net/jackfrued/article/details/79521404\">python三个知识点:is和==,嵌套列表,类的私有属性</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.类的私有属性可以在属性名前面加两个下划线</span></span><br><span class=\"line\"><span class=\"comment\"># __len__不是私有成员,因为后面也有__</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, foo</span>):</span><br><span class=\"line\">        self.__foo = foo</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__bar</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(self.__foo)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;__bar&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    test = Test(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># AttributeError: &#x27;Test&#x27; object has no attribute &#x27;__bar&#x27;</span></span><br><span class=\"line\">    test.__bar()</span><br><span class=\"line\">    <span class=\"comment\"># AttributeError: &#x27;Test&#x27; object has no attribute &#x27;__foo&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(test.__foo)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    test = Test(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">    test._Test__bar()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(test._Test__foo)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.Python并没有从语法上严格保证私有属性或方法的私密性，它只是给私有的属性和方法换了一个名字来妨碍对它们的访问,更换名字的规则仍然可以访问到它们</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"第九天-面向对象进阶\"><a class=\"markdownIt-Anchor\" href=\"#第九天-面向对象进阶\"></a> 第九天-面向对象进阶</h3>\n<blockquote>\n<p>class用于声明一个类,用type创建类<br />\nobject是所有类的父类，所有类是type的实例</p>\n</blockquote>\n<p><code>类的属性</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.@property装饰器</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, age</span>):</span><br><span class=\"line\">        self._name = name</span><br><span class=\"line\">        self._age = age</span><br><span class=\"line\">    <span class=\"comment\"># 访问器 - getter方法</span></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">name</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._name</span><br><span class=\"line\">    <span class=\"comment\"># 访问器 - getter方法</span></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">age</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._age</span><br><span class=\"line\">    <span class=\"comment\"># 修改器 - setter方法</span></span><br><span class=\"line\"><span class=\"meta\">    @age.setter</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">age</span>(<span class=\"params\">self, age</span>):</span><br><span class=\"line\">        self._age = age</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 属性名字和@property修饰的方法名字不能一样,不然会死循环</span></span><br><span class=\"line\"><span class=\"comment\"># 把一个getter方法变成属性，只需要加上@property就可以了</span></span><br><span class=\"line\"><span class=\"comment\"># @property本身又创建了另一个装饰器@score.setter，负责把一个setter方法变成属性赋值</span></span><br><span class=\"line\"><span class=\"comment\"># 上面name是只读属性,age是读写属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.__slots__魔法 ,只有slots内的属性才能被添加,对子类没有用,如果子类有,就是父类和子类的并集</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 限定Person对象只能绑定_name, _age和_gender属性</span></span><br><span class=\"line\">    __slots__ = (<span class=\"string\">&#x27;_name&#x27;</span>, <span class=\"string\">&#x27;_age&#x27;</span>, <span class=\"string\">&#x27;_gender&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, age</span>):</span><br><span class=\"line\">        self._name = name</span><br><span class=\"line\">        self._age = age</span><br><span class=\"line\">        <span class=\"comment\"># 会报错</span></span><br><span class=\"line\">        <span class=\"comment\"># self.hhhh=666</span></span><br><span class=\"line\">Person._gender = <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 这样能绑定?</span></span><br><span class=\"line\">Person.sex = <span class=\"string\">&#x27;?&#x27;</span></span><br><span class=\"line\">person = Person(<span class=\"string\">&#x27;王大锤&#x27;</span>, <span class=\"number\">22</span>)</span><br><span class=\"line\"><span class=\"comment\"># 这样会报错,但是加上Person._sex = &#x27;?&#x27; 就变成了只读,不能修改</span></span><br><span class=\"line\">person.sex=<span class=\"number\">66</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>类的方法</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.静态方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># @staticmethod修饰,不用self,和C++类似</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.类方法</span></span><br><span class=\"line\"><span class=\"comment\"># @classmethod修饰,默认传递了cls参数,调用类本身,</span></span><br><span class=\"line\"><span class=\"meta\">@classmethod</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">now</span>(<span class=\"params\">cls</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(cls)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.实例方法</span></span><br><span class=\"line\"><span class=\"comment\"># self 就是实例本身</span></span><br></pre></td></tr></table></figure>\n<p><code>继承和多态</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，这个动作称之为方法重写（override）。通过方法重写我们可以让父类的同一个行为在子类中拥有不同的实现版本，当我们调用这个经过子类重写的方法时，不同的子类对象会表现出不同的行为，这个就是多态</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> abc <span class=\"keyword\">import</span> ABCMeta, abstractmethod</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pet</span>(<span class=\"built_in\">object</span>, metaclass=ABCMeta):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, nickname</span>):</span><br><span class=\"line\">        self._nickname = nickname</span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">make_voice</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>定制类-魔法函数(不是继承,python自带)</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># __str__打印输出变成自定义字符串</span></span><br><span class=\"line\"><span class=\"comment\"># __repr__ 直接调用类时打印(jupyter)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;6666&#x27;</span></span><br><span class=\"line\">__repr__ = __str__</span><br><span class=\"line\"><span class=\"comment\"># __iter__可用for循环迭代</span></span><br><span class=\"line\"><span class=\"comment\"># __next__去下一个对象</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Fib</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.a, self.b = <span class=\"number\">0</span>, <span class=\"number\">1</span> <span class=\"comment\"># 初始化两个计数器a，b</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self <span class=\"comment\"># 实例本身就是迭代对象，故返回自己</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__next__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.a, self.b = self.b, self.a + self.b <span class=\"comment\"># 计算下一个值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.a &gt; <span class=\"number\">100000</span>: <span class=\"comment\"># 退出循环的条件</span></span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StopIteration()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.a <span class=\"comment\"># 返回下一个值</span></span><br><span class=\"line\"><span class=\"comment\"># __getitem__像列表一样取值  也可以改成字典形式 也可以用for循环</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(n, <span class=\"built_in\">int</span>): <span class=\"comment\"># n是索引</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(n, <span class=\"built_in\">slice</span>): <span class=\"comment\"># n是切片</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果这个对象被for时，会首先调用__iter__方法返回一个iterator,然后再对这个iterator循环调用__next__方法，直到碰到StopIteration时则停止退出。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果for的对象没有__iter__方法，则无法获得一个迭代器，那么就会报错，但是，如果这个类实现了__getitem__方法，会从0开始依次读取相应的下标，直到发生IndexError为止</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># __iter__是优先读取的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># __getattr__获取类的属性,已经定义的属性不会调用,使用没有定义的属性才会调用</span></span><br><span class=\"line\"><span class=\"comment\"># __call__ 可以直接对实例进行调用</span></span><br><span class=\"line\"><span class=\"comment\"># __bases__查看父类</span></span><br><span class=\"line\"><span class=\"comment\"># __enter__ with进入</span></span><br><span class=\"line\"><span class=\"comment\"># __exit__with退出</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sample</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__enter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>( <span class=\"string\">&quot;enter&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__exit__</span>(<span class=\"params\">self, exc_type,exc_val,exc_tb</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span> ( <span class=\"string\">&quot;exit&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">do_something</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span> ( <span class=\"string\">&quot;doing something&quot;</span> )</span><br><span class=\"line\"><span class=\"keyword\">with</span> Sample() <span class=\"keyword\">as</span> sample:</span><br><span class=\"line\">    sample.do_something()</span><br><span class=\"line\"><span class=\"comment\"># @contextlib.contextmanger </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># __dict__与dir()的区别：</span></span><br><span class=\"line\"><span class=\"comment\"># dir()是一个函数，返回的是list；</span></span><br><span class=\"line\"><span class=\"comment\"># __dict__是一个字典，键为属性名，值为属性值(类和实例不一样,可以通过修改这个增加属性)；</span></span><br><span class=\"line\"><span class=\"comment\"># dir()用来寻找一个对象的所有属性，包括__dict__中的属性，__dict__是dir()的子集；</span></span><br></pre></td></tr></table></figure>\n<p><code>如果要获得一个对象的所有属性和方法，可以使用dir()函数</code></p>\n<p><code>dir('abc')</code></p>\n<h3 id=\"第十天-图形用户界面和游戏开发\"><a class=\"markdownIt-Anchor\" href=\"#第十天-图形用户界面和游戏开发\"></a> 第十天-图形用户界面和游戏开发</h3>\n<p>–</p>\n<h3 id=\"第十一天-文件和异常\"><a class=\"markdownIt-Anchor\" href=\"#第十一天-文件和异常\"></a> 第十一天-文件和异常</h3>\n<p>–</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.json</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"comment\"># 字符串处理</span></span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;name&#x27;</span> : <span class=\"string\">&#x27;ACME&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;shares&#x27;</span> : <span class=\"number\">100</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;price&#x27;</span> : <span class=\"number\">542.23</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">json_str = json.dumps(data)</span><br><span class=\"line\">data = json.loads(json_str)</span><br><span class=\"line\"><span class=\"comment\"># 文件处理</span></span><br><span class=\"line\"><span class=\"comment\">#  Writing JSON data</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;data.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    json.dump(data, f)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Reading data back</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;data.json&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    data = json.load(f)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.异常</span></span><br><span class=\"line\"><span class=\"comment\"># 1.except语句不是必须的，finally语句也不是必须的，但是二者必须要有一个，否则就没有try的意义了。</span></span><br><span class=\"line\"><span class=\"comment\"># 2.except语句可以有多个，Python会按except语句的顺序依次匹配你指定的异常，如果异常已经处理就不会再进入后面的except语句。</span></span><br><span class=\"line\"><span class=\"comment\"># 3.except语句可以以元组形式同时指定多个异常，参见实例代码。</span></span><br><span class=\"line\"><span class=\"comment\"># 4.except语句后面如果不指定异常类型，则默认捕获所有异常，你可以通过logging或者sys模块获取当前异常。</span></span><br><span class=\"line\"><span class=\"comment\"># 5.如果要捕获异常后要重复抛出，请使用raise，后面不要带任何参数或信息。</span></span><br><span class=\"line\"><span class=\"comment\"># 6.不建议捕获并抛出同一个异常，请考虑重构你的代码。</span></span><br><span class=\"line\"><span class=\"comment\"># 7.不建议在不清楚逻辑的情况下捕获所有异常，有可能你隐藏了很严重的问题。</span></span><br><span class=\"line\"><span class=\"comment\"># 8.尽量使用内置的异常处理语句来替换try/except语句，比如with语句，getattr()方法。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第十二天-字符串和正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#第十二天-字符串和正则表达式\"></a> 第十二天-字符串和正则表达式</h3>\n<p><a href=\"https://regexlearn.com/zh-cn/learn/regex101\">正则表达式练习</a><br />\n<a href=\"https://www.runoob.com/regexp/regexp-syntax.html\">正则表达式规则</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># re模块处理</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pattern:r&#x27;自己写的表达式&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># str:待匹配字符串</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>compile(pattern, flags=0)</td>\n<td>编译正则表达式返回正则表达式对象</td>\n</tr>\n<tr>\n<td>match(pattern, string, flags=0)</td>\n<td>用正则表达式匹配字符串 成功返回匹配对象 否则返回None</td>\n</tr>\n<tr>\n<td>search(pattern, string, flags=0)</td>\n<td>搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None</td>\n</tr>\n<tr>\n<td>split(pattern, string, maxsplit=0, flags=0)</td>\n<td>用正则表达式指定的模式分隔符拆分字符串 返回列表</td>\n</tr>\n<tr>\n<td>sub(pattern, repl, string, count=0, flags=0)</td>\n<td>用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数</td>\n</tr>\n<tr>\n<td>fullmatch(pattern, string, flags=0)</td>\n<td>match函数的完全匹配（从字符串开头到结尾）版本</td>\n</tr>\n<tr>\n<td>findall(pattern, string, flags=0)</td>\n<td>查找字符串所有与正则表达式匹配的模式 返回字符串的列表</td>\n</tr>\n<tr>\n<td>finditer(pattern, string, flags=0)</td>\n<td>查找字符串所有与正则表达式匹配的模式 返回一个迭代器</td>\n</tr>\n<tr>\n<td>purge()</td>\n<td>清除隐式编译的正则表达式的缓存</td>\n</tr>\n<tr>\n<td>re.I / re.IGNORECASE</td>\n<td>忽略大小写匹配标记</td>\n</tr>\n<tr>\n<td>re.M / re.MULTILINE</td>\n<td>多行匹配标记</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"第十三天-进程和线程\"><a class=\"markdownIt-Anchor\" href=\"#第十三天-进程和线程\"></a> 第十三天-进程和线程</h3>\n<blockquote>\n<p>进程线程知识参考操作系统</p>\n</blockquote>\n<p><code>多进程</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Unix和Linux操作系统上提供了 `fork()`系统调用来创建进程，调用 `fork()`函数的是父进程，创建出的是子进程</span></span><br><span class=\"line\"><span class=\"comment\"># Windows没有fork调用</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Process</span><br><span class=\"line\"><span class=\"keyword\">from</span> os <span class=\"keyword\">import</span> getpid</span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randint</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> time, sleep</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">download_task</span>(<span class=\"params\">filename</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;启动下载进程，进程号[%d].&#x27;</span> % getpid())</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;开始下载%s...&#x27;</span> % filename)</span><br><span class=\"line\">    time_to_download = randint(<span class=\"number\">5</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">    sleep(time_to_download)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;%s下载完成! 耗费了%d秒&#x27;</span> % (filename, time_to_download))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    start = time()</span><br><span class=\"line\">    p1 = Process(target=download_task, args=(<span class=\"string\">&#x27;Python从入门到住院.pdf&#x27;</span>, ))</span><br><span class=\"line\">    p1.start()</span><br><span class=\"line\">    p2 = Process(target=download_task, args=(<span class=\"string\">&#x27;Peking Hot.avi&#x27;</span>, ))</span><br><span class=\"line\">    p2.start()</span><br><span class=\"line\">    p1.join()</span><br><span class=\"line\">    p2.join()</span><br><span class=\"line\">    end = time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;总共耗费了%.2f秒.&#x27;</span> % (end - start))</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进程池</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    start = time()</span><br><span class=\"line\">    p = Pool(<span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 这里进程池有四个进程但是用了五个任务</span></span><br><span class=\"line\">    <span class=\"comment\"># task 0，1，2，3是立刻执行的，而task 4要等待前面某个task完成后才执行</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">        p.apply_async(download_task, args=(i,))</span><br><span class=\"line\">    p.close()</span><br><span class=\"line\">    p.join()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;总共耗费了%.2f秒.&#x27;</span> % (end - start))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进程通信</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Process, Queue</span><br><span class=\"line\"><span class=\"keyword\">import</span> os, time, random</span><br><span class=\"line\"><span class=\"comment\"># 写数据进程执行的代码:</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">write</span>(<span class=\"params\">q</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Process to write: %s&#x27;</span> % os.getpid())</span><br><span class=\"line\">    <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>]:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Put %s to queue...&#x27;</span> % value)</span><br><span class=\"line\">        q.put(value)</span><br><span class=\"line\">        time.sleep(random.random())</span><br><span class=\"line\"><span class=\"comment\"># 读数据进程执行的代码:</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">read</span>(<span class=\"params\">q</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Process to read: %s&#x27;</span> % os.getpid())</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        value = q.get(<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Get %s from queue.&#x27;</span> % value)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 父进程创建Queue，并传给各个子进程：</span></span><br><span class=\"line\">    q = Queue()</span><br><span class=\"line\">    pw = Process(target=write, args=(q,))</span><br><span class=\"line\">    pr = Process(target=read, args=(q,))</span><br><span class=\"line\">    <span class=\"comment\"># 启动子进程pw，写入:</span></span><br><span class=\"line\">    pw.start()</span><br><span class=\"line\">    <span class=\"comment\"># 启动子进程pr，读取:</span></span><br><span class=\"line\">    pr.start()</span><br><span class=\"line\">    <span class=\"comment\"># 等待pw结束:</span></span><br><span class=\"line\">    pw.join()</span><br><span class=\"line\">    <span class=\"comment\"># pr进程里是死循环，无法等待其结束，只能强行终止:</span></span><br><span class=\"line\">    pr.terminate()</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">Process to write: 50563</span></span><br><span class=\"line\"><span class=\"string\">Put A to queue...</span></span><br><span class=\"line\"><span class=\"string\">Process to read: 50564</span></span><br><span class=\"line\"><span class=\"string\">Get A from queue.</span></span><br><span class=\"line\"><span class=\"string\">Put B to queue...</span></span><br><span class=\"line\"><span class=\"string\">Get B from queue.</span></span><br><span class=\"line\"><span class=\"string\">Put C to queue...</span></span><br><span class=\"line\"><span class=\"string\">Get C from queue.</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><code>多线程</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randint</span><br><span class=\"line\"><span class=\"comment\"># 在Python早期的版本中就引入了thread模块（现在名为_thread）来实现多线程编程，然而该模块过于底层，而且很多功能都没有提供</span></span><br><span class=\"line\"><span class=\"comment\"># 因此目前的多线程开发我们推荐使用threading模块，该模块对多线程编程提供了更好的面向对象的封装。</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> time, sleep</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">download</span>(<span class=\"params\">filename</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;开始下载%s...&#x27;</span> % filename)</span><br><span class=\"line\">    time_to_download = randint(<span class=\"number\">5</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">    sleep(time_to_download)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;%s下载完成! 耗费了%d秒&#x27;</span> % (filename, time_to_download))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    start = time()</span><br><span class=\"line\">    t1 = Thread(target=download, args=(<span class=\"string\">&#x27;Python从入门到住院.pdf&#x27;</span>,))</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2 = Thread(target=download, args=(<span class=\"string\">&#x27;Peking Hot.avi&#x27;</span>,))</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br><span class=\"line\">    end = time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;总共耗费了%.3f秒&#x27;</span> % (end - start))</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 继承 `Thread`类的方式来创建自定义的线程类</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randint</span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> time, sleep</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadTask</span>(<span class=\"title class_ inherited__\">Thread</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, filename</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 可以穿name给线程命名</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        self._filename = filename</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;开始下载%s...&#x27;</span> % self._filename)</span><br><span class=\"line\">        time_to_download = randint(<span class=\"number\">5</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">        sleep(time_to_download)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;%s下载完成! 耗费了%d秒&#x27;</span> % (self._filename, time_to_download))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    start = time()</span><br><span class=\"line\">    t1 = DownloadTask(<span class=\"string\">&#x27;Python从入门到住院.pdf&#x27;</span>)</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2 = DownloadTask(<span class=\"string\">&#x27;Peking Hot.avi&#x27;</span>)</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br><span class=\"line\">    end = time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;总共耗费了%.2f秒.&#x27;</span> % (end - start))</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 线程上锁</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep</span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread, Lock</span><br><span class=\"line\"><span class=\"comment\"># RLock 可重用锁,同一线程中可以多次调用acquire,但是release要调用一样的次数</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Account</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self._balance = <span class=\"number\">0</span></span><br><span class=\"line\">        self._lock = Lock()</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">deposit</span>(<span class=\"params\">self, money</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 先获取锁才能执行后续的代码</span></span><br><span class=\"line\">        self._lock.acquire()</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            new_balance = self._balance + money</span><br><span class=\"line\">            sleep(<span class=\"number\">0.01</span>)</span><br><span class=\"line\">            self._balance = new_balance</span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 在finally中执行释放锁的操作保证正常异常锁都能释放</span></span><br><span class=\"line\">            self._lock.release()</span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">balance</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._balance</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AddMoneyThread</span>(<span class=\"title class_ inherited__\">Thread</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, account, money</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        self._account = account</span><br><span class=\"line\">        self._money = money</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self._account.deposit(self._money)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    account = Account()</span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">        t = AddMoneyThread(account, <span class=\"number\">1</span>)</span><br><span class=\"line\">        threads.append(t)</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> threads:</span><br><span class=\"line\">        t.join()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;账户余额为: ￥%d元&#x27;</span> % account.balance)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 线程通信</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> queue <span class=\"keyword\">import</span> Queue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># queue.Queue：这是一个线程安全的队列，可以被用来在线程之间传递数据。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># queue.LifoQueue：这是一个线程安全的栈，可以被用来在线程之间传递数据。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># queue.PriorityQueue：这是一个线程安全的优先队列，可以被用来在线程之间传递数据。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># collections.deque：这是一个线程安全的双端队列，可以被用来在线程之间传递数据。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># multiprocessing.Queue：这是一个线程安全的队列，可以被用来在进程之间传递数据。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"第十四天-网络编程入门和网络应用开发\"><a class=\"markdownIt-Anchor\" href=\"#第十四天-网络编程入门和网络应用开发\"></a> 第十四天-网络编程入门和网络应用开发</h3>\n<blockquote>\n<p>计算机网络基础知识补充</p>\n</blockquote>\n<p><code>发邮件</code></p>\n<p><code>发短信</code></p>\n<p><code>网络服务</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 多线程网络服务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 服务器端</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> socket, SOCK_STREAM, AF_INET</span><br><span class=\"line\"><span class=\"keyword\">from</span> base64 <span class=\"keyword\">import</span> b64encode</span><br><span class=\"line\"><span class=\"keyword\">from</span> json <span class=\"keyword\">import</span> dumps</span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 自定义线程类</span></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">FileTransferHandler</span>(<span class=\"title class_ inherited__\">Thread</span>):</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, cclient</span>):</span><br><span class=\"line\">            <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">            self.cclient = cclient</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">            my_dict = &#123;&#125;</span><br><span class=\"line\">            my_dict[<span class=\"string\">&#x27;filename&#x27;</span>] = <span class=\"string\">&#x27;guido.jpg&#x27;</span></span><br><span class=\"line\">            <span class=\"comment\"># JSON是纯文本不能携带二进制数据</span></span><br><span class=\"line\">            <span class=\"comment\"># 所以图片的二进制数据要处理成base64编码</span></span><br><span class=\"line\">            my_dict[<span class=\"string\">&#x27;filedata&#x27;</span>] = data</span><br><span class=\"line\">            <span class=\"comment\"># 通过dumps函数将字典处理成JSON字符串</span></span><br><span class=\"line\">            json_str = dumps(my_dict)</span><br><span class=\"line\">            <span class=\"comment\"># 发送JSON字符串</span></span><br><span class=\"line\">            self.cclient.send(json_str.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">            self.cclient.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 1.创建套接字对象并指定使用哪种传输服务</span></span><br><span class=\"line\">    server = socket()</span><br><span class=\"line\">    <span class=\"comment\"># 2.绑定IP地址和端口(区分不同的服务)</span></span><br><span class=\"line\">    server.bind((<span class=\"string\">&#x27;192.168.1.2&#x27;</span>, <span class=\"number\">5566</span>))</span><br><span class=\"line\">    <span class=\"comment\"># 3.开启监听 - 监听客户端连接到服务器</span></span><br><span class=\"line\">    server.listen(<span class=\"number\">512</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;服务器启动开始监听...&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;guido.jpg&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"comment\"># 将二进制数据处理成base64再解码成字符串</span></span><br><span class=\"line\">        data = b64encode(f.read()).decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        client, addr = server.accept()</span><br><span class=\"line\">        <span class=\"comment\"># 启动一个线程来处理客户端的请求</span></span><br><span class=\"line\">        FileTransferHandler(client).start()</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">from</span> json <span class=\"keyword\">import</span> loads</span><br><span class=\"line\"><span class=\"keyword\">from</span> base64 <span class=\"keyword\">import</span> b64decode</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    client = socket()</span><br><span class=\"line\">    client.connect((<span class=\"string\">&#x27;192.168.1.2&#x27;</span>, <span class=\"number\">5566</span>))</span><br><span class=\"line\">    <span class=\"comment\"># 定义一个保存二进制数据的对象</span></span><br><span class=\"line\">    in_data = <span class=\"built_in\">bytes</span>()</span><br><span class=\"line\">    <span class=\"comment\"># 由于不知道服务器发送的数据有多大每次接收1024字节</span></span><br><span class=\"line\">    data = client.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> data:</span><br><span class=\"line\">        <span class=\"comment\"># 将收到的数据拼接起来</span></span><br><span class=\"line\">        in_data += data</span><br><span class=\"line\">        data = client.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 将收到的二进制数据解码成JSON字符串并转换成字典</span></span><br><span class=\"line\">    <span class=\"comment\"># loads函数的作用就是将JSON字符串转成字典对象</span></span><br><span class=\"line\">    my_dict = loads(in_data.decode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">    filename = my_dict[<span class=\"string\">&#x27;filename&#x27;</span>]</span><br><span class=\"line\">    filedata = my_dict[<span class=\"string\">&#x27;filedata&#x27;</span>].encode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;/Users/Hao/&#x27;</span> + filename, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"comment\"># 将base64格式的数据解码成二进制数据并写入文件</span></span><br><span class=\"line\">        f.write(b64decode(filedata))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;图片已保存.&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<h3 id=\"第十五天-图像和办公文档处理\"><a class=\"markdownIt-Anchor\" href=\"#第十五天-图像和办公文档处理\"></a> 第十五天-图像和办公文档处理</h3>\n<p><code>图像</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./res/guido.jpg&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image.<span class=\"built_in\">format</span>, image.size, image.mode</span><br><span class=\"line\">(<span class=\"string\">&#x27;JPEG&#x27;</span>, (<span class=\"number\">500</span>, <span class=\"number\">750</span>), <span class=\"string\">&#x27;RGB&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 裁剪图像</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./res/guido.jpg&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rect = <span class=\"number\">80</span>, <span class=\"number\">20</span>, <span class=\"number\">310</span>, <span class=\"number\">360</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image.crop(rect).show()</span><br><span class=\"line\"><span class=\"comment\"># 略缩图</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./res/guido.jpg&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>size = <span class=\"number\">128</span>, <span class=\"number\">128</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image.thumbnail(size)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image.show()</span><br><span class=\"line\"><span class=\"comment\"># 缩放粘贴图像</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image1 = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./res/luohao.png&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image2 = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./res/guido.jpg&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rect = <span class=\"number\">80</span>, <span class=\"number\">20</span>, <span class=\"number\">310</span>, <span class=\"number\">360</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>guido_head = image2.crop(rect)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>width, height = guido_head.size</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image1.paste(guido_head.resize((<span class=\"built_in\">int</span>(width / <span class=\"number\">1.5</span>), <span class=\"built_in\">int</span>(height / <span class=\"number\">1.5</span>))), (<span class=\"number\">172</span>, <span class=\"number\">40</span>))</span><br><span class=\"line\"><span class=\"comment\"># 旋转和反转</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./res/guido.png&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image.rotate(<span class=\"number\">180</span>).show()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image.transpose(Image.FLIP_LEFT_RIGHT).show()</span><br><span class=\"line\"><span class=\"comment\"># 操作像素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./res/guido.jpg&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">80</span>, <span class=\"number\">310</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>, <span class=\"number\">360</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>        image.putpixel((x, y), (<span class=\"number\">128</span>, <span class=\"number\">128</span>, <span class=\"number\">128</span>))</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image.show()</span><br><span class=\"line\"><span class=\"comment\"># 滤镜</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageFilter</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./res/guido.jpg&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image.<span class=\"built_in\">filter</span>(ImageFilter.CONTOUR).show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>Excel</code></p>\n<p><code>Word</code></p>\n<h3 id=\"b站视频总结\"><a class=\"markdownIt-Anchor\" href=\"#b站视频总结\"></a> B站视频总结</h3>\n<p><code>元类编程</code><br />\n<strong>元类:创建类的类</strong></p>\n<h4 id=\"1动态属性\"><a class=\"markdownIt-Anchor\" href=\"#1动态属性\"></a> 1.动态属性</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#get</span></span><br><span class=\"line\"><span class=\"meta\">@property修饰</span></span><br><span class=\"line\"><span class=\"comment\">#set</span></span><br><span class=\"line\"><span class=\"meta\">@aaa.setter</span></span><br><span class=\"line\"><span class=\"comment\">#查找不到进入</span></span><br><span class=\"line\">__getattr__</span><br><span class=\"line\"><span class=\"comment\">#先进入这个</span></span><br><span class=\"line\">__getattribute__</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">getattr</span>(类,属性)==类.属性</span><br></pre></td></tr></table></figure>\n<h4 id=\"2属性描述符\"><a class=\"markdownIt-Anchor\" href=\"#2属性描述符\"></a> 2.属性描述符</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数据描述符</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">IntField</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__get__</span>(<span class=\"params\"> self, instance，owner</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.value</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__set__</span>(<span class=\"params\">self, instance, value</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">isinstance</span>(value, numbers.Integral):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError( <span class=\"string\">&quot;int value need&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> value &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError( <span class=\"string\">&quot;positive value need&quot;</span>)</span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__delete__</span>(<span class=\"params\">self, instance</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 自定义类型检测</span></span><br><span class=\"line\">    age = IntField()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"3类属性取值过程\"><a class=\"markdownIt-Anchor\" href=\"#3类属性取值过程\"></a> 3.类属性取值过程</h4>\n<blockquote>\n<p>如果user是某个类的实例，那么user.age（以及等价的getattr(user, ‘age’))首先调用__getattribute__。如果类定义了_getattr_方法，<br />\n那么在_getattribute__抛出 AttributeError的时候就会调用到_getattr_,而对于描述符(<strong>get</strong>)的调用，则是发生在__getattribute__内部的。</p>\n</blockquote>\n<p>user = User()，那么user.age顺序如下:</p>\n<p>(1) 如果&quot;age”是出现在user或其基类的__dict__中，且age是data descriptor，那么调用其__get__方法 ,否则</p>\n<p>(2) 如果&quot;age&quot;出现在obj的__dict__中，那么直接返回 obj.<strong>dict</strong>[ ‘age’]，否则</p>\n<p>(3) 如果&quot;age&quot;出现在User或其基类的__dict__中</p>\n<p>(3.1) 如果age是non-data descriptor，那么调用其__get__方法，否则<br />\n(3.2) 返回__dict__[ ‘age’]</p>\n<p>(4) 如果User有__getattr__方法，调用__getattr__方法，否则</p>\n<p>(5) 抛出AttributeError</p>\n<h4 id=\"4__new__和__init__区别\"><a class=\"markdownIt-Anchor\" href=\"#4__new__和__init__区别\"></a> 4.__new__和__init__区别</h4>\n<p>new传的类本身</p>\n<p>init传的对象实例</p>\n<p>先进new后进init</p>\n<p>new不返回对象,不会进init</p>\n<h4 id=\"5type动态创建类\"><a class=\"markdownIt-Anchor\" href=\"#5type动态创建类\"></a> 5.type动态创建类</h4>\n<p>type(“类名”,(父类),{属性,函数})</p>\n<p><strong>控制类的创建过程</strong><br />\nclass user(metaclass=自定义元类)</p>\n<p><strong>元类编程-&gt;封装</strong></p>\n<h4 id=\"6可迭代迭代器生成器\"><a class=\"markdownIt-Anchor\" href=\"#6可迭代迭代器生成器\"></a> 6.可迭代,迭代器,生成器</h4>\n<p>迭代器和迭代序列分离</p>\n<p><strong>iter</strong> 可迭代</p>\n<p><strong>next</strong> 迭代器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">company</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_init_</span>(<span class=\"params\">self, employee_list</span>):</span><br><span class=\"line\">        self.employee = employee_list</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_iter_</span>(<span class=\"params\"> self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MyIterator( self.employee)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyIterator</span>(<span class=\"title class_ inherited__\">Iterator</span> ) :</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_init_</span>(<span class=\"params\">self, employee_list</span>):</span><br><span class=\"line\">        self.iter_list = employee_listself.index = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span>  <span class=\"title function_\">inext_</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\">#真正返回迭代值的逻辑</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            word = self.iter_list[ self.index]</span><br><span class=\"line\">        <span class=\"keyword\">except</span> IndexError:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> stopIteration</span><br><span class=\"line\">        self.index +=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> word</span><br></pre></td></tr></table></figure>\n<p><code>生成器</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gen_fib</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    n,a,b = <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n&lt;index:</span><br><span class=\"line\">        yie1d b</span><br><span class=\"line\">        a,b = b,a+b</span><br><span class=\"line\">        n += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> gen_fib(<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (data)</span><br><span class=\"line\">I</span><br><span class=\"line\">PyGenObject</span><br><span class=\"line\">gi_frame</span><br><span class=\"line\">gi_code</span><br><span class=\"line\">会保存上一次执行的位置和代码</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>大文件读取</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">myreadlines</span>(<span class=\"params\">f, newline</span>) :buf = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">while</span> newline <span class=\"keyword\">in</span> buf:</span><br><span class=\"line\">        pos = buf.index( newline)</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> buf[:pos]</span><br><span class=\"line\">        buf = buf[pos + <span class=\"built_in\">len</span>(newline) : ]</span><br><span class=\"line\">    chunk = f.read(<span class=\"number\">4096</span>*<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> chunk :</span><br><span class=\"line\">        <span class=\"comment\"># 文件结尾</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> buf</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    buf += chunk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;input.txt&quot;</span> ) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> myreadlines(f，<span class=\"string\">&quot;&#123;&quot;</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span> (line)</span><br></pre></td></tr></table></figure>\n<h4 id=\"7socket编程\"><a class=\"markdownIt-Anchor\" href=\"#7socket编程\"></a> 7.socket编程</h4>\n<p>见网络编程</p>\n<h4 id=\"8多线程\"><a class=\"markdownIt-Anchor\" href=\"#8多线程\"></a> 8.多线程</h4>\n<p>1.GIL<br />\n全局解释器锁<br />\npython中一个线程对应c语言的一个线程<br />\ngil使得同一时刻只有一个线程运行在一个cpu上运行字节码<br />\n不能把多个线程映射到多个cpu上<br />\ngil会根据执行的字节码行数及时间片释放gil<br />\n遇见io操作也会主动释放(适合io频繁)</p>\n<p>2.线程同步,通信<br />\n<strong>多线程实现</strong><br />\n使用线程传递函数<br />\n继承多线程类,实现run<br />\n<strong>线程通信</strong><br />\n共享变量:不好<br />\nQueue:还有其他线程安全的数据结构<br />\n<strong>线程同步</strong><br />\nLock,RLock<br />\n<strong>Lock</strong>:获取两次就会死锁<br />\n<strong>RLock</strong>:允许多线程环境下多次acquire,但是release要一样的数量<br />\n<strong>condition</strong>:wait()和notify() 等待和唤醒<br />\n先等待才能唤醒<br />\n把waiter的锁放入一个双端队列<br />\nnotify把队列弹一个出来释放<br />\nwith condition 就是获取锁释放锁(默认RLock)<br />\nwith之后才能wait和notify,wait把condition的锁释放掉<br />\ncon’t wait on a un-acquire lock<br />\n<strong>Semaphore</strong>:用于控制进入数量的锁<br />\nthreading.Semaphore(3)</p>\n<p>3.线程池&amp;进程池<br />\nfrom concurrent import futures</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">executor = ThreadPoo1Executor(max_workers=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#通过submit函数提交执行的函数到线程池中,submit是立即返回</span></span><br><span class=\"line\">task1 = executor. submit(get_htm1,(<span class=\"number\">3</span>))</span><br><span class=\"line\">task2 = executor. submit(get_htm1,(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># done用于判断是否完成</span></span><br><span class=\"line\">task1.done()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># result获取函数返回结果</span></span><br><span class=\"line\">task1.result()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#要获取已经成功的task的返回</span></span><br><span class=\"line\">urls = [<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">all_task = [executor. submit(get_html,(url)) <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> urls]</span><br><span class=\"line\"><span class=\"comment\"># yield已经完成的线程</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> future <span class=\"keyword\">in</span> as_completed(all_task):</span><br><span class=\"line\">    data = future.result()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>( <span class=\"string\">&quot;get ipage success&quot;</span>.<span class=\"built_in\">format</span>(data))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#通过executor获取已经完成的task返回值,返回顺序一致</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> executor.<span class=\"built_in\">map</span>(get_html, urls):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>( <span class=\"string\">&quot;get &#123;fpage&quot;</span>.<span class=\"built_in\">format</span>(data))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 阻塞主线程,等全部还是等一个</span></span><br><span class=\"line\">wait()</span><br></pre></td></tr></table></figure>\n<hr />\n<p>进程适合计算密集<br />\n线程适合io密集</p>\n<p>父进程和子进程各有数据</p>\n<p>子进程会把创建进程下面的代码单独运行一遍</p>\n<p>ProcessPoolExecutor用的multiprocessing</p>\n<p>不能用queue.Queue<br />\n不能用共享变量</p>\n<p>from queue import Queue<br />\nfrom multiprocessing import Queue<br />\nfrom multiprocessing.Manager import Queue<br />\n#Manager 有很多数据结构<br />\npipe只能用于两个进程<br />\n性能高于Queue</p>\n<h4 id=\"9io复用\"><a class=\"markdownIt-Anchor\" href=\"#9io复用\"></a> 9.IO复用</h4>\n<p>并发<br />\n并发是指一个时间段内有几个程序在同一个cpu运行，但是任意时刻只有一个程序在cpu上运行<br />\n并行<br />\n并行是指任意时刻点上，有多个程序同时运行在多个cpu</p>\n<p>同步<br />\n同步是指代码调用IO操作时必须等待IO操作完成才返<br />\n回的调用方式。<br />\n异步<br />\n异步是指代码调用IO操作时，不必等IO操作完成就返回的调用方式。</p>\n<p>阻塞<br />\n阻塞是指调用函数时候当前线程被挂起。<br />\n非阻塞<br />\n非阻塞是指调用函数时候当前线程不会被挂起，而是立即返回。</p>\n<h4 id=\"10回调协程\"><a class=\"markdownIt-Anchor\" href=\"#10回调协程\"></a> 10.回调协程</h4>\n<h4 id=\"11asynch-await\"><a class=\"markdownIt-Anchor\" href=\"#11asynch-await\"></a> 11.asynch await</h4>\n<h4 id=\"12事件循环\"><a class=\"markdownIt-Anchor\" href=\"#12事件循环\"></a> 12.事件循环</h4>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 01-15python基础</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 16-20python进阶</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 21-30前端概述</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 31-35Linux</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 36-40MySQL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 41-55Django</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 56-60FaskAPI</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 61-65爬虫与并发编程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 66-80numpy&amp;pandas</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 81-90机器学习&amp;pytorch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 91-100项目</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"python100天学习1-15\"><a class=\"markdownIt-Anchor\" href=\"#python100天学习1-15\"></a> Python100天学习1-15</h2>\n<p><a href=\"https://github.com/jackfrued/Python-100-Days\">资料连接</a></p>\n<h3 id=\"第一天-初识python\"><a class=\"markdownIt-Anchor\" href=\"#第一天-初识python\"></a> 第一天-初识python</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. python历史</span></span><br><span class=\"line\"><span class=\"comment\"># 2. python优缺点</span></span><br><span class=\"line\"><span class=\"comment\"># 3. python安装</span></span><br><span class=\"line\"><span class=\"comment\"># 4. print的简单使用</span></span><br><span class=\"line\"><span class=\"comment\"># print函数可以输出多个值，多个值之间可以用 , 进行分隔，输出的内容之间默认以空格分开。</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你好&#x27;</span>, <span class=\"string\">&#x27;世界&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"string\">&#x27;world&#x27;</span>, sep=<span class=\"string\">&#x27;, &#x27;</span>, end=<span class=\"string\">&#x27;!&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;goodbye, world&#x27;</span>, end=<span class=\"string\">&#x27;!\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.turtle画国旗和佩奇</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第二天-语言元素\"><a class=\"markdownIt-Anchor\" href=\"#第二天-语言元素\"></a> 第二天-语言元素</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 程序,变量和类型</span></span><br><span class=\"line\"><span class=\"comment\"># 2. 变量命名原则</span></span><br><span class=\"line\"><span class=\"comment\"># 3. 类型转换</span></span><br><span class=\"line\"></span><br><span class=\"line\">- <span class=\"built_in\">chr</span>()：将整数转换成该编码对应的字符串（一个字符）。</span><br><span class=\"line\">- <span class=\"built_in\">ord</span>()：将字符串（一个字符）转换成对应的编码（整数）。</span><br><span class=\"line\">- <span class=\"built_in\">int</span>(): 将字符串表示的n进制数字转换为十进制表示</span><br><span class=\"line\">- <span class=\"built_in\">bin</span>(), <span class=\"built_in\">oct</span>(), <span class=\"built_in\">hex</span>(): 将十进制数字转为<span class=\"number\">2</span>/<span class=\"number\">8</span>/<span class=\"number\">16</span>进制字符串表示</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 运算符及其优先级</span></span><br></pre></td></tr></table></figure>\n<p><code># 3. 类型转换</code></p>\n<img src=\"https://image.yayan.xyz/20230212101043.png\" width = \"300\" height = \"300\" alt=\"类型转换\" align=\"center\" />\n<p><code># 4. 运算符及其优先级</code></p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>[]</code> <code>[:]</code></td>\n<td>下标，切片</td>\n</tr>\n<tr>\n<td><code>**</code></td>\n<td>指数</td>\n</tr>\n<tr>\n<td><code>~</code> <code>+</code> <code>-</code></td>\n<td>按位取反, 正负号</td>\n</tr>\n<tr>\n<td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td>\n<td>乘，除，模，整除</td>\n</tr>\n<tr>\n<td><code>+</code> <code>-</code></td>\n<td>加，减</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td>\n<td>右移，左移</td>\n</tr>\n<tr>\n<td><code>&amp;</code></td>\n<td>按位与</td>\n</tr>\n<tr>\n<td><code>^</code> <code>|</code></td>\n<td>按位异或，按位或</td>\n</tr>\n<tr>\n<td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td>\n<td>小于等于，小于，大于，大于等于</td>\n</tr>\n<tr>\n<td><code>==</code> <code>!=</code></td>\n<td>等于，不等于</td>\n</tr>\n<tr>\n<td><code>is</code>  <code>is not</code></td>\n<td>身份运算符</td>\n</tr>\n<tr>\n<td><code>in</code> <code>not in</code></td>\n<td>成员运算符</td>\n</tr>\n<tr>\n<td><code>not</code> <code>or</code> <code>and</code></td>\n<td>逻辑运算符</td>\n</tr>\n<tr>\n<td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code> <code>&amp;=</code> `</td>\n<td>=^=&gt;&gt;=&lt;&lt;=`</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>说明：</strong> 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。</p>\n</blockquote>\n<h3 id=\"第三天-分支结构\"><a class=\"markdownIt-Anchor\" href=\"#第三天-分支结构\"></a> 第三天-分支结构</h3>\n<p>–</p>\n<h3 id=\"第四天-循环结构\"><a class=\"markdownIt-Anchor\" href=\"#第四天-循环结构\"></a> 第四天-循环结构</h3>\n<p>–</p>\n<h3 id=\"第五天-构造程序逻辑\"><a class=\"markdownIt-Anchor\" href=\"#第五天-构造程序逻辑\"></a> 第五天-构造程序逻辑</h3>\n<p>–</p>\n<h3 id=\"第六天-函数和模块的使用\"><a class=\"markdownIt-Anchor\" href=\"#第六天-函数和模块的使用\"></a> 第六天-函数和模块的使用</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.可变参数</span></span><br><span class=\"line\">可变参数允许传入<span class=\"number\">0</span>个或任意个参数，这些可变参数在函数调用时自动组装为一个<span class=\"built_in\">tuple</span>。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.关键字参数</span></span><br><span class=\"line\">关键字参数允许传入<span class=\"number\">0</span>个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个<span class=\"built_in\">dict</span>。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.导入模块</span></span><br><span class=\"line\">如果导入的模块除了定义函数之外还有可以执行代码，那么Python解释器在导入这个模块时就会执行这些代码</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.变量作用域</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 这里声明的变量属于全局作用域</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">a</span>():</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">b</span>():</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 这里修改全局变量需要声明global</span></span><br><span class=\"line\">        <span class=\"comment\"># 这里修改a函数里面的变量需要声明nonlocal</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 仅仅使用不需要声明</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 如果没有全局变量但是声明了,会新建一个全局变量</span></span><br><span class=\"line\">        <span class=\"comment\"># 如果没有nonlocal但是声明了，会报错</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"第七天-字符串和常用数据结构\"><a class=\"markdownIt-Anchor\" href=\"#第七天-字符串和常用数据结构\"></a> 第七天-字符串和常用数据结构</h3>\n<p><code>字符串函数</code></p>\n<p><strong>可以使用*复制字符串</strong></p>\n<blockquote>\n<p>因此a=[[0] * 3]*5  a里面的list都是同一个地址,修改一个就会修改全部<br />\n但是[0] * 3 数字是直接存的对象  修改这个就是直接换了个对象 不糊修改对象的内容</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = <span class=\"string\">&#x27;hello, world!&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 通过内置函数len计算字符串的长度</span></span><br><span class=\"line\"><span class=\"comment\"># len()  复杂度为O(1)  调用__len__</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(str1)) <span class=\"comment\"># 13</span></span><br><span class=\"line\"><span class=\"comment\"># 获得字符串首字母大写的拷贝</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.capitalize()) <span class=\"comment\"># Hello, world!</span></span><br><span class=\"line\"><span class=\"comment\"># 获得字符串每个单词首字母大写的拷贝</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.title()) <span class=\"comment\"># Hello, World!</span></span><br><span class=\"line\"><span class=\"comment\"># 获得字符串变大写后的拷贝</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.upper()) <span class=\"comment\"># HELLO, WORLD!</span></span><br><span class=\"line\"><span class=\"comment\"># 从字符串中查找子串所在位置,rfind 最后一次出现的位置</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.find(<span class=\"string\">&#x27;or&#x27;</span>)) <span class=\"comment\"># 8</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.find(<span class=\"string\">&#x27;shit&#x27;</span>)) <span class=\"comment\"># -1</span></span><br><span class=\"line\"><span class=\"comment\"># 与find类似但找不到子串时会引发异常 rindex最后一次出现的位置</span></span><br><span class=\"line\"><span class=\"comment\"># print(str1.index(&#x27;or&#x27;))</span></span><br><span class=\"line\"><span class=\"comment\"># print(str1.index(&#x27;shit&#x27;))</span></span><br><span class=\"line\"><span class=\"comment\"># 检查字符串是否以指定的字符串开头</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.startswith(<span class=\"string\">&#x27;He&#x27;</span>)) <span class=\"comment\"># False</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.startswith(<span class=\"string\">&#x27;hel&#x27;</span>)) <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"comment\"># 检查字符串是否以指定的字符串结尾</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.endswith(<span class=\"string\">&#x27;!&#x27;</span>)) <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"comment\"># 将字符串以指定的宽度居中并在两侧填充指定的字符</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.center(<span class=\"number\">50</span>, <span class=\"string\">&#x27;*&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\"># 将字符串以指定的宽度靠右(左:ljust)放置左侧填充指定的字符</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.rjust(<span class=\"number\">50</span>, <span class=\"string\">&#x27; &#x27;</span>))</span><br><span class=\"line\">str2 = <span class=\"string\">&#x27;abc123456&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 检查字符串是否由数字构成</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str2.isdigit())  <span class=\"comment\"># False</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str2.isdecimal())  <span class=\"comment\"># False</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str2.isnumeric())  <span class=\"comment\"># False</span></span><br><span class=\"line\"><span class=\"comment\"># 检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写。</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str2.istitle())</span><br><span class=\"line\"><span class=\"comment\"># 检测字符串是否只由空格组成。</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str2.isspace())</span><br><span class=\"line\"><span class=\"comment\"># 检查字符串是否以字母构成</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str2.isalpha())  <span class=\"comment\"># False</span></span><br><span class=\"line\"><span class=\"comment\"># 检查字符串是否以数字和字母构成</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str2.isalnum())  <span class=\"comment\"># True</span></span><br><span class=\"line\">str3 = <span class=\"string\">&#x27;  jackfrued@126.com &#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str3)</span><br><span class=\"line\"><span class=\"comment\"># 获得字符串修剪左右(lstrip,rstrip)两侧空格之后的拷贝</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str3.strip())</span><br><span class=\"line\"><span class=\"comment\"># 根据指定的分隔符将字符串进行分割。</span></span><br><span class=\"line\"><span class=\"comment\"># 如果字符串包含指定的分隔符，则返回一个3元的元组，第一个为分隔符左边的子串，第二个为分隔符本身，第三个为分隔符右边的子串。 rpartition 最右边一个</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str3.partition(<span class=\"string\">&#x27;@&#x27;</span>)) <span class=\"comment\">#(&#x27;  jackfrued&#x27;, &#x27;@&#x27;, &#x27;126.com &#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># 大小写字符的转换</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str3.swapcase())</span><br></pre></td></tr></table></figure>\n<p><code>字符串格式化</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.</span></span><br><span class=\"line\">a, b = <span class=\"number\">5</span>, <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;%d * %d = %d&#x27;</span> % (a, b, a * b))</span><br><span class=\"line\"><span class=\"comment\"># 2.</span></span><br><span class=\"line\">a, b = <span class=\"number\">5</span>, <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;&#125; * &#123;&#125; = &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(a, b, a * b))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&#x27;</span>.<span class=\"built_in\">format</span>(a, b, a * b))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;aaa&#125; * &#123;bbb&#125; = &#123;ccc&#125;&#x27;</span>.<span class=\"built_in\">format</span>(aaa=a, bbb=b, ccc=a * b))</span><br><span class=\"line\"><span class=\"comment\"># 3.</span></span><br><span class=\"line\">a, b = <span class=\"number\">5</span>, <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;a&#125;</span> * <span class=\"subst\">&#123;b&#125;</span> = <span class=\"subst\">&#123;a * b&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>列表</code></p>\n<p><strong>列表容器中并没有保存真正的对象，它保存的仅仅是对象的引用(堆中的地址)。</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">100</span>]</span><br><span class=\"line\"><span class=\"comment\"># 添加元素</span></span><br><span class=\"line\">list1.append(<span class=\"number\">200</span>)</span><br><span class=\"line\">list1.insert(<span class=\"number\">1</span>, <span class=\"number\">400</span>)</span><br><span class=\"line\"><span class=\"comment\"># 合并两个列表</span></span><br><span class=\"line\">list1.extend([<span class=\"number\">1000</span>, <span class=\"number\">2000</span>])</span><br><span class=\"line\">list1 += [<span class=\"number\">1000</span>, <span class=\"number\">2000</span>]</span><br><span class=\"line\"><span class=\"comment\"># 根据值删除元素 删除第一个</span></span><br><span class=\"line\">list1.remove(<span class=\"number\">1234</span>)</span><br><span class=\"line\"><span class=\"comment\"># 根据下标删除元素</span></span><br><span class=\"line\">list1.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切片返回的是拷贝，修改新数组，原数组不动</span></span><br><span class=\"line\"><span class=\"comment\"># https://pythontutor.com/python-debugger.html#mode=edit</span></span><br><span class=\"line\">fruits = [ [<span class=\"number\">66666</span>,<span class=\"number\">77777777</span>], <span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"string\">&#x27;strawberry&#x27;</span>, <span class=\"string\">&#x27;waxberry&#x27;</span>]</span><br><span class=\"line\">fruits3 = fruits[:<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fruits3) </span><br><span class=\"line\"><span class=\"comment\"># 数组里面存的是列表的地址，拷贝的也是列表的地址，修改还是到列表的地址去修改，所以会变</span></span><br><span class=\"line\">fruits3[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"number\">000</span></span><br><span class=\"line\">fruits3[<span class=\"number\">2</span>]=<span class=\"string\">&#x27;aaaaaaaaa&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(fruits3)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fruits)</span><br><span class=\"line\"><span class=\"comment\"># [[66666, 77777777], &#x27;apple&#x27;, &#x27;strawberry&#x27;, &#x27;waxberry&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\"># [[0, 77777777], &#x27;apple&#x27;, &#x27;aaaaaaaaa&#x27;, &#x27;waxberry&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\"># [[0, 77777777], &#x27;apple&#x27;, &#x27;strawberry&#x27;, &#x27;waxberry&#x27;]</span></span><br></pre></td></tr></table></figure>\n<p><code>什么时候不用数组</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># array 类似C的数组</span></span><br><span class=\"line\"><span class=\"comment\"># 必须指定类型</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>生成器</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"comment\"># 用列表的生成表达式语法创建列表容器</span></span><br><span class=\"line\"><span class=\"comment\"># 用这种语法创建列表之后元素已经准备就绪所以需要耗费较多的内存空间</span></span><br><span class=\"line\">f = [x ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">1000</span>)]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sys.getsizeof(f))  <span class=\"comment\"># 查看对象占用内存的字节数</span></span><br><span class=\"line\"><span class=\"comment\"># 请注意下面的代码创建的不是一个列表而是一个生成器对象</span></span><br><span class=\"line\"><span class=\"comment\"># 通过生成器可以获取到数据但它不占用额外的空间存储数据</span></span><br><span class=\"line\"><span class=\"comment\"># 每次需要数据的时候就通过内部的运算得到数据(需要花费额外的时间)</span></span><br><span class=\"line\">f = (x ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">1000</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sys.getsizeof(f))  <span class=\"comment\"># 相比生成式生成器不占用存储数据的空间</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(val)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">yield</span>：生成函数</span><br></pre></td></tr></table></figure>\n<p><code>元组</code></p>\n<blockquote>\n<p>元组在创建时间和占用的空间上面都优于列表</p>\n</blockquote>\n<p><code>集合</code></p>\n<p><code>字典</code></p>\n<p><code>序列的抽象基类</code></p>\n<p><code>MutavleSequence:可变序列抽象基类(setitem,delitem)</code><br />\n<code>Sequence:不可变序列抽象基类</code></p>\n<p><strong>+,+=,extend区别</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># +=实际上是调用了extend方法</span></span><br><span class=\"line\"><span class=\"comment\"># +=返回的本身,在原地址上修改</span></span><br><span class=\"line\"><span class=\"comment\"># a=a+ 会返回一个新对象</span></span><br><span class=\"line\"><span class=\"comment\"># append会把参数当成一个对象加进去</span></span><br><span class=\"line\"><span class=\"comment\"># extend参数必须是可迭代对象,一个个加进去</span></span><br><span class=\"line\">a=[<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(a))</span><br><span class=\"line\"></span><br><span class=\"line\">a.extend((<span class=\"number\">777</span>,))</span><br><span class=\"line\">a+=[<span class=\"number\">666</span>]</span><br><span class=\"line\"><span class=\"comment\"># 报错</span></span><br><span class=\"line\"><span class=\"comment\"># a+=(777)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(a))</span><br><span class=\"line\"></span><br><span class=\"line\">a=a+[<span class=\"number\">666</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(a))</span><br><span class=\"line\"></span><br><span class=\"line\">a.append([<span class=\"number\">666</span>,<span class=\"number\">777</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(a))</span><br><span class=\"line\"><span class=\"comment\"># 2358526812672</span></span><br><span class=\"line\"><span class=\"comment\"># 2358526812672</span></span><br><span class=\"line\"><span class=\"comment\"># 2358526332032</span></span><br><span class=\"line\"><span class=\"comment\"># 2358526332032</span></span><br></pre></td></tr></table></figure>\n<p><code>可切片对象</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">alist[<span class=\"built_in\">len</span>(alist):]=[<span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"comment\"># 末尾追加元素</span></span><br><span class=\"line\">alist[:<span class=\"number\">0</span>]=[<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"comment\"># 开头追加元素</span></span><br><span class=\"line\">alist[<span class=\"number\">3</span>:<span class=\"number\">3</span>]=[<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"comment\"># 索引位置追加元素</span></span><br><span class=\"line\"><span class=\"comment\"># 结束位置大于长度会返回长度</span></span><br><span class=\"line\"><span class=\"comment\"># 开始位置大于长度会返回空列表</span></span><br><span class=\"line\"><span class=\"comment\"># 切片赋值长度必须相等</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第八天-面向对象编程基础\"><a class=\"markdownIt-Anchor\" href=\"#第八天-面向对象编程基础\"></a> 第八天-面向对象编程基础</h3>\n<p><a href=\"https://blog.csdn.net/jackfrued/article/details/79521404\">python三个知识点:is和==,嵌套列表,类的私有属性</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.类的私有属性可以在属性名前面加两个下划线</span></span><br><span class=\"line\"><span class=\"comment\"># __len__不是私有成员,因为后面也有__</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, foo</span>):</span><br><span class=\"line\">        self.__foo = foo</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__bar</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(self.__foo)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;__bar&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    test = Test(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># AttributeError: &#x27;Test&#x27; object has no attribute &#x27;__bar&#x27;</span></span><br><span class=\"line\">    test.__bar()</span><br><span class=\"line\">    <span class=\"comment\"># AttributeError: &#x27;Test&#x27; object has no attribute &#x27;__foo&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(test.__foo)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    test = Test(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">    test._Test__bar()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(test._Test__foo)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.Python并没有从语法上严格保证私有属性或方法的私密性，它只是给私有的属性和方法换了一个名字来妨碍对它们的访问,更换名字的规则仍然可以访问到它们</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"第九天-面向对象进阶\"><a class=\"markdownIt-Anchor\" href=\"#第九天-面向对象进阶\"></a> 第九天-面向对象进阶</h3>\n<blockquote>\n<p>class用于声明一个类,用type创建类<br />\nobject是所有类的父类，所有类是type的实例</p>\n</blockquote>\n<p><code>类的属性</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.@property装饰器</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, age</span>):</span><br><span class=\"line\">        self._name = name</span><br><span class=\"line\">        self._age = age</span><br><span class=\"line\">    <span class=\"comment\"># 访问器 - getter方法</span></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">name</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._name</span><br><span class=\"line\">    <span class=\"comment\"># 访问器 - getter方法</span></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">age</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._age</span><br><span class=\"line\">    <span class=\"comment\"># 修改器 - setter方法</span></span><br><span class=\"line\"><span class=\"meta\">    @age.setter</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">age</span>(<span class=\"params\">self, age</span>):</span><br><span class=\"line\">        self._age = age</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 属性名字和@property修饰的方法名字不能一样,不然会死循环</span></span><br><span class=\"line\"><span class=\"comment\"># 把一个getter方法变成属性，只需要加上@property就可以了</span></span><br><span class=\"line\"><span class=\"comment\"># @property本身又创建了另一个装饰器@score.setter，负责把一个setter方法变成属性赋值</span></span><br><span class=\"line\"><span class=\"comment\"># 上面name是只读属性,age是读写属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.__slots__魔法 ,只有slots内的属性才能被添加,对子类没有用,如果子类有,就是父类和子类的并集</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 限定Person对象只能绑定_name, _age和_gender属性</span></span><br><span class=\"line\">    __slots__ = (<span class=\"string\">&#x27;_name&#x27;</span>, <span class=\"string\">&#x27;_age&#x27;</span>, <span class=\"string\">&#x27;_gender&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, age</span>):</span><br><span class=\"line\">        self._name = name</span><br><span class=\"line\">        self._age = age</span><br><span class=\"line\">        <span class=\"comment\"># 会报错</span></span><br><span class=\"line\">        <span class=\"comment\"># self.hhhh=666</span></span><br><span class=\"line\">Person._gender = <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 这样能绑定?</span></span><br><span class=\"line\">Person.sex = <span class=\"string\">&#x27;?&#x27;</span></span><br><span class=\"line\">person = Person(<span class=\"string\">&#x27;王大锤&#x27;</span>, <span class=\"number\">22</span>)</span><br><span class=\"line\"><span class=\"comment\"># 这样会报错,但是加上Person._sex = &#x27;?&#x27; 就变成了只读,不能修改</span></span><br><span class=\"line\">person.sex=<span class=\"number\">66</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>类的方法</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.静态方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># @staticmethod修饰,不用self,和C++类似</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.类方法</span></span><br><span class=\"line\"><span class=\"comment\"># @classmethod修饰,默认传递了cls参数,调用类本身,</span></span><br><span class=\"line\"><span class=\"meta\">@classmethod</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">now</span>(<span class=\"params\">cls</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(cls)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.实例方法</span></span><br><span class=\"line\"><span class=\"comment\"># self 就是实例本身</span></span><br></pre></td></tr></table></figure>\n<p><code>继承和多态</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，这个动作称之为方法重写（override）。通过方法重写我们可以让父类的同一个行为在子类中拥有不同的实现版本，当我们调用这个经过子类重写的方法时，不同的子类对象会表现出不同的行为，这个就是多态</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> abc <span class=\"keyword\">import</span> ABCMeta, abstractmethod</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pet</span>(<span class=\"built_in\">object</span>, metaclass=ABCMeta):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, nickname</span>):</span><br><span class=\"line\">        self._nickname = nickname</span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">make_voice</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>定制类-魔法函数(不是继承,python自带)</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># __str__打印输出变成自定义字符串</span></span><br><span class=\"line\"><span class=\"comment\"># __repr__ 直接调用类时打印(jupyter)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;6666&#x27;</span></span><br><span class=\"line\">__repr__ = __str__</span><br><span class=\"line\"><span class=\"comment\"># __iter__可用for循环迭代</span></span><br><span class=\"line\"><span class=\"comment\"># __next__去下一个对象</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Fib</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.a, self.b = <span class=\"number\">0</span>, <span class=\"number\">1</span> <span class=\"comment\"># 初始化两个计数器a，b</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self <span class=\"comment\"># 实例本身就是迭代对象，故返回自己</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__next__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.a, self.b = self.b, self.a + self.b <span class=\"comment\"># 计算下一个值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.a &gt; <span class=\"number\">100000</span>: <span class=\"comment\"># 退出循环的条件</span></span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StopIteration()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.a <span class=\"comment\"># 返回下一个值</span></span><br><span class=\"line\"><span class=\"comment\"># __getitem__像列表一样取值  也可以改成字典形式 也可以用for循环</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(n, <span class=\"built_in\">int</span>): <span class=\"comment\"># n是索引</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(n, <span class=\"built_in\">slice</span>): <span class=\"comment\"># n是切片</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果这个对象被for时，会首先调用__iter__方法返回一个iterator,然后再对这个iterator循环调用__next__方法，直到碰到StopIteration时则停止退出。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果for的对象没有__iter__方法，则无法获得一个迭代器，那么就会报错，但是，如果这个类实现了__getitem__方法，会从0开始依次读取相应的下标，直到发生IndexError为止</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># __iter__是优先读取的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># __getattr__获取类的属性,已经定义的属性不会调用,使用没有定义的属性才会调用</span></span><br><span class=\"line\"><span class=\"comment\"># __call__ 可以直接对实例进行调用</span></span><br><span class=\"line\"><span class=\"comment\"># __bases__查看父类</span></span><br><span class=\"line\"><span class=\"comment\"># __enter__ with进入</span></span><br><span class=\"line\"><span class=\"comment\"># __exit__with退出</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sample</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__enter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>( <span class=\"string\">&quot;enter&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__exit__</span>(<span class=\"params\">self, exc_type,exc_val,exc_tb</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span> ( <span class=\"string\">&quot;exit&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">do_something</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span> ( <span class=\"string\">&quot;doing something&quot;</span> )</span><br><span class=\"line\"><span class=\"keyword\">with</span> Sample() <span class=\"keyword\">as</span> sample:</span><br><span class=\"line\">    sample.do_something()</span><br><span class=\"line\"><span class=\"comment\"># @contextlib.contextmanger </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># __dict__与dir()的区别：</span></span><br><span class=\"line\"><span class=\"comment\"># dir()是一个函数，返回的是list；</span></span><br><span class=\"line\"><span class=\"comment\"># __dict__是一个字典，键为属性名，值为属性值(类和实例不一样,可以通过修改这个增加属性)；</span></span><br><span class=\"line\"><span class=\"comment\"># dir()用来寻找一个对象的所有属性，包括__dict__中的属性，__dict__是dir()的子集；</span></span><br></pre></td></tr></table></figure>\n<p><code>如果要获得一个对象的所有属性和方法，可以使用dir()函数</code></p>\n<p><code>dir('abc')</code></p>\n<h3 id=\"第十天-图形用户界面和游戏开发\"><a class=\"markdownIt-Anchor\" href=\"#第十天-图形用户界面和游戏开发\"></a> 第十天-图形用户界面和游戏开发</h3>\n<p>–</p>\n<h3 id=\"第十一天-文件和异常\"><a class=\"markdownIt-Anchor\" href=\"#第十一天-文件和异常\"></a> 第十一天-文件和异常</h3>\n<p>–</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.json</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"comment\"># 字符串处理</span></span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;name&#x27;</span> : <span class=\"string\">&#x27;ACME&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;shares&#x27;</span> : <span class=\"number\">100</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;price&#x27;</span> : <span class=\"number\">542.23</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">json_str = json.dumps(data)</span><br><span class=\"line\">data = json.loads(json_str)</span><br><span class=\"line\"><span class=\"comment\"># 文件处理</span></span><br><span class=\"line\"><span class=\"comment\">#  Writing JSON data</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;data.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    json.dump(data, f)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Reading data back</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;data.json&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    data = json.load(f)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.异常</span></span><br><span class=\"line\"><span class=\"comment\"># 1.except语句不是必须的，finally语句也不是必须的，但是二者必须要有一个，否则就没有try的意义了。</span></span><br><span class=\"line\"><span class=\"comment\"># 2.except语句可以有多个，Python会按except语句的顺序依次匹配你指定的异常，如果异常已经处理就不会再进入后面的except语句。</span></span><br><span class=\"line\"><span class=\"comment\"># 3.except语句可以以元组形式同时指定多个异常，参见实例代码。</span></span><br><span class=\"line\"><span class=\"comment\"># 4.except语句后面如果不指定异常类型，则默认捕获所有异常，你可以通过logging或者sys模块获取当前异常。</span></span><br><span class=\"line\"><span class=\"comment\"># 5.如果要捕获异常后要重复抛出，请使用raise，后面不要带任何参数或信息。</span></span><br><span class=\"line\"><span class=\"comment\"># 6.不建议捕获并抛出同一个异常，请考虑重构你的代码。</span></span><br><span class=\"line\"><span class=\"comment\"># 7.不建议在不清楚逻辑的情况下捕获所有异常，有可能你隐藏了很严重的问题。</span></span><br><span class=\"line\"><span class=\"comment\"># 8.尽量使用内置的异常处理语句来替换try/except语句，比如with语句，getattr()方法。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第十二天-字符串和正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#第十二天-字符串和正则表达式\"></a> 第十二天-字符串和正则表达式</h3>\n<p><a href=\"https://regexlearn.com/zh-cn/learn/regex101\">正则表达式练习</a><br />\n<a href=\"https://www.runoob.com/regexp/regexp-syntax.html\">正则表达式规则</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># re模块处理</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pattern:r&#x27;自己写的表达式&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># str:待匹配字符串</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>compile(pattern, flags=0)</td>\n<td>编译正则表达式返回正则表达式对象</td>\n</tr>\n<tr>\n<td>match(pattern, string, flags=0)</td>\n<td>用正则表达式匹配字符串 成功返回匹配对象 否则返回None</td>\n</tr>\n<tr>\n<td>search(pattern, string, flags=0)</td>\n<td>搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None</td>\n</tr>\n<tr>\n<td>split(pattern, string, maxsplit=0, flags=0)</td>\n<td>用正则表达式指定的模式分隔符拆分字符串 返回列表</td>\n</tr>\n<tr>\n<td>sub(pattern, repl, string, count=0, flags=0)</td>\n<td>用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数</td>\n</tr>\n<tr>\n<td>fullmatch(pattern, string, flags=0)</td>\n<td>match函数的完全匹配（从字符串开头到结尾）版本</td>\n</tr>\n<tr>\n<td>findall(pattern, string, flags=0)</td>\n<td>查找字符串所有与正则表达式匹配的模式 返回字符串的列表</td>\n</tr>\n<tr>\n<td>finditer(pattern, string, flags=0)</td>\n<td>查找字符串所有与正则表达式匹配的模式 返回一个迭代器</td>\n</tr>\n<tr>\n<td>purge()</td>\n<td>清除隐式编译的正则表达式的缓存</td>\n</tr>\n<tr>\n<td>re.I / re.IGNORECASE</td>\n<td>忽略大小写匹配标记</td>\n</tr>\n<tr>\n<td>re.M / re.MULTILINE</td>\n<td>多行匹配标记</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"第十三天-进程和线程\"><a class=\"markdownIt-Anchor\" href=\"#第十三天-进程和线程\"></a> 第十三天-进程和线程</h3>\n<blockquote>\n<p>进程线程知识参考操作系统</p>\n</blockquote>\n<p><code>多进程</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Unix和Linux操作系统上提供了 `fork()`系统调用来创建进程，调用 `fork()`函数的是父进程，创建出的是子进程</span></span><br><span class=\"line\"><span class=\"comment\"># Windows没有fork调用</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Process</span><br><span class=\"line\"><span class=\"keyword\">from</span> os <span class=\"keyword\">import</span> getpid</span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randint</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> time, sleep</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">download_task</span>(<span class=\"params\">filename</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;启动下载进程，进程号[%d].&#x27;</span> % getpid())</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;开始下载%s...&#x27;</span> % filename)</span><br><span class=\"line\">    time_to_download = randint(<span class=\"number\">5</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">    sleep(time_to_download)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;%s下载完成! 耗费了%d秒&#x27;</span> % (filename, time_to_download))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    start = time()</span><br><span class=\"line\">    p1 = Process(target=download_task, args=(<span class=\"string\">&#x27;Python从入门到住院.pdf&#x27;</span>, ))</span><br><span class=\"line\">    p1.start()</span><br><span class=\"line\">    p2 = Process(target=download_task, args=(<span class=\"string\">&#x27;Peking Hot.avi&#x27;</span>, ))</span><br><span class=\"line\">    p2.start()</span><br><span class=\"line\">    p1.join()</span><br><span class=\"line\">    p2.join()</span><br><span class=\"line\">    end = time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;总共耗费了%.2f秒.&#x27;</span> % (end - start))</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进程池</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    start = time()</span><br><span class=\"line\">    p = Pool(<span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 这里进程池有四个进程但是用了五个任务</span></span><br><span class=\"line\">    <span class=\"comment\"># task 0，1，2，3是立刻执行的，而task 4要等待前面某个task完成后才执行</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">        p.apply_async(download_task, args=(i,))</span><br><span class=\"line\">    p.close()</span><br><span class=\"line\">    p.join()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;总共耗费了%.2f秒.&#x27;</span> % (end - start))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进程通信</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Process, Queue</span><br><span class=\"line\"><span class=\"keyword\">import</span> os, time, random</span><br><span class=\"line\"><span class=\"comment\"># 写数据进程执行的代码:</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">write</span>(<span class=\"params\">q</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Process to write: %s&#x27;</span> % os.getpid())</span><br><span class=\"line\">    <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>]:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Put %s to queue...&#x27;</span> % value)</span><br><span class=\"line\">        q.put(value)</span><br><span class=\"line\">        time.sleep(random.random())</span><br><span class=\"line\"><span class=\"comment\"># 读数据进程执行的代码:</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">read</span>(<span class=\"params\">q</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Process to read: %s&#x27;</span> % os.getpid())</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        value = q.get(<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Get %s from queue.&#x27;</span> % value)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 父进程创建Queue，并传给各个子进程：</span></span><br><span class=\"line\">    q = Queue()</span><br><span class=\"line\">    pw = Process(target=write, args=(q,))</span><br><span class=\"line\">    pr = Process(target=read, args=(q,))</span><br><span class=\"line\">    <span class=\"comment\"># 启动子进程pw，写入:</span></span><br><span class=\"line\">    pw.start()</span><br><span class=\"line\">    <span class=\"comment\"># 启动子进程pr，读取:</span></span><br><span class=\"line\">    pr.start()</span><br><span class=\"line\">    <span class=\"comment\"># 等待pw结束:</span></span><br><span class=\"line\">    pw.join()</span><br><span class=\"line\">    <span class=\"comment\"># pr进程里是死循环，无法等待其结束，只能强行终止:</span></span><br><span class=\"line\">    pr.terminate()</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">Process to write: 50563</span></span><br><span class=\"line\"><span class=\"string\">Put A to queue...</span></span><br><span class=\"line\"><span class=\"string\">Process to read: 50564</span></span><br><span class=\"line\"><span class=\"string\">Get A from queue.</span></span><br><span class=\"line\"><span class=\"string\">Put B to queue...</span></span><br><span class=\"line\"><span class=\"string\">Get B from queue.</span></span><br><span class=\"line\"><span class=\"string\">Put C to queue...</span></span><br><span class=\"line\"><span class=\"string\">Get C from queue.</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><code>多线程</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randint</span><br><span class=\"line\"><span class=\"comment\"># 在Python早期的版本中就引入了thread模块（现在名为_thread）来实现多线程编程，然而该模块过于底层，而且很多功能都没有提供</span></span><br><span class=\"line\"><span class=\"comment\"># 因此目前的多线程开发我们推荐使用threading模块，该模块对多线程编程提供了更好的面向对象的封装。</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> time, sleep</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">download</span>(<span class=\"params\">filename</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;开始下载%s...&#x27;</span> % filename)</span><br><span class=\"line\">    time_to_download = randint(<span class=\"number\">5</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">    sleep(time_to_download)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;%s下载完成! 耗费了%d秒&#x27;</span> % (filename, time_to_download))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    start = time()</span><br><span class=\"line\">    t1 = Thread(target=download, args=(<span class=\"string\">&#x27;Python从入门到住院.pdf&#x27;</span>,))</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2 = Thread(target=download, args=(<span class=\"string\">&#x27;Peking Hot.avi&#x27;</span>,))</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br><span class=\"line\">    end = time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;总共耗费了%.3f秒&#x27;</span> % (end - start))</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 继承 `Thread`类的方式来创建自定义的线程类</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randint</span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> time, sleep</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadTask</span>(<span class=\"title class_ inherited__\">Thread</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, filename</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 可以穿name给线程命名</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        self._filename = filename</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;开始下载%s...&#x27;</span> % self._filename)</span><br><span class=\"line\">        time_to_download = randint(<span class=\"number\">5</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">        sleep(time_to_download)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;%s下载完成! 耗费了%d秒&#x27;</span> % (self._filename, time_to_download))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    start = time()</span><br><span class=\"line\">    t1 = DownloadTask(<span class=\"string\">&#x27;Python从入门到住院.pdf&#x27;</span>)</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2 = DownloadTask(<span class=\"string\">&#x27;Peking Hot.avi&#x27;</span>)</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br><span class=\"line\">    end = time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;总共耗费了%.2f秒.&#x27;</span> % (end - start))</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 线程上锁</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep</span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread, Lock</span><br><span class=\"line\"><span class=\"comment\"># RLock 可重用锁,同一线程中可以多次调用acquire,但是release要调用一样的次数</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Account</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self._balance = <span class=\"number\">0</span></span><br><span class=\"line\">        self._lock = Lock()</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">deposit</span>(<span class=\"params\">self, money</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 先获取锁才能执行后续的代码</span></span><br><span class=\"line\">        self._lock.acquire()</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            new_balance = self._balance + money</span><br><span class=\"line\">            sleep(<span class=\"number\">0.01</span>)</span><br><span class=\"line\">            self._balance = new_balance</span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 在finally中执行释放锁的操作保证正常异常锁都能释放</span></span><br><span class=\"line\">            self._lock.release()</span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">balance</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._balance</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AddMoneyThread</span>(<span class=\"title class_ inherited__\">Thread</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, account, money</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        self._account = account</span><br><span class=\"line\">        self._money = money</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self._account.deposit(self._money)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    account = Account()</span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">        t = AddMoneyThread(account, <span class=\"number\">1</span>)</span><br><span class=\"line\">        threads.append(t)</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> threads:</span><br><span class=\"line\">        t.join()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;账户余额为: ￥%d元&#x27;</span> % account.balance)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 线程通信</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> queue <span class=\"keyword\">import</span> Queue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># queue.Queue：这是一个线程安全的队列，可以被用来在线程之间传递数据。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># queue.LifoQueue：这是一个线程安全的栈，可以被用来在线程之间传递数据。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># queue.PriorityQueue：这是一个线程安全的优先队列，可以被用来在线程之间传递数据。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># collections.deque：这是一个线程安全的双端队列，可以被用来在线程之间传递数据。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># multiprocessing.Queue：这是一个线程安全的队列，可以被用来在进程之间传递数据。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"第十四天-网络编程入门和网络应用开发\"><a class=\"markdownIt-Anchor\" href=\"#第十四天-网络编程入门和网络应用开发\"></a> 第十四天-网络编程入门和网络应用开发</h3>\n<blockquote>\n<p>计算机网络基础知识补充</p>\n</blockquote>\n<p><code>发邮件</code></p>\n<p><code>发短信</code></p>\n<p><code>网络服务</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 多线程网络服务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 服务器端</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> socket, SOCK_STREAM, AF_INET</span><br><span class=\"line\"><span class=\"keyword\">from</span> base64 <span class=\"keyword\">import</span> b64encode</span><br><span class=\"line\"><span class=\"keyword\">from</span> json <span class=\"keyword\">import</span> dumps</span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 自定义线程类</span></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">FileTransferHandler</span>(<span class=\"title class_ inherited__\">Thread</span>):</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, cclient</span>):</span><br><span class=\"line\">            <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">            self.cclient = cclient</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">            my_dict = &#123;&#125;</span><br><span class=\"line\">            my_dict[<span class=\"string\">&#x27;filename&#x27;</span>] = <span class=\"string\">&#x27;guido.jpg&#x27;</span></span><br><span class=\"line\">            <span class=\"comment\"># JSON是纯文本不能携带二进制数据</span></span><br><span class=\"line\">            <span class=\"comment\"># 所以图片的二进制数据要处理成base64编码</span></span><br><span class=\"line\">            my_dict[<span class=\"string\">&#x27;filedata&#x27;</span>] = data</span><br><span class=\"line\">            <span class=\"comment\"># 通过dumps函数将字典处理成JSON字符串</span></span><br><span class=\"line\">            json_str = dumps(my_dict)</span><br><span class=\"line\">            <span class=\"comment\"># 发送JSON字符串</span></span><br><span class=\"line\">            self.cclient.send(json_str.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">            self.cclient.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 1.创建套接字对象并指定使用哪种传输服务</span></span><br><span class=\"line\">    server = socket()</span><br><span class=\"line\">    <span class=\"comment\"># 2.绑定IP地址和端口(区分不同的服务)</span></span><br><span class=\"line\">    server.bind((<span class=\"string\">&#x27;192.168.1.2&#x27;</span>, <span class=\"number\">5566</span>))</span><br><span class=\"line\">    <span class=\"comment\"># 3.开启监听 - 监听客户端连接到服务器</span></span><br><span class=\"line\">    server.listen(<span class=\"number\">512</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;服务器启动开始监听...&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;guido.jpg&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"comment\"># 将二进制数据处理成base64再解码成字符串</span></span><br><span class=\"line\">        data = b64encode(f.read()).decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        client, addr = server.accept()</span><br><span class=\"line\">        <span class=\"comment\"># 启动一个线程来处理客户端的请求</span></span><br><span class=\"line\">        FileTransferHandler(client).start()</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">from</span> json <span class=\"keyword\">import</span> loads</span><br><span class=\"line\"><span class=\"keyword\">from</span> base64 <span class=\"keyword\">import</span> b64decode</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    client = socket()</span><br><span class=\"line\">    client.connect((<span class=\"string\">&#x27;192.168.1.2&#x27;</span>, <span class=\"number\">5566</span>))</span><br><span class=\"line\">    <span class=\"comment\"># 定义一个保存二进制数据的对象</span></span><br><span class=\"line\">    in_data = <span class=\"built_in\">bytes</span>()</span><br><span class=\"line\">    <span class=\"comment\"># 由于不知道服务器发送的数据有多大每次接收1024字节</span></span><br><span class=\"line\">    data = client.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> data:</span><br><span class=\"line\">        <span class=\"comment\"># 将收到的数据拼接起来</span></span><br><span class=\"line\">        in_data += data</span><br><span class=\"line\">        data = client.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 将收到的二进制数据解码成JSON字符串并转换成字典</span></span><br><span class=\"line\">    <span class=\"comment\"># loads函数的作用就是将JSON字符串转成字典对象</span></span><br><span class=\"line\">    my_dict = loads(in_data.decode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">    filename = my_dict[<span class=\"string\">&#x27;filename&#x27;</span>]</span><br><span class=\"line\">    filedata = my_dict[<span class=\"string\">&#x27;filedata&#x27;</span>].encode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;/Users/Hao/&#x27;</span> + filename, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"comment\"># 将base64格式的数据解码成二进制数据并写入文件</span></span><br><span class=\"line\">        f.write(b64decode(filedata))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;图片已保存.&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<h3 id=\"第十五天-图像和办公文档处理\"><a class=\"markdownIt-Anchor\" href=\"#第十五天-图像和办公文档处理\"></a> 第十五天-图像和办公文档处理</h3>\n<p><code>图像</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./res/guido.jpg&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image.<span class=\"built_in\">format</span>, image.size, image.mode</span><br><span class=\"line\">(<span class=\"string\">&#x27;JPEG&#x27;</span>, (<span class=\"number\">500</span>, <span class=\"number\">750</span>), <span class=\"string\">&#x27;RGB&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 裁剪图像</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./res/guido.jpg&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rect = <span class=\"number\">80</span>, <span class=\"number\">20</span>, <span class=\"number\">310</span>, <span class=\"number\">360</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image.crop(rect).show()</span><br><span class=\"line\"><span class=\"comment\"># 略缩图</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./res/guido.jpg&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>size = <span class=\"number\">128</span>, <span class=\"number\">128</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image.thumbnail(size)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image.show()</span><br><span class=\"line\"><span class=\"comment\"># 缩放粘贴图像</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image1 = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./res/luohao.png&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image2 = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./res/guido.jpg&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rect = <span class=\"number\">80</span>, <span class=\"number\">20</span>, <span class=\"number\">310</span>, <span class=\"number\">360</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>guido_head = image2.crop(rect)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>width, height = guido_head.size</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image1.paste(guido_head.resize((<span class=\"built_in\">int</span>(width / <span class=\"number\">1.5</span>), <span class=\"built_in\">int</span>(height / <span class=\"number\">1.5</span>))), (<span class=\"number\">172</span>, <span class=\"number\">40</span>))</span><br><span class=\"line\"><span class=\"comment\"># 旋转和反转</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./res/guido.png&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image.rotate(<span class=\"number\">180</span>).show()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image.transpose(Image.FLIP_LEFT_RIGHT).show()</span><br><span class=\"line\"><span class=\"comment\"># 操作像素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./res/guido.jpg&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">80</span>, <span class=\"number\">310</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>, <span class=\"number\">360</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>        image.putpixel((x, y), (<span class=\"number\">128</span>, <span class=\"number\">128</span>, <span class=\"number\">128</span>))</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image.show()</span><br><span class=\"line\"><span class=\"comment\"># 滤镜</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageFilter</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./res/guido.jpg&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>image.<span class=\"built_in\">filter</span>(ImageFilter.CONTOUR).show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>Excel</code></p>\n<p><code>Word</code></p>\n<h3 id=\"b站视频总结\"><a class=\"markdownIt-Anchor\" href=\"#b站视频总结\"></a> B站视频总结</h3>\n<p><code>元类编程</code><br />\n<strong>元类:创建类的类</strong></p>\n<h4 id=\"1动态属性\"><a class=\"markdownIt-Anchor\" href=\"#1动态属性\"></a> 1.动态属性</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#get</span></span><br><span class=\"line\"><span class=\"meta\">@property修饰</span></span><br><span class=\"line\"><span class=\"comment\">#set</span></span><br><span class=\"line\"><span class=\"meta\">@aaa.setter</span></span><br><span class=\"line\"><span class=\"comment\">#查找不到进入</span></span><br><span class=\"line\">__getattr__</span><br><span class=\"line\"><span class=\"comment\">#先进入这个</span></span><br><span class=\"line\">__getattribute__</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">getattr</span>(类,属性)==类.属性</span><br></pre></td></tr></table></figure>\n<h4 id=\"2属性描述符\"><a class=\"markdownIt-Anchor\" href=\"#2属性描述符\"></a> 2.属性描述符</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数据描述符</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">IntField</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__get__</span>(<span class=\"params\"> self, instance，owner</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.value</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__set__</span>(<span class=\"params\">self, instance, value</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">isinstance</span>(value, numbers.Integral):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError( <span class=\"string\">&quot;int value need&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> value &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError( <span class=\"string\">&quot;positive value need&quot;</span>)</span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__delete__</span>(<span class=\"params\">self, instance</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 自定义类型检测</span></span><br><span class=\"line\">    age = IntField()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"3类属性取值过程\"><a class=\"markdownIt-Anchor\" href=\"#3类属性取值过程\"></a> 3.类属性取值过程</h4>\n<blockquote>\n<p>如果user是某个类的实例，那么user.age（以及等价的getattr(user, ‘age’))首先调用__getattribute__。如果类定义了_getattr_方法，<br />\n那么在_getattribute__抛出 AttributeError的时候就会调用到_getattr_,而对于描述符(<strong>get</strong>)的调用，则是发生在__getattribute__内部的。</p>\n</blockquote>\n<p>user = User()，那么user.age顺序如下:</p>\n<p>(1) 如果&quot;age”是出现在user或其基类的__dict__中，且age是data descriptor，那么调用其__get__方法 ,否则</p>\n<p>(2) 如果&quot;age&quot;出现在obj的__dict__中，那么直接返回 obj.<strong>dict</strong>[ ‘age’]，否则</p>\n<p>(3) 如果&quot;age&quot;出现在User或其基类的__dict__中</p>\n<p>(3.1) 如果age是non-data descriptor，那么调用其__get__方法，否则<br />\n(3.2) 返回__dict__[ ‘age’]</p>\n<p>(4) 如果User有__getattr__方法，调用__getattr__方法，否则</p>\n<p>(5) 抛出AttributeError</p>\n<h4 id=\"4__new__和__init__区别\"><a class=\"markdownIt-Anchor\" href=\"#4__new__和__init__区别\"></a> 4.__new__和__init__区别</h4>\n<p>new传的类本身</p>\n<p>init传的对象实例</p>\n<p>先进new后进init</p>\n<p>new不返回对象,不会进init</p>\n<h4 id=\"5type动态创建类\"><a class=\"markdownIt-Anchor\" href=\"#5type动态创建类\"></a> 5.type动态创建类</h4>\n<p>type(“类名”,(父类),{属性,函数})</p>\n<p><strong>控制类的创建过程</strong><br />\nclass user(metaclass=自定义元类)</p>\n<p><strong>元类编程-&gt;封装</strong></p>\n<h4 id=\"6可迭代迭代器生成器\"><a class=\"markdownIt-Anchor\" href=\"#6可迭代迭代器生成器\"></a> 6.可迭代,迭代器,生成器</h4>\n<p>迭代器和迭代序列分离</p>\n<p><strong>iter</strong> 可迭代</p>\n<p><strong>next</strong> 迭代器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">company</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_init_</span>(<span class=\"params\">self, employee_list</span>):</span><br><span class=\"line\">        self.employee = employee_list</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_iter_</span>(<span class=\"params\"> self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MyIterator( self.employee)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyIterator</span>(<span class=\"title class_ inherited__\">Iterator</span> ) :</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_init_</span>(<span class=\"params\">self, employee_list</span>):</span><br><span class=\"line\">        self.iter_list = employee_listself.index = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span>  <span class=\"title function_\">inext_</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\">#真正返回迭代值的逻辑</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            word = self.iter_list[ self.index]</span><br><span class=\"line\">        <span class=\"keyword\">except</span> IndexError:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> stopIteration</span><br><span class=\"line\">        self.index +=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> word</span><br></pre></td></tr></table></figure>\n<p><code>生成器</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gen_fib</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    n,a,b = <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n&lt;index:</span><br><span class=\"line\">        yie1d b</span><br><span class=\"line\">        a,b = b,a+b</span><br><span class=\"line\">        n += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> gen_fib(<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (data)</span><br><span class=\"line\">I</span><br><span class=\"line\">PyGenObject</span><br><span class=\"line\">gi_frame</span><br><span class=\"line\">gi_code</span><br><span class=\"line\">会保存上一次执行的位置和代码</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>大文件读取</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">myreadlines</span>(<span class=\"params\">f, newline</span>) :buf = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">while</span> newline <span class=\"keyword\">in</span> buf:</span><br><span class=\"line\">        pos = buf.index( newline)</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> buf[:pos]</span><br><span class=\"line\">        buf = buf[pos + <span class=\"built_in\">len</span>(newline) : ]</span><br><span class=\"line\">    chunk = f.read(<span class=\"number\">4096</span>*<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> chunk :</span><br><span class=\"line\">        <span class=\"comment\"># 文件结尾</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> buf</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    buf += chunk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;input.txt&quot;</span> ) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> myreadlines(f，<span class=\"string\">&quot;&#123;&quot;</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span> (line)</span><br></pre></td></tr></table></figure>\n<h4 id=\"7socket编程\"><a class=\"markdownIt-Anchor\" href=\"#7socket编程\"></a> 7.socket编程</h4>\n<p>见网络编程</p>\n<h4 id=\"8多线程\"><a class=\"markdownIt-Anchor\" href=\"#8多线程\"></a> 8.多线程</h4>\n<p>1.GIL<br />\n全局解释器锁<br />\npython中一个线程对应c语言的一个线程<br />\ngil使得同一时刻只有一个线程运行在一个cpu上运行字节码<br />\n不能把多个线程映射到多个cpu上<br />\ngil会根据执行的字节码行数及时间片释放gil<br />\n遇见io操作也会主动释放(适合io频繁)</p>\n<p>2.线程同步,通信<br />\n<strong>多线程实现</strong><br />\n使用线程传递函数<br />\n继承多线程类,实现run<br />\n<strong>线程通信</strong><br />\n共享变量:不好<br />\nQueue:还有其他线程安全的数据结构<br />\n<strong>线程同步</strong><br />\nLock,RLock<br />\n<strong>Lock</strong>:获取两次就会死锁<br />\n<strong>RLock</strong>:允许多线程环境下多次acquire,但是release要一样的数量<br />\n<strong>condition</strong>:wait()和notify() 等待和唤醒<br />\n先等待才能唤醒<br />\n把waiter的锁放入一个双端队列<br />\nnotify把队列弹一个出来释放<br />\nwith condition 就是获取锁释放锁(默认RLock)<br />\nwith之后才能wait和notify,wait把condition的锁释放掉<br />\ncon’t wait on a un-acquire lock<br />\n<strong>Semaphore</strong>:用于控制进入数量的锁<br />\nthreading.Semaphore(3)</p>\n<p>3.线程池&amp;进程池<br />\nfrom concurrent import futures</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">executor = ThreadPoo1Executor(max_workers=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#通过submit函数提交执行的函数到线程池中,submit是立即返回</span></span><br><span class=\"line\">task1 = executor. submit(get_htm1,(<span class=\"number\">3</span>))</span><br><span class=\"line\">task2 = executor. submit(get_htm1,(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># done用于判断是否完成</span></span><br><span class=\"line\">task1.done()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># result获取函数返回结果</span></span><br><span class=\"line\">task1.result()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#要获取已经成功的task的返回</span></span><br><span class=\"line\">urls = [<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">all_task = [executor. submit(get_html,(url)) <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> urls]</span><br><span class=\"line\"><span class=\"comment\"># yield已经完成的线程</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> future <span class=\"keyword\">in</span> as_completed(all_task):</span><br><span class=\"line\">    data = future.result()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>( <span class=\"string\">&quot;get ipage success&quot;</span>.<span class=\"built_in\">format</span>(data))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#通过executor获取已经完成的task返回值,返回顺序一致</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> executor.<span class=\"built_in\">map</span>(get_html, urls):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>( <span class=\"string\">&quot;get &#123;fpage&quot;</span>.<span class=\"built_in\">format</span>(data))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 阻塞主线程,等全部还是等一个</span></span><br><span class=\"line\">wait()</span><br></pre></td></tr></table></figure>\n<hr />\n<p>进程适合计算密集<br />\n线程适合io密集</p>\n<p>父进程和子进程各有数据</p>\n<p>子进程会把创建进程下面的代码单独运行一遍</p>\n<p>ProcessPoolExecutor用的multiprocessing</p>\n<p>不能用queue.Queue<br />\n不能用共享变量</p>\n<p>from queue import Queue<br />\nfrom multiprocessing import Queue<br />\nfrom multiprocessing.Manager import Queue<br />\n#Manager 有很多数据结构<br />\npipe只能用于两个进程<br />\n性能高于Queue</p>\n<h4 id=\"9io复用\"><a class=\"markdownIt-Anchor\" href=\"#9io复用\"></a> 9.IO复用</h4>\n<p>并发<br />\n并发是指一个时间段内有几个程序在同一个cpu运行，但是任意时刻只有一个程序在cpu上运行<br />\n并行<br />\n并行是指任意时刻点上，有多个程序同时运行在多个cpu</p>\n<p>同步<br />\n同步是指代码调用IO操作时必须等待IO操作完成才返<br />\n回的调用方式。<br />\n异步<br />\n异步是指代码调用IO操作时，不必等IO操作完成就返回的调用方式。</p>\n<p>阻塞<br />\n阻塞是指调用函数时候当前线程被挂起。<br />\n非阻塞<br />\n非阻塞是指调用函数时候当前线程不会被挂起，而是立即返回。</p>\n<h4 id=\"10回调协程\"><a class=\"markdownIt-Anchor\" href=\"#10回调协程\"></a> 10.回调协程</h4>\n<h4 id=\"11asynch-await\"><a class=\"markdownIt-Anchor\" href=\"#11asynch-await\"></a> 11.asynch await</h4>\n<h4 id=\"12事件循环\"><a class=\"markdownIt-Anchor\" href=\"#12事件循环\"></a> 12.事件循环</h4>\n"},{"title":"知识图谱表示学习综述","toc":"true# 是否启用内容索引","_content":"\n[copy from ](https://codeantenna.com/a/qAGLBODWDT)\n\n本文分享一篇知识图谱表示学习汇报ppt，将知识图谱表示学习方法粗略分为四大类，涉及将近30篇优秀论文，只简单介绍其核心思想，完整汇报ppt获取请关注公众号(AI机器学习与知识图谱)回复关键字：知识图谱表示学习\n\n1. 翻译距离模型：包括TransH、TransR、TransD、TranSparse、TransM、MianfoldE、TransF、TransA、KG2E、TransG、UM、SE模型等；\n\n2. 语义匹配模型：包括RESCAL、DistMult、HoLE、ComplEx、ANALOGY、SNE、NTN、MLP、NAM模型等；\n\n3. 随机游走模型：包括DeepWalk、LINE、node2vec模型等；\n\n4. 子图汇聚模型：包括GCN、GAT、GraphSage模型等。\n\n\n\n\n## 一、Motivation\n\n知识图谱是由实体（节点）和关系（不同类型的边）组成的多关系图，每条边连接头尾两个实体，通常用SPO三元组进行表示（subject,predicate, object），被称为一个事实。虽然知识图谱在表示结构化数据方面很有效，但这类三元组的潜在符号特性通常使得KGs很难操作。\n\n因此知识图谱表示学习便成为了一个热门的研究方向，知识图谱嵌入的关键思想是将图谱中的实体entity和关系relation转化为连续的向量，在保留KG原有结构的同时使得操作方便。于是便可将entityembedding和relationembedding用到下游各种任务中，例如图谱补全，关系抽取，实体分类，实体链接及实体融合等\n\n知识图谱嵌入技术经典三个步骤：\n\n知识图谱嵌入技术经典三个步骤：\n\n1、representing entities and relations\n\n2、defininga scoring function\n\n3、learning entity and relation representations（最大化所有观测事实的置信度plausibility）\n\n根据scoring function区别分为distance-based scoring functions和similarity-based scoring functions\n\n## 二、翻译距离模型\n\n基础三大模型：TransE，TransH，TransR\n\n![](https://image.yayan.xyz/20221202102322.png)\n\n三大模型图\n\n![](https://image.yayan.xyz/20221202102505.png)\n\n后续改进模型\n\n![](https://image.yayan.xyz/20221202102553.png)\n\n后后续改进模型\n\n![](https://image.yayan.xyz/20221202102635.png)\n\n高斯嵌入\n\n![](https://image.yayan.xyz/20221202103008.png)\n\n\n小结：\n\n![](https://image.yayan.xyz/20221202102931.png)\n\n\n## 三、语义匹配模型\n\n语义匹配基本模型：\n\n![](https://image.yayan.xyz/20221202103123.png)\n\n模型图\n\n![](https://image.yayan.xyz/20221202103139.png)\n\n看不懂的模型\n\n![](https://image.yayan.xyz/20221202103250.png)\n\n基于神经网络的匹配\n\n\n![](https://image.yayan.xyz/20221202103514.png)\n\n模型图\n\n![](https://image.yayan.xyz/20221202103523.png)\n\n小结\n![](https://image.yayan.xyz/20221202103532.png)\n\n\n## 四、基于随机游走的模型\n\nDeepWalk：\n\n![](https://image.yayan.xyz/20221202103603.png)\n\nLine：\n\n![](https://image.yayan.xyz/20221202103610.png)\n\n![](https://image.yayan.xyz/20221202103627.png)\n\n![](https://image.yayan.xyz/20221202103636.png)\n\nnode2vec：\n\n![](https://image.yayan.xyz/20221202103644.png)\n\n\n## 五、子图汇聚模型\nGCN图卷积：\n\n![](https://image.yayan.xyz/20221202103957.png)\n\n![](https://image.yayan.xyz/20221202104006.png)\n\nGAT图注意力：\n\n![](https://image.yayan.xyz/20221202104029.png)\n\nGraphSage：\n\n![](https://image.yayan.xyz/20221202104041.png)","source":"_posts/知识图谱表示学习综述,.md","raw":"---\ntitle: 知识图谱表示学习综述\ncategories:\n  - 学习笔记\ntags:\n  - 知识图谱表示\n  - 综述\ntoc: true# 是否启用内容索引\n---\n\n[copy from ](https://codeantenna.com/a/qAGLBODWDT)\n\n本文分享一篇知识图谱表示学习汇报ppt，将知识图谱表示学习方法粗略分为四大类，涉及将近30篇优秀论文，只简单介绍其核心思想，完整汇报ppt获取请关注公众号(AI机器学习与知识图谱)回复关键字：知识图谱表示学习\n\n1. 翻译距离模型：包括TransH、TransR、TransD、TranSparse、TransM、MianfoldE、TransF、TransA、KG2E、TransG、UM、SE模型等；\n\n2. 语义匹配模型：包括RESCAL、DistMult、HoLE、ComplEx、ANALOGY、SNE、NTN、MLP、NAM模型等；\n\n3. 随机游走模型：包括DeepWalk、LINE、node2vec模型等；\n\n4. 子图汇聚模型：包括GCN、GAT、GraphSage模型等。\n\n\n\n\n## 一、Motivation\n\n知识图谱是由实体（节点）和关系（不同类型的边）组成的多关系图，每条边连接头尾两个实体，通常用SPO三元组进行表示（subject,predicate, object），被称为一个事实。虽然知识图谱在表示结构化数据方面很有效，但这类三元组的潜在符号特性通常使得KGs很难操作。\n\n因此知识图谱表示学习便成为了一个热门的研究方向，知识图谱嵌入的关键思想是将图谱中的实体entity和关系relation转化为连续的向量，在保留KG原有结构的同时使得操作方便。于是便可将entityembedding和relationembedding用到下游各种任务中，例如图谱补全，关系抽取，实体分类，实体链接及实体融合等\n\n知识图谱嵌入技术经典三个步骤：\n\n知识图谱嵌入技术经典三个步骤：\n\n1、representing entities and relations\n\n2、defininga scoring function\n\n3、learning entity and relation representations（最大化所有观测事实的置信度plausibility）\n\n根据scoring function区别分为distance-based scoring functions和similarity-based scoring functions\n\n## 二、翻译距离模型\n\n基础三大模型：TransE，TransH，TransR\n\n![](https://image.yayan.xyz/20221202102322.png)\n\n三大模型图\n\n![](https://image.yayan.xyz/20221202102505.png)\n\n后续改进模型\n\n![](https://image.yayan.xyz/20221202102553.png)\n\n后后续改进模型\n\n![](https://image.yayan.xyz/20221202102635.png)\n\n高斯嵌入\n\n![](https://image.yayan.xyz/20221202103008.png)\n\n\n小结：\n\n![](https://image.yayan.xyz/20221202102931.png)\n\n\n## 三、语义匹配模型\n\n语义匹配基本模型：\n\n![](https://image.yayan.xyz/20221202103123.png)\n\n模型图\n\n![](https://image.yayan.xyz/20221202103139.png)\n\n看不懂的模型\n\n![](https://image.yayan.xyz/20221202103250.png)\n\n基于神经网络的匹配\n\n\n![](https://image.yayan.xyz/20221202103514.png)\n\n模型图\n\n![](https://image.yayan.xyz/20221202103523.png)\n\n小结\n![](https://image.yayan.xyz/20221202103532.png)\n\n\n## 四、基于随机游走的模型\n\nDeepWalk：\n\n![](https://image.yayan.xyz/20221202103603.png)\n\nLine：\n\n![](https://image.yayan.xyz/20221202103610.png)\n\n![](https://image.yayan.xyz/20221202103627.png)\n\n![](https://image.yayan.xyz/20221202103636.png)\n\nnode2vec：\n\n![](https://image.yayan.xyz/20221202103644.png)\n\n\n## 五、子图汇聚模型\nGCN图卷积：\n\n![](https://image.yayan.xyz/20221202103957.png)\n\n![](https://image.yayan.xyz/20221202104006.png)\n\nGAT图注意力：\n\n![](https://image.yayan.xyz/20221202104029.png)\n\nGraphSage：\n\n![](https://image.yayan.xyz/20221202104041.png)","slug":"知识图谱表示学习综述,","published":1,"date":"2022-12-02T02:19:08.766Z","updated":"2022-12-02T02:41:24.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clee4vhb0001bc8vq9kqu9xne","content":"<p><a href=\"https://codeantenna.com/a/qAGLBODWDT\">copy from </a></p>\n<p>本文分享一篇知识图谱表示学习汇报ppt，将知识图谱表示学习方法粗略分为四大类，涉及将近30篇优秀论文，只简单介绍其核心思想，完整汇报ppt获取请关注公众号(AI机器学习与知识图谱)回复关键字：知识图谱表示学习</p>\n<ol>\n<li>\n<p>翻译距离模型：包括TransH、TransR、TransD、TranSparse、TransM、MianfoldE、TransF、TransA、KG2E、TransG、UM、SE模型等；</p>\n</li>\n<li>\n<p>语义匹配模型：包括RESCAL、DistMult、HoLE、ComplEx、ANALOGY、SNE、NTN、MLP、NAM模型等；</p>\n</li>\n<li>\n<p>随机游走模型：包括DeepWalk、LINE、node2vec模型等；</p>\n</li>\n<li>\n<p>子图汇聚模型：包括GCN、GAT、GraphSage模型等。</p>\n</li>\n</ol>\n<h2 id=\"一-motivation\"><a class=\"markdownIt-Anchor\" href=\"#一-motivation\"></a> 一、Motivation</h2>\n<p>知识图谱是由实体（节点）和关系（不同类型的边）组成的多关系图，每条边连接头尾两个实体，通常用SPO三元组进行表示（subject,predicate, object），被称为一个事实。虽然知识图谱在表示结构化数据方面很有效，但这类三元组的潜在符号特性通常使得KGs很难操作。</p>\n<p>因此知识图谱表示学习便成为了一个热门的研究方向，知识图谱嵌入的关键思想是将图谱中的实体entity和关系relation转化为连续的向量，在保留KG原有结构的同时使得操作方便。于是便可将entityembedding和relationembedding用到下游各种任务中，例如图谱补全，关系抽取，实体分类，实体链接及实体融合等</p>\n<p>知识图谱嵌入技术经典三个步骤：</p>\n<p>知识图谱嵌入技术经典三个步骤：</p>\n<p>1、representing entities and relations</p>\n<p>2、defininga scoring function</p>\n<p>3、learning entity and relation representations（最大化所有观测事实的置信度plausibility）</p>\n<p>根据scoring function区别分为distance-based scoring functions和similarity-based scoring functions</p>\n<h2 id=\"二-翻译距离模型\"><a class=\"markdownIt-Anchor\" href=\"#二-翻译距离模型\"></a> 二、翻译距离模型</h2>\n<p>基础三大模型：TransE，TransH，TransR</p>\n<p><img src=\"https://image.yayan.xyz/20221202102322.png\" alt=\"\" /></p>\n<p>三大模型图</p>\n<p><img src=\"https://image.yayan.xyz/20221202102505.png\" alt=\"\" /></p>\n<p>后续改进模型</p>\n<p><img src=\"https://image.yayan.xyz/20221202102553.png\" alt=\"\" /></p>\n<p>后后续改进模型</p>\n<p><img src=\"https://image.yayan.xyz/20221202102635.png\" alt=\"\" /></p>\n<p>高斯嵌入</p>\n<p><img src=\"https://image.yayan.xyz/20221202103008.png\" alt=\"\" /></p>\n<p>小结：</p>\n<p><img src=\"https://image.yayan.xyz/20221202102931.png\" alt=\"\" /></p>\n<h2 id=\"三-语义匹配模型\"><a class=\"markdownIt-Anchor\" href=\"#三-语义匹配模型\"></a> 三、语义匹配模型</h2>\n<p>语义匹配基本模型：</p>\n<p><img src=\"https://image.yayan.xyz/20221202103123.png\" alt=\"\" /></p>\n<p>模型图</p>\n<p><img src=\"https://image.yayan.xyz/20221202103139.png\" alt=\"\" /></p>\n<p>看不懂的模型</p>\n<p><img src=\"https://image.yayan.xyz/20221202103250.png\" alt=\"\" /></p>\n<p>基于神经网络的匹配</p>\n<p><img src=\"https://image.yayan.xyz/20221202103514.png\" alt=\"\" /></p>\n<p>模型图</p>\n<p><img src=\"https://image.yayan.xyz/20221202103523.png\" alt=\"\" /></p>\n<p>小结<br />\n<img src=\"https://image.yayan.xyz/20221202103532.png\" alt=\"\" /></p>\n<h2 id=\"四-基于随机游走的模型\"><a class=\"markdownIt-Anchor\" href=\"#四-基于随机游走的模型\"></a> 四、基于随机游走的模型</h2>\n<p>DeepWalk：</p>\n<p><img src=\"https://image.yayan.xyz/20221202103603.png\" alt=\"\" /></p>\n<p>Line：</p>\n<p><img src=\"https://image.yayan.xyz/20221202103610.png\" alt=\"\" /></p>\n<p><img src=\"https://image.yayan.xyz/20221202103627.png\" alt=\"\" /></p>\n<p><img src=\"https://image.yayan.xyz/20221202103636.png\" alt=\"\" /></p>\n<p>node2vec：</p>\n<p><img src=\"https://image.yayan.xyz/20221202103644.png\" alt=\"\" /></p>\n<h2 id=\"五-子图汇聚模型\"><a class=\"markdownIt-Anchor\" href=\"#五-子图汇聚模型\"></a> 五、子图汇聚模型</h2>\n<p>GCN图卷积：</p>\n<p><img src=\"https://image.yayan.xyz/20221202103957.png\" alt=\"\" /></p>\n<p><img src=\"https://image.yayan.xyz/20221202104006.png\" alt=\"\" /></p>\n<p>GAT图注意力：</p>\n<p><img src=\"https://image.yayan.xyz/20221202104029.png\" alt=\"\" /></p>\n<p>GraphSage：</p>\n<p><img src=\"https://image.yayan.xyz/20221202104041.png\" alt=\"\" /></p>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p><a href=\"https://codeantenna.com/a/qAGLBODWDT\">copy from </a></p>\n<p>本文分享一篇知识图谱表示学习汇报ppt，将知识图谱表示学习方法粗略分为四大类，涉及将近30篇优秀论文，只简单介绍其核心思想，完整汇报ppt获取请关注公众号(AI机器学习与知识图谱)回复关键字：知识图谱表示学习</p>\n<ol>\n<li>\n<p>翻译距离模型：包括TransH、TransR、TransD、TranSparse、TransM、MianfoldE、TransF、TransA、KG2E、TransG、UM、SE模型等；</p>\n</li>\n<li>\n<p>语义匹配模型：包括RESCAL、DistMult、HoLE、ComplEx、ANALOGY、SNE、NTN、MLP、NAM模型等；</p>\n</li>\n<li>\n<p>随机游走模型：包括DeepWalk、LINE、node2vec模型等；</p>\n</li>\n<li>\n<p>子图汇聚模型：包括GCN、GAT、GraphSage模型等。</p>\n</li>\n</ol>\n<h2 id=\"一-motivation\"><a class=\"markdownIt-Anchor\" href=\"#一-motivation\"></a> 一、Motivation</h2>\n<p>知识图谱是由实体（节点）和关系（不同类型的边）组成的多关系图，每条边连接头尾两个实体，通常用SPO三元组进行表示（subject,predicate, object），被称为一个事实。虽然知识图谱在表示结构化数据方面很有效，但这类三元组的潜在符号特性通常使得KGs很难操作。</p>\n<p>因此知识图谱表示学习便成为了一个热门的研究方向，知识图谱嵌入的关键思想是将图谱中的实体entity和关系relation转化为连续的向量，在保留KG原有结构的同时使得操作方便。于是便可将entityembedding和relationembedding用到下游各种任务中，例如图谱补全，关系抽取，实体分类，实体链接及实体融合等</p>\n<p>知识图谱嵌入技术经典三个步骤：</p>\n<p>知识图谱嵌入技术经典三个步骤：</p>\n<p>1、representing entities and relations</p>\n<p>2、defininga scoring function</p>\n<p>3、learning entity and relation representations（最大化所有观测事实的置信度plausibility）</p>\n<p>根据scoring function区别分为distance-based scoring functions和similarity-based scoring functions</p>\n<h2 id=\"二-翻译距离模型\"><a class=\"markdownIt-Anchor\" href=\"#二-翻译距离模型\"></a> 二、翻译距离模型</h2>\n<p>基础三大模型：TransE，TransH，TransR</p>\n<p><img src=\"https://image.yayan.xyz/20221202102322.png\" alt=\"\" /></p>\n<p>三大模型图</p>\n<p><img src=\"https://image.yayan.xyz/20221202102505.png\" alt=\"\" /></p>\n<p>后续改进模型</p>\n<p><img src=\"https://image.yayan.xyz/20221202102553.png\" alt=\"\" /></p>\n<p>后后续改进模型</p>\n<p><img src=\"https://image.yayan.xyz/20221202102635.png\" alt=\"\" /></p>\n<p>高斯嵌入</p>\n<p><img src=\"https://image.yayan.xyz/20221202103008.png\" alt=\"\" /></p>\n<p>小结：</p>\n<p><img src=\"https://image.yayan.xyz/20221202102931.png\" alt=\"\" /></p>\n<h2 id=\"三-语义匹配模型\"><a class=\"markdownIt-Anchor\" href=\"#三-语义匹配模型\"></a> 三、语义匹配模型</h2>\n<p>语义匹配基本模型：</p>\n<p><img src=\"https://image.yayan.xyz/20221202103123.png\" alt=\"\" /></p>\n<p>模型图</p>\n<p><img src=\"https://image.yayan.xyz/20221202103139.png\" alt=\"\" /></p>\n<p>看不懂的模型</p>\n<p><img src=\"https://image.yayan.xyz/20221202103250.png\" alt=\"\" /></p>\n<p>基于神经网络的匹配</p>\n<p><img src=\"https://image.yayan.xyz/20221202103514.png\" alt=\"\" /></p>\n<p>模型图</p>\n<p><img src=\"https://image.yayan.xyz/20221202103523.png\" alt=\"\" /></p>\n<p>小结<br />\n<img src=\"https://image.yayan.xyz/20221202103532.png\" alt=\"\" /></p>\n<h2 id=\"四-基于随机游走的模型\"><a class=\"markdownIt-Anchor\" href=\"#四-基于随机游走的模型\"></a> 四、基于随机游走的模型</h2>\n<p>DeepWalk：</p>\n<p><img src=\"https://image.yayan.xyz/20221202103603.png\" alt=\"\" /></p>\n<p>Line：</p>\n<p><img src=\"https://image.yayan.xyz/20221202103610.png\" alt=\"\" /></p>\n<p><img src=\"https://image.yayan.xyz/20221202103627.png\" alt=\"\" /></p>\n<p><img src=\"https://image.yayan.xyz/20221202103636.png\" alt=\"\" /></p>\n<p>node2vec：</p>\n<p><img src=\"https://image.yayan.xyz/20221202103644.png\" alt=\"\" /></p>\n<h2 id=\"五-子图汇聚模型\"><a class=\"markdownIt-Anchor\" href=\"#五-子图汇聚模型\"></a> 五、子图汇聚模型</h2>\n<p>GCN图卷积：</p>\n<p><img src=\"https://image.yayan.xyz/20221202103957.png\" alt=\"\" /></p>\n<p><img src=\"https://image.yayan.xyz/20221202104006.png\" alt=\"\" /></p>\n<p>GAT图注意力：</p>\n<p><img src=\"https://image.yayan.xyz/20221202104029.png\" alt=\"\" /></p>\n<p>GraphSage：</p>\n<p><img src=\"https://image.yayan.xyz/20221202104041.png\" alt=\"\" /></p>\n"},{"_content":"```\ntitle:markdown记录\n```\n\n准备记录以下markdown在vscode中的一些快捷操作。\n","source":"_posts/markdown.md","raw":"```\ntitle:markdown记录\n```\n\n准备记录以下markdown在vscode中的一些快捷操作。\n","slug":"markdown","published":1,"date":"2022-10-22T00:58:32.349Z","updated":"2022-10-20T06:17:32.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clee4vhb1001ec8vq6ibgari0","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title:markdown记录</span><br></pre></td></tr></table></figure>\n<p>准备记录以下markdown在vscode中的一些快捷操作。</p>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title:markdown记录</span><br></pre></td></tr></table></figure>\n<p>准备记录以下markdown在vscode中的一些快捷操作。</p>\n"},{"title":"第一篇博客记录","toc":"true# 是否启用内容索引","_content":"😍😍😍\n\n第一篇博客，费尽了千辛万苦。\n\n还有很多没完善的地方，先用着，后续再改。\n\n因为自己写代码的过程中遇见了很多重复的错误，每次改bug都要浪费时间。\n\n索性没见一个都给他记录下来。\n\n这篇博客是用Github+hexo，用的pure主题。搭建过程中也遇到了很多问题。后续都会写出来。\n\n😆😆😆\n\n先记录一下：vscode写markdown加入表情\n\n[Markdown Emoji](https://www.webfx.com/tools/emoji-cheat-sheet) ，\n[还有这](https://emojipedia.org/people/)，\n[还有这](https://gist.github.com/rxaviers/7360908)\n\n😏😏😏\n😴😴😴\n\n结束，睡大觉去咯。\n\n😠😠😠\n\n！！！！\n\n一定一定 不要用git的shell执行npm或者hexo\n\nnpm在cmd安装的包和在gitshell安装的包是独立的！！！\n\n如果打开页面connot get，看看public里有没有html文件，没有就安装一些包。\n\n比如，不比如了(hello-hexo文章里有详细说明)，有时候在cmd里执行命令会出现报错，还得滚回gitshell里用，\n\n模模糊糊也不知道为啥，可能是安装的时候使用-g 和--save命令的区别\n\n有时间查查这两个参数搞清楚\n\n\n💢💢💢💢\n\n睡大觉去了\n\n\n🐷🐷🐷🐷\n\nmarkdown还能用点啥好玩的呢\n\n表情已经满足不了我的使用了 \n\n🤣🤣🤣\n\n发现了 windows下，中文输入法输一个i，里面的表情也都能用i\n\n![img](https://image.yayan.xyz/20221022101906.png)，选表情截不了图。\n\n👀👀👀\n","source":"_posts/第一篇博客记录.md","raw":"---\ntitle: 第一篇博客记录\ncategories:\n  - 杂谈\ntags:\n  - 搭建博客\ntoc: true# 是否启用内容索引\n---\n😍😍😍\n\n第一篇博客，费尽了千辛万苦。\n\n还有很多没完善的地方，先用着，后续再改。\n\n因为自己写代码的过程中遇见了很多重复的错误，每次改bug都要浪费时间。\n\n索性没见一个都给他记录下来。\n\n这篇博客是用Github+hexo，用的pure主题。搭建过程中也遇到了很多问题。后续都会写出来。\n\n😆😆😆\n\n先记录一下：vscode写markdown加入表情\n\n[Markdown Emoji](https://www.webfx.com/tools/emoji-cheat-sheet) ，\n[还有这](https://emojipedia.org/people/)，\n[还有这](https://gist.github.com/rxaviers/7360908)\n\n😏😏😏\n😴😴😴\n\n结束，睡大觉去咯。\n\n😠😠😠\n\n！！！！\n\n一定一定 不要用git的shell执行npm或者hexo\n\nnpm在cmd安装的包和在gitshell安装的包是独立的！！！\n\n如果打开页面connot get，看看public里有没有html文件，没有就安装一些包。\n\n比如，不比如了(hello-hexo文章里有详细说明)，有时候在cmd里执行命令会出现报错，还得滚回gitshell里用，\n\n模模糊糊也不知道为啥，可能是安装的时候使用-g 和--save命令的区别\n\n有时间查查这两个参数搞清楚\n\n\n💢💢💢💢\n\n睡大觉去了\n\n\n🐷🐷🐷🐷\n\nmarkdown还能用点啥好玩的呢\n\n表情已经满足不了我的使用了 \n\n🤣🤣🤣\n\n发现了 windows下，中文输入法输一个i，里面的表情也都能用i\n\n![img](https://image.yayan.xyz/20221022101906.png)，选表情截不了图。\n\n👀👀👀\n","slug":"第一篇博客记录","published":1,"date":"2022-10-22T00:58:32.349Z","updated":"2022-10-22T02:40:11.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clee4vhb2001gc8vqf5gj1cyk","content":"<p>😍😍😍</p>\n<p>第一篇博客，费尽了千辛万苦。</p>\n<p>还有很多没完善的地方，先用着，后续再改。</p>\n<p>因为自己写代码的过程中遇见了很多重复的错误，每次改bug都要浪费时间。</p>\n<p>索性没见一个都给他记录下来。</p>\n<p>这篇博客是用Github+hexo，用的pure主题。搭建过程中也遇到了很多问题。后续都会写出来。</p>\n<p>😆😆😆</p>\n<p>先记录一下：vscode写markdown加入表情</p>\n<p><a href=\"https://www.webfx.com/tools/emoji-cheat-sheet\">Markdown Emoji</a> ，<br />\n<a href=\"https://emojipedia.org/people/\">还有这</a>，<br />\n<a href=\"https://gist.github.com/rxaviers/7360908\">还有这</a></p>\n<p>😏😏😏<br />\n😴😴😴</p>\n<p>结束，睡大觉去咯。</p>\n<p>😠😠😠</p>\n<p>！！！！</p>\n<p>一定一定 不要用git的shell执行npm或者hexo</p>\n<p>npm在cmd安装的包和在gitshell安装的包是独立的！！！</p>\n<p>如果打开页面connot get，看看public里有没有html文件，没有就安装一些包。</p>\n<p>比如，不比如了(hello-hexo文章里有详细说明)，有时候在cmd里执行命令会出现报错，还得滚回gitshell里用，</p>\n<p>模模糊糊也不知道为啥，可能是安装的时候使用-g 和–save命令的区别</p>\n<p>有时间查查这两个参数搞清楚</p>\n<p>💢💢💢💢</p>\n<p>睡大觉去了</p>\n<p>🐷🐷🐷🐷</p>\n<p>markdown还能用点啥好玩的呢</p>\n<p>表情已经满足不了我的使用了</p>\n<p>🤣🤣🤣</p>\n<p>发现了 windows下，中文输入法输一个i，里面的表情也都能用i</p>\n<p><img src=\"https://image.yayan.xyz/20221022101906.png\" alt=\"img\" />，选表情截不了图。</p>\n<p>👀👀👀</p>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>😍😍😍</p>\n<p>第一篇博客，费尽了千辛万苦。</p>\n<p>还有很多没完善的地方，先用着，后续再改。</p>\n<p>因为自己写代码的过程中遇见了很多重复的错误，每次改bug都要浪费时间。</p>\n<p>索性没见一个都给他记录下来。</p>\n<p>这篇博客是用Github+hexo，用的pure主题。搭建过程中也遇到了很多问题。后续都会写出来。</p>\n<p>😆😆😆</p>\n<p>先记录一下：vscode写markdown加入表情</p>\n<p><a href=\"https://www.webfx.com/tools/emoji-cheat-sheet\">Markdown Emoji</a> ，<br />\n<a href=\"https://emojipedia.org/people/\">还有这</a>，<br />\n<a href=\"https://gist.github.com/rxaviers/7360908\">还有这</a></p>\n<p>😏😏😏<br />\n😴😴😴</p>\n<p>结束，睡大觉去咯。</p>\n<p>😠😠😠</p>\n<p>！！！！</p>\n<p>一定一定 不要用git的shell执行npm或者hexo</p>\n<p>npm在cmd安装的包和在gitshell安装的包是独立的！！！</p>\n<p>如果打开页面connot get，看看public里有没有html文件，没有就安装一些包。</p>\n<p>比如，不比如了(hello-hexo文章里有详细说明)，有时候在cmd里执行命令会出现报错，还得滚回gitshell里用，</p>\n<p>模模糊糊也不知道为啥，可能是安装的时候使用-g 和–save命令的区别</p>\n<p>有时间查查这两个参数搞清楚</p>\n<p>💢💢💢💢</p>\n<p>睡大觉去了</p>\n<p>🐷🐷🐷🐷</p>\n<p>markdown还能用点啥好玩的呢</p>\n<p>表情已经满足不了我的使用了</p>\n<p>🤣🤣🤣</p>\n<p>发现了 windows下，中文输入法输一个i，里面的表情也都能用i</p>\n<p><img src=\"https://image.yayan.xyz/20221022101906.png\" alt=\"img\" />，选表情截不了图。</p>\n<p>👀👀👀</p>\n"},{"title":"排序算法复杂度","toc":"true# 是否启用内容索引","_content":"| 算法                   | 稳定性         | 空间复杂度      | 时间复杂度           | 分类            |\n| ---------------------- | -------------- | --------------- | -------------------- | --------------- |\n| ***插入排序*** | ★稳定         | $O(1)$        | $O(n^2) $          | 插入类          |\n| 希尔排序               | 不稳定         | $O(1)$        | $O(n^{1.3}-n^2) $  | 插入类          |\n| ***冒泡排序*** | ★稳定         | $O(1)$        | $O(n^2)$           | 交换类          |\n| 快速排序               | 不稳定         | $O(log_2(n))$ | $O(nlog_2(n)-n^2)$ | 交换类          |\n| 选择排序               | 不稳定         | $O(1)$        | $O(n^2)$           | 选择类          |\n| 堆排序                 | 不稳定         | $O(1)$        | $O(nlog_2(n))$     | 选择类          |\n| 堆排序                 | **建堆** | $O(n)$        | **调整**       | $O(log_2(n))$ |\n| ***归并排序*** | ★稳定         | $O(n)$        | $O(nlog_2(n))$     |                 |\n| ***基数排序*** | ★稳定         | $O(r)$        | $O(d(n+r))$        |                 |\n\n\n```bash\n后面慢慢补充每个算法的代码\n顺便记一下:学校的考试真sb\n```\n","source":"_posts/排序复杂度.md","raw":"---\ntitle: 排序算法复杂度\ncategories:\n  - 学习笔记\ntags:\n  - 排序算法\ntoc: true# 是否启用内容索引\n---\n| 算法                   | 稳定性         | 空间复杂度      | 时间复杂度           | 分类            |\n| ---------------------- | -------------- | --------------- | -------------------- | --------------- |\n| ***插入排序*** | ★稳定         | $O(1)$        | $O(n^2) $          | 插入类          |\n| 希尔排序               | 不稳定         | $O(1)$        | $O(n^{1.3}-n^2) $  | 插入类          |\n| ***冒泡排序*** | ★稳定         | $O(1)$        | $O(n^2)$           | 交换类          |\n| 快速排序               | 不稳定         | $O(log_2(n))$ | $O(nlog_2(n)-n^2)$ | 交换类          |\n| 选择排序               | 不稳定         | $O(1)$        | $O(n^2)$           | 选择类          |\n| 堆排序                 | 不稳定         | $O(1)$        | $O(nlog_2(n))$     | 选择类          |\n| 堆排序                 | **建堆** | $O(n)$        | **调整**       | $O(log_2(n))$ |\n| ***归并排序*** | ★稳定         | $O(n)$        | $O(nlog_2(n))$     |                 |\n| ***基数排序*** | ★稳定         | $O(r)$        | $O(d(n+r))$        |                 |\n\n\n```bash\n后面慢慢补充每个算法的代码\n顺便记一下:学校的考试真sb\n```\n","slug":"排序复杂度","published":1,"date":"2022-11-12T13:53:00.287Z","updated":"2022-11-15T12:59:44.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clee4vhb3001jc8vqhyeng0lq","content":"<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>稳定性</th>\n<th>空间复杂度</th>\n<th>时间复杂度</th>\n<th>分类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em><strong>插入排序</strong></em></td>\n<td>★稳定</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>$O(n^2) $</td>\n<td>插入类</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td>不稳定</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>$O(n<sup>{1.3}-n</sup>2) $</td>\n<td>插入类</td>\n</tr>\n<tr>\n<td><em><strong>冒泡排序</strong></em></td>\n<td>★稳定</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td>交换类</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>不稳定</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log_2(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>−</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2(n)-n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td>交换类</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>不稳定</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td>选择类</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>不稳定</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>选择类</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td><strong>建堆</strong></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><strong>调整</strong></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log_2(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></td>\n</tr>\n<tr>\n<td><em><strong>归并排序</strong></em></td>\n<td>★稳定</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></td>\n<td></td>\n</tr>\n<tr>\n<td><em><strong>基数排序</strong></em></td>\n<td>★稳定</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>r</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(d(n+r))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后面慢慢补充每个算法的代码</span><br><span class=\"line\">顺便记一下:学校的考试真sb</span><br></pre></td></tr></table></figure>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>稳定性</th>\n<th>空间复杂度</th>\n<th>时间复杂度</th>\n<th>分类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em><strong>插入排序</strong></em></td>\n<td>★稳定</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>$O(n^2) $</td>\n<td>插入类</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td>不稳定</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>$O(n<sup>{1.3}-n</sup>2) $</td>\n<td>插入类</td>\n</tr>\n<tr>\n<td><em><strong>冒泡排序</strong></em></td>\n<td>★稳定</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td>交换类</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>不稳定</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log_2(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>−</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2(n)-n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td>交换类</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>不稳定</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td>选择类</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>不稳定</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>选择类</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td><strong>建堆</strong></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><strong>调整</strong></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log_2(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></td>\n</tr>\n<tr>\n<td><em><strong>归并排序</strong></em></td>\n<td>★稳定</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></td>\n<td></td>\n</tr>\n<tr>\n<td><em><strong>基数排序</strong></em></td>\n<td>★稳定</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>r</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(d(n+r))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后面慢慢补充每个算法的代码</span><br><span class=\"line\">顺便记一下:学校的考试真sb</span><br></pre></td></tr></table></figure>\n"},{"title":"快速傅里叶变换(FFT)求多项式乘法","toc":"true# 是否启用内容索引","_content":"[toc]\n\n推荐一篇写的很好的[课件](https://www.renrendoc.com/paper/201816620.html)\n\n\n## 多项式的表示与乘法\n1. 系数表示法\n多项式$A(x)=\\sum_{i=0}^{n} a_ix^i$的系数表示就是\n$a=(a_0,a_1,...,a_n)^T$\n\n>如果用系数表示,多项式乘法的复杂度是$O(n^2)$,就是和平时手算过程一样\n\n\n2. 点值表示法\nn+1个不同的点能唯一确定n次多项式系数\n\n对于多项式$A(x),B(x)$\n$A(x):\\left\\{\\left(x_{0}, y_{0}\\right),\\left(x_{1}, y_{1}\\right),\\left(x_{2}, y_{2}\\right), \\ldots,\\left(x_{n}, y_{n}\\right)\\right\\},$\n\n$B(x):\\left\\{\\left(x_{0}, y_{0}^{\\prime}\\right),\\left(x_{1}, y_{1}^{\\prime}\\right),\\left(x_{2}, y_{2}^{\\prime}\\right), \\ldots,\\left(x_{n}, y_{n}^{\\prime}\\right)\\right\\}$\n\n\n>设 $C(x) = A(x) B(x)$,因为$C(x)$的系数是2n,所以要在$A(x)和B(x)$上取2n个不同的点才行,$C(x)$的点值表示为\n$\\left\\{\\left(x_{0}, y_{0} y_{0}^{\\prime}\\right),\\left(x_{1}, y_{1} y_{1}^{\\prime}\\right),\\left(x_{2}, y_{2} y_{2}^{\\prime}\\right), \\ldots,\\left(x_{2 n}, y_{2 n} y_{2 n}^{\\prime}\\right)\\right\\}$\n点值表示的多项式乘法复杂度为$O(n)$\n\n\n## 系数表示法与点值表示法的转换\n![](https://image.yayan.xyz/20221119121436.png)\n系数到点(也叫求值):$Xa=y$\n因为系数矩阵行列式不为0,所以可逆.\n点到系数(也叫插值):$a=X^{-1}y$\n\n## 单位复数根\nn次单位复数根满足$w^n=1$,n次单位复数根敲好有n个\n复杂证明略过,n次单位根的所有根,作为计算点值的$x$\n\n## 离散傅里叶变换\n\n对于  n  次多项式  $A(x)=\\sum_{i=0}^{n} a_{i} x^{i}$ ,\n\n其系数形式为  $a=\\left(a_{0}, a_{1}, \\ldots, a_{n}\\right)^{T}$ .\n\n设 $ y_{k}=A\\left(\\omega_{n}^{k}\\right)=\\sum_{i=0}^{n} a_{i} \\omega_{n+1}^{k i}, 0 \\leq k \\leq n, k \\in N $,\n\n则向量 $ y=\\left(y_{0}, y_{1}, \\ldots, y_{n}\\right)^{T} $\n\n就是系数向量 $ a=\\left(a_{0}, a_{1}, \\ldots, a_{n}\\right)^{T} $ 的离散傅里叶变换.\n\n但是离散傅里叶变换的复杂度仍是$O(n^2)$\n\n## 快速傅里叶变换(FFT)\n\nFFT 将$A(x)$拆分为奇数下标与偶数下标的系数\n\n\n$A^{[0]}(x)=a_{0}+a_{2} x+a_{4} x^{2}+\\cdots+a_{n-1} x^{\\frac{n-1}{2}},$\n\n\n$A^{[1]}(x)=a_{1}+a_{3} x+a_{5} x^{2}+\\cdots+a_{n} x^{\\frac{n-1}{2}} .$\n\n $A^{[0]}(x)$  包含  A  所有偶数下标的系数, $ A^{[1]}(x)$  数下标的系数, 于是有:\n\n$A(x)=A^{[0]}\\left(x^{2}\\right)+x A^{[1]}\\left(x^{2}\\right) .$\n\n所以, 求 $ A(x)$  在  $\\omega_{n+1}^{0}, \\omega_{n+1}^{1}, \\ldots, \\omega_{n+1}^{n}$  处的值的问题转化为:\na. 求次数为 $ \\frac{n}{2}$  的多项式 $ A^{[0]}(x), A^{[1]}(x) $ \n在点 $\\left(\\omega_{n+1}^{0}\\right)^{2},\\left(\\omega_{n+1}^{1}\\right)^{2}, \\ldots,\\left(\\omega_{n+1}^{n}\\right)^{2}$  处的取值.\n\n递归即可得到结果.\n\n\n>复杂度\n$T(n)=2 T\\left(\\frac{n}{2}\\right)+\\Theta(n)$\n\n然后进行点值乘法,得到点值的结果,再利用逆变换为系数表达.\n\n\n## 具体流程\n\n1. 加倍多项式次数\n通过加入  $n$  个系数为 0 的高阶项, 把多项式 $ A(x)  和  B(x)$  变为次数为  $2 n$  的 多项式, 并构造其系数表达.\n2. 求值\n通过应用 $ 2(n+1) $ 阶的 $FFT $计算出  $A(x)  和  B(x) $ 长度为 $ 2(n+1) $ 的点值表达. 这些点值表达中包含了两个多项式在 $ 2(n+1) $ 次单位根处的取值.\n3. 逐点相乘\n把  $A(x)  的值与  B(x) $的值逐点相乘, 可以计算出  $C(x)=A(x) B(x) $ 的点值表 达, 这个表示中包含了 $ C(x)  在每个  2(n+1) $ 次单位根处的值.\n4. 揷值\n通过对  $2(n+1) $ 个点值应用 FFT, 计算其逆 DFT, 就可以构造出多项式$C(x)$的系数表达\n\n由于 $ 1 、 3 $ 的时间复杂度为 $ \\Theta(n)$, $2 、 4 $ 的时间复杂度为  $\\Theta\\left(n \\log _{2} n\\right)$ ,\n因此整个算法的时间复杂度为 $ \\Theta\\left(n \\log _{2} n\\right)$ .\n\n\n## python 代码\n\n```python\nimport math\n# 定义Π\nPI = 3.1415926\n# 定义复数\nclass complex:\n    def __init__(self,real=0,virtual=0) -> None:\n        self.real=real\n        self.virtual=virtual\n    \n    def __str__(self) -> str:\n        return f'real:{self.real}  virtual:{self.virtual}\\n'\n    \n# 复数的乘法加法减法\ndef complex_mut(a,b):\n    ret=complex()\n    ret.real = a.real * b.real - a.virtual * b.virtual\n    ret.virtual = a.real * b.virtual + a.virtual * b.real\n    return ret\n    \n    \ndef complex_add(a,b):\n    ret=complex()\n    ret.real = a.real + b.real\n    ret.virtual = a.virtual + b.virtual\n    return ret\n\n\ndef complex_sub(a,b):\n    ret=complex()\n    ret.real = a.real - b.real\n    ret.virtual = a.virtual - b.virtual\n    return ret\n    \n# 获取i次n复根\ndef get_w(n,k,inverse):\n    w=complex()\n    # 根据欧拉函数获得w\n    accy=round(PI*2*k/n,6)\n    # 逆傅里叶变换sin前面要有-\n    if inverse:\n        w.real=round(math.cos(accy),6)\n        w.virtual=round(-math.sin(accy),6)\n    else:\n        w.real=round(math.cos(accy),6)\n        w.virtual=round(math.sin(accy),6)\n    return w\n\n# 快速傅里叶变换\ndef FFT(coefficient,n,inverse):\n    # 如果n==1了直接返回系数\n    if n==1:\n        return coefficient\n    # 用于存放奇偶次项\n    odd,even=[],[]\n    for index in range(n):\n        if index&1:\n            odd.append(coefficient[index])\n        else:\n            even.append(coefficient[index])\n    # 对奇偶次项分别计算快速傅里叶变换\n    e_k=FFT(even,n//2,inverse)\n    d_k=FFT(odd,n//2,inverse)\n    # 计算第k个点和第k+n//2个点的y坐标\n    y_k,y_k_2=[],[]\n    for i in range(n//2):\n        w=get_w(n,i,inverse)\n        y_k.append(complex_add(e_k[i],complex_mut(w,d_k[i])))\n        y_k_2.append(complex_sub(e_k[i],complex_mut(w,d_k[i])))\n    # 返回n个点的y坐标\n    return y_k+y_k_2\n    \n        \ndef polynomial_mul(coefficient_a,coefficient_b):\n    # 本来是坐标代表高位\n    # 现在反过来,左边代表地位,索引就是x的项数\n    coefficient_a=coefficient_a[::-1]\n    coefficient_b=coefficient_b[::-1]\n    # 计算乘积的最高次项是多少\n    length=len(coefficient_a)-1+len(coefficient_b)-1\n    # 取乘积的此项大的 2的n次方 方便后面FFT计算\n    digitnum = 1\n    while length>0:\n        length>>=1\n        digitnum+=1\n    length = 1\n    while digitnum>0:\n        length<<=1\n        digitnum-=1\n    # 把系数变为复数,方便后面和n复根计算\n    a,b=[complex() for _ in range(length+1)],[complex() for _ in range(length+1)]\n    for index,item in enumerate(coefficient_a):\n        a[index].real=item\n    for index,item in enumerate(coefficient_b):\n        b[index].real=item\n    # 对系数a,b进行快速傅里叶变换\n    FFT_a=FFT(a,length,inverse=False)\n    FFT_b=FFT(b,length,inverse=False)\n    c=[]\n    # 对变换得到的y坐标进行点值乘法\n    for index in range(length):\n        c.append(complex_mut(FFT_a[index],FFT_b[index]))\n    # 对c进行逆傅里叶变换\n    FFT_c=FFT(c,length,inverse=True)\n    # 取c的实部才是结果\n    ans=[]\n    for item in FFT_c:\n        # 控制精度,因为float计算会有误差\n        if item.real/length>0.05 or item.real/length<-0.05:\n            # 小数点后保留2位\n            # 得到的结果还需要除以n\n            ans.append(round(item.real/length,2))\n        else:\n            ans.append(0)\n    return ans\n# (x2+x+1)^2\n# x4+x3+x2+x3+x2+x+x2+x+1\n# x4+2*x3+3*x2+2*x+1\n# 0 0 0 1 2 3 2 1\nif __name__=='__main__':\n    # 左边代表高次项,右边代表低次项\n    a=[0,3,2]\n    b=[2,1,1]\n    # O(nlogn)的多项式乘法\n    c=polynomial_mul(a,b)\n    # 打印\n    astr=' + '.join([f'{item}*x^{index} ' for index,item in enumerate(a[::-1])][::-1])\n    bstr=' + '.join([f'{item}*x^{index} ' for index,item in enumerate(b[::-1])][::-1])\n    print(f\"    {astr}\")\n    print(f\"*   {bstr}\")\n    cstr=' + '.join([f'{item}*x^{index} ' for index,item in enumerate(c) if item !=0  ][::-1]  )\n    print(f\"=   {cstr}\")\n\n```\n## C++代码\n来自[知乎](https://zhuanlan.zhihu.com/p/411082641)\n```C++\n#include<iostream>\n#include<vector>\n#include<iomanip>\n#include<math.h>\nusing namespace std;\nconst double PI = 3.1415926;\nstruct _complex{\n    double x;\n    double y;\n};//手动封装的复数结构体，x为实部，y为虚部\n_complex a[4096], b[4096];//用于存储两个多项式的系数\nbool is_output[4096];//后面会用到的用于判断是否输出的一串变量\n_complex omega(const int& n, const int& k,bool inverse)\n{\n\t_complex r;\n\tif (!inverse)\n\t{\n\tr.x = cos(PI * 2 * k / n);\n\tr.y = sin(PI * 2 * k / n);\n\t}\n\telse\n\t{\n\t\tr.x = cos(PI * 2 * k / n);\n\t\tr.y = -sin(PI * 2 * k / n);\n\t}\n\treturn r;\n}//用于插复根\ninline _complex operator*(_complex a, _complex b)\n{\n\t_complex r;\n\tr.x = a.x * b.x - a.y * b.y;\n\tr.y = a.x * b.y + a.y * b.x;\n\treturn r;\n}\ninline _complex operator+(_complex a, _complex b)\n{\n\t_complex r;\n\tr.x = a.x + b.x;\n\tr.y = a.y + b.y;\n\treturn r;\n}\ninline _complex operator-(_complex a, _complex b)\n{\n\t_complex r;\n\tr.x = a.x - b.x;\n\tr.y = a.y - b.y;\n\treturn r;\n}\n//因为没有用到除法，这里我就没有重载除的函数\nvoid Real_DFT(_complex* a, bool inverse, int anum)//这个inverse表示是否为反变换，false为否，true表示是\n{\n\tif (anum == 1)\n\t\treturn;\n\tvector<_complex> buf1, buf2;//buf1和buf2为两个缓冲数组，用于暂存变换中各项系数\n\tfor (int i = 0; i < anum ; i++)\n\t{\n\t\tif (i & 1)\n\t\t{\n\t\t\tbuf2.push_back(a[i]);//奇数项\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbuf1.push_back(a[i]);//偶数项\n\t\t}\n\t}\n\tfor (int i = 0; i < anum / 2; i++)\n\t{\n\t\ta[i] = buf1[i];\n\t\ta[i + anum / 2] = buf2[i];\n\t}//拆分排序后重新赋值回a，为下一步排序准备\n\tReal_DFT(a, inverse, anum / 2);\n\tReal_DFT(a + anum / 2, inverse, anum / 2);//奇偶数项拆开后迭代继续拆分\n\tint armlength = anum / 2;\n\tfor (int i = 0; i < armlength; i++)\n\t{\n\t\t_complex t = omega(anum, i, inverse);\n\t\tbuf1[i] = a[i] + t * a[i + anum / 2];//低次复根走这边插\n\t\tbuf2[i] = a[i] - t * a[i + anum / 2];//高次复根走这边插\n\t}//这里继续用到了buf数组只是为了暂存，没有别的意思\n\tfor (int i = 0; i < anum / 2; i++)\n\t{\n\t\ta[i] = buf1[i];\n\t\ta[i + anum / 2] = buf2[i];\n\t}//重新赋值回去\n\treturn;\n}\nint main()\n{\n//inport data\n\tint numa = 0, numb = 0;//numa是a多项式的项数，numb同理\n\tcin >> numa;\n\tint ptr0 = 0, maxa = 0, sum = 0, ptr1 = 0,maxb=0;//maxa存储a多项式中的最高次幂，maxb同理\n\tfor (int i = 0; i<numa; i++)\n\t{\n\t\tint id = 0;\n\t\tcin >> id;\n\t\tmaxa = maxa > id ? maxa : id;\n\t\tcin >> a[id].x;\n\t}\n\tcin >> numb;\n\tfor (int i = 0; i < numb; i++)\n\t{\n\t\tint id = 0;\n\t\t\n\t\tcin >> id;\n\t\tmaxb = maxb > id ? maxb : id;\n\t\tcin >> b[id].x;\n\t}\n\tsum = maxa + maxb;\n//decide complete num\n\tint digitnum = 1;\n\tfor (; sum > 0; sum >>= 1, digitnum++);\n\tsum = 1;\n\tfor (; digitnum > 0; sum <<= 1, digitnum--);//由于傅里叶变换要求插值数为2的整数次幂\n//这里首先确定多项式相乘后最多的项数也就是sum然后找到第一个比sum大的2的整数次幂的数，将sum重置为这个2的整数次幂\n//Fast Fourier Transform\n\tReal_DFT(a, false, sum);\n\tReal_DFT(b, false, sum);\n\tfor (int i = 0; i < sum; i++)\n\t\ta[i] = a[i] * b[i];//这一步就是上文没有细讲的点值表达式相乘，还是挺好搞的\n\tReal_DFT(a, true, sum);\n//export data\n\tint num=0;\n\tfor (int i = 0; i <= sum; i++)\n\t{\n\t\tif (a[i].x / sum > 0.05||a[i].x/sum<-0.05)//遍历得到的结果，如果这个数的绝对值大于0.05（题目要求的0.1精度，根据四舍五入原则判断），则准备输出\n\t\t{\n\t\t\tnum++;\n\t\t\tis_output[i] = 1;\n\t\t}\n\t}\n\tcout  << num;\n\tfor (int i = sum; i >=0; i--)\n\t{\n\t\tif(is_output[i]==1)\n\t\t\tcout << \" \" <<i<<\" \"<< std::fixed << setprecision(1) << (a[i].x / sum);\n\t}\n\treturn 0;\n}\n\n输入\n2 1 2.4 0 3.2\n2 2 1.5 1 0.5\n\n输出\n3 3 3.6 2 6.0 1 1.6\n```","source":"_posts/快速傅里叶变换(FFT)求多项式乘法.md","raw":"---\ntitle: 快速傅里叶变换(FFT)求多项式乘法\ncategories:\n  - 学习笔记\ntags:\n  - 多项式乘法\n  - 快速傅里叶变换\n  - FFT\ntoc: true# 是否启用内容索引\n---\n[toc]\n\n推荐一篇写的很好的[课件](https://www.renrendoc.com/paper/201816620.html)\n\n\n## 多项式的表示与乘法\n1. 系数表示法\n多项式$A(x)=\\sum_{i=0}^{n} a_ix^i$的系数表示就是\n$a=(a_0,a_1,...,a_n)^T$\n\n>如果用系数表示,多项式乘法的复杂度是$O(n^2)$,就是和平时手算过程一样\n\n\n2. 点值表示法\nn+1个不同的点能唯一确定n次多项式系数\n\n对于多项式$A(x),B(x)$\n$A(x):\\left\\{\\left(x_{0}, y_{0}\\right),\\left(x_{1}, y_{1}\\right),\\left(x_{2}, y_{2}\\right), \\ldots,\\left(x_{n}, y_{n}\\right)\\right\\},$\n\n$B(x):\\left\\{\\left(x_{0}, y_{0}^{\\prime}\\right),\\left(x_{1}, y_{1}^{\\prime}\\right),\\left(x_{2}, y_{2}^{\\prime}\\right), \\ldots,\\left(x_{n}, y_{n}^{\\prime}\\right)\\right\\}$\n\n\n>设 $C(x) = A(x) B(x)$,因为$C(x)$的系数是2n,所以要在$A(x)和B(x)$上取2n个不同的点才行,$C(x)$的点值表示为\n$\\left\\{\\left(x_{0}, y_{0} y_{0}^{\\prime}\\right),\\left(x_{1}, y_{1} y_{1}^{\\prime}\\right),\\left(x_{2}, y_{2} y_{2}^{\\prime}\\right), \\ldots,\\left(x_{2 n}, y_{2 n} y_{2 n}^{\\prime}\\right)\\right\\}$\n点值表示的多项式乘法复杂度为$O(n)$\n\n\n## 系数表示法与点值表示法的转换\n![](https://image.yayan.xyz/20221119121436.png)\n系数到点(也叫求值):$Xa=y$\n因为系数矩阵行列式不为0,所以可逆.\n点到系数(也叫插值):$a=X^{-1}y$\n\n## 单位复数根\nn次单位复数根满足$w^n=1$,n次单位复数根敲好有n个\n复杂证明略过,n次单位根的所有根,作为计算点值的$x$\n\n## 离散傅里叶变换\n\n对于  n  次多项式  $A(x)=\\sum_{i=0}^{n} a_{i} x^{i}$ ,\n\n其系数形式为  $a=\\left(a_{0}, a_{1}, \\ldots, a_{n}\\right)^{T}$ .\n\n设 $ y_{k}=A\\left(\\omega_{n}^{k}\\right)=\\sum_{i=0}^{n} a_{i} \\omega_{n+1}^{k i}, 0 \\leq k \\leq n, k \\in N $,\n\n则向量 $ y=\\left(y_{0}, y_{1}, \\ldots, y_{n}\\right)^{T} $\n\n就是系数向量 $ a=\\left(a_{0}, a_{1}, \\ldots, a_{n}\\right)^{T} $ 的离散傅里叶变换.\n\n但是离散傅里叶变换的复杂度仍是$O(n^2)$\n\n## 快速傅里叶变换(FFT)\n\nFFT 将$A(x)$拆分为奇数下标与偶数下标的系数\n\n\n$A^{[0]}(x)=a_{0}+a_{2} x+a_{4} x^{2}+\\cdots+a_{n-1} x^{\\frac{n-1}{2}},$\n\n\n$A^{[1]}(x)=a_{1}+a_{3} x+a_{5} x^{2}+\\cdots+a_{n} x^{\\frac{n-1}{2}} .$\n\n $A^{[0]}(x)$  包含  A  所有偶数下标的系数, $ A^{[1]}(x)$  数下标的系数, 于是有:\n\n$A(x)=A^{[0]}\\left(x^{2}\\right)+x A^{[1]}\\left(x^{2}\\right) .$\n\n所以, 求 $ A(x)$  在  $\\omega_{n+1}^{0}, \\omega_{n+1}^{1}, \\ldots, \\omega_{n+1}^{n}$  处的值的问题转化为:\na. 求次数为 $ \\frac{n}{2}$  的多项式 $ A^{[0]}(x), A^{[1]}(x) $ \n在点 $\\left(\\omega_{n+1}^{0}\\right)^{2},\\left(\\omega_{n+1}^{1}\\right)^{2}, \\ldots,\\left(\\omega_{n+1}^{n}\\right)^{2}$  处的取值.\n\n递归即可得到结果.\n\n\n>复杂度\n$T(n)=2 T\\left(\\frac{n}{2}\\right)+\\Theta(n)$\n\n然后进行点值乘法,得到点值的结果,再利用逆变换为系数表达.\n\n\n## 具体流程\n\n1. 加倍多项式次数\n通过加入  $n$  个系数为 0 的高阶项, 把多项式 $ A(x)  和  B(x)$  变为次数为  $2 n$  的 多项式, 并构造其系数表达.\n2. 求值\n通过应用 $ 2(n+1) $ 阶的 $FFT $计算出  $A(x)  和  B(x) $ 长度为 $ 2(n+1) $ 的点值表达. 这些点值表达中包含了两个多项式在 $ 2(n+1) $ 次单位根处的取值.\n3. 逐点相乘\n把  $A(x)  的值与  B(x) $的值逐点相乘, 可以计算出  $C(x)=A(x) B(x) $ 的点值表 达, 这个表示中包含了 $ C(x)  在每个  2(n+1) $ 次单位根处的值.\n4. 揷值\n通过对  $2(n+1) $ 个点值应用 FFT, 计算其逆 DFT, 就可以构造出多项式$C(x)$的系数表达\n\n由于 $ 1 、 3 $ 的时间复杂度为 $ \\Theta(n)$, $2 、 4 $ 的时间复杂度为  $\\Theta\\left(n \\log _{2} n\\right)$ ,\n因此整个算法的时间复杂度为 $ \\Theta\\left(n \\log _{2} n\\right)$ .\n\n\n## python 代码\n\n```python\nimport math\n# 定义Π\nPI = 3.1415926\n# 定义复数\nclass complex:\n    def __init__(self,real=0,virtual=0) -> None:\n        self.real=real\n        self.virtual=virtual\n    \n    def __str__(self) -> str:\n        return f'real:{self.real}  virtual:{self.virtual}\\n'\n    \n# 复数的乘法加法减法\ndef complex_mut(a,b):\n    ret=complex()\n    ret.real = a.real * b.real - a.virtual * b.virtual\n    ret.virtual = a.real * b.virtual + a.virtual * b.real\n    return ret\n    \n    \ndef complex_add(a,b):\n    ret=complex()\n    ret.real = a.real + b.real\n    ret.virtual = a.virtual + b.virtual\n    return ret\n\n\ndef complex_sub(a,b):\n    ret=complex()\n    ret.real = a.real - b.real\n    ret.virtual = a.virtual - b.virtual\n    return ret\n    \n# 获取i次n复根\ndef get_w(n,k,inverse):\n    w=complex()\n    # 根据欧拉函数获得w\n    accy=round(PI*2*k/n,6)\n    # 逆傅里叶变换sin前面要有-\n    if inverse:\n        w.real=round(math.cos(accy),6)\n        w.virtual=round(-math.sin(accy),6)\n    else:\n        w.real=round(math.cos(accy),6)\n        w.virtual=round(math.sin(accy),6)\n    return w\n\n# 快速傅里叶变换\ndef FFT(coefficient,n,inverse):\n    # 如果n==1了直接返回系数\n    if n==1:\n        return coefficient\n    # 用于存放奇偶次项\n    odd,even=[],[]\n    for index in range(n):\n        if index&1:\n            odd.append(coefficient[index])\n        else:\n            even.append(coefficient[index])\n    # 对奇偶次项分别计算快速傅里叶变换\n    e_k=FFT(even,n//2,inverse)\n    d_k=FFT(odd,n//2,inverse)\n    # 计算第k个点和第k+n//2个点的y坐标\n    y_k,y_k_2=[],[]\n    for i in range(n//2):\n        w=get_w(n,i,inverse)\n        y_k.append(complex_add(e_k[i],complex_mut(w,d_k[i])))\n        y_k_2.append(complex_sub(e_k[i],complex_mut(w,d_k[i])))\n    # 返回n个点的y坐标\n    return y_k+y_k_2\n    \n        \ndef polynomial_mul(coefficient_a,coefficient_b):\n    # 本来是坐标代表高位\n    # 现在反过来,左边代表地位,索引就是x的项数\n    coefficient_a=coefficient_a[::-1]\n    coefficient_b=coefficient_b[::-1]\n    # 计算乘积的最高次项是多少\n    length=len(coefficient_a)-1+len(coefficient_b)-1\n    # 取乘积的此项大的 2的n次方 方便后面FFT计算\n    digitnum = 1\n    while length>0:\n        length>>=1\n        digitnum+=1\n    length = 1\n    while digitnum>0:\n        length<<=1\n        digitnum-=1\n    # 把系数变为复数,方便后面和n复根计算\n    a,b=[complex() for _ in range(length+1)],[complex() for _ in range(length+1)]\n    for index,item in enumerate(coefficient_a):\n        a[index].real=item\n    for index,item in enumerate(coefficient_b):\n        b[index].real=item\n    # 对系数a,b进行快速傅里叶变换\n    FFT_a=FFT(a,length,inverse=False)\n    FFT_b=FFT(b,length,inverse=False)\n    c=[]\n    # 对变换得到的y坐标进行点值乘法\n    for index in range(length):\n        c.append(complex_mut(FFT_a[index],FFT_b[index]))\n    # 对c进行逆傅里叶变换\n    FFT_c=FFT(c,length,inverse=True)\n    # 取c的实部才是结果\n    ans=[]\n    for item in FFT_c:\n        # 控制精度,因为float计算会有误差\n        if item.real/length>0.05 or item.real/length<-0.05:\n            # 小数点后保留2位\n            # 得到的结果还需要除以n\n            ans.append(round(item.real/length,2))\n        else:\n            ans.append(0)\n    return ans\n# (x2+x+1)^2\n# x4+x3+x2+x3+x2+x+x2+x+1\n# x4+2*x3+3*x2+2*x+1\n# 0 0 0 1 2 3 2 1\nif __name__=='__main__':\n    # 左边代表高次项,右边代表低次项\n    a=[0,3,2]\n    b=[2,1,1]\n    # O(nlogn)的多项式乘法\n    c=polynomial_mul(a,b)\n    # 打印\n    astr=' + '.join([f'{item}*x^{index} ' for index,item in enumerate(a[::-1])][::-1])\n    bstr=' + '.join([f'{item}*x^{index} ' for index,item in enumerate(b[::-1])][::-1])\n    print(f\"    {astr}\")\n    print(f\"*   {bstr}\")\n    cstr=' + '.join([f'{item}*x^{index} ' for index,item in enumerate(c) if item !=0  ][::-1]  )\n    print(f\"=   {cstr}\")\n\n```\n## C++代码\n来自[知乎](https://zhuanlan.zhihu.com/p/411082641)\n```C++\n#include<iostream>\n#include<vector>\n#include<iomanip>\n#include<math.h>\nusing namespace std;\nconst double PI = 3.1415926;\nstruct _complex{\n    double x;\n    double y;\n};//手动封装的复数结构体，x为实部，y为虚部\n_complex a[4096], b[4096];//用于存储两个多项式的系数\nbool is_output[4096];//后面会用到的用于判断是否输出的一串变量\n_complex omega(const int& n, const int& k,bool inverse)\n{\n\t_complex r;\n\tif (!inverse)\n\t{\n\tr.x = cos(PI * 2 * k / n);\n\tr.y = sin(PI * 2 * k / n);\n\t}\n\telse\n\t{\n\t\tr.x = cos(PI * 2 * k / n);\n\t\tr.y = -sin(PI * 2 * k / n);\n\t}\n\treturn r;\n}//用于插复根\ninline _complex operator*(_complex a, _complex b)\n{\n\t_complex r;\n\tr.x = a.x * b.x - a.y * b.y;\n\tr.y = a.x * b.y + a.y * b.x;\n\treturn r;\n}\ninline _complex operator+(_complex a, _complex b)\n{\n\t_complex r;\n\tr.x = a.x + b.x;\n\tr.y = a.y + b.y;\n\treturn r;\n}\ninline _complex operator-(_complex a, _complex b)\n{\n\t_complex r;\n\tr.x = a.x - b.x;\n\tr.y = a.y - b.y;\n\treturn r;\n}\n//因为没有用到除法，这里我就没有重载除的函数\nvoid Real_DFT(_complex* a, bool inverse, int anum)//这个inverse表示是否为反变换，false为否，true表示是\n{\n\tif (anum == 1)\n\t\treturn;\n\tvector<_complex> buf1, buf2;//buf1和buf2为两个缓冲数组，用于暂存变换中各项系数\n\tfor (int i = 0; i < anum ; i++)\n\t{\n\t\tif (i & 1)\n\t\t{\n\t\t\tbuf2.push_back(a[i]);//奇数项\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbuf1.push_back(a[i]);//偶数项\n\t\t}\n\t}\n\tfor (int i = 0; i < anum / 2; i++)\n\t{\n\t\ta[i] = buf1[i];\n\t\ta[i + anum / 2] = buf2[i];\n\t}//拆分排序后重新赋值回a，为下一步排序准备\n\tReal_DFT(a, inverse, anum / 2);\n\tReal_DFT(a + anum / 2, inverse, anum / 2);//奇偶数项拆开后迭代继续拆分\n\tint armlength = anum / 2;\n\tfor (int i = 0; i < armlength; i++)\n\t{\n\t\t_complex t = omega(anum, i, inverse);\n\t\tbuf1[i] = a[i] + t * a[i + anum / 2];//低次复根走这边插\n\t\tbuf2[i] = a[i] - t * a[i + anum / 2];//高次复根走这边插\n\t}//这里继续用到了buf数组只是为了暂存，没有别的意思\n\tfor (int i = 0; i < anum / 2; i++)\n\t{\n\t\ta[i] = buf1[i];\n\t\ta[i + anum / 2] = buf2[i];\n\t}//重新赋值回去\n\treturn;\n}\nint main()\n{\n//inport data\n\tint numa = 0, numb = 0;//numa是a多项式的项数，numb同理\n\tcin >> numa;\n\tint ptr0 = 0, maxa = 0, sum = 0, ptr1 = 0,maxb=0;//maxa存储a多项式中的最高次幂，maxb同理\n\tfor (int i = 0; i<numa; i++)\n\t{\n\t\tint id = 0;\n\t\tcin >> id;\n\t\tmaxa = maxa > id ? maxa : id;\n\t\tcin >> a[id].x;\n\t}\n\tcin >> numb;\n\tfor (int i = 0; i < numb; i++)\n\t{\n\t\tint id = 0;\n\t\t\n\t\tcin >> id;\n\t\tmaxb = maxb > id ? maxb : id;\n\t\tcin >> b[id].x;\n\t}\n\tsum = maxa + maxb;\n//decide complete num\n\tint digitnum = 1;\n\tfor (; sum > 0; sum >>= 1, digitnum++);\n\tsum = 1;\n\tfor (; digitnum > 0; sum <<= 1, digitnum--);//由于傅里叶变换要求插值数为2的整数次幂\n//这里首先确定多项式相乘后最多的项数也就是sum然后找到第一个比sum大的2的整数次幂的数，将sum重置为这个2的整数次幂\n//Fast Fourier Transform\n\tReal_DFT(a, false, sum);\n\tReal_DFT(b, false, sum);\n\tfor (int i = 0; i < sum; i++)\n\t\ta[i] = a[i] * b[i];//这一步就是上文没有细讲的点值表达式相乘，还是挺好搞的\n\tReal_DFT(a, true, sum);\n//export data\n\tint num=0;\n\tfor (int i = 0; i <= sum; i++)\n\t{\n\t\tif (a[i].x / sum > 0.05||a[i].x/sum<-0.05)//遍历得到的结果，如果这个数的绝对值大于0.05（题目要求的0.1精度，根据四舍五入原则判断），则准备输出\n\t\t{\n\t\t\tnum++;\n\t\t\tis_output[i] = 1;\n\t\t}\n\t}\n\tcout  << num;\n\tfor (int i = sum; i >=0; i--)\n\t{\n\t\tif(is_output[i]==1)\n\t\t\tcout << \" \" <<i<<\" \"<< std::fixed << setprecision(1) << (a[i].x / sum);\n\t}\n\treturn 0;\n}\n\n输入\n2 1 2.4 0 3.2\n2 2 1.5 1 0.5\n\n输出\n3 3 3.6 2 6.0 1 1.6\n```","slug":"快速傅里叶变换(FFT)求多项式乘法","published":1,"date":"2022-11-18T03:11:17.939Z","updated":"2022-11-19T04:43:35.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clee4vhb4001nc8vqccc4hs70","content":"<p>[toc]</p>\n<p>推荐一篇写的很好的<a href=\"https://www.renrendoc.com/paper/201816620.html\">课件</a></p>\n<h2 id=\"多项式的表示与乘法\"><a class=\"markdownIt-Anchor\" href=\"#多项式的表示与乘法\"></a> 多项式的表示与乘法</h2>\n<ol>\n<li>系数表示法<br />\n多项式<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><msup><mi>x</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">A(x)=\\sum_{i=0}^{n} a_ix^i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.124374em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span>的系数表示就是<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>n</mi></msub><msup><mo stretchy=\"false\">)</mo><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">a=(a_0,a_1,...,a_n)^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span></li>\n</ol>\n<blockquote>\n<p>如果用系数表示,多项式乘法的复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>,就是和平时手算过程一样</p>\n</blockquote>\n<ol start=\"2\">\n<li>点值表示法<br />\nn+1个不同的点能唯一确定n次多项式系数</li>\n</ol>\n<p>对于多项式<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A(x),B(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span><br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mrow><mo fence=\"true\">{</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>0</mn></msub><mo fence=\"true\">)</mo></mrow><mo separator=\"true\">,</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo fence=\"true\">)</mo></mrow><mo separator=\"true\">,</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo fence=\"true\">)</mo></mrow><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mi>n</mi></msub><mo fence=\"true\">)</mo></mrow><mo fence=\"true\">}</mo></mrow><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">A(x):\\left\\{\\left(x_{0}, y_{0}\\right),\\left(x_{1}, y_{1}\\right),\\left(x_{2}, y_{2}\\right), \\ldots,\\left(x_{n}, y_{n}\\right)\\right\\},</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">{</span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">}</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mrow><mo fence=\"true\">{</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msubsup><mi>y</mi><mn>0</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo fence=\"true\">)</mo></mrow><mo separator=\"true\">,</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msubsup><mi>y</mi><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo fence=\"true\">)</mo></mrow><mo separator=\"true\">,</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msubsup><mi>y</mi><mn>2</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo fence=\"true\">)</mo></mrow><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>y</mi><mi>n</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo fence=\"true\">)</mo></mrow><mo fence=\"true\">}</mo></mrow></mrow><annotation encoding=\"application/x-tex\">B(x):\\left\\{\\left(x_{0}, y_{0}^{\\prime}\\right),\\left(x_{1}, y_{1}^{\\prime}\\right),\\left(x_{2}, y_{2}^{\\prime}\\right), \\ldots,\\left(x_{n}, y_{n}^{\\prime}\\right)\\right\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">{</span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">}</span></span></span></span></span></p>\n<blockquote>\n<p>设 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(x) = A(x) B(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>,因为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>的系数是2n,所以要在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mtext>和</mtext><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A(x)和B(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">和</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>上取2n个不同的点才行,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>的点值表示为<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">{</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>0</mn></msub><msubsup><mi>y</mi><mn>0</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo fence=\"true\">)</mo></mrow><mo separator=\"true\">,</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>1</mn></msub><msubsup><mi>y</mi><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo fence=\"true\">)</mo></mrow><mo separator=\"true\">,</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>2</mn></msub><msubsup><mi>y</mi><mn>2</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo fence=\"true\">)</mo></mrow><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub><msubsup><mi>y</mi><mrow><mn>2</mn><mi>n</mi></mrow><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo fence=\"true\">)</mo></mrow><mo fence=\"true\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\left\\{\\left(x_{0}, y_{0} y_{0}^{\\prime}\\right),\\left(x_{1}, y_{1} y_{1}^{\\prime}\\right),\\left(x_{2}, y_{2} y_{2}^{\\prime}\\right), \\ldots,\\left(x_{2 n}, y_{2 n} y_{2 n}^{\\prime}\\right)\\right\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">{</span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">}</span></span></span></span></span><br />\n点值表示的多项式乘法复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n</blockquote>\n<h2 id=\"系数表示法与点值表示法的转换\"><a class=\"markdownIt-Anchor\" href=\"#系数表示法与点值表示法的转换\"></a> 系数表示法与点值表示法的转换</h2>\n<p><img src=\"https://image.yayan.xyz/20221119121436.png\" alt=\"\" /><br />\n系数到点(也叫求值):<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mi>a</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">Xa=y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n因为系数矩阵行列式不为0,所以可逆.<br />\n点到系数(也叫插值):<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><msup><mi>X</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">a=X^{-1}y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></p>\n<h2 id=\"单位复数根\"><a class=\"markdownIt-Anchor\" href=\"#单位复数根\"></a> 单位复数根</h2>\n<p>n次单位复数根满足<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>w</mi><mi>n</mi></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">w^n=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>,n次单位复数根敲好有n个<br />\n复杂证明略过,n次单位根的所有根,作为计算点值的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></p>\n<h2 id=\"离散傅里叶变换\"><a class=\"markdownIt-Anchor\" href=\"#离散傅里叶变换\"></a> 离散傅里叶变换</h2>\n<p>对于  n  次多项式  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><msup><mi>x</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">A(x)=\\sum_{i=0}^{n} a_{i} x^{i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.124374em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span> ,</p>\n<p>其系数形式为  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><msup><mrow><mo fence=\"true\">(</mo><msub><mi>a</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo fence=\"true\">)</mo></mrow><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">a=\\left(a_{0}, a_{1}, \\ldots, a_{n}\\right)^{T}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.231231em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.981231em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span></span> .</p>\n<p>设 $ y_{k}=A\\left(\\omega_{n}<sup>{k}\\right)=\\sum_{i=0}</sup>{n} a_{i} \\omega_{n+1}^{k i}, 0 \\leq k \\leq n, k \\in N $,</p>\n<p>则向量 $ y=\\left(y_{0}, y_{1}, \\ldots, y_{n}\\right)^{T} $</p>\n<p>就是系数向量 $ a=\\left(a_{0}, a_{1}, \\ldots, a_{n}\\right)^{T} $ 的离散傅里叶变换.</p>\n<p>但是离散傅里叶变换的复杂度仍是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"快速傅里叶变换fft\"><a class=\"markdownIt-Anchor\" href=\"#快速傅里叶变换fft\"></a> 快速傅里叶变换(FFT)</h2>\n<p>FFT 将<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>拆分为奇数下标与偶数下标的系数</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo></mrow></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>a</mi><mn>0</mn></msub><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><mi>x</mi><mo>+</mo><msub><mi>a</mi><mn>4</mn></msub><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><msup><mi>x</mi><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac></msup><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">A^{[0]}(x)=a_{0}+a_{2} x+a_{4} x^{2}+\\cdots+a_{n-1} x^{\\frac{n-1}{2}},</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">0</span><span class=\"mclose mtight\">]</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.964108em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1623510000000001em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9540200000000001em;\"><span style=\"top:-3.363em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size3 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8443142857142857em;\"><span style=\"top:-2.656em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.2255000000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.384em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.344em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size3 size6\"></span></span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><msub><mi>a</mi><mn>3</mn></msub><mi>x</mi><mo>+</mo><msub><mi>a</mi><mn>5</mn></msub><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub><msup><mi>x</mi><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac></msup><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">A^{[1]}(x)=a_{1}+a_{3} x+a_{5} x^{2}+\\cdots+a_{n} x^{\\frac{n-1}{2}} .</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">]</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.964108em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.10402em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9540200000000001em;\"><span style=\"top:-3.363em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size3 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8443142857142857em;\"><span style=\"top:-2.656em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.2255000000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.384em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.344em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size3 size6\"></span></span></span></span></span></span></span></span></span></span><span class=\"mord\">.</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo></mrow></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A^{[0]}(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">0</span><span class=\"mclose mtight\">]</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>  包含  A  所有偶数下标的系数, $ A^{[1]}(x)$  数下标的系数, 于是有:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>A</mi><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo></mrow></msup><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mn>2</mn></msup><mo fence=\"true\">)</mo></mrow><mo>+</mo><mi>x</mi><msup><mi>A</mi><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow></msup><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mn>2</mn></msup><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">A(x)=A^{[0]}\\left(x^{2}\\right)+x A^{[1]}\\left(x^{2}\\right) .</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2380099999999998em;vertical-align:-0.35001em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">0</span><span class=\"mclose mtight\">]</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2380099999999998em;vertical-align:-0.35001em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">]</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span></span></span></span></p>\n<p>所以, 求 $ A(x)$  在  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>ω</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>0</mn></msubsup><mo separator=\"true\">,</mo><msubsup><mi>ω</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>1</mn></msubsup><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msubsup><mi>ω</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mi>n</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\omega_{n+1}^{0}, \\omega_{n+1}^{1}, \\ldots, \\omega_{n+1}^{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1205469999999997em;vertical-align:-0.30643899999999996em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999998em;\"><span style=\"top:-2.451892em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30643899999999996em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999998em;\"><span style=\"top:-2.451892em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30643899999999996em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6643919999999999em;\"><span style=\"top:-2.451892em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30643899999999996em;\"><span></span></span></span></span></span></span></span></span></span>  处的值的问题转化为:<br />\na. 求次数为 $ \\frac{n}{2}$  的多项式 $ A^{[0]}(x), A^{[1]}(x) $<br />\n在点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow><mo fence=\"true\">(</mo><msubsup><mi>ω</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>0</mn></msubsup><mo fence=\"true\">)</mo></mrow><mn>2</mn></msup><mo separator=\"true\">,</mo><msup><mrow><mo fence=\"true\">(</mo><msubsup><mi>ω</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>1</mn></msubsup><mo fence=\"true\">)</mo></mrow><mn>2</mn></msup><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msup><mrow><mo fence=\"true\">(</mo><msubsup><mi>ω</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo fence=\"true\">)</mo></mrow><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\left(\\omega_{n+1}^{0}\\right)^{2},\\left(\\omega_{n+1}^{1}\\right)^{2}, \\ldots,\\left(\\omega_{n+1}^{n}\\right)^{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.404018em;vertical-align:-0.35001em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999998em;\"><span style=\"top:-2.451892em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30643899999999996em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.054008em;\"><span style=\"top:-3.3029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999998em;\"><span style=\"top:-2.451892em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30643899999999996em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.054008em;\"><span style=\"top:-3.3029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6643919999999999em;\"><span style=\"top:-2.451892em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30643899999999996em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.054008em;\"><span style=\"top:-3.3029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span>  处的取值.</p>\n<p>递归即可得到结果.</p>\n<blockquote>\n<p>复杂度<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>2</mn><mi>T</mi><mrow><mo fence=\"true\">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mi mathvariant=\"normal\">Θ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)=2 T\\left(\\frac{n}{2}\\right)+\\Theta(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.20001em;vertical-align:-0.35001em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.695392em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Θ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n</blockquote>\n<p>然后进行点值乘法,得到点值的结果,再利用逆变换为系数表达.</p>\n<h2 id=\"具体流程\"><a class=\"markdownIt-Anchor\" href=\"#具体流程\"></a> 具体流程</h2>\n<ol>\n<li>加倍多项式次数<br />\n通过加入  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>  个系数为 0 的高阶项, 把多项式 $ A(x)  和  B(x)$  变为次数为  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">2 n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span></span></span></span>  的 多项式, 并构造其系数表达.</li>\n<li>求值<br />\n通过应用 $ 2(n+1) $ 阶的 $FFT $计算出  $A(x)  和  B(x) $ 长度为 $ 2(n+1) $ 的点值表达. 这些点值表达中包含了两个多项式在 $ 2(n+1) $ 次单位根处的取值.</li>\n<li>逐点相乘<br />\n把  $A(x)  的值与  B(x) $的值逐点相乘, 可以计算出  $C(x)=A(x) B(x) $ 的点值表 达, 这个表示中包含了 $ C(x)  在每个  2(n+1) $ 次单位根处的值.</li>\n<li>揷值<br />\n通过对  $2(n+1) $ 个点值应用 FFT, 计算其逆 DFT, 就可以构造出多项式<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>的系数表达</li>\n</ol>\n<p>由于 $ 1 、 3 $ 的时间复杂度为 $ \\Theta(n)$, $2 、 4 $ 的时间复杂度为  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Θ</mi><mrow><mo fence=\"true\">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\Theta\\left(n \\log _{2} n\\right)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Θ</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span></span></span></span> ,<br />\n因此整个算法的时间复杂度为 $ \\Theta\\left(n \\log _{2} n\\right)$ .</p>\n<h2 id=\"python-代码\"><a class=\"markdownIt-Anchor\" href=\"#python-代码\"></a> python 代码</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"comment\"># 定义Π</span></span><br><span class=\"line\">PI = <span class=\"number\">3.1415926</span></span><br><span class=\"line\"><span class=\"comment\"># 定义复数</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">complex</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,real=<span class=\"number\">0</span>,virtual=<span class=\"number\">0</span></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        self.real=real</span><br><span class=\"line\">        self.virtual=virtual</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&#x27;real:<span class=\"subst\">&#123;self.real&#125;</span>  virtual:<span class=\"subst\">&#123;self.virtual&#125;</span>\\n&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 复数的乘法加法减法</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">complex_mut</span>(<span class=\"params\">a,b</span>):</span><br><span class=\"line\">    ret=<span class=\"built_in\">complex</span>()</span><br><span class=\"line\">    ret.real = a.real * b.real - a.virtual * b.virtual</span><br><span class=\"line\">    ret.virtual = a.real * b.virtual + a.virtual * b.real</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">complex_add</span>(<span class=\"params\">a,b</span>):</span><br><span class=\"line\">    ret=<span class=\"built_in\">complex</span>()</span><br><span class=\"line\">    ret.real = a.real + b.real</span><br><span class=\"line\">    ret.virtual = a.virtual + b.virtual</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">complex_sub</span>(<span class=\"params\">a,b</span>):</span><br><span class=\"line\">    ret=<span class=\"built_in\">complex</span>()</span><br><span class=\"line\">    ret.real = a.real - b.real</span><br><span class=\"line\">    ret.virtual = a.virtual - b.virtual</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 获取i次n复根</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_w</span>(<span class=\"params\">n,k,inverse</span>):</span><br><span class=\"line\">    w=<span class=\"built_in\">complex</span>()</span><br><span class=\"line\">    <span class=\"comment\"># 根据欧拉函数获得w</span></span><br><span class=\"line\">    accy=<span class=\"built_in\">round</span>(PI*<span class=\"number\">2</span>*k/n,<span class=\"number\">6</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 逆傅里叶变换sin前面要有-</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> inverse:</span><br><span class=\"line\">        w.real=<span class=\"built_in\">round</span>(math.cos(accy),<span class=\"number\">6</span>)</span><br><span class=\"line\">        w.virtual=<span class=\"built_in\">round</span>(-math.sin(accy),<span class=\"number\">6</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        w.real=<span class=\"built_in\">round</span>(math.cos(accy),<span class=\"number\">6</span>)</span><br><span class=\"line\">        w.virtual=<span class=\"built_in\">round</span>(math.sin(accy),<span class=\"number\">6</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> w</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 快速傅里叶变换</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">FFT</span>(<span class=\"params\">coefficient,n,inverse</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 如果n==1了直接返回系数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n==<span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> coefficient</span><br><span class=\"line\">    <span class=\"comment\"># 用于存放奇偶次项</span></span><br><span class=\"line\">    odd,even=[],[]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> index&amp;<span class=\"number\">1</span>:</span><br><span class=\"line\">            odd.append(coefficient[index])</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            even.append(coefficient[index])</span><br><span class=\"line\">    <span class=\"comment\"># 对奇偶次项分别计算快速傅里叶变换</span></span><br><span class=\"line\">    e_k=FFT(even,n//<span class=\"number\">2</span>,inverse)</span><br><span class=\"line\">    d_k=FFT(odd,n//<span class=\"number\">2</span>,inverse)</span><br><span class=\"line\">    <span class=\"comment\"># 计算第k个点和第k+n//2个点的y坐标</span></span><br><span class=\"line\">    y_k,y_k_2=[],[]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n//<span class=\"number\">2</span>):</span><br><span class=\"line\">        w=get_w(n,i,inverse)</span><br><span class=\"line\">        y_k.append(complex_add(e_k[i],complex_mut(w,d_k[i])))</span><br><span class=\"line\">        y_k_2.append(complex_sub(e_k[i],complex_mut(w,d_k[i])))</span><br><span class=\"line\">    <span class=\"comment\"># 返回n个点的y坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> y_k+y_k_2</span><br><span class=\"line\">    </span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">polynomial_mul</span>(<span class=\"params\">coefficient_a,coefficient_b</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 本来是坐标代表高位</span></span><br><span class=\"line\">    <span class=\"comment\"># 现在反过来,左边代表地位,索引就是x的项数</span></span><br><span class=\"line\">    coefficient_a=coefficient_a[::-<span class=\"number\">1</span>]</span><br><span class=\"line\">    coefficient_b=coefficient_b[::-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 计算乘积的最高次项是多少</span></span><br><span class=\"line\">    length=<span class=\"built_in\">len</span>(coefficient_a)-<span class=\"number\">1</span>+<span class=\"built_in\">len</span>(coefficient_b)-<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># 取乘积的此项大的 2的n次方 方便后面FFT计算</span></span><br><span class=\"line\">    digitnum = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> length&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        length&gt;&gt;=<span class=\"number\">1</span></span><br><span class=\"line\">        digitnum+=<span class=\"number\">1</span></span><br><span class=\"line\">    length = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> digitnum&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        length&lt;&lt;=<span class=\"number\">1</span></span><br><span class=\"line\">        digitnum-=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># 把系数变为复数,方便后面和n复根计算</span></span><br><span class=\"line\">    a,b=[<span class=\"built_in\">complex</span>() <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length+<span class=\"number\">1</span>)],[<span class=\"built_in\">complex</span>() <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length+<span class=\"number\">1</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index,item <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(coefficient_a):</span><br><span class=\"line\">        a[index].real=item</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index,item <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(coefficient_b):</span><br><span class=\"line\">        b[index].real=item</span><br><span class=\"line\">    <span class=\"comment\"># 对系数a,b进行快速傅里叶变换</span></span><br><span class=\"line\">    FFT_a=FFT(a,length,inverse=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    FFT_b=FFT(b,length,inverse=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    c=[]</span><br><span class=\"line\">    <span class=\"comment\"># 对变换得到的y坐标进行点值乘法</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length):</span><br><span class=\"line\">        c.append(complex_mut(FFT_a[index],FFT_b[index]))</span><br><span class=\"line\">    <span class=\"comment\"># 对c进行逆傅里叶变换</span></span><br><span class=\"line\">    FFT_c=FFT(c,length,inverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 取c的实部才是结果</span></span><br><span class=\"line\">    ans=[]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> FFT_c:</span><br><span class=\"line\">        <span class=\"comment\"># 控制精度,因为float计算会有误差</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> item.real/length&gt;<span class=\"number\">0.05</span> <span class=\"keyword\">or</span> item.real/length&lt;-<span class=\"number\">0.05</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 小数点后保留2位</span></span><br><span class=\"line\">            <span class=\"comment\"># 得到的结果还需要除以n</span></span><br><span class=\"line\">            ans.append(<span class=\"built_in\">round</span>(item.real/length,<span class=\"number\">2</span>))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            ans.append(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans</span><br><span class=\"line\"><span class=\"comment\"># (x2+x+1)^2</span></span><br><span class=\"line\"><span class=\"comment\"># x4+x3+x2+x3+x2+x+x2+x+1</span></span><br><span class=\"line\"><span class=\"comment\"># x4+2*x3+3*x2+2*x+1</span></span><br><span class=\"line\"><span class=\"comment\"># 0 0 0 1 2 3 2 1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 左边代表高次项,右边代表低次项</span></span><br><span class=\"line\">    a=[<span class=\"number\">0</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">    b=[<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"comment\"># O(nlogn)的多项式乘法</span></span><br><span class=\"line\">    c=polynomial_mul(a,b)</span><br><span class=\"line\">    <span class=\"comment\"># 打印</span></span><br><span class=\"line\">    astr=<span class=\"string\">&#x27; + &#x27;</span>.join([<span class=\"string\">f&#x27;<span class=\"subst\">&#123;item&#125;</span>*x^<span class=\"subst\">&#123;index&#125;</span> &#x27;</span> <span class=\"keyword\">for</span> index,item <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(a[::-<span class=\"number\">1</span>])][::-<span class=\"number\">1</span>])</span><br><span class=\"line\">    bstr=<span class=\"string\">&#x27; + &#x27;</span>.join([<span class=\"string\">f&#x27;<span class=\"subst\">&#123;item&#125;</span>*x^<span class=\"subst\">&#123;index&#125;</span> &#x27;</span> <span class=\"keyword\">for</span> index,item <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(b[::-<span class=\"number\">1</span>])][::-<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;    <span class=\"subst\">&#123;astr&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;*   <span class=\"subst\">&#123;bstr&#125;</span>&quot;</span>)</span><br><span class=\"line\">    cstr=<span class=\"string\">&#x27; + &#x27;</span>.join([<span class=\"string\">f&#x27;<span class=\"subst\">&#123;item&#125;</span>*x^<span class=\"subst\">&#123;index&#125;</span> &#x27;</span> <span class=\"keyword\">for</span> index,item <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(c) <span class=\"keyword\">if</span> item !=<span class=\"number\">0</span>  ][::-<span class=\"number\">1</span>]  )</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;=   <span class=\"subst\">&#123;cstr&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"c代码\"><a class=\"markdownIt-Anchor\" href=\"#c代码\"></a> C++代码</h2>\n<p>来自<a href=\"https://zhuanlan.zhihu.com/p/411082641\">知乎</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> PI = <span class=\"number\">3.1415926</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_complex</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> x;</span><br><span class=\"line\">    <span class=\"type\">double</span> y;</span><br><span class=\"line\">&#125;;<span class=\"comment\">//手动封装的复数结构体，x为实部，y为虚部</span></span><br><span class=\"line\">_complex a[<span class=\"number\">4096</span>], b[<span class=\"number\">4096</span>];<span class=\"comment\">//用于存储两个多项式的系数</span></span><br><span class=\"line\"><span class=\"type\">bool</span> is_output[<span class=\"number\">4096</span>];<span class=\"comment\">//后面会用到的用于判断是否输出的一串变量</span></span><br><span class=\"line\"><span class=\"function\">_complex <span class=\"title\">omega</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span>&amp; n, <span class=\"type\">const</span> <span class=\"type\">int</span>&amp; k,<span class=\"type\">bool</span> inverse)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t_complex r;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!inverse)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\tr.x = <span class=\"built_in\">cos</span>(PI * <span class=\"number\">2</span> * k / n);</span><br><span class=\"line\">\tr.y = <span class=\"built_in\">sin</span>(PI * <span class=\"number\">2</span> * k / n);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tr.x = <span class=\"built_in\">cos</span>(PI * <span class=\"number\">2</span> * k / n);</span><br><span class=\"line\">\t\tr.y = -<span class=\"built_in\">sin</span>(PI * <span class=\"number\">2</span> * k / n);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;<span class=\"comment\">//用于插复根</span></span><br><span class=\"line\"><span class=\"keyword\">inline</span> _complex <span class=\"keyword\">operator</span>*(_complex a, _complex b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_complex r;</span><br><span class=\"line\">\tr.x = a.x * b.x - a.y * b.y;</span><br><span class=\"line\">\tr.y = a.x * b.y + a.y * b.x;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> _complex <span class=\"keyword\">operator</span>+(_complex a, _complex b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_complex r;</span><br><span class=\"line\">\tr.x = a.x + b.x;</span><br><span class=\"line\">\tr.y = a.y + b.y;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> _complex <span class=\"keyword\">operator</span>-(_complex a, _complex b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_complex r;</span><br><span class=\"line\">\tr.x = a.x - b.x;</span><br><span class=\"line\">\tr.y = a.y - b.y;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//因为没有用到除法，这里我就没有重载除的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Real_DFT</span><span class=\"params\">(_complex* a, <span class=\"type\">bool</span> inverse, <span class=\"type\">int</span> anum)</span><span class=\"comment\">//这个inverse表示是否为反变换，false为否，true表示是</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (anum == <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tvector&lt;_complex&gt; buf1, buf2;<span class=\"comment\">//buf1和buf2为两个缓冲数组，用于暂存变换中各项系数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; anum ; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tbuf2.<span class=\"built_in\">push_back</span>(a[i]);<span class=\"comment\">//奇数项</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tbuf1.<span class=\"built_in\">push_back</span>(a[i]);<span class=\"comment\">//偶数项</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; anum / <span class=\"number\">2</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ta[i] = buf1[i];</span><br><span class=\"line\">\t\ta[i + anum / <span class=\"number\">2</span>] = buf2[i];</span><br><span class=\"line\">\t&#125;<span class=\"comment\">//拆分排序后重新赋值回a，为下一步排序准备</span></span><br><span class=\"line\">\t<span class=\"built_in\">Real_DFT</span>(a, inverse, anum / <span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">Real_DFT</span>(a + anum / <span class=\"number\">2</span>, inverse, anum / <span class=\"number\">2</span>);<span class=\"comment\">//奇偶数项拆开后迭代继续拆分</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> armlength = anum / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; armlength; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_complex t = <span class=\"built_in\">omega</span>(anum, i, inverse);</span><br><span class=\"line\">\t\tbuf1[i] = a[i] + t * a[i + anum / <span class=\"number\">2</span>];<span class=\"comment\">//低次复根走这边插</span></span><br><span class=\"line\">\t\tbuf2[i] = a[i] - t * a[i + anum / <span class=\"number\">2</span>];<span class=\"comment\">//高次复根走这边插</span></span><br><span class=\"line\">\t&#125;<span class=\"comment\">//这里继续用到了buf数组只是为了暂存，没有别的意思</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; anum / <span class=\"number\">2</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ta[i] = buf1[i];</span><br><span class=\"line\">\t\ta[i + anum / <span class=\"number\">2</span>] = buf2[i];</span><br><span class=\"line\">\t&#125;<span class=\"comment\">//重新赋值回去</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//inport data</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> numa = <span class=\"number\">0</span>, numb = <span class=\"number\">0</span>;<span class=\"comment\">//numa是a多项式的项数，numb同理</span></span><br><span class=\"line\">\tcin &gt;&gt; numa;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ptr0 = <span class=\"number\">0</span>, maxa = <span class=\"number\">0</span>, sum = <span class=\"number\">0</span>, ptr1 = <span class=\"number\">0</span>,maxb=<span class=\"number\">0</span>;<span class=\"comment\">//maxa存储a多项式中的最高次幂，maxb同理</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;numa; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> id = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tcin &gt;&gt; id;</span><br><span class=\"line\">\t\tmaxa = maxa &gt; id ? maxa : id;</span><br><span class=\"line\">\t\tcin &gt;&gt; a[id].x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcin &gt;&gt; numb;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; numb; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> id = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tcin &gt;&gt; id;</span><br><span class=\"line\">\t\tmaxb = maxb &gt; id ? maxb : id;</span><br><span class=\"line\">\t\tcin &gt;&gt; b[id].x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsum = maxa + maxb;</span><br><span class=\"line\"><span class=\"comment\">//decide complete num</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> digitnum = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; sum &gt; <span class=\"number\">0</span>; sum &gt;&gt;= <span class=\"number\">1</span>, digitnum++);</span><br><span class=\"line\">\tsum = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; digitnum &gt; <span class=\"number\">0</span>; sum &lt;&lt;= <span class=\"number\">1</span>, digitnum--);<span class=\"comment\">//由于傅里叶变换要求插值数为2的整数次幂</span></span><br><span class=\"line\"><span class=\"comment\">//这里首先确定多项式相乘后最多的项数也就是sum然后找到第一个比sum大的2的整数次幂的数，将sum重置为这个2的整数次幂</span></span><br><span class=\"line\"><span class=\"comment\">//Fast Fourier Transform</span></span><br><span class=\"line\">\t<span class=\"built_in\">Real_DFT</span>(a, <span class=\"literal\">false</span>, sum);</span><br><span class=\"line\">\t<span class=\"built_in\">Real_DFT</span>(b, <span class=\"literal\">false</span>, sum);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; sum; i++)</span><br><span class=\"line\">\t\ta[i] = a[i] * b[i];<span class=\"comment\">//这一步就是上文没有细讲的点值表达式相乘，还是挺好搞的</span></span><br><span class=\"line\">\t<span class=\"built_in\">Real_DFT</span>(a, <span class=\"literal\">true</span>, sum);</span><br><span class=\"line\"><span class=\"comment\">//export data</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> num=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= sum; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i].x / sum &gt; <span class=\"number\">0.05</span>||a[i].x/sum&lt;<span class=\"number\">-0.05</span>)<span class=\"comment\">//遍历得到的结果，如果这个数的绝对值大于0.05（题目要求的0.1精度，根据四舍五入原则判断），则准备输出</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnum++;</span><br><span class=\"line\">\t\t\tis_output[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout  &lt;&lt; num;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = sum; i &gt;=<span class=\"number\">0</span>; i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(is_output[i]==<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt;i&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt; std::fixed &lt;&lt; <span class=\"built_in\">setprecision</span>(<span class=\"number\">1</span>) &lt;&lt; (a[i].x / sum);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输入</span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span> <span class=\"number\">2.4</span> <span class=\"number\">0</span> <span class=\"number\">3.2</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">2</span> <span class=\"number\">1.5</span> <span class=\"number\">1</span> <span class=\"number\">0.5</span></span><br><span class=\"line\"></span><br><span class=\"line\">输出</span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">3</span> <span class=\"number\">3.6</span> <span class=\"number\">2</span> <span class=\"number\">6.0</span> <span class=\"number\">1</span> <span class=\"number\">1.6</span></span><br></pre></td></tr></table></figure>","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>[toc]</p>\n<p>推荐一篇写的很好的<a href=\"https://www.renrendoc.com/paper/201816620.html\">课件</a></p>\n<h2 id=\"多项式的表示与乘法\"><a class=\"markdownIt-Anchor\" href=\"#多项式的表示与乘法\"></a> 多项式的表示与乘法</h2>\n<ol>\n<li>系数表示法<br />\n多项式<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><msup><mi>x</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">A(x)=\\sum_{i=0}^{n} a_ix^i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.124374em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span>的系数表示就是<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>n</mi></msub><msup><mo stretchy=\"false\">)</mo><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">a=(a_0,a_1,...,a_n)^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span></li>\n</ol>\n<blockquote>\n<p>如果用系数表示,多项式乘法的复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>,就是和平时手算过程一样</p>\n</blockquote>\n<ol start=\"2\">\n<li>点值表示法<br />\nn+1个不同的点能唯一确定n次多项式系数</li>\n</ol>\n<p>对于多项式<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A(x),B(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span><br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mrow><mo fence=\"true\">{</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>0</mn></msub><mo fence=\"true\">)</mo></mrow><mo separator=\"true\">,</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo fence=\"true\">)</mo></mrow><mo separator=\"true\">,</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo fence=\"true\">)</mo></mrow><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mi>n</mi></msub><mo fence=\"true\">)</mo></mrow><mo fence=\"true\">}</mo></mrow><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">A(x):\\left\\{\\left(x_{0}, y_{0}\\right),\\left(x_{1}, y_{1}\\right),\\left(x_{2}, y_{2}\\right), \\ldots,\\left(x_{n}, y_{n}\\right)\\right\\},</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">{</span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">}</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mrow><mo fence=\"true\">{</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msubsup><mi>y</mi><mn>0</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo fence=\"true\">)</mo></mrow><mo separator=\"true\">,</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msubsup><mi>y</mi><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo fence=\"true\">)</mo></mrow><mo separator=\"true\">,</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msubsup><mi>y</mi><mn>2</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo fence=\"true\">)</mo></mrow><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo separator=\"true\">,</mo><msubsup><mi>y</mi><mi>n</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo fence=\"true\">)</mo></mrow><mo fence=\"true\">}</mo></mrow></mrow><annotation encoding=\"application/x-tex\">B(x):\\left\\{\\left(x_{0}, y_{0}^{\\prime}\\right),\\left(x_{1}, y_{1}^{\\prime}\\right),\\left(x_{2}, y_{2}^{\\prime}\\right), \\ldots,\\left(x_{n}, y_{n}^{\\prime}\\right)\\right\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">{</span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">}</span></span></span></span></span></p>\n<blockquote>\n<p>设 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(x) = A(x) B(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>,因为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>的系数是2n,所以要在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mtext>和</mtext><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A(x)和B(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">和</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>上取2n个不同的点才行,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>的点值表示为<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">{</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>0</mn></msub><msubsup><mi>y</mi><mn>0</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo fence=\"true\">)</mo></mrow><mo separator=\"true\">,</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>1</mn></msub><msubsup><mi>y</mi><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo fence=\"true\">)</mo></mrow><mo separator=\"true\">,</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>2</mn></msub><msubsup><mi>y</mi><mn>2</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo fence=\"true\">)</mo></mrow><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mrow><mo fence=\"true\">(</mo><msub><mi>x</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub><msubsup><mi>y</mi><mrow><mn>2</mn><mi>n</mi></mrow><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo fence=\"true\">)</mo></mrow><mo fence=\"true\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\left\\{\\left(x_{0}, y_{0} y_{0}^{\\prime}\\right),\\left(x_{1}, y_{1} y_{1}^{\\prime}\\right),\\left(x_{2}, y_{2} y_{2}^{\\prime}\\right), \\ldots,\\left(x_{2 n}, y_{2 n} y_{2 n}^{\\prime}\\right)\\right\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">{</span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">}</span></span></span></span></span><br />\n点值表示的多项式乘法复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n</blockquote>\n<h2 id=\"系数表示法与点值表示法的转换\"><a class=\"markdownIt-Anchor\" href=\"#系数表示法与点值表示法的转换\"></a> 系数表示法与点值表示法的转换</h2>\n<p><img src=\"https://image.yayan.xyz/20221119121436.png\" alt=\"\" /><br />\n系数到点(也叫求值):<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mi>a</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">Xa=y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n因为系数矩阵行列式不为0,所以可逆.<br />\n点到系数(也叫插值):<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><msup><mi>X</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">a=X^{-1}y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></p>\n<h2 id=\"单位复数根\"><a class=\"markdownIt-Anchor\" href=\"#单位复数根\"></a> 单位复数根</h2>\n<p>n次单位复数根满足<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>w</mi><mi>n</mi></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">w^n=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>,n次单位复数根敲好有n个<br />\n复杂证明略过,n次单位根的所有根,作为计算点值的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></p>\n<h2 id=\"离散傅里叶变换\"><a class=\"markdownIt-Anchor\" href=\"#离散傅里叶变换\"></a> 离散傅里叶变换</h2>\n<p>对于  n  次多项式  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><msup><mi>x</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">A(x)=\\sum_{i=0}^{n} a_{i} x^{i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.124374em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span> ,</p>\n<p>其系数形式为  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><msup><mrow><mo fence=\"true\">(</mo><msub><mi>a</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo fence=\"true\">)</mo></mrow><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">a=\\left(a_{0}, a_{1}, \\ldots, a_{n}\\right)^{T}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.231231em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.981231em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span></span> .</p>\n<p>设 $ y_{k}=A\\left(\\omega_{n}<sup>{k}\\right)=\\sum_{i=0}</sup>{n} a_{i} \\omega_{n+1}^{k i}, 0 \\leq k \\leq n, k \\in N $,</p>\n<p>则向量 $ y=\\left(y_{0}, y_{1}, \\ldots, y_{n}\\right)^{T} $</p>\n<p>就是系数向量 $ a=\\left(a_{0}, a_{1}, \\ldots, a_{n}\\right)^{T} $ 的离散傅里叶变换.</p>\n<p>但是离散傅里叶变换的复杂度仍是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"快速傅里叶变换fft\"><a class=\"markdownIt-Anchor\" href=\"#快速傅里叶变换fft\"></a> 快速傅里叶变换(FFT)</h2>\n<p>FFT 将<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>拆分为奇数下标与偶数下标的系数</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo></mrow></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>a</mi><mn>0</mn></msub><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><mi>x</mi><mo>+</mo><msub><mi>a</mi><mn>4</mn></msub><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><msup><mi>x</mi><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac></msup><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">A^{[0]}(x)=a_{0}+a_{2} x+a_{4} x^{2}+\\cdots+a_{n-1} x^{\\frac{n-1}{2}},</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">0</span><span class=\"mclose mtight\">]</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.964108em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1623510000000001em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9540200000000001em;\"><span style=\"top:-3.363em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size3 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8443142857142857em;\"><span style=\"top:-2.656em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.2255000000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.384em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.344em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size3 size6\"></span></span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><msub><mi>a</mi><mn>3</mn></msub><mi>x</mi><mo>+</mo><msub><mi>a</mi><mn>5</mn></msub><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub><msup><mi>x</mi><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac></msup><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">A^{[1]}(x)=a_{1}+a_{3} x+a_{5} x^{2}+\\cdots+a_{n} x^{\\frac{n-1}{2}} .</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">]</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.964108em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.10402em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9540200000000001em;\"><span style=\"top:-3.363em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size3 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8443142857142857em;\"><span style=\"top:-2.656em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.2255000000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.384em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.344em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size3 size6\"></span></span></span></span></span></span></span></span></span></span><span class=\"mord\">.</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo></mrow></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A^{[0]}(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">0</span><span class=\"mclose mtight\">]</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>  包含  A  所有偶数下标的系数, $ A^{[1]}(x)$  数下标的系数, 于是有:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>A</mi><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo></mrow></msup><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mn>2</mn></msup><mo fence=\"true\">)</mo></mrow><mo>+</mo><mi>x</mi><msup><mi>A</mi><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow></msup><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mn>2</mn></msup><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">A(x)=A^{[0]}\\left(x^{2}\\right)+x A^{[1]}\\left(x^{2}\\right) .</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2380099999999998em;vertical-align:-0.35001em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">0</span><span class=\"mclose mtight\">]</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2380099999999998em;vertical-align:-0.35001em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">]</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span></span></span></span></p>\n<p>所以, 求 $ A(x)$  在  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>ω</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>0</mn></msubsup><mo separator=\"true\">,</mo><msubsup><mi>ω</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>1</mn></msubsup><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msubsup><mi>ω</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mi>n</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\omega_{n+1}^{0}, \\omega_{n+1}^{1}, \\ldots, \\omega_{n+1}^{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1205469999999997em;vertical-align:-0.30643899999999996em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999998em;\"><span style=\"top:-2.451892em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30643899999999996em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999998em;\"><span style=\"top:-2.451892em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30643899999999996em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6643919999999999em;\"><span style=\"top:-2.451892em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30643899999999996em;\"><span></span></span></span></span></span></span></span></span></span>  处的值的问题转化为:<br />\na. 求次数为 $ \\frac{n}{2}$  的多项式 $ A^{[0]}(x), A^{[1]}(x) $<br />\n在点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow><mo fence=\"true\">(</mo><msubsup><mi>ω</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>0</mn></msubsup><mo fence=\"true\">)</mo></mrow><mn>2</mn></msup><mo separator=\"true\">,</mo><msup><mrow><mo fence=\"true\">(</mo><msubsup><mi>ω</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>1</mn></msubsup><mo fence=\"true\">)</mo></mrow><mn>2</mn></msup><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msup><mrow><mo fence=\"true\">(</mo><msubsup><mi>ω</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo fence=\"true\">)</mo></mrow><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\left(\\omega_{n+1}^{0}\\right)^{2},\\left(\\omega_{n+1}^{1}\\right)^{2}, \\ldots,\\left(\\omega_{n+1}^{n}\\right)^{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.404018em;vertical-align:-0.35001em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999998em;\"><span style=\"top:-2.451892em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30643899999999996em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.054008em;\"><span style=\"top:-3.3029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999998em;\"><span style=\"top:-2.451892em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30643899999999996em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.054008em;\"><span style=\"top:-3.3029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6643919999999999em;\"><span style=\"top:-2.451892em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30643899999999996em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.054008em;\"><span style=\"top:-3.3029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span>  处的取值.</p>\n<p>递归即可得到结果.</p>\n<blockquote>\n<p>复杂度<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>2</mn><mi>T</mi><mrow><mo fence=\"true\">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mi mathvariant=\"normal\">Θ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)=2 T\\left(\\frac{n}{2}\\right)+\\Theta(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.20001em;vertical-align:-0.35001em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.695392em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Θ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n</blockquote>\n<p>然后进行点值乘法,得到点值的结果,再利用逆变换为系数表达.</p>\n<h2 id=\"具体流程\"><a class=\"markdownIt-Anchor\" href=\"#具体流程\"></a> 具体流程</h2>\n<ol>\n<li>加倍多项式次数<br />\n通过加入  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>  个系数为 0 的高阶项, 把多项式 $ A(x)  和  B(x)$  变为次数为  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">2 n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span></span></span></span>  的 多项式, 并构造其系数表达.</li>\n<li>求值<br />\n通过应用 $ 2(n+1) $ 阶的 $FFT $计算出  $A(x)  和  B(x) $ 长度为 $ 2(n+1) $ 的点值表达. 这些点值表达中包含了两个多项式在 $ 2(n+1) $ 次单位根处的取值.</li>\n<li>逐点相乘<br />\n把  $A(x)  的值与  B(x) $的值逐点相乘, 可以计算出  $C(x)=A(x) B(x) $ 的点值表 达, 这个表示中包含了 $ C(x)  在每个  2(n+1) $ 次单位根处的值.</li>\n<li>揷值<br />\n通过对  $2(n+1) $ 个点值应用 FFT, 计算其逆 DFT, 就可以构造出多项式<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>的系数表达</li>\n</ol>\n<p>由于 $ 1 、 3 $ 的时间复杂度为 $ \\Theta(n)$, $2 、 4 $ 的时间复杂度为  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Θ</mi><mrow><mo fence=\"true\">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\Theta\\left(n \\log _{2} n\\right)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Θ</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span></span></span></span> ,<br />\n因此整个算法的时间复杂度为 $ \\Theta\\left(n \\log _{2} n\\right)$ .</p>\n<h2 id=\"python-代码\"><a class=\"markdownIt-Anchor\" href=\"#python-代码\"></a> python 代码</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"comment\"># 定义Π</span></span><br><span class=\"line\">PI = <span class=\"number\">3.1415926</span></span><br><span class=\"line\"><span class=\"comment\"># 定义复数</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">complex</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,real=<span class=\"number\">0</span>,virtual=<span class=\"number\">0</span></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        self.real=real</span><br><span class=\"line\">        self.virtual=virtual</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&#x27;real:<span class=\"subst\">&#123;self.real&#125;</span>  virtual:<span class=\"subst\">&#123;self.virtual&#125;</span>\\n&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 复数的乘法加法减法</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">complex_mut</span>(<span class=\"params\">a,b</span>):</span><br><span class=\"line\">    ret=<span class=\"built_in\">complex</span>()</span><br><span class=\"line\">    ret.real = a.real * b.real - a.virtual * b.virtual</span><br><span class=\"line\">    ret.virtual = a.real * b.virtual + a.virtual * b.real</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">complex_add</span>(<span class=\"params\">a,b</span>):</span><br><span class=\"line\">    ret=<span class=\"built_in\">complex</span>()</span><br><span class=\"line\">    ret.real = a.real + b.real</span><br><span class=\"line\">    ret.virtual = a.virtual + b.virtual</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">complex_sub</span>(<span class=\"params\">a,b</span>):</span><br><span class=\"line\">    ret=<span class=\"built_in\">complex</span>()</span><br><span class=\"line\">    ret.real = a.real - b.real</span><br><span class=\"line\">    ret.virtual = a.virtual - b.virtual</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 获取i次n复根</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_w</span>(<span class=\"params\">n,k,inverse</span>):</span><br><span class=\"line\">    w=<span class=\"built_in\">complex</span>()</span><br><span class=\"line\">    <span class=\"comment\"># 根据欧拉函数获得w</span></span><br><span class=\"line\">    accy=<span class=\"built_in\">round</span>(PI*<span class=\"number\">2</span>*k/n,<span class=\"number\">6</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 逆傅里叶变换sin前面要有-</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> inverse:</span><br><span class=\"line\">        w.real=<span class=\"built_in\">round</span>(math.cos(accy),<span class=\"number\">6</span>)</span><br><span class=\"line\">        w.virtual=<span class=\"built_in\">round</span>(-math.sin(accy),<span class=\"number\">6</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        w.real=<span class=\"built_in\">round</span>(math.cos(accy),<span class=\"number\">6</span>)</span><br><span class=\"line\">        w.virtual=<span class=\"built_in\">round</span>(math.sin(accy),<span class=\"number\">6</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> w</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 快速傅里叶变换</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">FFT</span>(<span class=\"params\">coefficient,n,inverse</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 如果n==1了直接返回系数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n==<span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> coefficient</span><br><span class=\"line\">    <span class=\"comment\"># 用于存放奇偶次项</span></span><br><span class=\"line\">    odd,even=[],[]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> index&amp;<span class=\"number\">1</span>:</span><br><span class=\"line\">            odd.append(coefficient[index])</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            even.append(coefficient[index])</span><br><span class=\"line\">    <span class=\"comment\"># 对奇偶次项分别计算快速傅里叶变换</span></span><br><span class=\"line\">    e_k=FFT(even,n//<span class=\"number\">2</span>,inverse)</span><br><span class=\"line\">    d_k=FFT(odd,n//<span class=\"number\">2</span>,inverse)</span><br><span class=\"line\">    <span class=\"comment\"># 计算第k个点和第k+n//2个点的y坐标</span></span><br><span class=\"line\">    y_k,y_k_2=[],[]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n//<span class=\"number\">2</span>):</span><br><span class=\"line\">        w=get_w(n,i,inverse)</span><br><span class=\"line\">        y_k.append(complex_add(e_k[i],complex_mut(w,d_k[i])))</span><br><span class=\"line\">        y_k_2.append(complex_sub(e_k[i],complex_mut(w,d_k[i])))</span><br><span class=\"line\">    <span class=\"comment\"># 返回n个点的y坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> y_k+y_k_2</span><br><span class=\"line\">    </span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">polynomial_mul</span>(<span class=\"params\">coefficient_a,coefficient_b</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 本来是坐标代表高位</span></span><br><span class=\"line\">    <span class=\"comment\"># 现在反过来,左边代表地位,索引就是x的项数</span></span><br><span class=\"line\">    coefficient_a=coefficient_a[::-<span class=\"number\">1</span>]</span><br><span class=\"line\">    coefficient_b=coefficient_b[::-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 计算乘积的最高次项是多少</span></span><br><span class=\"line\">    length=<span class=\"built_in\">len</span>(coefficient_a)-<span class=\"number\">1</span>+<span class=\"built_in\">len</span>(coefficient_b)-<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># 取乘积的此项大的 2的n次方 方便后面FFT计算</span></span><br><span class=\"line\">    digitnum = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> length&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        length&gt;&gt;=<span class=\"number\">1</span></span><br><span class=\"line\">        digitnum+=<span class=\"number\">1</span></span><br><span class=\"line\">    length = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> digitnum&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        length&lt;&lt;=<span class=\"number\">1</span></span><br><span class=\"line\">        digitnum-=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># 把系数变为复数,方便后面和n复根计算</span></span><br><span class=\"line\">    a,b=[<span class=\"built_in\">complex</span>() <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length+<span class=\"number\">1</span>)],[<span class=\"built_in\">complex</span>() <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length+<span class=\"number\">1</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index,item <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(coefficient_a):</span><br><span class=\"line\">        a[index].real=item</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index,item <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(coefficient_b):</span><br><span class=\"line\">        b[index].real=item</span><br><span class=\"line\">    <span class=\"comment\"># 对系数a,b进行快速傅里叶变换</span></span><br><span class=\"line\">    FFT_a=FFT(a,length,inverse=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    FFT_b=FFT(b,length,inverse=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    c=[]</span><br><span class=\"line\">    <span class=\"comment\"># 对变换得到的y坐标进行点值乘法</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length):</span><br><span class=\"line\">        c.append(complex_mut(FFT_a[index],FFT_b[index]))</span><br><span class=\"line\">    <span class=\"comment\"># 对c进行逆傅里叶变换</span></span><br><span class=\"line\">    FFT_c=FFT(c,length,inverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 取c的实部才是结果</span></span><br><span class=\"line\">    ans=[]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> FFT_c:</span><br><span class=\"line\">        <span class=\"comment\"># 控制精度,因为float计算会有误差</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> item.real/length&gt;<span class=\"number\">0.05</span> <span class=\"keyword\">or</span> item.real/length&lt;-<span class=\"number\">0.05</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 小数点后保留2位</span></span><br><span class=\"line\">            <span class=\"comment\"># 得到的结果还需要除以n</span></span><br><span class=\"line\">            ans.append(<span class=\"built_in\">round</span>(item.real/length,<span class=\"number\">2</span>))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            ans.append(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans</span><br><span class=\"line\"><span class=\"comment\"># (x2+x+1)^2</span></span><br><span class=\"line\"><span class=\"comment\"># x4+x3+x2+x3+x2+x+x2+x+1</span></span><br><span class=\"line\"><span class=\"comment\"># x4+2*x3+3*x2+2*x+1</span></span><br><span class=\"line\"><span class=\"comment\"># 0 0 0 1 2 3 2 1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 左边代表高次项,右边代表低次项</span></span><br><span class=\"line\">    a=[<span class=\"number\">0</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">    b=[<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"comment\"># O(nlogn)的多项式乘法</span></span><br><span class=\"line\">    c=polynomial_mul(a,b)</span><br><span class=\"line\">    <span class=\"comment\"># 打印</span></span><br><span class=\"line\">    astr=<span class=\"string\">&#x27; + &#x27;</span>.join([<span class=\"string\">f&#x27;<span class=\"subst\">&#123;item&#125;</span>*x^<span class=\"subst\">&#123;index&#125;</span> &#x27;</span> <span class=\"keyword\">for</span> index,item <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(a[::-<span class=\"number\">1</span>])][::-<span class=\"number\">1</span>])</span><br><span class=\"line\">    bstr=<span class=\"string\">&#x27; + &#x27;</span>.join([<span class=\"string\">f&#x27;<span class=\"subst\">&#123;item&#125;</span>*x^<span class=\"subst\">&#123;index&#125;</span> &#x27;</span> <span class=\"keyword\">for</span> index,item <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(b[::-<span class=\"number\">1</span>])][::-<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;    <span class=\"subst\">&#123;astr&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;*   <span class=\"subst\">&#123;bstr&#125;</span>&quot;</span>)</span><br><span class=\"line\">    cstr=<span class=\"string\">&#x27; + &#x27;</span>.join([<span class=\"string\">f&#x27;<span class=\"subst\">&#123;item&#125;</span>*x^<span class=\"subst\">&#123;index&#125;</span> &#x27;</span> <span class=\"keyword\">for</span> index,item <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(c) <span class=\"keyword\">if</span> item !=<span class=\"number\">0</span>  ][::-<span class=\"number\">1</span>]  )</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;=   <span class=\"subst\">&#123;cstr&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"c代码\"><a class=\"markdownIt-Anchor\" href=\"#c代码\"></a> C++代码</h2>\n<p>来自<a href=\"https://zhuanlan.zhihu.com/p/411082641\">知乎</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> PI = <span class=\"number\">3.1415926</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_complex</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> x;</span><br><span class=\"line\">    <span class=\"type\">double</span> y;</span><br><span class=\"line\">&#125;;<span class=\"comment\">//手动封装的复数结构体，x为实部，y为虚部</span></span><br><span class=\"line\">_complex a[<span class=\"number\">4096</span>], b[<span class=\"number\">4096</span>];<span class=\"comment\">//用于存储两个多项式的系数</span></span><br><span class=\"line\"><span class=\"type\">bool</span> is_output[<span class=\"number\">4096</span>];<span class=\"comment\">//后面会用到的用于判断是否输出的一串变量</span></span><br><span class=\"line\"><span class=\"function\">_complex <span class=\"title\">omega</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span>&amp; n, <span class=\"type\">const</span> <span class=\"type\">int</span>&amp; k,<span class=\"type\">bool</span> inverse)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t_complex r;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!inverse)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\tr.x = <span class=\"built_in\">cos</span>(PI * <span class=\"number\">2</span> * k / n);</span><br><span class=\"line\">\tr.y = <span class=\"built_in\">sin</span>(PI * <span class=\"number\">2</span> * k / n);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tr.x = <span class=\"built_in\">cos</span>(PI * <span class=\"number\">2</span> * k / n);</span><br><span class=\"line\">\t\tr.y = -<span class=\"built_in\">sin</span>(PI * <span class=\"number\">2</span> * k / n);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;<span class=\"comment\">//用于插复根</span></span><br><span class=\"line\"><span class=\"keyword\">inline</span> _complex <span class=\"keyword\">operator</span>*(_complex a, _complex b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_complex r;</span><br><span class=\"line\">\tr.x = a.x * b.x - a.y * b.y;</span><br><span class=\"line\">\tr.y = a.x * b.y + a.y * b.x;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> _complex <span class=\"keyword\">operator</span>+(_complex a, _complex b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_complex r;</span><br><span class=\"line\">\tr.x = a.x + b.x;</span><br><span class=\"line\">\tr.y = a.y + b.y;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> _complex <span class=\"keyword\">operator</span>-(_complex a, _complex b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_complex r;</span><br><span class=\"line\">\tr.x = a.x - b.x;</span><br><span class=\"line\">\tr.y = a.y - b.y;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//因为没有用到除法，这里我就没有重载除的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Real_DFT</span><span class=\"params\">(_complex* a, <span class=\"type\">bool</span> inverse, <span class=\"type\">int</span> anum)</span><span class=\"comment\">//这个inverse表示是否为反变换，false为否，true表示是</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (anum == <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tvector&lt;_complex&gt; buf1, buf2;<span class=\"comment\">//buf1和buf2为两个缓冲数组，用于暂存变换中各项系数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; anum ; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tbuf2.<span class=\"built_in\">push_back</span>(a[i]);<span class=\"comment\">//奇数项</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tbuf1.<span class=\"built_in\">push_back</span>(a[i]);<span class=\"comment\">//偶数项</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; anum / <span class=\"number\">2</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ta[i] = buf1[i];</span><br><span class=\"line\">\t\ta[i + anum / <span class=\"number\">2</span>] = buf2[i];</span><br><span class=\"line\">\t&#125;<span class=\"comment\">//拆分排序后重新赋值回a，为下一步排序准备</span></span><br><span class=\"line\">\t<span class=\"built_in\">Real_DFT</span>(a, inverse, anum / <span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">Real_DFT</span>(a + anum / <span class=\"number\">2</span>, inverse, anum / <span class=\"number\">2</span>);<span class=\"comment\">//奇偶数项拆开后迭代继续拆分</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> armlength = anum / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; armlength; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_complex t = <span class=\"built_in\">omega</span>(anum, i, inverse);</span><br><span class=\"line\">\t\tbuf1[i] = a[i] + t * a[i + anum / <span class=\"number\">2</span>];<span class=\"comment\">//低次复根走这边插</span></span><br><span class=\"line\">\t\tbuf2[i] = a[i] - t * a[i + anum / <span class=\"number\">2</span>];<span class=\"comment\">//高次复根走这边插</span></span><br><span class=\"line\">\t&#125;<span class=\"comment\">//这里继续用到了buf数组只是为了暂存，没有别的意思</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; anum / <span class=\"number\">2</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ta[i] = buf1[i];</span><br><span class=\"line\">\t\ta[i + anum / <span class=\"number\">2</span>] = buf2[i];</span><br><span class=\"line\">\t&#125;<span class=\"comment\">//重新赋值回去</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//inport data</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> numa = <span class=\"number\">0</span>, numb = <span class=\"number\">0</span>;<span class=\"comment\">//numa是a多项式的项数，numb同理</span></span><br><span class=\"line\">\tcin &gt;&gt; numa;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ptr0 = <span class=\"number\">0</span>, maxa = <span class=\"number\">0</span>, sum = <span class=\"number\">0</span>, ptr1 = <span class=\"number\">0</span>,maxb=<span class=\"number\">0</span>;<span class=\"comment\">//maxa存储a多项式中的最高次幂，maxb同理</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;numa; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> id = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tcin &gt;&gt; id;</span><br><span class=\"line\">\t\tmaxa = maxa &gt; id ? maxa : id;</span><br><span class=\"line\">\t\tcin &gt;&gt; a[id].x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcin &gt;&gt; numb;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; numb; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> id = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tcin &gt;&gt; id;</span><br><span class=\"line\">\t\tmaxb = maxb &gt; id ? maxb : id;</span><br><span class=\"line\">\t\tcin &gt;&gt; b[id].x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsum = maxa + maxb;</span><br><span class=\"line\"><span class=\"comment\">//decide complete num</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> digitnum = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; sum &gt; <span class=\"number\">0</span>; sum &gt;&gt;= <span class=\"number\">1</span>, digitnum++);</span><br><span class=\"line\">\tsum = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; digitnum &gt; <span class=\"number\">0</span>; sum &lt;&lt;= <span class=\"number\">1</span>, digitnum--);<span class=\"comment\">//由于傅里叶变换要求插值数为2的整数次幂</span></span><br><span class=\"line\"><span class=\"comment\">//这里首先确定多项式相乘后最多的项数也就是sum然后找到第一个比sum大的2的整数次幂的数，将sum重置为这个2的整数次幂</span></span><br><span class=\"line\"><span class=\"comment\">//Fast Fourier Transform</span></span><br><span class=\"line\">\t<span class=\"built_in\">Real_DFT</span>(a, <span class=\"literal\">false</span>, sum);</span><br><span class=\"line\">\t<span class=\"built_in\">Real_DFT</span>(b, <span class=\"literal\">false</span>, sum);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; sum; i++)</span><br><span class=\"line\">\t\ta[i] = a[i] * b[i];<span class=\"comment\">//这一步就是上文没有细讲的点值表达式相乘，还是挺好搞的</span></span><br><span class=\"line\">\t<span class=\"built_in\">Real_DFT</span>(a, <span class=\"literal\">true</span>, sum);</span><br><span class=\"line\"><span class=\"comment\">//export data</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> num=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= sum; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i].x / sum &gt; <span class=\"number\">0.05</span>||a[i].x/sum&lt;<span class=\"number\">-0.05</span>)<span class=\"comment\">//遍历得到的结果，如果这个数的绝对值大于0.05（题目要求的0.1精度，根据四舍五入原则判断），则准备输出</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnum++;</span><br><span class=\"line\">\t\t\tis_output[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout  &lt;&lt; num;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = sum; i &gt;=<span class=\"number\">0</span>; i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(is_output[i]==<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt;i&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt; std::fixed &lt;&lt; <span class=\"built_in\">setprecision</span>(<span class=\"number\">1</span>) &lt;&lt; (a[i].x / sum);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输入</span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span> <span class=\"number\">2.4</span> <span class=\"number\">0</span> <span class=\"number\">3.2</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">2</span> <span class=\"number\">1.5</span> <span class=\"number\">1</span> <span class=\"number\">0.5</span></span><br><span class=\"line\"></span><br><span class=\"line\">输出</span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">3</span> <span class=\"number\">3.6</span> <span class=\"number\">2</span> <span class=\"number\">6.0</span> <span class=\"number\">1</span> <span class=\"number\">1.6</span></span><br></pre></td></tr></table></figure>"},{"title":"LeecCode剑指offer1","toc":"true# 是否启用内容索引","_content":"\n\n## LeecCode剑指offer1刷题记录\n\n### 第一天\n\n[剑指 Offer 09. 用两个栈实现队列](https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:一个栈1用于进,一个栈2用于出,当2空了,就把1里面的元素全部放进2,如果此时1也空了,那就是都空了\n\n```python\nclass CQueue:\n    def __init__(self):\n        self.stack_in=[]\n        self.stack_out=[]\n    def appendTail(self, value: int) -> None:\n        self.stack_in.append(value)\n    def deleteHead(self) -> int:\n        if len(self.stack_out):\n            return self.stack_out.pop()\n        else:\n            if len(self.stack_in):\n                while len(self.stack_in):\n                    self.stack_out.append(self.stack_in.pop())\n                return self.stack_out.pop()\n            else:\n                return -1\n```\n[剑指 Offer 30. 包含min函数的栈](https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:一个单独的栈x存最小值,如果进栈的元素小于等于x最顶元素就进x,如果出栈元素等于x顶层元素,x出栈\n\n```python\nclass MinStack:\n    def __init__(self):\n        self.stack=[]\n        self.minnums=[]\n    def push(self, x: int) -> None:\n        self.stack.append(x)\n        if not len(self.minnums) or x<=self.minnums[-1]:\n            self.minnums.append(x)\n    def pop(self) -> None:\n        if self.stack[-1]==self.minnums[-1]:\n            self.stack.pop()\n            self.minnums.pop()\n        else:\n            self.stack.pop()\n    def top(self) -> int:\n        return self.stack[-1]\n    def min(self) -> int:\n        return self.minnums[-1]\n```\n\n### 第二天\n\n[剑指 Offer 06. 从尾到头打印链表](https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:1.遍历一遍链表,用数组存每个元素,然后返回数组的逆序 2.递归\n\n```python\nclass Solution:\n    def reversePrint(self, head: ListNode) -> List[int]:\n        ans=[]\n        while head:\n            ans.append(head.val)\n            head=head.next\n        return ans[::-1]\n        # return self.reversePrint(head.next) + [head.val] if head else []\n```\n\n\n[剑指 Offer 24. 反转链表](https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:1.三个指针,模拟列表断开向后连接的情景,2.把链表元素都存在数组里,当作一个个单独的节点,反过来连接\n\n```python\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        if head is None:return head\n        re=[]\n        while head:\n            re.append(head)\n            temp=head.next\n            head.next=None\n            head=temp\n        re.reverse()\n        print(re)\n        ret=None\n        for i in range(len(re)):\n            if ret is None:\n                ret=re[i]\n            else:\n                ret.next=re[i]\n                ret=ret.next\n        return re[0]\n```\n\n\n[剑指 Offer 35. 复杂链表的复制](https://leetcode.cn/problems/fu-za-lian-biao-de-fu-zhi-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n错误思路:不能像普通链表一样遍历重新连接,因为random指针的节点可能还没遍历到\n\n思路:1.递归  2.把A-B-C的链表  改造成A-A'-B-B'-C-C',然后模仿原指针的下一个位置,主要各个边界条件的判断\n\n```python\n# 拼接+拆分\nclass Solution:\n    def copyRandomList(self, head: 'Node') -> 'Node':\n        if head is None :return None\n        temphead=head\n        while head:\n            temp=Node(head.val)\n            temp.next=head.next\n            head.next=temp\n            head=head.next.next\n        head=temphead\n        while head:\n            if head.random:\n                head.next.random=head.random.next\n            head=head.next.next\n        orighead=head=temphead.next\n        ans=head\n        while head:\n            if head.next is None:\n                break\n            temp=orighead.next.next\n            head.next=orighead.next.next\n            head=head.next\n            orighead=temp\n        return ans\n```\n\n```C++\n// Hash表+递归\nclass Solution {\npublic:\n    unordered_map<Node*, Node*> cachedNode;\n\n    Node* copyRandomList(Node* head) {\n        if (head == nullptr) {\n            return nullptr;\n        }\n        if (!cachedNode.count(head)) {\n            Node* headNew = new Node(head->val);\n            cachedNode[head] = headNew;\n            headNew->next = copyRandomList(head->next);\n            headNew->random = copyRandomList(head->random);\n        }\n        return cachedNode[head];\n    }\n};\n```\n\n\n\n### 第三天\n[剑指 Offer 05. 替换空格](https://leetcode.cn/problems/ti-huan-kong-ge-lcof/description/)\n\n思路:先用数组比直接返回str.replace时间空间上都要快不少\n\n```python\nclass Solution:\n    def replaceSpace(self, s: str) -> str:\n        res = []\n        for c in s:\n            if c == ' ': res.append(\"%20\")\n            else: res.append(c)\n        return \"\".join(res)\n```\n\n[剑指 Offer 58 - II. 左旋转字符串](https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/description/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:.\n\n```python\nclass Solution:\n    def reverseLeftWords(self, s: str, n: int) -> str:\n        return s[n:]+s[:n]\n```\n\n\n### 第四天\n\n[剑指 Offer 03. 数组中重复的数字](https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:1.字典存 2.排序 3.一直交换到已有\n\n```python\nclass Solution:\n    def findRepeatNumber(self, nums: List[int]) -> int:\n        m=dict()\n        for i in nums:\n            if i in m:\n                return i\n            m[i]=1\n\nclass Solution:\n    def findRepeatNumber(self, nums: [int]) -> int:\n        i = 0\n        while i < len(nums):\n            if nums[i] == i:\n                i += 1\n                continue\n            if nums[nums[i]] == nums[i]: return nums[i]\n            nums[nums[i]], nums[i] = nums[i], nums[nums[i]]\n        return -1\n\n```\n\n\n\n[剑指 Offer 53 - I. 在排序数组中查找数字 I](https://leetcode.cn/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/description/)\n\n思路:二分,然后下标加到不是这个数\n\n```python\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        index=bisect_left(nums,target)\n        length=len(nums)\n        ans=0\n        while index<length and nums[index]==target:\n            ans+=1\n            index+=1\n        return ans\n```\n\n[剑指 Offer 53 - II. 0～n-1中缺失的数字](https://leetcode.cn/problems/que-shi-de-shu-zi-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:1.直接遍历 2.hash 3.位运算 4.应该的和-实际的和=差的数字 5.二分\n\n```python\n# 后面加n个数 一起异或,缺的数只会出现一次,相同的数异或两次为-\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        # ans=0\n        # for index,num in enumerate(nums):\n        #     ans^=index\n        #     ans^=num\n        # return ans^len(nums)\n        left,right=0,len(nums)-1\n        while left<=right:\n            mid=(left+right)>>1\n            if nums[mid]==mid:\n                left=mid+1\n            else:\n                right=mid-1\n        return left\n```\n\n\n\n### 第五天\n\n[剑指 Offer 11. 旋转数组的最小数字](https://leetcode.cn/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:根据凹的性质一次遍历,如果找不到那么就是递增的,直接返回numbers[0]\n\n```python\nclass Solution:\n    def minArray(self, numbers: List[int]) -> int:\n        for i in range(1,len(numbers)):\n            if numbers[i]<numbers[i-1]:\n                return numbers[i]\n        return numbers[0]\n```\n\n\n[剑指 Offer 50. 第一个只出现一次的字符](https://leetcode.cn/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:1.OrderedDict   2.Counter\n\n```python\nclass Solution:\n    def firstUniqChar(self, s: str) -> str:\n        m=OrderedDict()\n        for i in s:\n            m[i]=m.get(i,0)+1\n        for k,v in m.items():\n            if v==1:\n                return k\n        return ' '\n        # frequency = collections.Counter(s)\n        # for i, ch in enumerate(s):\n        #     if frequency[ch] == 1:\n        #         return ch\n        # return ' '\n\n```\n\n\n[剑指 Offer 04. 二维数组中的查找](https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:1.对每一行二分$O(N*log(N))$ 2.把矩阵向左旋转90度就是一个搜索树,从底向上搜索,\n每次可消去一行或者一列 $O(N+M)$\n\n```python\nclass Solution:\n    def findNumberIn2DArray(self, matrix: List[List[int]], target: int) -> bool:\n        if len(matrix)==0:return False\n        m=len(matrix[0])\n        n=len(matrix)\n        i,j=n-1,0\n        while i>=0 and j<m:\n            if matrix[i][j]>target:\n                i-=1\n            elif matrix[i][j]<target:\n                j+=1\n            else:\n                return True\n        return False\n```\n\n\n\n\n### 第六天\n\n[剑指 Offer 32 - I. 从上到下打印二叉树](https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:广搜\n\n```python\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> List[int]:\n        if not root:return []\n        stack=collections.deque([root])\n        ans=[]\n        while len(stack):\n            cur=stack.popleft()\n            ans.append(cur.val)\n            if cur.left:\n                stack.append(cur.left)\n            if cur.right:\n                stack.append(cur.right)\n        \n        return ans\n```\n\n[剑指 Offer 32 - II. 从上到下打印二叉树 II](https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:1.广搜存节点的时候新增一个layer表示在第几层 2.每一次遍历完队列中的所有节点 3.记录每一层的最后一个节点\n```python\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> List[List[int]]:\n        if not root:return []\n        stack=collections.deque([(root,1)])\n        ans=[]\n        temp=[root.val]\n        lastlayer=-1\n        while len(stack):\n            (cur,layer)=stack.popleft()\n            if layer!=lastlayer:\n                ans.append(temp)\n                temp=[]\n            if cur.left:\n                stack.append((cur.left,layer+1))\n                temp.append(cur.left.val)\n            if cur.right:\n                stack.append((cur.right,layer+1))\n                temp.append(cur.right.val)\n            lastlayer=layer\n        return ans\n\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> List[List[int]]:\n        if not root: return []\n        res, queue = [], collections.deque()\n        queue.append(root)\n        while queue:\n            tmp = []\n            for _ in range(len(queue)):\n                node = queue.popleft()\n                tmp.append(node.val)\n                if node.left: queue.append(node.left)\n                if node.right: queue.append(node.right)\n            res.append(tmp)\n        return res\n```\n\n[剑指 Offer 32 - III. 从上到下打印二叉树 III](https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:在上面一题的基础上,在新增每一层的时候,用一个标志,奇数正加,偶数反加\n\n```python\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> List[List[int]]:\n        if not root:return []\n        stack=collections.deque([(root,1)])\n        ans=[]\n        temp=[root.val]\n        lastlayer=0\n        while len(stack):\n            (cur,layer)=stack.popleft()\n            if layer!=lastlayer:\n                if layer&1:\n                    ans.append(temp)\n                else:\n                    ans.append(temp[::-1])\n                temp=[]\n            if cur.left:\n                stack.append((cur.left,layer+1))\n                temp.append(cur.left.val)\n            if cur.right:\n                stack.append((cur.right,layer+1))\n                temp.append(cur.right.val)\n            lastlayer=layer\n        return ans\n```\n\n\n### 第七天\n\n\n[剑指 Offer 26. 树的子结构](https://leetcode.cn/problems/shu-de-zi-jie-gou-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:1. 先找到子树的根节点,然后对比剩下的部分是否一样,判断条件比较多  2.三种情况,一个是从当前节点比,一个是左子树的子树,一个是右子树的子树\n\n```python\nclass Solution:\n    def isSubStructure(self, A: TreeNode, B: TreeNode) -> bool:\n        def recur(A, B):\n            if not B: return True\n            if not A or A.val != B.val: return False\n            return recur(A.left, B.left) and recur(A.right, B.right)\n\n        return bool(A and B) and (recur(A, B) or self.isSubStructure(A.left, B) or self.isSubStructure(A.right, B))\n```\n[剑指 Offer 27. 二叉树的镜像](https://leetcode.cn/problems/er-cha-shu-de-jing-xiang-lcof/description/)\n\n思路:递归交换左右子树\n\n```python\nclass Solution:\n    def mirrorTree(self, root: TreeNode) -> TreeNode:\n        if root is None:return None\n        l,r=None,None\n        if root.left:\n            r=self.mirrorTree(root.left)\n        if root.right:\n            l=self.mirrorTree(root.right)\n        root.right,root.left=r,l\n        return root\n```\n\n\n[剑指 Offer 28. 对称的二叉树](https://leetcode.cn/problems/dui-cheng-de-er-cha-shu-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n错误思路:只比较了左右子树,没有从全局对比\n\n题解:1.两个指针,反过来比(一个从左往右走,一个从右往左走)  2.交换左右子树再递归查询\n\n```python\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        def check(a,b):\n            if a is None and b is None:\n                return True\n            if a is None and b :\n                return False\n            if b is None and a:\n                return False\n            if a.val != b.val:\n                return False\n            return check(a.left,b.right) and check(a.right,b.left)\n        \n        return check(root,root)\n```\n### 第八天\n\n[剑指 Offer 10- I. 斐波那契数列](https://leetcode.cn/problems/fei-bo-na-qi-shu-lie-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n[剑指 Offer 10- II. 青蛙跳台阶问题](https://leetcode.cn/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:1.递归  2.记忆递归 3.动态规划 4.空间优化的动态规划\n\n```python\nclass Solution:\n    def fib(self, n: int) -> int:\n        if n==0:return 0\n        a=0\n        b=1\n        for i in range(2,n+1):\n            a,b=b,a+b\n            a%=1e9+7\n            b%=1e9+7\n        return int(b)\n```\n\n[剑指 Offer 63. 股票的最大利润](https://leetcode.cn/problems/gu-piao-de-zui-da-li-run-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:保存最小的价格 一次遍历,比较答案和今天减去最小价格,更新最小价格\n\n```python\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        # if len(prices)==0:\n        #     return 0\n        # ans=0\n        # leftprofit=0\n        # buyprice=prices[0]\n        # for index in range(1,len(prices)):\n        #     if prices[index]-prices[index-1]+leftprofit>=0:\n        #         leftprofit=prices[index]-prices[index-1]+leftprofit\n        #         ans=max(ans,leftprofit)\n        #     else:\n        #         buyprice=prices[index]\n        #         leftprofit=0\n        # return ans\n        inf = int(1e9)\n        minprice = inf\n        maxprofit = 0\n        for price in prices:\n            maxprofit = max(price - minprice, maxprofit)\n            minprice = min(price, minprice)\n        return maxprofit\n```\n\n\n### 第九天\n\n\n[剑指 Offer 42. 连续子数组的最大和](https://leetcode.cn/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:如果之前的加上当前的是负数,那就把当前的当作开始\n\n```python\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        # for i in range(1, len(nums)):\n        #     nums[i] += max(nums[i - 1], 0)\n        # return max(nums)\n        pre = 0\n        maxAns = nums[0]\n        for x in nums:\n            pre = max(pre + x, x)\n            maxAns = max(maxAns, pre)\n        return maxAns\n```\n\n[剑指 Offer 47. 礼物的最大价值](https://leetcode.cn/problems/li-wu-de-zui-da-jie-zhi-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:二维DP基础\n\n```python\nclass Solution:\n    def maxValue(self, grid: List[List[int]]) -> int:\n        # n=len(grid)\n        # m=len(grid[0])\n        # dp=[[0]*m for _ in range(n)]\n        # dp[0][0]=grid[0][0]\n        # for i in range(1,n):\n        #     dp[i][0]=dp[i-1][0]+grid[i][0]\n        # for i in range(1,m):\n        #     dp[0][i]=dp[0][i-1]+grid[0][i]\n        # for i in range(1,n):\n        #     for j in range(1,m):\n        #         dp[i][j]=max(dp[i-1][j],dp[i][j-1])+grid[i][j]\n        # return dp[n-1][m-1]\n        m, n = len(grid), len(grid[0])\n        for j in range(1, n): # 初始化第一行\n            grid[0][j] += grid[0][j - 1]\n        for i in range(1, m): # 初始化第一列\n            grid[i][0] += grid[i - 1][0]\n        for i in range(1, m):\n            for j in range(1, n):\n                grid[i][j] += max(grid[i][j - 1], grid[i - 1][j])\n        return grid[-1][-1]\n```","source":"_posts/LeetCode剑指offer1.md","raw":"---\ntitle: LeecCode剑指offer1\ncategories:\n  - 学习笔记\ntags:\n  - 算法刷题笔记\ntoc: true# 是否启用内容索引\n---\n\n\n## LeecCode剑指offer1刷题记录\n\n### 第一天\n\n[剑指 Offer 09. 用两个栈实现队列](https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:一个栈1用于进,一个栈2用于出,当2空了,就把1里面的元素全部放进2,如果此时1也空了,那就是都空了\n\n```python\nclass CQueue:\n    def __init__(self):\n        self.stack_in=[]\n        self.stack_out=[]\n    def appendTail(self, value: int) -> None:\n        self.stack_in.append(value)\n    def deleteHead(self) -> int:\n        if len(self.stack_out):\n            return self.stack_out.pop()\n        else:\n            if len(self.stack_in):\n                while len(self.stack_in):\n                    self.stack_out.append(self.stack_in.pop())\n                return self.stack_out.pop()\n            else:\n                return -1\n```\n[剑指 Offer 30. 包含min函数的栈](https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:一个单独的栈x存最小值,如果进栈的元素小于等于x最顶元素就进x,如果出栈元素等于x顶层元素,x出栈\n\n```python\nclass MinStack:\n    def __init__(self):\n        self.stack=[]\n        self.minnums=[]\n    def push(self, x: int) -> None:\n        self.stack.append(x)\n        if not len(self.minnums) or x<=self.minnums[-1]:\n            self.minnums.append(x)\n    def pop(self) -> None:\n        if self.stack[-1]==self.minnums[-1]:\n            self.stack.pop()\n            self.minnums.pop()\n        else:\n            self.stack.pop()\n    def top(self) -> int:\n        return self.stack[-1]\n    def min(self) -> int:\n        return self.minnums[-1]\n```\n\n### 第二天\n\n[剑指 Offer 06. 从尾到头打印链表](https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:1.遍历一遍链表,用数组存每个元素,然后返回数组的逆序 2.递归\n\n```python\nclass Solution:\n    def reversePrint(self, head: ListNode) -> List[int]:\n        ans=[]\n        while head:\n            ans.append(head.val)\n            head=head.next\n        return ans[::-1]\n        # return self.reversePrint(head.next) + [head.val] if head else []\n```\n\n\n[剑指 Offer 24. 反转链表](https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:1.三个指针,模拟列表断开向后连接的情景,2.把链表元素都存在数组里,当作一个个单独的节点,反过来连接\n\n```python\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        if head is None:return head\n        re=[]\n        while head:\n            re.append(head)\n            temp=head.next\n            head.next=None\n            head=temp\n        re.reverse()\n        print(re)\n        ret=None\n        for i in range(len(re)):\n            if ret is None:\n                ret=re[i]\n            else:\n                ret.next=re[i]\n                ret=ret.next\n        return re[0]\n```\n\n\n[剑指 Offer 35. 复杂链表的复制](https://leetcode.cn/problems/fu-za-lian-biao-de-fu-zhi-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n错误思路:不能像普通链表一样遍历重新连接,因为random指针的节点可能还没遍历到\n\n思路:1.递归  2.把A-B-C的链表  改造成A-A'-B-B'-C-C',然后模仿原指针的下一个位置,主要各个边界条件的判断\n\n```python\n# 拼接+拆分\nclass Solution:\n    def copyRandomList(self, head: 'Node') -> 'Node':\n        if head is None :return None\n        temphead=head\n        while head:\n            temp=Node(head.val)\n            temp.next=head.next\n            head.next=temp\n            head=head.next.next\n        head=temphead\n        while head:\n            if head.random:\n                head.next.random=head.random.next\n            head=head.next.next\n        orighead=head=temphead.next\n        ans=head\n        while head:\n            if head.next is None:\n                break\n            temp=orighead.next.next\n            head.next=orighead.next.next\n            head=head.next\n            orighead=temp\n        return ans\n```\n\n```C++\n// Hash表+递归\nclass Solution {\npublic:\n    unordered_map<Node*, Node*> cachedNode;\n\n    Node* copyRandomList(Node* head) {\n        if (head == nullptr) {\n            return nullptr;\n        }\n        if (!cachedNode.count(head)) {\n            Node* headNew = new Node(head->val);\n            cachedNode[head] = headNew;\n            headNew->next = copyRandomList(head->next);\n            headNew->random = copyRandomList(head->random);\n        }\n        return cachedNode[head];\n    }\n};\n```\n\n\n\n### 第三天\n[剑指 Offer 05. 替换空格](https://leetcode.cn/problems/ti-huan-kong-ge-lcof/description/)\n\n思路:先用数组比直接返回str.replace时间空间上都要快不少\n\n```python\nclass Solution:\n    def replaceSpace(self, s: str) -> str:\n        res = []\n        for c in s:\n            if c == ' ': res.append(\"%20\")\n            else: res.append(c)\n        return \"\".join(res)\n```\n\n[剑指 Offer 58 - II. 左旋转字符串](https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/description/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:.\n\n```python\nclass Solution:\n    def reverseLeftWords(self, s: str, n: int) -> str:\n        return s[n:]+s[:n]\n```\n\n\n### 第四天\n\n[剑指 Offer 03. 数组中重复的数字](https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:1.字典存 2.排序 3.一直交换到已有\n\n```python\nclass Solution:\n    def findRepeatNumber(self, nums: List[int]) -> int:\n        m=dict()\n        for i in nums:\n            if i in m:\n                return i\n            m[i]=1\n\nclass Solution:\n    def findRepeatNumber(self, nums: [int]) -> int:\n        i = 0\n        while i < len(nums):\n            if nums[i] == i:\n                i += 1\n                continue\n            if nums[nums[i]] == nums[i]: return nums[i]\n            nums[nums[i]], nums[i] = nums[i], nums[nums[i]]\n        return -1\n\n```\n\n\n\n[剑指 Offer 53 - I. 在排序数组中查找数字 I](https://leetcode.cn/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/description/)\n\n思路:二分,然后下标加到不是这个数\n\n```python\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        index=bisect_left(nums,target)\n        length=len(nums)\n        ans=0\n        while index<length and nums[index]==target:\n            ans+=1\n            index+=1\n        return ans\n```\n\n[剑指 Offer 53 - II. 0～n-1中缺失的数字](https://leetcode.cn/problems/que-shi-de-shu-zi-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:1.直接遍历 2.hash 3.位运算 4.应该的和-实际的和=差的数字 5.二分\n\n```python\n# 后面加n个数 一起异或,缺的数只会出现一次,相同的数异或两次为-\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        # ans=0\n        # for index,num in enumerate(nums):\n        #     ans^=index\n        #     ans^=num\n        # return ans^len(nums)\n        left,right=0,len(nums)-1\n        while left<=right:\n            mid=(left+right)>>1\n            if nums[mid]==mid:\n                left=mid+1\n            else:\n                right=mid-1\n        return left\n```\n\n\n\n### 第五天\n\n[剑指 Offer 11. 旋转数组的最小数字](https://leetcode.cn/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:根据凹的性质一次遍历,如果找不到那么就是递增的,直接返回numbers[0]\n\n```python\nclass Solution:\n    def minArray(self, numbers: List[int]) -> int:\n        for i in range(1,len(numbers)):\n            if numbers[i]<numbers[i-1]:\n                return numbers[i]\n        return numbers[0]\n```\n\n\n[剑指 Offer 50. 第一个只出现一次的字符](https://leetcode.cn/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:1.OrderedDict   2.Counter\n\n```python\nclass Solution:\n    def firstUniqChar(self, s: str) -> str:\n        m=OrderedDict()\n        for i in s:\n            m[i]=m.get(i,0)+1\n        for k,v in m.items():\n            if v==1:\n                return k\n        return ' '\n        # frequency = collections.Counter(s)\n        # for i, ch in enumerate(s):\n        #     if frequency[ch] == 1:\n        #         return ch\n        # return ' '\n\n```\n\n\n[剑指 Offer 04. 二维数组中的查找](https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:1.对每一行二分$O(N*log(N))$ 2.把矩阵向左旋转90度就是一个搜索树,从底向上搜索,\n每次可消去一行或者一列 $O(N+M)$\n\n```python\nclass Solution:\n    def findNumberIn2DArray(self, matrix: List[List[int]], target: int) -> bool:\n        if len(matrix)==0:return False\n        m=len(matrix[0])\n        n=len(matrix)\n        i,j=n-1,0\n        while i>=0 and j<m:\n            if matrix[i][j]>target:\n                i-=1\n            elif matrix[i][j]<target:\n                j+=1\n            else:\n                return True\n        return False\n```\n\n\n\n\n### 第六天\n\n[剑指 Offer 32 - I. 从上到下打印二叉树](https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:广搜\n\n```python\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> List[int]:\n        if not root:return []\n        stack=collections.deque([root])\n        ans=[]\n        while len(stack):\n            cur=stack.popleft()\n            ans.append(cur.val)\n            if cur.left:\n                stack.append(cur.left)\n            if cur.right:\n                stack.append(cur.right)\n        \n        return ans\n```\n\n[剑指 Offer 32 - II. 从上到下打印二叉树 II](https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:1.广搜存节点的时候新增一个layer表示在第几层 2.每一次遍历完队列中的所有节点 3.记录每一层的最后一个节点\n```python\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> List[List[int]]:\n        if not root:return []\n        stack=collections.deque([(root,1)])\n        ans=[]\n        temp=[root.val]\n        lastlayer=-1\n        while len(stack):\n            (cur,layer)=stack.popleft()\n            if layer!=lastlayer:\n                ans.append(temp)\n                temp=[]\n            if cur.left:\n                stack.append((cur.left,layer+1))\n                temp.append(cur.left.val)\n            if cur.right:\n                stack.append((cur.right,layer+1))\n                temp.append(cur.right.val)\n            lastlayer=layer\n        return ans\n\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> List[List[int]]:\n        if not root: return []\n        res, queue = [], collections.deque()\n        queue.append(root)\n        while queue:\n            tmp = []\n            for _ in range(len(queue)):\n                node = queue.popleft()\n                tmp.append(node.val)\n                if node.left: queue.append(node.left)\n                if node.right: queue.append(node.right)\n            res.append(tmp)\n        return res\n```\n\n[剑指 Offer 32 - III. 从上到下打印二叉树 III](https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:在上面一题的基础上,在新增每一层的时候,用一个标志,奇数正加,偶数反加\n\n```python\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> List[List[int]]:\n        if not root:return []\n        stack=collections.deque([(root,1)])\n        ans=[]\n        temp=[root.val]\n        lastlayer=0\n        while len(stack):\n            (cur,layer)=stack.popleft()\n            if layer!=lastlayer:\n                if layer&1:\n                    ans.append(temp)\n                else:\n                    ans.append(temp[::-1])\n                temp=[]\n            if cur.left:\n                stack.append((cur.left,layer+1))\n                temp.append(cur.left.val)\n            if cur.right:\n                stack.append((cur.right,layer+1))\n                temp.append(cur.right.val)\n            lastlayer=layer\n        return ans\n```\n\n\n### 第七天\n\n\n[剑指 Offer 26. 树的子结构](https://leetcode.cn/problems/shu-de-zi-jie-gou-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:1. 先找到子树的根节点,然后对比剩下的部分是否一样,判断条件比较多  2.三种情况,一个是从当前节点比,一个是左子树的子树,一个是右子树的子树\n\n```python\nclass Solution:\n    def isSubStructure(self, A: TreeNode, B: TreeNode) -> bool:\n        def recur(A, B):\n            if not B: return True\n            if not A or A.val != B.val: return False\n            return recur(A.left, B.left) and recur(A.right, B.right)\n\n        return bool(A and B) and (recur(A, B) or self.isSubStructure(A.left, B) or self.isSubStructure(A.right, B))\n```\n[剑指 Offer 27. 二叉树的镜像](https://leetcode.cn/problems/er-cha-shu-de-jing-xiang-lcof/description/)\n\n思路:递归交换左右子树\n\n```python\nclass Solution:\n    def mirrorTree(self, root: TreeNode) -> TreeNode:\n        if root is None:return None\n        l,r=None,None\n        if root.left:\n            r=self.mirrorTree(root.left)\n        if root.right:\n            l=self.mirrorTree(root.right)\n        root.right,root.left=r,l\n        return root\n```\n\n\n[剑指 Offer 28. 对称的二叉树](https://leetcode.cn/problems/dui-cheng-de-er-cha-shu-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n错误思路:只比较了左右子树,没有从全局对比\n\n题解:1.两个指针,反过来比(一个从左往右走,一个从右往左走)  2.交换左右子树再递归查询\n\n```python\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        def check(a,b):\n            if a is None and b is None:\n                return True\n            if a is None and b :\n                return False\n            if b is None and a:\n                return False\n            if a.val != b.val:\n                return False\n            return check(a.left,b.right) and check(a.right,b.left)\n        \n        return check(root,root)\n```\n### 第八天\n\n[剑指 Offer 10- I. 斐波那契数列](https://leetcode.cn/problems/fei-bo-na-qi-shu-lie-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n[剑指 Offer 10- II. 青蛙跳台阶问题](https://leetcode.cn/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:1.递归  2.记忆递归 3.动态规划 4.空间优化的动态规划\n\n```python\nclass Solution:\n    def fib(self, n: int) -> int:\n        if n==0:return 0\n        a=0\n        b=1\n        for i in range(2,n+1):\n            a,b=b,a+b\n            a%=1e9+7\n            b%=1e9+7\n        return int(b)\n```\n\n[剑指 Offer 63. 股票的最大利润](https://leetcode.cn/problems/gu-piao-de-zui-da-li-run-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:保存最小的价格 一次遍历,比较答案和今天减去最小价格,更新最小价格\n\n```python\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        # if len(prices)==0:\n        #     return 0\n        # ans=0\n        # leftprofit=0\n        # buyprice=prices[0]\n        # for index in range(1,len(prices)):\n        #     if prices[index]-prices[index-1]+leftprofit>=0:\n        #         leftprofit=prices[index]-prices[index-1]+leftprofit\n        #         ans=max(ans,leftprofit)\n        #     else:\n        #         buyprice=prices[index]\n        #         leftprofit=0\n        # return ans\n        inf = int(1e9)\n        minprice = inf\n        maxprofit = 0\n        for price in prices:\n            maxprofit = max(price - minprice, maxprofit)\n            minprice = min(price, minprice)\n        return maxprofit\n```\n\n\n### 第九天\n\n\n[剑指 Offer 42. 连续子数组的最大和](https://leetcode.cn/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:如果之前的加上当前的是负数,那就把当前的当作开始\n\n```python\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        # for i in range(1, len(nums)):\n        #     nums[i] += max(nums[i - 1], 0)\n        # return max(nums)\n        pre = 0\n        maxAns = nums[0]\n        for x in nums:\n            pre = max(pre + x, x)\n            maxAns = max(maxAns, pre)\n        return maxAns\n```\n\n[剑指 Offer 47. 礼物的最大价值](https://leetcode.cn/problems/li-wu-de-zui-da-jie-zhi-lcof/?envType=study-plan&id=lcof&plan=lcof&plan_progress=fa86zc7)\n\n思路:二维DP基础\n\n```python\nclass Solution:\n    def maxValue(self, grid: List[List[int]]) -> int:\n        # n=len(grid)\n        # m=len(grid[0])\n        # dp=[[0]*m for _ in range(n)]\n        # dp[0][0]=grid[0][0]\n        # for i in range(1,n):\n        #     dp[i][0]=dp[i-1][0]+grid[i][0]\n        # for i in range(1,m):\n        #     dp[0][i]=dp[0][i-1]+grid[0][i]\n        # for i in range(1,n):\n        #     for j in range(1,m):\n        #         dp[i][j]=max(dp[i-1][j],dp[i][j-1])+grid[i][j]\n        # return dp[n-1][m-1]\n        m, n = len(grid), len(grid[0])\n        for j in range(1, n): # 初始化第一行\n            grid[0][j] += grid[0][j - 1]\n        for i in range(1, m): # 初始化第一列\n            grid[i][0] += grid[i - 1][0]\n        for i in range(1, m):\n            for j in range(1, n):\n                grid[i][j] += max(grid[i][j - 1], grid[i - 1][j])\n        return grid[-1][-1]\n```","slug":"LeetCode剑指offer1","published":1,"date":"2023-03-06T13:14:13.424Z","updated":"2023-03-06T12:02:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clewv3he60000ykuk5c9ugn9g","content":"<h2 id=\"leeccode剑指offer1刷题记录\"><a class=\"markdownIt-Anchor\" href=\"#leeccode剑指offer1刷题记录\"></a> LeecCode剑指offer1刷题记录</h2>\n<h3 id=\"第一天\"><a class=\"markdownIt-Anchor\" href=\"#第一天\"></a> 第一天</h3>\n<p><a href=\"https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 09. 用两个栈实现队列</a></p>\n<p>思路:一个栈1用于进,一个栈2用于出,当2空了,就把1里面的元素全部放进2,如果此时1也空了,那就是都空了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CQueue</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.stack_in=[]</span><br><span class=\"line\">        self.stack_out=[]</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">appendTail</span>(<span class=\"params\">self, value: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        self.stack_in.append(value)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">deleteHead</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(self.stack_out):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.stack_out.pop()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(self.stack_in):</span><br><span class=\"line\">                <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(self.stack_in):</span><br><span class=\"line\">                    self.stack_out.append(self.stack_in.pop())</span><br><span class=\"line\">                <span class=\"keyword\">return</span> self.stack_out.pop()</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 30. 包含min函数的栈</a></p>\n<p>思路:一个单独的栈x存最小值,如果进栈的元素小于等于x最顶元素就进x,如果出栈元素等于x顶层元素,x出栈</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MinStack</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.stack=[]</span><br><span class=\"line\">        self.minnums=[]</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">push</span>(<span class=\"params\">self, x: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        self.stack.append(x)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">len</span>(self.minnums) <span class=\"keyword\">or</span> x&lt;=self.minnums[-<span class=\"number\">1</span>]:</span><br><span class=\"line\">            self.minnums.append(x)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pop</span>(<span class=\"params\">self</span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.stack[-<span class=\"number\">1</span>]==self.minnums[-<span class=\"number\">1</span>]:</span><br><span class=\"line\">            self.stack.pop()</span><br><span class=\"line\">            self.minnums.pop()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.stack.pop()</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">top</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.stack[-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">min</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.minnums[-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"第二天\"><a class=\"markdownIt-Anchor\" href=\"#第二天\"></a> 第二天</h3>\n<p><a href=\"https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 06. 从尾到头打印链表</a></p>\n<p>思路:1.遍历一遍链表,用数组存每个元素,然后返回数组的逆序 2.递归</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">reversePrint</span>(<span class=\"params\">self, head: ListNode</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">        ans=[]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> head:</span><br><span class=\"line\">            ans.append(head.val)</span><br><span class=\"line\">            head=head.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans[::-<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"comment\"># return self.reversePrint(head.next) + [head.val] if head else []</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 24. 反转链表</a></p>\n<p>思路:1.三个指针,模拟列表断开向后连接的情景,2.把链表元素都存在数组里,当作一个个单独的节点,反过来连接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">reverseList</span>(<span class=\"params\">self, head: ListNode</span>) -&gt; ListNode:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> head <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:<span class=\"keyword\">return</span> head</span><br><span class=\"line\">        re=[]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> head:</span><br><span class=\"line\">            re.append(head)</span><br><span class=\"line\">            temp=head.<span class=\"built_in\">next</span></span><br><span class=\"line\">            head.<span class=\"built_in\">next</span>=<span class=\"literal\">None</span></span><br><span class=\"line\">            head=temp</span><br><span class=\"line\">        re.reverse()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(re)</span><br><span class=\"line\">        ret=<span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(re)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ret <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                ret=re[i]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                ret.<span class=\"built_in\">next</span>=re[i]</span><br><span class=\"line\">                ret=ret.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> re[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/fu-za-lian-biao-de-fu-zhi-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 35. 复杂链表的复制</a></p>\n<p>错误思路:不能像普通链表一样遍历重新连接,因为random指针的节点可能还没遍历到</p>\n<p>思路:1.递归  2.把A-B-C的链表  改造成A-A’-B-B’-C-C’,然后模仿原指针的下一个位置,主要各个边界条件的判断</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拼接+拆分</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">copyRandomList</span>(<span class=\"params\">self, head: <span class=\"string\">&#x27;Node&#x27;</span></span>) -&gt; <span class=\"string\">&#x27;Node&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> head <span class=\"keyword\">is</span> <span class=\"literal\">None</span> :<span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        temphead=head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> head:</span><br><span class=\"line\">            temp=Node(head.val)</span><br><span class=\"line\">            temp.<span class=\"built_in\">next</span>=head.<span class=\"built_in\">next</span></span><br><span class=\"line\">            head.<span class=\"built_in\">next</span>=temp</span><br><span class=\"line\">            head=head.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\">        head=temphead</span><br><span class=\"line\">        <span class=\"keyword\">while</span> head:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> head.random:</span><br><span class=\"line\">                head.<span class=\"built_in\">next</span>.random=head.random.<span class=\"built_in\">next</span></span><br><span class=\"line\">            head=head.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\">        orighead=head=temphead.<span class=\"built_in\">next</span></span><br><span class=\"line\">        ans=head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> head:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> head.<span class=\"built_in\">next</span> <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            temp=orighead.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\">            head.<span class=\"built_in\">next</span>=orighead.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\">            head=head.<span class=\"built_in\">next</span></span><br><span class=\"line\">            orighead=temp</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Hash表+递归</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    unordered_map&lt;Node*, Node*&gt; cachedNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Node* <span class=\"title\">copyRandomList</span><span class=\"params\">(Node* head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!cachedNode.<span class=\"built_in\">count</span>(head)) &#123;</span><br><span class=\"line\">            Node* headNew = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(head-&gt;val);</span><br><span class=\"line\">            cachedNode[head] = headNew;</span><br><span class=\"line\">            headNew-&gt;next = <span class=\"built_in\">copyRandomList</span>(head-&gt;next);</span><br><span class=\"line\">            headNew-&gt;random = <span class=\"built_in\">copyRandomList</span>(head-&gt;random);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cachedNode[head];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第三天\"><a class=\"markdownIt-Anchor\" href=\"#第三天\"></a> 第三天</h3>\n<p><a href=\"https://leetcode.cn/problems/ti-huan-kong-ge-lcof/description/\">剑指 Offer 05. 替换空格</a></p>\n<p>思路:先用数组比直接返回str.replace时间空间上都要快不少</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">replaceSpace</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> c == <span class=\"string\">&#x27; &#x27;</span>: res.append(<span class=\"string\">&quot;%20&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>: res.append(c)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>.join(res)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/description/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 58 - II. 左旋转字符串</a></p>\n<p>思路:.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">reverseLeftWords</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span>, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s[n:]+s[:n]</span><br></pre></td></tr></table></figure>\n<h3 id=\"第四天\"><a class=\"markdownIt-Anchor\" href=\"#第四天\"></a> 第四天</h3>\n<p><a href=\"https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 03. 数组中重复的数字</a></p>\n<p>思路:1.字典存 2.排序 3.一直交换到已有</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">findRepeatNumber</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        m=<span class=\"built_in\">dict</span>()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> m:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i</span><br><span class=\"line\">            m[i]=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">findRepeatNumber</span>(<span class=\"params\">self, nums: [<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        i = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt; <span class=\"built_in\">len</span>(nums):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[i] == i:</span><br><span class=\"line\">                i += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[nums[i]] == nums[i]: <span class=\"keyword\">return</span> nums[i]</span><br><span class=\"line\">            nums[nums[i]], nums[i] = nums[i], nums[nums[i]]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/description/\">剑指 Offer 53 - I. 在排序数组中查找数字 I</a></p>\n<p>思路:二分,然后下标加到不是这个数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">search</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        index=bisect_left(nums,target)</span><br><span class=\"line\">        length=<span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">        ans=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> index&lt;length <span class=\"keyword\">and</span> nums[index]==target:</span><br><span class=\"line\">            ans+=<span class=\"number\">1</span></span><br><span class=\"line\">            index+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/que-shi-de-shu-zi-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 53 - II. 0～n-1中缺失的数字</a></p>\n<p>思路:1.直接遍历 2.hash 3.位运算 4.应该的和-实际的和=差的数字 5.二分</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 后面加n个数 一起异或,缺的数只会出现一次,相同的数异或两次为-</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">missingNumber</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"comment\"># ans=0</span></span><br><span class=\"line\">        <span class=\"comment\"># for index,num in enumerate(nums):</span></span><br><span class=\"line\">        <span class=\"comment\">#     ans^=index</span></span><br><span class=\"line\">        <span class=\"comment\">#     ans^=num</span></span><br><span class=\"line\">        <span class=\"comment\"># return ans^len(nums)</span></span><br><span class=\"line\">        left,right=<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(nums)-<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left&lt;=right:</span><br><span class=\"line\">            mid=(left+right)&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[mid]==mid:</span><br><span class=\"line\">                left=mid+<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                right=mid-<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> left</span><br></pre></td></tr></table></figure>\n<h3 id=\"第五天\"><a class=\"markdownIt-Anchor\" href=\"#第五天\"></a> 第五天</h3>\n<p><a href=\"https://leetcode.cn/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 11. 旋转数组的最小数字</a></p>\n<p>思路:根据凹的性质一次遍历,如果找不到那么就是递增的,直接返回numbers[0]</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">minArray</span>(<span class=\"params\">self, numbers: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"built_in\">len</span>(numbers)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> numbers[i]&lt;numbers[i-<span class=\"number\">1</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> numbers[i]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> numbers[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 50. 第一个只出现一次的字符</a></p>\n<p>思路:1.OrderedDict   2.Counter</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">firstUniqChar</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        m=OrderedDict()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">            m[i]=m.get(i,<span class=\"number\">0</span>)+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> m.items():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> v==<span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> k</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">        <span class=\"comment\"># frequency = collections.Counter(s)</span></span><br><span class=\"line\">        <span class=\"comment\"># for i, ch in enumerate(s):</span></span><br><span class=\"line\">        <span class=\"comment\">#     if frequency[ch] == 1:</span></span><br><span class=\"line\">        <span class=\"comment\">#         return ch</span></span><br><span class=\"line\">        <span class=\"comment\"># return &#x27; &#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 04. 二维数组中的查找</a></p>\n<p>思路:1.对每一行二分<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo>∗</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N*log(N))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> 2.把矩阵向左旋转90度就是一个搜索树,从底向上搜索,<br />\n每次可消去一行或者一列 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo>+</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N+M)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">findNumberIn2DArray</span>(<span class=\"params\">self, matrix: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(matrix)==<span class=\"number\">0</span>:<span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        m=<span class=\"built_in\">len</span>(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">        n=<span class=\"built_in\">len</span>(matrix)</span><br><span class=\"line\">        i,j=n-<span class=\"number\">1</span>,<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> i&gt;=<span class=\"number\">0</span> <span class=\"keyword\">and</span> j&lt;m:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> matrix[i][j]&gt;target:</span><br><span class=\"line\">                i-=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> matrix[i][j]&lt;target:</span><br><span class=\"line\">                j+=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第六天\"><a class=\"markdownIt-Anchor\" href=\"#第六天\"></a> 第六天</h3>\n<p><a href=\"https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 32 - I. 从上到下打印二叉树</a></p>\n<p>思路:广搜</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">levelOrder</span>(<span class=\"params\">self, root: TreeNode</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:<span class=\"keyword\">return</span> []</span><br><span class=\"line\">        stack=collections.deque([root])</span><br><span class=\"line\">        ans=[]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(stack):</span><br><span class=\"line\">            cur=stack.popleft()</span><br><span class=\"line\">            ans.append(cur.val)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur.left:</span><br><span class=\"line\">                stack.append(cur.left)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur.right:</span><br><span class=\"line\">                stack.append(cur.right)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 32 - II. 从上到下打印二叉树 II</a></p>\n<p>思路:1.广搜存节点的时候新增一个layer表示在第几层 2.每一次遍历完队列中的所有节点 3.记录每一层的最后一个节点</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">levelOrder</span>(<span class=\"params\">self, root: TreeNode</span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:<span class=\"keyword\">return</span> []</span><br><span class=\"line\">        stack=collections.deque([(root,<span class=\"number\">1</span>)])</span><br><span class=\"line\">        ans=[]</span><br><span class=\"line\">        temp=[root.val]</span><br><span class=\"line\">        lastlayer=-<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(stack):</span><br><span class=\"line\">            (cur,layer)=stack.popleft()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> layer!=lastlayer:</span><br><span class=\"line\">                ans.append(temp)</span><br><span class=\"line\">                temp=[]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur.left:</span><br><span class=\"line\">                stack.append((cur.left,layer+<span class=\"number\">1</span>))</span><br><span class=\"line\">                temp.append(cur.left.val)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur.right:</span><br><span class=\"line\">                stack.append((cur.right,layer+<span class=\"number\">1</span>))</span><br><span class=\"line\">                temp.append(cur.right.val)</span><br><span class=\"line\">            lastlayer=layer</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">levelOrder</span>(<span class=\"params\">self, root: TreeNode</span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root: <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        res, queue = [], collections.deque()</span><br><span class=\"line\">        queue.append(root)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            tmp = []</span><br><span class=\"line\">            <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(queue)):</span><br><span class=\"line\">                node = queue.popleft()</span><br><span class=\"line\">                tmp.append(node.val)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.left: queue.append(node.left)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.right: queue.append(node.right)</span><br><span class=\"line\">            res.append(tmp)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 32 - III. 从上到下打印二叉树 III</a></p>\n<p>思路:在上面一题的基础上,在新增每一层的时候,用一个标志,奇数正加,偶数反加</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">levelOrder</span>(<span class=\"params\">self, root: TreeNode</span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:<span class=\"keyword\">return</span> []</span><br><span class=\"line\">        stack=collections.deque([(root,<span class=\"number\">1</span>)])</span><br><span class=\"line\">        ans=[]</span><br><span class=\"line\">        temp=[root.val]</span><br><span class=\"line\">        lastlayer=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(stack):</span><br><span class=\"line\">            (cur,layer)=stack.popleft()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> layer!=lastlayer:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> layer&amp;<span class=\"number\">1</span>:</span><br><span class=\"line\">                    ans.append(temp)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    ans.append(temp[::-<span class=\"number\">1</span>])</span><br><span class=\"line\">                temp=[]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur.left:</span><br><span class=\"line\">                stack.append((cur.left,layer+<span class=\"number\">1</span>))</span><br><span class=\"line\">                temp.append(cur.left.val)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur.right:</span><br><span class=\"line\">                stack.append((cur.right,layer+<span class=\"number\">1</span>))</span><br><span class=\"line\">                temp.append(cur.right.val)</span><br><span class=\"line\">            lastlayer=layer</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<h3 id=\"第七天\"><a class=\"markdownIt-Anchor\" href=\"#第七天\"></a> 第七天</h3>\n<p><a href=\"https://leetcode.cn/problems/shu-de-zi-jie-gou-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 26. 树的子结构</a></p>\n<p>思路:1. 先找到子树的根节点,然后对比剩下的部分是否一样,判断条件比较多  2.三种情况,一个是从当前节点比,一个是左子树的子树,一个是右子树的子树</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">isSubStructure</span>(<span class=\"params\">self, A: TreeNode, B: TreeNode</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">recur</span>(<span class=\"params\">A, B</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> B: <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> A <span class=\"keyword\">or</span> A.val != B.val: <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recur(A.left, B.left) <span class=\"keyword\">and</span> recur(A.right, B.right)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">bool</span>(A <span class=\"keyword\">and</span> B) <span class=\"keyword\">and</span> (recur(A, B) <span class=\"keyword\">or</span> self.isSubStructure(A.left, B) <span class=\"keyword\">or</span> self.isSubStructure(A.right, B))</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/er-cha-shu-de-jing-xiang-lcof/description/\">剑指 Offer 27. 二叉树的镜像</a></p>\n<p>思路:递归交换左右子树</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">mirrorTree</span>(<span class=\"params\">self, root: TreeNode</span>) -&gt; TreeNode:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> root <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:<span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        l,r=<span class=\"literal\">None</span>,<span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> root.left:</span><br><span class=\"line\">            r=self.mirrorTree(root.left)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> root.right:</span><br><span class=\"line\">            l=self.mirrorTree(root.right)</span><br><span class=\"line\">        root.right,root.left=r,l</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/dui-cheng-de-er-cha-shu-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 28. 对称的二叉树</a></p>\n<p>错误思路:只比较了左右子树,没有从全局对比</p>\n<p>题解:1.两个指针,反过来比(一个从左往右走,一个从右往左走)  2.交换左右子树再递归查询</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">isSymmetric</span>(<span class=\"params\">self, root: TreeNode</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">check</span>(<span class=\"params\">a,b</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> a <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> b <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> a <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> b :</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> b <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> a:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> a.val != b.val:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> check(a.left,b.right) <span class=\"keyword\">and</span> check(a.right,b.left)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> check(root,root)</span><br></pre></td></tr></table></figure>\n<h3 id=\"第八天\"><a class=\"markdownIt-Anchor\" href=\"#第八天\"></a> 第八天</h3>\n<p><a href=\"https://leetcode.cn/problems/fei-bo-na-qi-shu-lie-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 10- I. 斐波那契数列</a><br />\n<a href=\"https://leetcode.cn/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 10- II. 青蛙跳台阶问题</a></p>\n<p>思路:1.递归  2.记忆递归 3.动态规划 4.空间优化的动态规划</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">fib</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> n==<span class=\"number\">0</span>:<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        a=<span class=\"number\">0</span></span><br><span class=\"line\">        b=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>,n+<span class=\"number\">1</span>):</span><br><span class=\"line\">            a,b=b,a+b</span><br><span class=\"line\">            a%=<span class=\"number\">1e9</span>+<span class=\"number\">7</span></span><br><span class=\"line\">            b%=<span class=\"number\">1e9</span>+<span class=\"number\">7</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(b)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/gu-piao-de-zui-da-li-run-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 63. 股票的最大利润</a></p>\n<p>思路:保存最小的价格 一次遍历,比较答案和今天减去最小价格,更新最小价格</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxProfit</span>(<span class=\"params\">self, prices: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"comment\"># if len(prices)==0:</span></span><br><span class=\"line\">        <span class=\"comment\">#     return 0</span></span><br><span class=\"line\">        <span class=\"comment\"># ans=0</span></span><br><span class=\"line\">        <span class=\"comment\"># leftprofit=0</span></span><br><span class=\"line\">        <span class=\"comment\"># buyprice=prices[0]</span></span><br><span class=\"line\">        <span class=\"comment\"># for index in range(1,len(prices)):</span></span><br><span class=\"line\">        <span class=\"comment\">#     if prices[index]-prices[index-1]+leftprofit&gt;=0:</span></span><br><span class=\"line\">        <span class=\"comment\">#         leftprofit=prices[index]-prices[index-1]+leftprofit</span></span><br><span class=\"line\">        <span class=\"comment\">#         ans=max(ans,leftprofit)</span></span><br><span class=\"line\">        <span class=\"comment\">#     else:</span></span><br><span class=\"line\">        <span class=\"comment\">#         buyprice=prices[index]</span></span><br><span class=\"line\">        <span class=\"comment\">#         leftprofit=0</span></span><br><span class=\"line\">        <span class=\"comment\"># return ans</span></span><br><span class=\"line\">        inf = <span class=\"built_in\">int</span>(<span class=\"number\">1e9</span>)</span><br><span class=\"line\">        minprice = inf</span><br><span class=\"line\">        maxprofit = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> price <span class=\"keyword\">in</span> prices:</span><br><span class=\"line\">            maxprofit = <span class=\"built_in\">max</span>(price - minprice, maxprofit)</span><br><span class=\"line\">            minprice = <span class=\"built_in\">min</span>(price, minprice)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxprofit</span><br></pre></td></tr></table></figure>\n<h3 id=\"第九天\"><a class=\"markdownIt-Anchor\" href=\"#第九天\"></a> 第九天</h3>\n<p><a href=\"https://leetcode.cn/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 42. 连续子数组的最大和</a></p>\n<p>思路:如果之前的加上当前的是负数,那就把当前的当作开始</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxSubArray</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"comment\"># for i in range(1, len(nums)):</span></span><br><span class=\"line\">        <span class=\"comment\">#     nums[i] += max(nums[i - 1], 0)</span></span><br><span class=\"line\">        <span class=\"comment\"># return max(nums)</span></span><br><span class=\"line\">        pre = <span class=\"number\">0</span></span><br><span class=\"line\">        maxAns = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">            pre = <span class=\"built_in\">max</span>(pre + x, x)</span><br><span class=\"line\">            maxAns = <span class=\"built_in\">max</span>(maxAns, pre)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxAns</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/li-wu-de-zui-da-jie-zhi-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 47. 礼物的最大价值</a></p>\n<p>思路:二维DP基础</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxValue</span>(<span class=\"params\">self, grid: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"comment\"># n=len(grid)</span></span><br><span class=\"line\">        <span class=\"comment\"># m=len(grid[0])</span></span><br><span class=\"line\">        <span class=\"comment\"># dp=[[0]*m for _ in range(n)]</span></span><br><span class=\"line\">        <span class=\"comment\"># dp[0][0]=grid[0][0]</span></span><br><span class=\"line\">        <span class=\"comment\"># for i in range(1,n):</span></span><br><span class=\"line\">        <span class=\"comment\">#     dp[i][0]=dp[i-1][0]+grid[i][0]</span></span><br><span class=\"line\">        <span class=\"comment\"># for i in range(1,m):</span></span><br><span class=\"line\">        <span class=\"comment\">#     dp[0][i]=dp[0][i-1]+grid[0][i]</span></span><br><span class=\"line\">        <span class=\"comment\"># for i in range(1,n):</span></span><br><span class=\"line\">        <span class=\"comment\">#     for j in range(1,m):</span></span><br><span class=\"line\">        <span class=\"comment\">#         dp[i][j]=max(dp[i-1][j],dp[i][j-1])+grid[i][j]</span></span><br><span class=\"line\">        <span class=\"comment\"># return dp[n-1][m-1]</span></span><br><span class=\"line\">        m, n = <span class=\"built_in\">len</span>(grid), <span class=\"built_in\">len</span>(grid[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n): <span class=\"comment\"># 初始化第一行</span></span><br><span class=\"line\">            grid[<span class=\"number\">0</span>][j] += grid[<span class=\"number\">0</span>][j - <span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, m): <span class=\"comment\"># 初始化第一列</span></span><br><span class=\"line\">            grid[i][<span class=\"number\">0</span>] += grid[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">                grid[i][j] += <span class=\"built_in\">max</span>(grid[i][j - <span class=\"number\">1</span>], grid[i - <span class=\"number\">1</span>][j])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> grid[-<span class=\"number\">1</span>][-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h2 id=\"leeccode剑指offer1刷题记录\"><a class=\"markdownIt-Anchor\" href=\"#leeccode剑指offer1刷题记录\"></a> LeecCode剑指offer1刷题记录</h2>\n<h3 id=\"第一天\"><a class=\"markdownIt-Anchor\" href=\"#第一天\"></a> 第一天</h3>\n<p><a href=\"https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 09. 用两个栈实现队列</a></p>\n<p>思路:一个栈1用于进,一个栈2用于出,当2空了,就把1里面的元素全部放进2,如果此时1也空了,那就是都空了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CQueue</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.stack_in=[]</span><br><span class=\"line\">        self.stack_out=[]</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">appendTail</span>(<span class=\"params\">self, value: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        self.stack_in.append(value)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">deleteHead</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(self.stack_out):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.stack_out.pop()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(self.stack_in):</span><br><span class=\"line\">                <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(self.stack_in):</span><br><span class=\"line\">                    self.stack_out.append(self.stack_in.pop())</span><br><span class=\"line\">                <span class=\"keyword\">return</span> self.stack_out.pop()</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 30. 包含min函数的栈</a></p>\n<p>思路:一个单独的栈x存最小值,如果进栈的元素小于等于x最顶元素就进x,如果出栈元素等于x顶层元素,x出栈</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MinStack</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.stack=[]</span><br><span class=\"line\">        self.minnums=[]</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">push</span>(<span class=\"params\">self, x: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        self.stack.append(x)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">len</span>(self.minnums) <span class=\"keyword\">or</span> x&lt;=self.minnums[-<span class=\"number\">1</span>]:</span><br><span class=\"line\">            self.minnums.append(x)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pop</span>(<span class=\"params\">self</span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.stack[-<span class=\"number\">1</span>]==self.minnums[-<span class=\"number\">1</span>]:</span><br><span class=\"line\">            self.stack.pop()</span><br><span class=\"line\">            self.minnums.pop()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.stack.pop()</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">top</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.stack[-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">min</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.minnums[-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"第二天\"><a class=\"markdownIt-Anchor\" href=\"#第二天\"></a> 第二天</h3>\n<p><a href=\"https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 06. 从尾到头打印链表</a></p>\n<p>思路:1.遍历一遍链表,用数组存每个元素,然后返回数组的逆序 2.递归</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">reversePrint</span>(<span class=\"params\">self, head: ListNode</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">        ans=[]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> head:</span><br><span class=\"line\">            ans.append(head.val)</span><br><span class=\"line\">            head=head.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans[::-<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"comment\"># return self.reversePrint(head.next) + [head.val] if head else []</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 24. 反转链表</a></p>\n<p>思路:1.三个指针,模拟列表断开向后连接的情景,2.把链表元素都存在数组里,当作一个个单独的节点,反过来连接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">reverseList</span>(<span class=\"params\">self, head: ListNode</span>) -&gt; ListNode:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> head <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:<span class=\"keyword\">return</span> head</span><br><span class=\"line\">        re=[]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> head:</span><br><span class=\"line\">            re.append(head)</span><br><span class=\"line\">            temp=head.<span class=\"built_in\">next</span></span><br><span class=\"line\">            head.<span class=\"built_in\">next</span>=<span class=\"literal\">None</span></span><br><span class=\"line\">            head=temp</span><br><span class=\"line\">        re.reverse()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(re)</span><br><span class=\"line\">        ret=<span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(re)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ret <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                ret=re[i]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                ret.<span class=\"built_in\">next</span>=re[i]</span><br><span class=\"line\">                ret=ret.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> re[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/fu-za-lian-biao-de-fu-zhi-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 35. 复杂链表的复制</a></p>\n<p>错误思路:不能像普通链表一样遍历重新连接,因为random指针的节点可能还没遍历到</p>\n<p>思路:1.递归  2.把A-B-C的链表  改造成A-A’-B-B’-C-C’,然后模仿原指针的下一个位置,主要各个边界条件的判断</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拼接+拆分</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">copyRandomList</span>(<span class=\"params\">self, head: <span class=\"string\">&#x27;Node&#x27;</span></span>) -&gt; <span class=\"string\">&#x27;Node&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> head <span class=\"keyword\">is</span> <span class=\"literal\">None</span> :<span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        temphead=head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> head:</span><br><span class=\"line\">            temp=Node(head.val)</span><br><span class=\"line\">            temp.<span class=\"built_in\">next</span>=head.<span class=\"built_in\">next</span></span><br><span class=\"line\">            head.<span class=\"built_in\">next</span>=temp</span><br><span class=\"line\">            head=head.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\">        head=temphead</span><br><span class=\"line\">        <span class=\"keyword\">while</span> head:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> head.random:</span><br><span class=\"line\">                head.<span class=\"built_in\">next</span>.random=head.random.<span class=\"built_in\">next</span></span><br><span class=\"line\">            head=head.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\">        orighead=head=temphead.<span class=\"built_in\">next</span></span><br><span class=\"line\">        ans=head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> head:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> head.<span class=\"built_in\">next</span> <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            temp=orighead.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\">            head.<span class=\"built_in\">next</span>=orighead.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\">            head=head.<span class=\"built_in\">next</span></span><br><span class=\"line\">            orighead=temp</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Hash表+递归</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    unordered_map&lt;Node*, Node*&gt; cachedNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Node* <span class=\"title\">copyRandomList</span><span class=\"params\">(Node* head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!cachedNode.<span class=\"built_in\">count</span>(head)) &#123;</span><br><span class=\"line\">            Node* headNew = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(head-&gt;val);</span><br><span class=\"line\">            cachedNode[head] = headNew;</span><br><span class=\"line\">            headNew-&gt;next = <span class=\"built_in\">copyRandomList</span>(head-&gt;next);</span><br><span class=\"line\">            headNew-&gt;random = <span class=\"built_in\">copyRandomList</span>(head-&gt;random);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cachedNode[head];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第三天\"><a class=\"markdownIt-Anchor\" href=\"#第三天\"></a> 第三天</h3>\n<p><a href=\"https://leetcode.cn/problems/ti-huan-kong-ge-lcof/description/\">剑指 Offer 05. 替换空格</a></p>\n<p>思路:先用数组比直接返回str.replace时间空间上都要快不少</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">replaceSpace</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> c == <span class=\"string\">&#x27; &#x27;</span>: res.append(<span class=\"string\">&quot;%20&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>: res.append(c)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>.join(res)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/description/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 58 - II. 左旋转字符串</a></p>\n<p>思路:.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">reverseLeftWords</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span>, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s[n:]+s[:n]</span><br></pre></td></tr></table></figure>\n<h3 id=\"第四天\"><a class=\"markdownIt-Anchor\" href=\"#第四天\"></a> 第四天</h3>\n<p><a href=\"https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 03. 数组中重复的数字</a></p>\n<p>思路:1.字典存 2.排序 3.一直交换到已有</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">findRepeatNumber</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        m=<span class=\"built_in\">dict</span>()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> m:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i</span><br><span class=\"line\">            m[i]=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">findRepeatNumber</span>(<span class=\"params\">self, nums: [<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        i = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt; <span class=\"built_in\">len</span>(nums):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[i] == i:</span><br><span class=\"line\">                i += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[nums[i]] == nums[i]: <span class=\"keyword\">return</span> nums[i]</span><br><span class=\"line\">            nums[nums[i]], nums[i] = nums[i], nums[nums[i]]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/description/\">剑指 Offer 53 - I. 在排序数组中查找数字 I</a></p>\n<p>思路:二分,然后下标加到不是这个数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">search</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        index=bisect_left(nums,target)</span><br><span class=\"line\">        length=<span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">        ans=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> index&lt;length <span class=\"keyword\">and</span> nums[index]==target:</span><br><span class=\"line\">            ans+=<span class=\"number\">1</span></span><br><span class=\"line\">            index+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/que-shi-de-shu-zi-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 53 - II. 0～n-1中缺失的数字</a></p>\n<p>思路:1.直接遍历 2.hash 3.位运算 4.应该的和-实际的和=差的数字 5.二分</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 后面加n个数 一起异或,缺的数只会出现一次,相同的数异或两次为-</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">missingNumber</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"comment\"># ans=0</span></span><br><span class=\"line\">        <span class=\"comment\"># for index,num in enumerate(nums):</span></span><br><span class=\"line\">        <span class=\"comment\">#     ans^=index</span></span><br><span class=\"line\">        <span class=\"comment\">#     ans^=num</span></span><br><span class=\"line\">        <span class=\"comment\"># return ans^len(nums)</span></span><br><span class=\"line\">        left,right=<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(nums)-<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left&lt;=right:</span><br><span class=\"line\">            mid=(left+right)&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[mid]==mid:</span><br><span class=\"line\">                left=mid+<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                right=mid-<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> left</span><br></pre></td></tr></table></figure>\n<h3 id=\"第五天\"><a class=\"markdownIt-Anchor\" href=\"#第五天\"></a> 第五天</h3>\n<p><a href=\"https://leetcode.cn/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 11. 旋转数组的最小数字</a></p>\n<p>思路:根据凹的性质一次遍历,如果找不到那么就是递增的,直接返回numbers[0]</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">minArray</span>(<span class=\"params\">self, numbers: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"built_in\">len</span>(numbers)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> numbers[i]&lt;numbers[i-<span class=\"number\">1</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> numbers[i]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> numbers[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 50. 第一个只出现一次的字符</a></p>\n<p>思路:1.OrderedDict   2.Counter</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">firstUniqChar</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        m=OrderedDict()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">            m[i]=m.get(i,<span class=\"number\">0</span>)+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> m.items():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> v==<span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> k</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">        <span class=\"comment\"># frequency = collections.Counter(s)</span></span><br><span class=\"line\">        <span class=\"comment\"># for i, ch in enumerate(s):</span></span><br><span class=\"line\">        <span class=\"comment\">#     if frequency[ch] == 1:</span></span><br><span class=\"line\">        <span class=\"comment\">#         return ch</span></span><br><span class=\"line\">        <span class=\"comment\"># return &#x27; &#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 04. 二维数组中的查找</a></p>\n<p>思路:1.对每一行二分<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo>∗</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N*log(N))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> 2.把矩阵向左旋转90度就是一个搜索树,从底向上搜索,<br />\n每次可消去一行或者一列 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo>+</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N+M)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">findNumberIn2DArray</span>(<span class=\"params\">self, matrix: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(matrix)==<span class=\"number\">0</span>:<span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        m=<span class=\"built_in\">len</span>(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">        n=<span class=\"built_in\">len</span>(matrix)</span><br><span class=\"line\">        i,j=n-<span class=\"number\">1</span>,<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> i&gt;=<span class=\"number\">0</span> <span class=\"keyword\">and</span> j&lt;m:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> matrix[i][j]&gt;target:</span><br><span class=\"line\">                i-=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> matrix[i][j]&lt;target:</span><br><span class=\"line\">                j+=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第六天\"><a class=\"markdownIt-Anchor\" href=\"#第六天\"></a> 第六天</h3>\n<p><a href=\"https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 32 - I. 从上到下打印二叉树</a></p>\n<p>思路:广搜</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">levelOrder</span>(<span class=\"params\">self, root: TreeNode</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:<span class=\"keyword\">return</span> []</span><br><span class=\"line\">        stack=collections.deque([root])</span><br><span class=\"line\">        ans=[]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(stack):</span><br><span class=\"line\">            cur=stack.popleft()</span><br><span class=\"line\">            ans.append(cur.val)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur.left:</span><br><span class=\"line\">                stack.append(cur.left)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur.right:</span><br><span class=\"line\">                stack.append(cur.right)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 32 - II. 从上到下打印二叉树 II</a></p>\n<p>思路:1.广搜存节点的时候新增一个layer表示在第几层 2.每一次遍历完队列中的所有节点 3.记录每一层的最后一个节点</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">levelOrder</span>(<span class=\"params\">self, root: TreeNode</span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:<span class=\"keyword\">return</span> []</span><br><span class=\"line\">        stack=collections.deque([(root,<span class=\"number\">1</span>)])</span><br><span class=\"line\">        ans=[]</span><br><span class=\"line\">        temp=[root.val]</span><br><span class=\"line\">        lastlayer=-<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(stack):</span><br><span class=\"line\">            (cur,layer)=stack.popleft()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> layer!=lastlayer:</span><br><span class=\"line\">                ans.append(temp)</span><br><span class=\"line\">                temp=[]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur.left:</span><br><span class=\"line\">                stack.append((cur.left,layer+<span class=\"number\">1</span>))</span><br><span class=\"line\">                temp.append(cur.left.val)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur.right:</span><br><span class=\"line\">                stack.append((cur.right,layer+<span class=\"number\">1</span>))</span><br><span class=\"line\">                temp.append(cur.right.val)</span><br><span class=\"line\">            lastlayer=layer</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">levelOrder</span>(<span class=\"params\">self, root: TreeNode</span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root: <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        res, queue = [], collections.deque()</span><br><span class=\"line\">        queue.append(root)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            tmp = []</span><br><span class=\"line\">            <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(queue)):</span><br><span class=\"line\">                node = queue.popleft()</span><br><span class=\"line\">                tmp.append(node.val)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.left: queue.append(node.left)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.right: queue.append(node.right)</span><br><span class=\"line\">            res.append(tmp)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 32 - III. 从上到下打印二叉树 III</a></p>\n<p>思路:在上面一题的基础上,在新增每一层的时候,用一个标志,奇数正加,偶数反加</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">levelOrder</span>(<span class=\"params\">self, root: TreeNode</span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:<span class=\"keyword\">return</span> []</span><br><span class=\"line\">        stack=collections.deque([(root,<span class=\"number\">1</span>)])</span><br><span class=\"line\">        ans=[]</span><br><span class=\"line\">        temp=[root.val]</span><br><span class=\"line\">        lastlayer=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(stack):</span><br><span class=\"line\">            (cur,layer)=stack.popleft()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> layer!=lastlayer:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> layer&amp;<span class=\"number\">1</span>:</span><br><span class=\"line\">                    ans.append(temp)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    ans.append(temp[::-<span class=\"number\">1</span>])</span><br><span class=\"line\">                temp=[]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur.left:</span><br><span class=\"line\">                stack.append((cur.left,layer+<span class=\"number\">1</span>))</span><br><span class=\"line\">                temp.append(cur.left.val)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur.right:</span><br><span class=\"line\">                stack.append((cur.right,layer+<span class=\"number\">1</span>))</span><br><span class=\"line\">                temp.append(cur.right.val)</span><br><span class=\"line\">            lastlayer=layer</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<h3 id=\"第七天\"><a class=\"markdownIt-Anchor\" href=\"#第七天\"></a> 第七天</h3>\n<p><a href=\"https://leetcode.cn/problems/shu-de-zi-jie-gou-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 26. 树的子结构</a></p>\n<p>思路:1. 先找到子树的根节点,然后对比剩下的部分是否一样,判断条件比较多  2.三种情况,一个是从当前节点比,一个是左子树的子树,一个是右子树的子树</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">isSubStructure</span>(<span class=\"params\">self, A: TreeNode, B: TreeNode</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">recur</span>(<span class=\"params\">A, B</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> B: <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> A <span class=\"keyword\">or</span> A.val != B.val: <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recur(A.left, B.left) <span class=\"keyword\">and</span> recur(A.right, B.right)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">bool</span>(A <span class=\"keyword\">and</span> B) <span class=\"keyword\">and</span> (recur(A, B) <span class=\"keyword\">or</span> self.isSubStructure(A.left, B) <span class=\"keyword\">or</span> self.isSubStructure(A.right, B))</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/er-cha-shu-de-jing-xiang-lcof/description/\">剑指 Offer 27. 二叉树的镜像</a></p>\n<p>思路:递归交换左右子树</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">mirrorTree</span>(<span class=\"params\">self, root: TreeNode</span>) -&gt; TreeNode:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> root <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:<span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        l,r=<span class=\"literal\">None</span>,<span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> root.left:</span><br><span class=\"line\">            r=self.mirrorTree(root.left)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> root.right:</span><br><span class=\"line\">            l=self.mirrorTree(root.right)</span><br><span class=\"line\">        root.right,root.left=r,l</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/dui-cheng-de-er-cha-shu-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 28. 对称的二叉树</a></p>\n<p>错误思路:只比较了左右子树,没有从全局对比</p>\n<p>题解:1.两个指针,反过来比(一个从左往右走,一个从右往左走)  2.交换左右子树再递归查询</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">isSymmetric</span>(<span class=\"params\">self, root: TreeNode</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">check</span>(<span class=\"params\">a,b</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> a <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> b <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> a <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> b :</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> b <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> a:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> a.val != b.val:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> check(a.left,b.right) <span class=\"keyword\">and</span> check(a.right,b.left)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> check(root,root)</span><br></pre></td></tr></table></figure>\n<h3 id=\"第八天\"><a class=\"markdownIt-Anchor\" href=\"#第八天\"></a> 第八天</h3>\n<p><a href=\"https://leetcode.cn/problems/fei-bo-na-qi-shu-lie-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 10- I. 斐波那契数列</a><br />\n<a href=\"https://leetcode.cn/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 10- II. 青蛙跳台阶问题</a></p>\n<p>思路:1.递归  2.记忆递归 3.动态规划 4.空间优化的动态规划</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">fib</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> n==<span class=\"number\">0</span>:<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        a=<span class=\"number\">0</span></span><br><span class=\"line\">        b=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>,n+<span class=\"number\">1</span>):</span><br><span class=\"line\">            a,b=b,a+b</span><br><span class=\"line\">            a%=<span class=\"number\">1e9</span>+<span class=\"number\">7</span></span><br><span class=\"line\">            b%=<span class=\"number\">1e9</span>+<span class=\"number\">7</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(b)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/gu-piao-de-zui-da-li-run-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 63. 股票的最大利润</a></p>\n<p>思路:保存最小的价格 一次遍历,比较答案和今天减去最小价格,更新最小价格</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxProfit</span>(<span class=\"params\">self, prices: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"comment\"># if len(prices)==0:</span></span><br><span class=\"line\">        <span class=\"comment\">#     return 0</span></span><br><span class=\"line\">        <span class=\"comment\"># ans=0</span></span><br><span class=\"line\">        <span class=\"comment\"># leftprofit=0</span></span><br><span class=\"line\">        <span class=\"comment\"># buyprice=prices[0]</span></span><br><span class=\"line\">        <span class=\"comment\"># for index in range(1,len(prices)):</span></span><br><span class=\"line\">        <span class=\"comment\">#     if prices[index]-prices[index-1]+leftprofit&gt;=0:</span></span><br><span class=\"line\">        <span class=\"comment\">#         leftprofit=prices[index]-prices[index-1]+leftprofit</span></span><br><span class=\"line\">        <span class=\"comment\">#         ans=max(ans,leftprofit)</span></span><br><span class=\"line\">        <span class=\"comment\">#     else:</span></span><br><span class=\"line\">        <span class=\"comment\">#         buyprice=prices[index]</span></span><br><span class=\"line\">        <span class=\"comment\">#         leftprofit=0</span></span><br><span class=\"line\">        <span class=\"comment\"># return ans</span></span><br><span class=\"line\">        inf = <span class=\"built_in\">int</span>(<span class=\"number\">1e9</span>)</span><br><span class=\"line\">        minprice = inf</span><br><span class=\"line\">        maxprofit = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> price <span class=\"keyword\">in</span> prices:</span><br><span class=\"line\">            maxprofit = <span class=\"built_in\">max</span>(price - minprice, maxprofit)</span><br><span class=\"line\">            minprice = <span class=\"built_in\">min</span>(price, minprice)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxprofit</span><br></pre></td></tr></table></figure>\n<h3 id=\"第九天\"><a class=\"markdownIt-Anchor\" href=\"#第九天\"></a> 第九天</h3>\n<p><a href=\"https://leetcode.cn/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 42. 连续子数组的最大和</a></p>\n<p>思路:如果之前的加上当前的是负数,那就把当前的当作开始</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxSubArray</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"comment\"># for i in range(1, len(nums)):</span></span><br><span class=\"line\">        <span class=\"comment\">#     nums[i] += max(nums[i - 1], 0)</span></span><br><span class=\"line\">        <span class=\"comment\"># return max(nums)</span></span><br><span class=\"line\">        pre = <span class=\"number\">0</span></span><br><span class=\"line\">        maxAns = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">            pre = <span class=\"built_in\">max</span>(pre + x, x)</span><br><span class=\"line\">            maxAns = <span class=\"built_in\">max</span>(maxAns, pre)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxAns</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.cn/problems/li-wu-de-zui-da-jie-zhi-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7\">剑指 Offer 47. 礼物的最大价值</a></p>\n<p>思路:二维DP基础</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxValue</span>(<span class=\"params\">self, grid: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"comment\"># n=len(grid)</span></span><br><span class=\"line\">        <span class=\"comment\"># m=len(grid[0])</span></span><br><span class=\"line\">        <span class=\"comment\"># dp=[[0]*m for _ in range(n)]</span></span><br><span class=\"line\">        <span class=\"comment\"># dp[0][0]=grid[0][0]</span></span><br><span class=\"line\">        <span class=\"comment\"># for i in range(1,n):</span></span><br><span class=\"line\">        <span class=\"comment\">#     dp[i][0]=dp[i-1][0]+grid[i][0]</span></span><br><span class=\"line\">        <span class=\"comment\"># for i in range(1,m):</span></span><br><span class=\"line\">        <span class=\"comment\">#     dp[0][i]=dp[0][i-1]+grid[0][i]</span></span><br><span class=\"line\">        <span class=\"comment\"># for i in range(1,n):</span></span><br><span class=\"line\">        <span class=\"comment\">#     for j in range(1,m):</span></span><br><span class=\"line\">        <span class=\"comment\">#         dp[i][j]=max(dp[i-1][j],dp[i][j-1])+grid[i][j]</span></span><br><span class=\"line\">        <span class=\"comment\"># return dp[n-1][m-1]</span></span><br><span class=\"line\">        m, n = <span class=\"built_in\">len</span>(grid), <span class=\"built_in\">len</span>(grid[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n): <span class=\"comment\"># 初始化第一行</span></span><br><span class=\"line\">            grid[<span class=\"number\">0</span>][j] += grid[<span class=\"number\">0</span>][j - <span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, m): <span class=\"comment\"># 初始化第一列</span></span><br><span class=\"line\">            grid[i][<span class=\"number\">0</span>] += grid[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">                grid[i][j] += <span class=\"built_in\">max</span>(grid[i][j - <span class=\"number\">1</span>], grid[i - <span class=\"number\">1</span>][j])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> grid[-<span class=\"number\">1</span>][-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>"},{"title":"Python3标准库","toc":"true# 是否启用内容索引","_content":"\n## Python3标准库\n\n### 第一章:文本\n\n#### 1.1 string文本常量和模板\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Python３标准库.md","raw":"---\ntitle: Python3标准库\ncategories:\n  - 学习笔记\ntags:\n  - Python学习笔记\ntoc: true# 是否启用内容索引\n---\n\n## Python3标准库\n\n### 第一章:文本\n\n#### 1.1 string文本常量和模板\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Python３标准库","published":1,"date":"2023-02-28T03:49:43.091Z","updated":"2023-02-28T01:12:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clewv3hf30001ykukbm0p4gaz","content":"<h2 id=\"python3标准库\"><a class=\"markdownIt-Anchor\" href=\"#python3标准库\"></a> Python3标准库</h2>\n<h3 id=\"第一章文本\"><a class=\"markdownIt-Anchor\" href=\"#第一章文本\"></a> 第一章:文本</h3>\n<h4 id=\"11-string文本常量和模板\"><a class=\"markdownIt-Anchor\" href=\"#11-string文本常量和模板\"></a> 1.1 string文本常量和模板</h4>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h2 id=\"python3标准库\"><a class=\"markdownIt-Anchor\" href=\"#python3标准库\"></a> Python3标准库</h2>\n<h3 id=\"第一章文本\"><a class=\"markdownIt-Anchor\" href=\"#第一章文本\"></a> 第一章:文本</h3>\n<h4 id=\"11-string文本常量和模板\"><a class=\"markdownIt-Anchor\" href=\"#11-string文本常量和模板\"></a> 1.1 string文本常量和模板</h4>\n"},{"title":"python100天31-40","toc":true,"_content":"```python\n# 01-15python基础\n\n# 16-20python进阶\n\n# 21-30前端概述\n\n# 31-35Linux\n\n# 36-40MySQL\n\n# 41-55Django\n\n# 56-60FaskAPI\n\n# 61-65爬虫与并发编程\n\n# 66-80numpy&pandas\n\n# 81-90机器学习&pytorch\n\n# 91-100项目\n\n```\n\n## Python100天学习31-35\n\n`Linux`\n\n[资料连接](https://github.com/jackfrued/Python-100-Days)\n\n## Python100天学习36-40\n\n`MySQL`\n\n[资料连接](https://github.com/jackfrued/Python-100-Days)\n\n#### 关系数据库产品\n\n- [Oracle](https://www.oracle.com/index.html) - 目前世界上使用最为广泛的数据库管理系统，作为一个通用的数据库系统，它具有完整的数据管理功能；作为一个关系数据库，它是一个完备关系的产品；作为分布式数据库，它实现了分布式处理的功能。在 Oracle 最新的 12c 版本中，还引入了多承租方架构，使用该架构可轻松部署和管理数据库云。\n- [DB2](https://www.ibm.com/analytics/us/en/db2/) - IBM 公司开发的、主要运行于 Unix（包括 IBM 自家的 [AIX](https://zh.wikipedia.org/wiki/AIX)）、Linux、以及 Windows 服务器版等系统的关系数据库产品。DB2 历史悠久且被认为是最早使用 SQL 的数据库产品，它拥有较为强大的商业智能功能。\n- [SQL Server](https://www.microsoft.com/en-us/sql-server/) - 由 Microsoft 开发和推广的关系型数据库产品，最初适用于中小企业的数据管理，但是近年来它的应用范围有所扩展，部分大企业甚至是跨国公司也开始基于它来构建自己的数据管理系统。\n- [MySQL](https://www.mysql.com/) - MySQL 是开放源代码的，任何人都可以在 GPL（General Public License）的许可下下载并根据个性化的需要对其进行修改。MySQL 因为其速度、可靠性和适应性而备受关注。\n- [PostgreSQL]() - 在 BSD 许可证下发行的开放源代码的关系数据库产品。\n\n#### 安装教程\n\nwindows\n\nlinux\n\nmacos\n\n#### MySQL基本命令\n\n**查看命令**\n\n1. 查看所有数据库\n\n```SQL\nshow databases;\n```\n\n2. 查看所有字符集\n\n```SQL\nshow character set;\n```\n\n3. 查看所有的排序规则\n\n```SQL\nshow collation;\n```\n\n4. 查看所有的引擎\n\n```SQL\nshow engines;\n```\n\n5. 查看所有日志文件\n\n```SQL\nshow binary logs;\n```\n\n6. 查看数据库下所有表\n\n```SQL\nshow tables;\n```\n\n**获取帮助**\n\n在 MySQL 命令行工具中，可以使用 `help`命令或 `?`来获取帮助，如下所示。\n\n1. 查看 `show`命令的帮助。\n\n   ```MySQL\n   ? show\n   ```\n2. 查看有哪些帮助内容。\n\n   ```MySQL\n   ? contents\n   ```\n3. 获取函数的帮助。\n\n   ```MySQL\n   ? functions\n   ```\n4. 获取数据类型的帮助。\n\n   ```MySQL\n   ? data types\n   ```\n\n#### SQL语句\n\n##### 数据库的基本操作\n\n`SQL 包含以下 4 部分：`\n\n1. 数据定义语言（Data Definition Language，DDL）\n   用来创建或删除数据库以及表等对象，主要包含以下几种命令：\n\n- DROP：删除数据库和表等对象\n- CREATE：创建数据库和表等对象\n- ALTER：修改数据库和表等对象的结构\n\n2. 数据操作语言（Data Manipulation Language，DML）\n   用来变更表中的记录，主要包含以下几种命令：\n\n- SELECT：查询表中的数据\n- INSERT：向表中插入新数据\n- UPDATE：更新表中的数据\n- DELETE：删除表中的数据\n\n3. 数据查询语言（Data Query Language，DQL）\n   用来查询表中的记录，主要包含 SELECT 命令，来查询表中的数据。\n4. 数据控制语言（Data Control Language，DCL）\n   用来确认或者取消对数据库中的数据进行的变更。除此之外，还可以对数据库中的用户设定权限。主要包含以下几种命令：\n\n- GRANT：赋予用户操作权限\n- REVOKE：取消用户的操作权限\n- COMMIT：确认对数据库中的数据进行的变更\n- ROLLBACK：取消对数据库中的数据进行的变更\n\n`基本语法`\n\n1. SQL 语句不区分大小写\n2. SQL 语句中含有字符串的时候，需要像 'abc' 这样，使用英文单引号'将字符串括起来，用来标识这是一个字符串。\n3. SQL 语句中含有日期的时候，同样需要使用英文单引号将其括起来。日期的格式有很多种（'26 Jan 2010' 或者'10/01/26' 等），统一使用 '2020-01-26' 这种'年-月-日'的格式。\n4. 在 SQL 语句中书写数字的时候，不需要使用任何符号标识，直接写成 1000 这样的数字即可。\n5. SQL 语句要以分号;结尾.在 RDBMS （关系型数据库）当中，SQL 语句是逐条执行的，一条 SQL 语句代表着数据库的一个操作。\n\n```SQL\n-- 查看数据库 ,LIKE可选,不写就是查看全部  \nSHOW DATABASES [LIKE '数据库名'];\n-- 安装 MySQL 时系统自动创建的6个数据库，其各自功能如下：\n-- information_schema：主要存储了系统中的一些数据库对象信息，比如用户表信息、列信息、权限信息、字符集信息和分区信息等。\n-- mysql：MySQL 的核心数据库，类似于 SQL Server 中的 master 表，主要负责存储数据库用户、用户访问权限等 MySQL 自己需要使用的控制和管理信息。常用的比如在 mysql 数据库的 user 表中修改 root 用户密码。\n-- performance_schema：主要用于收集数据库服务器性能参数。\n-- sakila：MySQL 提供的样例数据库，该数据库共有 16 张表，这些数据表都是比较常见的，在设计数据库时，可以参照这些样例数据表来快速完成所需的数据表。\n-- sys：MySQL 5.7 安装完成后会多一个 sys 数据库。sys 数据库主要提供了一些视图，数据都来自于 performation_schema，主要是让开发者和使用者更方便地查看性能问题。\n-- world：world 数据库是 MySQL 自动创建的数据库，该数据库中只包括 3 张数据表，分别保存城市，国家和国家使用的语言等内容。\n\n\n-- 创建数据库\n-- 字符集是用来定义 MySQL 存储字符串的方式，校对规则定义了比较字符串的方式。\nCREATE DATABASE [IF NOT EXISTS] <数据库名>\n[[DEFAULT] CHARACTER SET <字符集名>] \n[[DEFAULT] COLLATE <校对规则名>];\n\n\n-- 查看数据库的定义声明\nSHOW CREATE DATABASE test_db;\n\n\n-- 使用 ALTER DATABASE 来修改已经被创建或者存在的数据库的相关参数\nALTER DATABASE [数据库名] { \n[ DEFAULT ] CHARACTER SET <字符集名> |\n[ DEFAULT ] COLLATE <校对规则名>}\n-- ALTER DATABASE 用于更改数据库的全局特性。\n-- 使用 ALTER DATABASE 需要获得数据库 ALTER 权限。\n-- 数据库名称可以忽略，此时语句对应于默认数据库。\n-- CHARACTER SET 子句用于更改默认的数据库字符集。\n\n\n-- 删除数据库\nDROP DATABASE [ IF EXISTS ] <数据库名>\n-- MySQL 安装后，系统会自动创建名为 information_schema 和 mysql 的两个系统数据库，系统数据库存放一些和数据库相关的信息，如果删除了这两个数据库，MySQL 将不能正常工作。\n\n\n-- USE 语句用来完成一个数据库到另一个数据库的跳转\n-- 创建数据库之后，该数据库不会自动成为当前数据库\nUSE <数据库名>\n\n\n-- 单行注释\n# 单行注释\n\n/* \n多行注释\n*/\n\n\n-- 查看帮助命令,查询内容是关键字,可以用LIKE\nHELP '查询内容'\n```\n\n`SQL语句的大小写规则`\nMySQL 用服务器主机的底层文件系统所包含的目录和文件来表示数据库和表。因此，数据库名和表名的默认大小写取决于服务器主机的操作系统在命名方面的规定。\n![MySQL大小写规则](https://image.yayan.xyz/20230303141301.png)\n","source":"_posts/python100天31-40.md","raw":"---\ntitle: python100天31-40\ncategories:\n  - 学习笔记\ntags:\n  - Python学习笔记\ntoc: true\n---\n```python\n# 01-15python基础\n\n# 16-20python进阶\n\n# 21-30前端概述\n\n# 31-35Linux\n\n# 36-40MySQL\n\n# 41-55Django\n\n# 56-60FaskAPI\n\n# 61-65爬虫与并发编程\n\n# 66-80numpy&pandas\n\n# 81-90机器学习&pytorch\n\n# 91-100项目\n\n```\n\n## Python100天学习31-35\n\n`Linux`\n\n[资料连接](https://github.com/jackfrued/Python-100-Days)\n\n## Python100天学习36-40\n\n`MySQL`\n\n[资料连接](https://github.com/jackfrued/Python-100-Days)\n\n#### 关系数据库产品\n\n- [Oracle](https://www.oracle.com/index.html) - 目前世界上使用最为广泛的数据库管理系统，作为一个通用的数据库系统，它具有完整的数据管理功能；作为一个关系数据库，它是一个完备关系的产品；作为分布式数据库，它实现了分布式处理的功能。在 Oracle 最新的 12c 版本中，还引入了多承租方架构，使用该架构可轻松部署和管理数据库云。\n- [DB2](https://www.ibm.com/analytics/us/en/db2/) - IBM 公司开发的、主要运行于 Unix（包括 IBM 自家的 [AIX](https://zh.wikipedia.org/wiki/AIX)）、Linux、以及 Windows 服务器版等系统的关系数据库产品。DB2 历史悠久且被认为是最早使用 SQL 的数据库产品，它拥有较为强大的商业智能功能。\n- [SQL Server](https://www.microsoft.com/en-us/sql-server/) - 由 Microsoft 开发和推广的关系型数据库产品，最初适用于中小企业的数据管理，但是近年来它的应用范围有所扩展，部分大企业甚至是跨国公司也开始基于它来构建自己的数据管理系统。\n- [MySQL](https://www.mysql.com/) - MySQL 是开放源代码的，任何人都可以在 GPL（General Public License）的许可下下载并根据个性化的需要对其进行修改。MySQL 因为其速度、可靠性和适应性而备受关注。\n- [PostgreSQL]() - 在 BSD 许可证下发行的开放源代码的关系数据库产品。\n\n#### 安装教程\n\nwindows\n\nlinux\n\nmacos\n\n#### MySQL基本命令\n\n**查看命令**\n\n1. 查看所有数据库\n\n```SQL\nshow databases;\n```\n\n2. 查看所有字符集\n\n```SQL\nshow character set;\n```\n\n3. 查看所有的排序规则\n\n```SQL\nshow collation;\n```\n\n4. 查看所有的引擎\n\n```SQL\nshow engines;\n```\n\n5. 查看所有日志文件\n\n```SQL\nshow binary logs;\n```\n\n6. 查看数据库下所有表\n\n```SQL\nshow tables;\n```\n\n**获取帮助**\n\n在 MySQL 命令行工具中，可以使用 `help`命令或 `?`来获取帮助，如下所示。\n\n1. 查看 `show`命令的帮助。\n\n   ```MySQL\n   ? show\n   ```\n2. 查看有哪些帮助内容。\n\n   ```MySQL\n   ? contents\n   ```\n3. 获取函数的帮助。\n\n   ```MySQL\n   ? functions\n   ```\n4. 获取数据类型的帮助。\n\n   ```MySQL\n   ? data types\n   ```\n\n#### SQL语句\n\n##### 数据库的基本操作\n\n`SQL 包含以下 4 部分：`\n\n1. 数据定义语言（Data Definition Language，DDL）\n   用来创建或删除数据库以及表等对象，主要包含以下几种命令：\n\n- DROP：删除数据库和表等对象\n- CREATE：创建数据库和表等对象\n- ALTER：修改数据库和表等对象的结构\n\n2. 数据操作语言（Data Manipulation Language，DML）\n   用来变更表中的记录，主要包含以下几种命令：\n\n- SELECT：查询表中的数据\n- INSERT：向表中插入新数据\n- UPDATE：更新表中的数据\n- DELETE：删除表中的数据\n\n3. 数据查询语言（Data Query Language，DQL）\n   用来查询表中的记录，主要包含 SELECT 命令，来查询表中的数据。\n4. 数据控制语言（Data Control Language，DCL）\n   用来确认或者取消对数据库中的数据进行的变更。除此之外，还可以对数据库中的用户设定权限。主要包含以下几种命令：\n\n- GRANT：赋予用户操作权限\n- REVOKE：取消用户的操作权限\n- COMMIT：确认对数据库中的数据进行的变更\n- ROLLBACK：取消对数据库中的数据进行的变更\n\n`基本语法`\n\n1. SQL 语句不区分大小写\n2. SQL 语句中含有字符串的时候，需要像 'abc' 这样，使用英文单引号'将字符串括起来，用来标识这是一个字符串。\n3. SQL 语句中含有日期的时候，同样需要使用英文单引号将其括起来。日期的格式有很多种（'26 Jan 2010' 或者'10/01/26' 等），统一使用 '2020-01-26' 这种'年-月-日'的格式。\n4. 在 SQL 语句中书写数字的时候，不需要使用任何符号标识，直接写成 1000 这样的数字即可。\n5. SQL 语句要以分号;结尾.在 RDBMS （关系型数据库）当中，SQL 语句是逐条执行的，一条 SQL 语句代表着数据库的一个操作。\n\n```SQL\n-- 查看数据库 ,LIKE可选,不写就是查看全部  \nSHOW DATABASES [LIKE '数据库名'];\n-- 安装 MySQL 时系统自动创建的6个数据库，其各自功能如下：\n-- information_schema：主要存储了系统中的一些数据库对象信息，比如用户表信息、列信息、权限信息、字符集信息和分区信息等。\n-- mysql：MySQL 的核心数据库，类似于 SQL Server 中的 master 表，主要负责存储数据库用户、用户访问权限等 MySQL 自己需要使用的控制和管理信息。常用的比如在 mysql 数据库的 user 表中修改 root 用户密码。\n-- performance_schema：主要用于收集数据库服务器性能参数。\n-- sakila：MySQL 提供的样例数据库，该数据库共有 16 张表，这些数据表都是比较常见的，在设计数据库时，可以参照这些样例数据表来快速完成所需的数据表。\n-- sys：MySQL 5.7 安装完成后会多一个 sys 数据库。sys 数据库主要提供了一些视图，数据都来自于 performation_schema，主要是让开发者和使用者更方便地查看性能问题。\n-- world：world 数据库是 MySQL 自动创建的数据库，该数据库中只包括 3 张数据表，分别保存城市，国家和国家使用的语言等内容。\n\n\n-- 创建数据库\n-- 字符集是用来定义 MySQL 存储字符串的方式，校对规则定义了比较字符串的方式。\nCREATE DATABASE [IF NOT EXISTS] <数据库名>\n[[DEFAULT] CHARACTER SET <字符集名>] \n[[DEFAULT] COLLATE <校对规则名>];\n\n\n-- 查看数据库的定义声明\nSHOW CREATE DATABASE test_db;\n\n\n-- 使用 ALTER DATABASE 来修改已经被创建或者存在的数据库的相关参数\nALTER DATABASE [数据库名] { \n[ DEFAULT ] CHARACTER SET <字符集名> |\n[ DEFAULT ] COLLATE <校对规则名>}\n-- ALTER DATABASE 用于更改数据库的全局特性。\n-- 使用 ALTER DATABASE 需要获得数据库 ALTER 权限。\n-- 数据库名称可以忽略，此时语句对应于默认数据库。\n-- CHARACTER SET 子句用于更改默认的数据库字符集。\n\n\n-- 删除数据库\nDROP DATABASE [ IF EXISTS ] <数据库名>\n-- MySQL 安装后，系统会自动创建名为 information_schema 和 mysql 的两个系统数据库，系统数据库存放一些和数据库相关的信息，如果删除了这两个数据库，MySQL 将不能正常工作。\n\n\n-- USE 语句用来完成一个数据库到另一个数据库的跳转\n-- 创建数据库之后，该数据库不会自动成为当前数据库\nUSE <数据库名>\n\n\n-- 单行注释\n# 单行注释\n\n/* \n多行注释\n*/\n\n\n-- 查看帮助命令,查询内容是关键字,可以用LIKE\nHELP '查询内容'\n```\n\n`SQL语句的大小写规则`\nMySQL 用服务器主机的底层文件系统所包含的目录和文件来表示数据库和表。因此，数据库名和表名的默认大小写取决于服务器主机的操作系统在命名方面的规定。\n![MySQL大小写规则](https://image.yayan.xyz/20230303141301.png)\n","slug":"python100天31-40","published":1,"date":"2023-03-05T12:07:04.978Z","updated":"2023-03-06T13:32:21.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clewv3hfj0005ykuk24zdgqk7","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 01-15python基础</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 16-20python进阶</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 21-30前端概述</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 31-35Linux</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 36-40MySQL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 41-55Django</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 56-60FaskAPI</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 61-65爬虫与并发编程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 66-80numpy&amp;pandas</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 81-90机器学习&amp;pytorch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 91-100项目</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"python100天学习31-35\"><a class=\"markdownIt-Anchor\" href=\"#python100天学习31-35\"></a> Python100天学习31-35</h2>\n<p><code>Linux</code></p>\n<p><a href=\"https://github.com/jackfrued/Python-100-Days\">资料连接</a></p>\n<h2 id=\"python100天学习36-40\"><a class=\"markdownIt-Anchor\" href=\"#python100天学习36-40\"></a> Python100天学习36-40</h2>\n<p><code>MySQL</code></p>\n<p><a href=\"https://github.com/jackfrued/Python-100-Days\">资料连接</a></p>\n<h4 id=\"关系数据库产品\"><a class=\"markdownIt-Anchor\" href=\"#关系数据库产品\"></a> 关系数据库产品</h4>\n<ul>\n<li><a href=\"https://www.oracle.com/index.html\">Oracle</a> - 目前世界上使用最为广泛的数据库管理系统，作为一个通用的数据库系统，它具有完整的数据管理功能；作为一个关系数据库，它是一个完备关系的产品；作为分布式数据库，它实现了分布式处理的功能。在 Oracle 最新的 12c 版本中，还引入了多承租方架构，使用该架构可轻松部署和管理数据库云。</li>\n<li><a href=\"https://www.ibm.com/analytics/us/en/db2/\">DB2</a> - IBM 公司开发的、主要运行于 Unix（包括 IBM 自家的 <a href=\"https://zh.wikipedia.org/wiki/AIX\">AIX</a>）、Linux、以及 Windows 服务器版等系统的关系数据库产品。DB2 历史悠久且被认为是最早使用 SQL 的数据库产品，它拥有较为强大的商业智能功能。</li>\n<li><a href=\"https://www.microsoft.com/en-us/sql-server/\">SQL Server</a> - 由 Microsoft 开发和推广的关系型数据库产品，最初适用于中小企业的数据管理，但是近年来它的应用范围有所扩展，部分大企业甚至是跨国公司也开始基于它来构建自己的数据管理系统。</li>\n<li><a href=\"https://www.mysql.com/\">MySQL</a> - MySQL 是开放源代码的，任何人都可以在 GPL（General Public License）的许可下下载并根据个性化的需要对其进行修改。MySQL 因为其速度、可靠性和适应性而备受关注。</li>\n<li><a href=\"\">PostgreSQL</a> - 在 BSD 许可证下发行的开放源代码的关系数据库产品。</li>\n</ul>\n<h4 id=\"安装教程\"><a class=\"markdownIt-Anchor\" href=\"#安装教程\"></a> 安装教程</h4>\n<p>windows</p>\n<p>linux</p>\n<p>macos</p>\n<h4 id=\"mysql基本命令\"><a class=\"markdownIt-Anchor\" href=\"#mysql基本命令\"></a> MySQL基本命令</h4>\n<p><strong>查看命令</strong></p>\n<ol>\n<li>查看所有数据库</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> databases;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>查看所有字符集</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"type\">character</span> <span class=\"keyword\">set</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>查看所有的排序规则</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">collation</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>查看所有的引擎</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> engines;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>查看所有日志文件</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"type\">binary</span> logs;</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>查看数据库下所有表</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> tables;</span><br></pre></td></tr></table></figure>\n<p><strong>获取帮助</strong></p>\n<p>在 MySQL 命令行工具中，可以使用 <code>help</code>命令或 <code>?</code>来获取帮助，如下所示。</p>\n<ol>\n<li>\n<p>查看 <code>show</code>命令的帮助。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? show</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>查看有哪些帮助内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? contents</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>获取函数的帮助。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? functions</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>获取数据类型的帮助。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? data types</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"sql语句\"><a class=\"markdownIt-Anchor\" href=\"#sql语句\"></a> SQL语句</h4>\n<h5 id=\"数据库的基本操作\"><a class=\"markdownIt-Anchor\" href=\"#数据库的基本操作\"></a> 数据库的基本操作</h5>\n<p><code>SQL 包含以下 4 部分：</code></p>\n<ol>\n<li>数据定义语言（Data Definition Language，DDL）<br />\n用来创建或删除数据库以及表等对象，主要包含以下几种命令：</li>\n</ol>\n<ul>\n<li>DROP：删除数据库和表等对象</li>\n<li>CREATE：创建数据库和表等对象</li>\n<li>ALTER：修改数据库和表等对象的结构</li>\n</ul>\n<ol start=\"2\">\n<li>数据操作语言（Data Manipulation Language，DML）<br />\n用来变更表中的记录，主要包含以下几种命令：</li>\n</ol>\n<ul>\n<li>SELECT：查询表中的数据</li>\n<li>INSERT：向表中插入新数据</li>\n<li>UPDATE：更新表中的数据</li>\n<li>DELETE：删除表中的数据</li>\n</ul>\n<ol start=\"3\">\n<li>数据查询语言（Data Query Language，DQL）<br />\n用来查询表中的记录，主要包含 SELECT 命令，来查询表中的数据。</li>\n<li>数据控制语言（Data Control Language，DCL）<br />\n用来确认或者取消对数据库中的数据进行的变更。除此之外，还可以对数据库中的用户设定权限。主要包含以下几种命令：</li>\n</ol>\n<ul>\n<li>GRANT：赋予用户操作权限</li>\n<li>REVOKE：取消用户的操作权限</li>\n<li>COMMIT：确认对数据库中的数据进行的变更</li>\n<li>ROLLBACK：取消对数据库中的数据进行的变更</li>\n</ul>\n<p><code>基本语法</code></p>\n<ol>\n<li>SQL 语句不区分大小写</li>\n<li>SQL 语句中含有字符串的时候，需要像 ‘abc’ 这样，使用英文单引号’将字符串括起来，用来标识这是一个字符串。</li>\n<li>SQL 语句中含有日期的时候，同样需要使用英文单引号将其括起来。日期的格式有很多种（‘26 Jan 2010’ 或者’10/01/26’ 等），统一使用 ‘2020-01-26’ 这种’年-月-日’的格式。</li>\n<li>在 SQL 语句中书写数字的时候，不需要使用任何符号标识，直接写成 1000 这样的数字即可。</li>\n<li>SQL 语句要以分号;结尾.在 RDBMS （关系型数据库）当中，SQL 语句是逐条执行的，一条 SQL 语句代表着数据库的一个操作。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查看数据库 ,LIKE可选,不写就是查看全部  </span></span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> DATABASES [<span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;数据库名&#x27;</span>];</span><br><span class=\"line\"><span class=\"comment\">-- 安装 MySQL 时系统自动创建的6个数据库，其各自功能如下：</span></span><br><span class=\"line\"><span class=\"comment\">-- information_schema：主要存储了系统中的一些数据库对象信息，比如用户表信息、列信息、权限信息、字符集信息和分区信息等。</span></span><br><span class=\"line\"><span class=\"comment\">-- mysql：MySQL 的核心数据库，类似于 SQL Server 中的 master 表，主要负责存储数据库用户、用户访问权限等 MySQL 自己需要使用的控制和管理信息。常用的比如在 mysql 数据库的 user 表中修改 root 用户密码。</span></span><br><span class=\"line\"><span class=\"comment\">-- performance_schema：主要用于收集数据库服务器性能参数。</span></span><br><span class=\"line\"><span class=\"comment\">-- sakila：MySQL 提供的样例数据库，该数据库共有 16 张表，这些数据表都是比较常见的，在设计数据库时，可以参照这些样例数据表来快速完成所需的数据表。</span></span><br><span class=\"line\"><span class=\"comment\">-- sys：MySQL 5.7 安装完成后会多一个 sys 数据库。sys 数据库主要提供了一些视图，数据都来自于 performation_schema，主要是让开发者和使用者更方便地查看性能问题。</span></span><br><span class=\"line\"><span class=\"comment\">-- world：world 数据库是 MySQL 自动创建的数据库，该数据库中只包括 3 张数据表，分别保存城市，国家和国家使用的语言等内容。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建数据库</span></span><br><span class=\"line\"><span class=\"comment\">-- 字符集是用来定义 MySQL 存储字符串的方式，校对规则定义了比较字符串的方式。</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE [IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>] <span class=\"operator\">&lt;</span>数据库名<span class=\"operator\">&gt;</span></span><br><span class=\"line\">[[<span class=\"keyword\">DEFAULT</span>] <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> <span class=\"operator\">&lt;</span>字符集名<span class=\"operator\">&gt;</span>] </span><br><span class=\"line\">[[<span class=\"keyword\">DEFAULT</span>] <span class=\"keyword\">COLLATE</span> <span class=\"operator\">&lt;</span>校对规则名<span class=\"operator\">&gt;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看数据库的定义声明</span></span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> DATABASE test_db;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 使用 ALTER DATABASE 来修改已经被创建或者存在的数据库的相关参数</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE [数据库名] &#123; </span><br><span class=\"line\">[ <span class=\"keyword\">DEFAULT</span> ] <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> <span class=\"operator\">&lt;</span>字符集名<span class=\"operator\">&gt;</span> <span class=\"operator\">|</span></span><br><span class=\"line\">[ <span class=\"keyword\">DEFAULT</span> ] <span class=\"keyword\">COLLATE</span> <span class=\"operator\">&lt;</span>校对规则名<span class=\"operator\">&gt;</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">-- ALTER DATABASE 用于更改数据库的全局特性。</span></span><br><span class=\"line\"><span class=\"comment\">-- 使用 ALTER DATABASE 需要获得数据库 ALTER 权限。</span></span><br><span class=\"line\"><span class=\"comment\">-- 数据库名称可以忽略，此时语句对应于默认数据库。</span></span><br><span class=\"line\"><span class=\"comment\">-- CHARACTER SET 子句用于更改默认的数据库字符集。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除数据库</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> DATABASE [ IF <span class=\"keyword\">EXISTS</span> ] <span class=\"operator\">&lt;</span>数据库名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"><span class=\"comment\">-- MySQL 安装后，系统会自动创建名为 information_schema 和 mysql 的两个系统数据库，系统数据库存放一些和数据库相关的信息，如果删除了这两个数据库，MySQL 将不能正常工作。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- USE 语句用来完成一个数据库到另一个数据库的跳转</span></span><br><span class=\"line\"><span class=\"comment\">-- 创建数据库之后，该数据库不会自动成为当前数据库</span></span><br><span class=\"line\">USE <span class=\"operator\">&lt;</span>数据库名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 单行注释</span></span><br><span class=\"line\"># 单行注释</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">多行注释</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看帮助命令,查询内容是关键字,可以用LIKE</span></span><br><span class=\"line\">HELP <span class=\"string\">&#x27;查询内容&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><code>SQL语句的大小写规则</code><br />\nMySQL 用服务器主机的底层文件系统所包含的目录和文件来表示数据库和表。因此，数据库名和表名的默认大小写取决于服务器主机的操作系统在命名方面的规定。<br />\n<img src=\"https://image.yayan.xyz/20230303141301.png\" alt=\"MySQL大小写规则\" /></p>\n","site":{"data":{"links":{"作者站点-1":{"link":"http://unsplash.yayan.xyz/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"自己的文本图像匹配示例"},"作者站点-2":{"link":"http://yayan.xyz/","avatar":"/images/favatar/idesign-logo.png","desc":"学校充电桩检测"},"配置pure主题参考":{"link":"https://blog.cofess.com/","avatar":"/images/favatar/pure.jpg","desc":"pure主题示例"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 01-15python基础</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 16-20python进阶</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 21-30前端概述</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 31-35Linux</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 36-40MySQL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 41-55Django</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 56-60FaskAPI</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 61-65爬虫与并发编程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 66-80numpy&amp;pandas</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 81-90机器学习&amp;pytorch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 91-100项目</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"python100天学习31-35\"><a class=\"markdownIt-Anchor\" href=\"#python100天学习31-35\"></a> Python100天学习31-35</h2>\n<p><code>Linux</code></p>\n<p><a href=\"https://github.com/jackfrued/Python-100-Days\">资料连接</a></p>\n<h2 id=\"python100天学习36-40\"><a class=\"markdownIt-Anchor\" href=\"#python100天学习36-40\"></a> Python100天学习36-40</h2>\n<p><code>MySQL</code></p>\n<p><a href=\"https://github.com/jackfrued/Python-100-Days\">资料连接</a></p>\n<h4 id=\"关系数据库产品\"><a class=\"markdownIt-Anchor\" href=\"#关系数据库产品\"></a> 关系数据库产品</h4>\n<ul>\n<li><a href=\"https://www.oracle.com/index.html\">Oracle</a> - 目前世界上使用最为广泛的数据库管理系统，作为一个通用的数据库系统，它具有完整的数据管理功能；作为一个关系数据库，它是一个完备关系的产品；作为分布式数据库，它实现了分布式处理的功能。在 Oracle 最新的 12c 版本中，还引入了多承租方架构，使用该架构可轻松部署和管理数据库云。</li>\n<li><a href=\"https://www.ibm.com/analytics/us/en/db2/\">DB2</a> - IBM 公司开发的、主要运行于 Unix（包括 IBM 自家的 <a href=\"https://zh.wikipedia.org/wiki/AIX\">AIX</a>）、Linux、以及 Windows 服务器版等系统的关系数据库产品。DB2 历史悠久且被认为是最早使用 SQL 的数据库产品，它拥有较为强大的商业智能功能。</li>\n<li><a href=\"https://www.microsoft.com/en-us/sql-server/\">SQL Server</a> - 由 Microsoft 开发和推广的关系型数据库产品，最初适用于中小企业的数据管理，但是近年来它的应用范围有所扩展，部分大企业甚至是跨国公司也开始基于它来构建自己的数据管理系统。</li>\n<li><a href=\"https://www.mysql.com/\">MySQL</a> - MySQL 是开放源代码的，任何人都可以在 GPL（General Public License）的许可下下载并根据个性化的需要对其进行修改。MySQL 因为其速度、可靠性和适应性而备受关注。</li>\n<li><a href=\"\">PostgreSQL</a> - 在 BSD 许可证下发行的开放源代码的关系数据库产品。</li>\n</ul>\n<h4 id=\"安装教程\"><a class=\"markdownIt-Anchor\" href=\"#安装教程\"></a> 安装教程</h4>\n<p>windows</p>\n<p>linux</p>\n<p>macos</p>\n<h4 id=\"mysql基本命令\"><a class=\"markdownIt-Anchor\" href=\"#mysql基本命令\"></a> MySQL基本命令</h4>\n<p><strong>查看命令</strong></p>\n<ol>\n<li>查看所有数据库</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> databases;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>查看所有字符集</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"type\">character</span> <span class=\"keyword\">set</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>查看所有的排序规则</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">collation</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>查看所有的引擎</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> engines;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>查看所有日志文件</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"type\">binary</span> logs;</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>查看数据库下所有表</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> tables;</span><br></pre></td></tr></table></figure>\n<p><strong>获取帮助</strong></p>\n<p>在 MySQL 命令行工具中，可以使用 <code>help</code>命令或 <code>?</code>来获取帮助，如下所示。</p>\n<ol>\n<li>\n<p>查看 <code>show</code>命令的帮助。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? show</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>查看有哪些帮助内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? contents</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>获取函数的帮助。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? functions</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>获取数据类型的帮助。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? data types</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"sql语句\"><a class=\"markdownIt-Anchor\" href=\"#sql语句\"></a> SQL语句</h4>\n<h5 id=\"数据库的基本操作\"><a class=\"markdownIt-Anchor\" href=\"#数据库的基本操作\"></a> 数据库的基本操作</h5>\n<p><code>SQL 包含以下 4 部分：</code></p>\n<ol>\n<li>数据定义语言（Data Definition Language，DDL）<br />\n用来创建或删除数据库以及表等对象，主要包含以下几种命令：</li>\n</ol>\n<ul>\n<li>DROP：删除数据库和表等对象</li>\n<li>CREATE：创建数据库和表等对象</li>\n<li>ALTER：修改数据库和表等对象的结构</li>\n</ul>\n<ol start=\"2\">\n<li>数据操作语言（Data Manipulation Language，DML）<br />\n用来变更表中的记录，主要包含以下几种命令：</li>\n</ol>\n<ul>\n<li>SELECT：查询表中的数据</li>\n<li>INSERT：向表中插入新数据</li>\n<li>UPDATE：更新表中的数据</li>\n<li>DELETE：删除表中的数据</li>\n</ul>\n<ol start=\"3\">\n<li>数据查询语言（Data Query Language，DQL）<br />\n用来查询表中的记录，主要包含 SELECT 命令，来查询表中的数据。</li>\n<li>数据控制语言（Data Control Language，DCL）<br />\n用来确认或者取消对数据库中的数据进行的变更。除此之外，还可以对数据库中的用户设定权限。主要包含以下几种命令：</li>\n</ol>\n<ul>\n<li>GRANT：赋予用户操作权限</li>\n<li>REVOKE：取消用户的操作权限</li>\n<li>COMMIT：确认对数据库中的数据进行的变更</li>\n<li>ROLLBACK：取消对数据库中的数据进行的变更</li>\n</ul>\n<p><code>基本语法</code></p>\n<ol>\n<li>SQL 语句不区分大小写</li>\n<li>SQL 语句中含有字符串的时候，需要像 ‘abc’ 这样，使用英文单引号’将字符串括起来，用来标识这是一个字符串。</li>\n<li>SQL 语句中含有日期的时候，同样需要使用英文单引号将其括起来。日期的格式有很多种（‘26 Jan 2010’ 或者’10/01/26’ 等），统一使用 ‘2020-01-26’ 这种’年-月-日’的格式。</li>\n<li>在 SQL 语句中书写数字的时候，不需要使用任何符号标识，直接写成 1000 这样的数字即可。</li>\n<li>SQL 语句要以分号;结尾.在 RDBMS （关系型数据库）当中，SQL 语句是逐条执行的，一条 SQL 语句代表着数据库的一个操作。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查看数据库 ,LIKE可选,不写就是查看全部  </span></span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> DATABASES [<span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;数据库名&#x27;</span>];</span><br><span class=\"line\"><span class=\"comment\">-- 安装 MySQL 时系统自动创建的6个数据库，其各自功能如下：</span></span><br><span class=\"line\"><span class=\"comment\">-- information_schema：主要存储了系统中的一些数据库对象信息，比如用户表信息、列信息、权限信息、字符集信息和分区信息等。</span></span><br><span class=\"line\"><span class=\"comment\">-- mysql：MySQL 的核心数据库，类似于 SQL Server 中的 master 表，主要负责存储数据库用户、用户访问权限等 MySQL 自己需要使用的控制和管理信息。常用的比如在 mysql 数据库的 user 表中修改 root 用户密码。</span></span><br><span class=\"line\"><span class=\"comment\">-- performance_schema：主要用于收集数据库服务器性能参数。</span></span><br><span class=\"line\"><span class=\"comment\">-- sakila：MySQL 提供的样例数据库，该数据库共有 16 张表，这些数据表都是比较常见的，在设计数据库时，可以参照这些样例数据表来快速完成所需的数据表。</span></span><br><span class=\"line\"><span class=\"comment\">-- sys：MySQL 5.7 安装完成后会多一个 sys 数据库。sys 数据库主要提供了一些视图，数据都来自于 performation_schema，主要是让开发者和使用者更方便地查看性能问题。</span></span><br><span class=\"line\"><span class=\"comment\">-- world：world 数据库是 MySQL 自动创建的数据库，该数据库中只包括 3 张数据表，分别保存城市，国家和国家使用的语言等内容。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建数据库</span></span><br><span class=\"line\"><span class=\"comment\">-- 字符集是用来定义 MySQL 存储字符串的方式，校对规则定义了比较字符串的方式。</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE [IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>] <span class=\"operator\">&lt;</span>数据库名<span class=\"operator\">&gt;</span></span><br><span class=\"line\">[[<span class=\"keyword\">DEFAULT</span>] <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> <span class=\"operator\">&lt;</span>字符集名<span class=\"operator\">&gt;</span>] </span><br><span class=\"line\">[[<span class=\"keyword\">DEFAULT</span>] <span class=\"keyword\">COLLATE</span> <span class=\"operator\">&lt;</span>校对规则名<span class=\"operator\">&gt;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看数据库的定义声明</span></span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> DATABASE test_db;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 使用 ALTER DATABASE 来修改已经被创建或者存在的数据库的相关参数</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> DATABASE [数据库名] &#123; </span><br><span class=\"line\">[ <span class=\"keyword\">DEFAULT</span> ] <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> <span class=\"operator\">&lt;</span>字符集名<span class=\"operator\">&gt;</span> <span class=\"operator\">|</span></span><br><span class=\"line\">[ <span class=\"keyword\">DEFAULT</span> ] <span class=\"keyword\">COLLATE</span> <span class=\"operator\">&lt;</span>校对规则名<span class=\"operator\">&gt;</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">-- ALTER DATABASE 用于更改数据库的全局特性。</span></span><br><span class=\"line\"><span class=\"comment\">-- 使用 ALTER DATABASE 需要获得数据库 ALTER 权限。</span></span><br><span class=\"line\"><span class=\"comment\">-- 数据库名称可以忽略，此时语句对应于默认数据库。</span></span><br><span class=\"line\"><span class=\"comment\">-- CHARACTER SET 子句用于更改默认的数据库字符集。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除数据库</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> DATABASE [ IF <span class=\"keyword\">EXISTS</span> ] <span class=\"operator\">&lt;</span>数据库名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"><span class=\"comment\">-- MySQL 安装后，系统会自动创建名为 information_schema 和 mysql 的两个系统数据库，系统数据库存放一些和数据库相关的信息，如果删除了这两个数据库，MySQL 将不能正常工作。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- USE 语句用来完成一个数据库到另一个数据库的跳转</span></span><br><span class=\"line\"><span class=\"comment\">-- 创建数据库之后，该数据库不会自动成为当前数据库</span></span><br><span class=\"line\">USE <span class=\"operator\">&lt;</span>数据库名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 单行注释</span></span><br><span class=\"line\"># 单行注释</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">多行注释</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看帮助命令,查询内容是关键字,可以用LIKE</span></span><br><span class=\"line\">HELP <span class=\"string\">&#x27;查询内容&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><code>SQL语句的大小写规则</code><br />\nMySQL 用服务器主机的底层文件系统所包含的目录和文件来表示数据库和表。因此，数据库名和表名的默认大小写取决于服务器主机的操作系统在命名方面的规定。<br />\n<img src=\"https://image.yayan.xyz/20230303141301.png\" alt=\"MySQL大小写规则\" /></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clee4vhah0009c8vqfxze5ukw","category_id":"clee4vhae0004c8vqbdf35svg","_id":"clee4vhan000jc8vq3m3c96r2"},{"post_id":"clee4vha80001c8vqgypm1hg3","category_id":"clee4vhae0004c8vqbdf35svg","_id":"clee4vhao000nc8vq852bdfbl"},{"post_id":"clee4vhab0003c8vq1u9n5n6b","category_id":"clee4vhaj000cc8vqgqil6e6r","_id":"clee4vhar000qc8vq30gtfpeo"},{"post_id":"clee4vham000ic8vq614d9lf8","category_id":"clee4vhaj000cc8vqgqil6e6r","_id":"clee4vhau000uc8vq5mzqf3nd"},{"post_id":"clee4vhan000mc8vq4cptdek8","category_id":"clee4vhan000kc8vq9dooegfq","_id":"clee4vhav000xc8vq2gyrdjww"},{"post_id":"clee4vhag0007c8vqay23hvc7","category_id":"clee4vhan000kc8vq9dooegfq","_id":"clee4vhaw0011c8vqeb515esy"},{"post_id":"clee4vhap000pc8vq00wt3p0b","category_id":"clee4vhaj000cc8vqgqil6e6r","_id":"clee4vhay0013c8vq4jaj2kt9"},{"post_id":"clee4vhai000bc8vqckbh1c46","category_id":"clee4vhan000kc8vq9dooegfq","_id":"clee4vhaz0017c8vqe4de62rf"},{"post_id":"clee4vhav0010c8vq0esv2vqv","category_id":"clee4vhae0004c8vqbdf35svg","_id":"clee4vhb00019c8vqhxshasj7"},{"post_id":"clee4vhak000gc8vqbgy0c62r","category_id":"clee4vhav000yc8vq54y5exoy","_id":"clee4vhb1001cc8vqcn091bod"},{"post_id":"clee4vhaw0012c8vqf0dedd12","category_id":"clee4vhae0004c8vqbdf35svg","_id":"clee4vhb2001fc8vq0ne37u92"},{"post_id":"clee4vhay0015c8vq0jg37uk3","category_id":"clee4vhan000kc8vq9dooegfq","_id":"clee4vhb2001hc8vq4pe7b846"},{"post_id":"clee4vhat000tc8vq7s5yh6g3","category_id":"clee4vhav000yc8vq54y5exoy","_id":"clee4vhb3001kc8vq8ygg8v2w"},{"post_id":"clee4vhaz0018c8vqhgr9ggf0","category_id":"clee4vhae0004c8vqbdf35svg","_id":"clee4vhb4001oc8vq7ky3bumr"},{"post_id":"clee4vhb0001bc8vq9kqu9xne","category_id":"clee4vhae0004c8vqbdf35svg","_id":"clee4vhb5001rc8vqhdicffry"},{"post_id":"clee4vhau000wc8vqcc34dj44","category_id":"clee4vhav000yc8vq54y5exoy","_id":"clee4vhb5001tc8vqcbxp0cad"},{"post_id":"clee4vhb3001jc8vqhyeng0lq","category_id":"clee4vhae0004c8vqbdf35svg","_id":"clee4vhb5001wc8vqdxlpbvjt"},{"post_id":"clee4vhb4001nc8vqccc4hs70","category_id":"clee4vhae0004c8vqbdf35svg","_id":"clee4vhb6001yc8vq37m950a2"},{"post_id":"clee4vhb2001gc8vqf5gj1cyk","category_id":"clee4vhb3001mc8vq1nthh5n5","_id":"clee4vhb60020c8vq4hy2ek15"},{"post_id":"clewv3he60000ykuk5c9ugn9g","category_id":"clee4vhae0004c8vqbdf35svg","_id":"clewv3hfb0004ykuk7ykd2y5r"},{"post_id":"clewv3hf30001ykukbm0p4gaz","category_id":"clee4vhae0004c8vqbdf35svg","_id":"clewv3hfm0006ykukgistc28c"},{"post_id":"clewv3hfj0005ykuk24zdgqk7","category_id":"clee4vhae0004c8vqbdf35svg","_id":"clewv3hfn0008ykuk3jou6jia"}],"PostTag":[{"post_id":"clee4vha80001c8vqgypm1hg3","tag_id":"clee4vhaf0005c8vqgmhag0xl","_id":"clee4vhaj000ec8vq3v968haa"},{"post_id":"clee4vhab0003c8vq1u9n5n6b","tag_id":"clee4vhaj000dc8vq4vsae4uj","_id":"clee4vhao000oc8vqd88w5d8c"},{"post_id":"clee4vhag0007c8vqay23hvc7","tag_id":"clee4vhan000lc8vqbsd67acd","_id":"clee4vhau000vc8vqgf0j02x8"},{"post_id":"clee4vhah0009c8vqfxze5ukw","tag_id":"clee4vhar000sc8vq4ksf47em","_id":"clee4vhb3001lc8vq8n8s25b3"},{"post_id":"clee4vhah0009c8vqfxze5ukw","tag_id":"clee4vhav000zc8vq2ocfglgw","_id":"clee4vhb4001pc8vqd4w4f7c5"},{"post_id":"clee4vhah0009c8vqfxze5ukw","tag_id":"clee4vhaz0016c8vq2wzjfj4h","_id":"clee4vhb5001sc8vqgj0u2un5"},{"post_id":"clee4vhah0009c8vqfxze5ukw","tag_id":"clee4vhb1001dc8vqfges58h8","_id":"clee4vhb5001uc8vq11y94gk3"},{"post_id":"clee4vhai000bc8vqckbh1c46","tag_id":"clee4vhb3001ic8vq6lmx0o01","_id":"clee4vhb5001xc8vq1qnkgnb5"},{"post_id":"clee4vhai000bc8vqckbh1c46","tag_id":"clee4vhb4001qc8vq1cajgifs","_id":"clee4vhb6001zc8vq96vlhoa5"},{"post_id":"clee4vhak000gc8vqbgy0c62r","tag_id":"clee4vhb5001vc8vqdy48hfm8","_id":"clee4vhb60022c8vqcsl36577"},{"post_id":"clee4vham000ic8vq614d9lf8","tag_id":"clee4vhb60021c8vqaje9g6k9","_id":"clee4vhb60024c8vqhy14fi1j"},{"post_id":"clee4vhan000mc8vq4cptdek8","tag_id":"clee4vhb60023c8vq893wbphz","_id":"clee4vhb70026c8vqcqj34bcz"},{"post_id":"clee4vhap000pc8vq00wt3p0b","tag_id":"clee4vhb70025c8vq78rkc97h","_id":"clee4vhb70028c8vq2vlx2qty"},{"post_id":"clee4vhat000tc8vq7s5yh6g3","tag_id":"clee4vhb70027c8vq2a3eh4il","_id":"clee4vhb8002ac8vq8063hmdu"},{"post_id":"clee4vhau000wc8vqcc34dj44","tag_id":"clee4vhb80029c8vqhkk559rb","_id":"clee4vhb8002cc8vqg090gflz"},{"post_id":"clee4vhav0010c8vq0esv2vqv","tag_id":"clee4vhb8002bc8vqbdmy5hnx","_id":"clee4vhb9002ec8vqd65qesz9"},{"post_id":"clee4vhaw0012c8vqf0dedd12","tag_id":"clee4vhb8002dc8vq9d8d6t4y","_id":"clee4vhb9002gc8vq0g009gk3"},{"post_id":"clee4vhay0015c8vq0jg37uk3","tag_id":"clee4vhb9002fc8vq68wo5c9y","_id":"clee4vhb9002ic8vq0p970qss"},{"post_id":"clee4vhaz0018c8vqhgr9ggf0","tag_id":"clee4vhb8002dc8vq9d8d6t4y","_id":"clee4vhba002kc8vqfsf35pu5"},{"post_id":"clee4vhb0001bc8vq9kqu9xne","tag_id":"clee4vhba002jc8vqf31o1ki4","_id":"clee4vhba002nc8vqaok04haq"},{"post_id":"clee4vhb0001bc8vq9kqu9xne","tag_id":"clee4vhba002lc8vqf4k8fz68","_id":"clee4vhbb002oc8vqaddyfv0b"},{"post_id":"clee4vhb2001gc8vqf5gj1cyk","tag_id":"clee4vhba002mc8vqepzj2idv","_id":"clee4vhbb002qc8vqhtvkh25m"},{"post_id":"clee4vhb3001jc8vqhyeng0lq","tag_id":"clee4vhbb002pc8vqeuni6lgb","_id":"clee4vhbb002sc8vq6h6r3ml8"},{"post_id":"clee4vhb4001nc8vqccc4hs70","tag_id":"clee4vhbb002rc8vq1zrd464z","_id":"clee4vhbd002vc8vqde0863mc"},{"post_id":"clee4vhb4001nc8vqccc4hs70","tag_id":"clee4vhbb002tc8vqbc9p1e39","_id":"clee4vhbd002wc8vqfx0j4138"},{"post_id":"clee4vhb4001nc8vqccc4hs70","tag_id":"clee4vhbc002uc8vq83b0clxe","_id":"clee4vhbd002xc8vqckq4d2yz"},{"post_id":"clewv3he60000ykuk5c9ugn9g","tag_id":"clee4vhaf0005c8vqgmhag0xl","_id":"clewv3hf60002ykukedyucr1z"},{"post_id":"clewv3hf30001ykukbm0p4gaz","tag_id":"clee4vhb8002dc8vq9d8d6t4y","_id":"clewv3hf90003ykukazaffwf7"},{"post_id":"clewv3hfj0005ykuk24zdgqk7","tag_id":"clee4vhb8002dc8vq9d8d6t4y","_id":"clewv3hfn0007ykuk9alqg50a"}],"Tag":[{"name":"算法刷题笔记","_id":"clee4vhaf0005c8vqgmhag0xl"},{"name":"Linux快捷命令","_id":"clee4vhaj000dc8vq4vsae4uj"},{"name":"neo4j安装","_id":"clee4vhan000lc8vqbsd67acd"},{"name":"Dataset","_id":"clee4vhar000sc8vq4ksf47em"},{"name":"Dataloader","_id":"clee4vhav000zc8vq2ocfglgw"},{"name":"Sampler","_id":"clee4vhaz0016c8vq2wzjfj4h"},{"name":"collate_fn","_id":"clee4vhb1001dc8vqfges58h8"},{"name":"git Time out","_id":"clee4vhb3001ic8vq6lmx0o01"},{"name":"github Time out","_id":"clee4vhb4001qc8vq1cajgifs"},{"name":"hexo博客配置gitalk","_id":"clee4vhb5001vc8vqdy48hfm8"},{"name":"Neo4j快捷命令","_id":"clee4vhb60021c8vqaje9g6k9"},{"name":"Vscode连接阿里云服务器","_id":"clee4vhb60023c8vq893wbphz"},{"name":"快捷键","_id":"clee4vhb70025c8vq78rkc97h"},{"name":"hexo博客配置picgo","_id":"clee4vhb70027c8vq2a3eh4il"},{"name":"hexo博客配置pure","_id":"clee4vhb80029c8vqhkk559rb"},{"name":"Cypher学习笔记","_id":"clee4vhb8002bc8vqbdmy5hnx"},{"name":"Python学习笔记","_id":"clee4vhb8002dc8vq9d8d6t4y"},{"name":"多个域名访问同一个服务器","_id":"clee4vhb9002fc8vq68wo5c9y"},{"name":"知识图谱表示","_id":"clee4vhba002jc8vqf31o1ki4"},{"name":"综述","_id":"clee4vhba002lc8vqf4k8fz68"},{"name":"搭建博客","_id":"clee4vhba002mc8vqepzj2idv"},{"name":"排序算法","_id":"clee4vhbb002pc8vqeuni6lgb"},{"name":"多项式乘法","_id":"clee4vhbb002rc8vq1zrd464z"},{"name":"快速傅里叶变换","_id":"clee4vhbb002tc8vqbc9p1e39"},{"name":"FFT","_id":"clee4vhbc002uc8vq83b0clxe"}]}}