<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gladdduck</title>
  
  
  <link href="https://gladdduck.github.io/atom.xml" rel="self"/>
  
  <link href="https://gladdduck.github.io/"/>
  <updated>2023-11-24T09:14:47.927Z</updated>
  <id>https://gladdduck.github.io/</id>
  
  <author>
    <name>syxue</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Few-shot Object Detection论文总结</title>
    <link href="https://gladdduck.github.io/2023/11/24/Few-shotDetection%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/"/>
    <id>https://gladdduck.github.io/2023/11/24/Few-shotDetection%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/</id>
    <published>2023-11-24T12:54:49.892Z</published>
    <updated>2023-11-24T09:14:47.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="few-shot-object-detection"><a class="markdownIt-Anchor" href="#few-shot-object-detection"></a> Few-shot Object Detection</h1><h2 id="综述"><a class="markdownIt-Anchor" href="#综述"></a> 综述</h2><h3 id="few-shot-object-detection-a-comprehensive-survey"><a class="markdownIt-Anchor" href="#few-shot-object-detection-a-comprehensive-survey"></a> Few-Shot Object Detection: A Comprehensive Survey</h3><ol><li>问题定义:N-way K-shot表示使用K个样本来训练N个类别</li><li>和few-shot learning,semi-supervised learning,increamental learning的区别</li><li>使用到的技术:1)迁移学习2)度量学习3)元学习</li></ol><p><strong>Dual-Branch meta learning:</strong><br /><img src="https://image.yayan.xyz/20231105141045.png" alt="" /><br />实现思路:一个Query Branch用来提取待检测图像的特征,然后通过RPN和一个RoI Align得到Query Feature,再和Support Feature提取出来的Support特征(K shot,K&gt;1取平均),进行Aggregation,然后送入RoI Head进行分类和回归.</p><ol><li><p>聚合相关改进</p><ul><li>Variant For Aggregation:<ul><li>缺点:在RPN之后进行聚合,需要RPN为新类别生成Proposal,但是RPN可能无法为新类别生成Proposal</li><li>改进:在RPN之前进行聚合(AttentionRPN),然后将增强的特征送入RPN,生成Proposal</li><li>改进:使用second-order pooling替换avg pooling,减少Support Feature的颜色,条纹,斑点带来的噪声</li></ul></li><li>Variant For Aggregation Operation<ul><li>缺点:简单的channel-wise 乘法不能充分利用Query和Support的特征</li><li>改进:添加比例因子,使用卷积,利用更复杂的操作等</li></ul></li><li>Keep Spatial Information for Aggregation<ul><li>缺点:average pooling会丢失空间信息,convolution会导致空间信息不对齐</li><li>改进:attention-based aggregation</li></ul></li><li>Attention-base Aggregation<ul><li>Dual-Awareness Attention for Few-Shot Object Detection:增强前景,抑制背景并使用Query Feature Map促进空间位置的对齐</li><li>Object detection based on few-shot learning via instance-level feature correlation and aggregation:IFC module用于构造实例特征的相关性,ASA module增强查询和支持之间的特征灵敏度,减少冗余信息</li><li>Few-shot object detection with affinity relation reasoning:设计了一个亲和关系推理模块（ARRM）来促进支持特征和感兴趣区域特征的交互</li><li>One-Shot Object Detection with Co-Attention and Co-Excitation:使用非局部操作来探索每个查询-目标对中体现的共同注意,并且使用改进的SeNet分配候选区域的重要性</li><li>Adaptive Image Transformer for One-Shot Object Detection:将支持和查询作为Transformer的输入,来充分融合信息</li></ul></li><li>Multi-Level Aggregation<ul><li>缺点:只在特征抽取之后进行了一次聚合</li><li>改进:使用PVTv2(Pyramid Vision Transformer)在特征抽取的时候进行多次融合</li></ul></li><li>Aggregation of Several Support Images<ul><li>缺点:多个Support Image的情况下,对特征图取平均,忽略了不同的信息</li><li>改进:1)使用可学习的权重 2)使用softmax分配权重</li></ul></li></ul></li><li><p>Incorporate Relation between Caregories</p><ul><li>缺点:基本类别可以帮助识别新的稀疏类</li><li>改进:1)融入语言特征 2)构建图关系(多类别关系增强特征,合并相似类别特征) 3)捕获类间相似性,增强泛化能力</li></ul></li><li><p>Increase Discriminative power</p><ul><li>缺点:1)在聚合之后,通常使用交叉熵损失判别分类,更好的方法是使用度量学习 2)元学习学习去区分前景和背景,这导致有可能检测到不存在的物体</li><li>改进:-1)GenDet和Meta DETR通过相似度矩阵最小化类间差异,最大化不同的支持向量 2)MM-FSOD使用皮尔斯系数聚合支持向量和查询向量 3)CME擦除最具辨别力的像素  -1)AttentionRPN使用多关系检测器来判断是否存有物体 2)对比学习测量用来区分不同的类别 3)GenDet使用额外的检测器检测基类,增强骨干网络提取更具代表性的特征</li></ul></li><li><p>Improve representation capability</p><ul><li>缺点:base categories被视为负类,导致识别新类的表达能力不足</li><li>改进:SPCN通过选择与基类不同的区域,并使用自监督的方式检测数据增强前后相同的非基类区域</li></ul></li><li><p>Proposal-free Detector</p><ul><li>缺点:许多方法基于Faster RCNN,1)可能生成不准确的区域建议框,2)决定在区域建议框之前还是之后进行聚合</li><li>改进:1)无提议框的模型更容易实现 2)基于YOLO 3)基于DETR</li></ul></li><li><p>Keep the Performance on Base Categories</p><ul><li>缺点:学习新的类别之后,模型可能会导致灾难性遗忘</li><li>改进:1)Meta Faster R-CNN使用一个额外的branch预测base categories,在训练期间固定 2)Sylph每个类别使用独立的分类器</li></ul></li><li><p>Increase the Variance of Novel Categories</p><ul><li>缺点:直接应用数据增强效果不佳</li><li>改进:TIP使用additional transformed guidance consistency loss,使得变化前后的图像特征保持一致</li></ul></li><li><p>Incorporate Context Information</p><ul><li>缺点:在RoI pool或者RoI Align之后,可能导致丢失信息</li><li>改进:DCNet使用三种不同分辨率执行并行池化</li></ul></li><li><p>Category-agnostic Bounding Box Regression</p></li></ol><p><strong>Single-Branch meta learning:</strong></p><p>用的太少,且精确度不高</p><p><strong>Transfer Learning</strong><br />略…</p><ol><li>Modifications of the Region Proposal Network</li><li>Modifications of the Feature Pyramid Network</li><li>Increase the Variance of Novel Categories</li><li>Transfer Knowledge Between Base and Novel Categories</li><li>Keep the Performance on Base Categories</li><li>Modify the Training Objective</li><li>Use Attention</li><li>Modify Architecture</li></ol><h2 id="论文"><a class="markdownIt-Anchor" href="#论文"></a> 论文</h2><!-- 1. Meta-YOLO,FSRW2. Meta-RCNN3. Attention-RPN4. Meta-DETR5. Frustratingly Simple Few-Shot Object Detection6.Meta-Learning to Detect Rare Objects --><hr /><!-- Meta-YOLO --><h3 id="1-few-shot-object-detection-via-feature-reweightingmeta-yolofsrw"><a class="markdownIt-Anchor" href="#1-few-shot-object-detection-via-feature-reweightingmeta-yolofsrw"></a> 1. Few-shot Object Detection via Feature Reweighting(Meta-YOLO,FSRW)</h3><p><img src="https://image.yayan.xyz/20231112172223.png" alt="" /><br /><strong>思想</strong>:</p><ol><li>一个元特征抽取模块(meta feature extractor:YOLOv2中的Darknet19),用来提取查询图像的元特征</li><li>一个特征重加权模块(feature reweighting module),将支持图像抽取出全局特征(class-specific representation),用于调整元特征的贡献,获得(理解为抽取出支持图像的特征然后和查询图像的特征做一个channel-wise的乘法,来形成一个reweighting的特征(class-specific features)).<br />另一个理解:把支持图像的特征抽取成一个权重参数,用这个参数来动态调整查询图中的特征贡献,得到一个新的class-specific features</li><li>将class-specific features送入YOLOv2的检测器中进行检测</li><li>输入是一个图形和二进制掩码,掩码只支持一个目标</li></ol><p><strong>训练</strong>:</p><ol><li>基础训练阶段,正常目标检测训练,目的是让模型学会通过参考reweighting向量来检测感兴趣的预取</li><li>微调训练阶段,在基类和新类上训练模型,每个类K个support images, 模拟K-shot</li><li>损失函数中的分类损失,使用softmax之后的类别</li></ol><p><strong>补充</strong><br /><a href="https://mp.weixin.qq.com/s/NW07_x1jx7uSkMm98yUkOg"> Deep Traffic 微信公众号:Meta-RCNN</a></p><hr /><!-- Meta-RCNN --><h3 id="2-meta-r-cnn-towards-general-solver-for-instance-level-low-shot-learning"><a class="markdownIt-Anchor" href="#2-meta-r-cnn-towards-general-solver-for-instance-level-low-shot-learning"></a> 2. Meta R-CNN: Towards General Solver for Instance-Level Low-Shot Learning</h3><p><img src="https://image.yayan.xyz/20231114212512.png" alt="" /></p><p><strong>思想</strong>:</p><ol><li>查询集图片经过特征提取网络和RPN网络（与Faster/Mask R-CNN中相同）得到感兴趣区域的特征图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">z_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</li><li>支持集图像和对应的真实标签图经过预测器重建模网络（Predictor-head Remodeling Network）得到每个类别对应的类别注意力向量（class-attentive vectors），PRN网络的主体部分与Faster/Mask R-CNN的特征提取网络结构相同且权重共享，得到对应特征图后,通过逐元素Sigmoid函数得到对应的注意力向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">v_c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.</li><li>最后将RPN网络输出的感兴趣区域特征图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">z_c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和PRN网络输出的注意力向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">v_c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>通过逐通道相乘的方式进行融合,再利用Faster/Mask R-CNN中预测头得到对应个检测图或分割图.</li></ol><p><strong>符号说明</strong>:</p><table><thead><tr><th>含义</th><th>含义</th><th>含义</th><th>含义</th></tr></thead><tbody><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">C_{base}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td>基类</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi>n</mi><mi>o</mi><mi>v</mi><mi>a</mi><mi>l</mi></mrow></msub></mrow><annotation encoding="application/x-tex">C_{noval}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td>新类</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi>m</mi><mi>e</mi><mi>t</mi><mi>a</mi></mrow></msub></mrow><annotation encoding="application/x-tex">C_{meta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td>基类新类的混合</td><td></td><td></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">D_{train}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td>训练数据</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mrow><mi>m</mi><mi>e</mi><mi>t</mi><mi>a</mi></mrow></msub></mrow><annotation encoding="application/x-tex">D_{meta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td>测试数据</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mo separator="true">⋅</mo><mo separator="true">,</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(·,\theta )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span></td><td>原始预测头</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mo separator="true">⋅</mo><mo separator="true">,</mo><msub><mi>D</mi><mrow><mi>m</mi><mi>e</mi><mi>t</mi><mi>a</mi></mrow></msub><mo separator="true">,</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(·,D_{meta},\theta )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span></td><td>重建后的预测头</td></tr></tbody></table><p><strong>PRN</strong>:</p><p>PRN从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mrow><mi>m</mi><mi>e</mi><mi>t</mi><mi>a</mi></mrow></msub></mrow><annotation encoding="application/x-tex">D_{meta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>中推断类别注意向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="bold">v</mi><mrow><mi>m</mi><mi>e</mi><mi>t</mi><mi>a</mi></mrow></msup><mo>=</mo><mi>f</mi><mrow><mo fence="true">(</mo><msub><mi>D</mi><mrow><mi>m</mi><mi>e</mi><mi>t</mi><mi>a</mi></mrow></msub><mo separator="true">;</mo><mi>ϕ</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\mathbf{v}^{m e t a}=f\left(D_{m e t a} ; \phi\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7935559999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7935559999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">ϕ</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>. 具体而言,PRN输入的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mrow><mi>m</mi><mi>e</mi><mi>t</mi><mi>a</mi></mrow></msub></mrow><annotation encoding="application/x-tex">D_{meta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是一系列物体的图像,共<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi>m</mi><mi>e</mi><mi>t</mi><mi>a</mi></mrow></msub></mrow><annotation encoding="application/x-tex">C_{meta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>个类别,每类<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>个样本,每个物体由RGB图像和前景掩码标记四个通道表示,经过一层卷积之后,送入共享参数的backbone,最后经过通道软注意力生成目标注意力向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">v</mi></mrow><annotation encoding="application/x-tex">\mathbf{v}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span></span></span></span></span>,经过平均池化得到类别注意向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi mathvariant="bold">v</mi><mi>c</mi><mrow><mi>m</mi><mi>e</mi><mi>t</mi><mi>a</mi></mrow></msubsup><mo>=</mo><mfrac><mn>1</mn><mi>K</mi></mfrac><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>K</mi></msubsup><msubsup><mi mathvariant="bold">v</mi><mi>k</mi><mrow><mo stretchy="false">(</mo><mi>c</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">\mathbf{v}_{c}^{m e t a}=\frac{1}{K} \sum_{j=1}^{K} \mathbf{v}_{k}^{(c)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040556em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7935559999999999em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.480618em;vertical-align:-0.43581800000000004em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.398692em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.2197999999999998em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">c</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30130799999999996em;"><span></span></span></span></span></span></span></span></span></span>,将其与 RoI 特征(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mover accent="true"><mi mathvariant="bold">Z</mi><mo>^</mo></mover><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\hat{\mathbf{Z}}_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0995499999999998em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9495499999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">Z</span></span></span></span><span style="top:-3.25511em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)进行通道层级的点乘，将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mo separator="true">⋅</mo><mo separator="true">,</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(·,\theta )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span>转为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mo separator="true">⋅</mo><mo separator="true">,</mo><msub><mi>D</mi><mrow><mi>m</mi><mi>e</mi><mi>t</mi><mi>a</mi></mrow></msub><mo separator="true">,</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(·,D_{meta},\theta )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span></p><p>$ h\left(\hat{\mathbf{z}}<em>{i, j}, D</em>{\text {meta }} ; \boldsymbol{\theta}^{\prime}\right) \= h\left(\hat{\mathbf{z}}<em>{i, j} \otimes \mathbf{v}^{\text {meta }}, \boldsymbol{\theta}\right) \=h\left(\hat{\mathbf{z}}</em>{i, j} \otimes f\left(D_{\text {meta }} ; \boldsymbol{\phi}\right), \boldsymbol{\theta}\right) $</p><p><strong>关键点</strong>:</p><ol><li>Mini-batch construction:<ul><li>一个训练的mini-batch包含 m个类<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi>m</mi><mi>e</mi><mi>t</mi><mi>a</mi></mrow></msub></mrow><annotation encoding="application/x-tex">C_{meta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,K-shot m-class的meta-set <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mrow><mi>m</mi><mi>e</mi><mi>t</mi><mi>a</mi></mrow></msub></mrow><annotation encoding="application/x-tex">D_{meta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> (测试数据), m个类的训练数据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">D_{train}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>. <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">D_{train}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>就是Faster RCNN的输入对象.</li></ul></li><li>Channel-wise soft-attention layer<ul><li>执行空间池化来对齐图像特征,保持相同大小的Roi特征(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mover accent="true"><mi>z</mi><mo>^</mo></mover><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\hat{z}_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>),特征经过逐元素的 sigmoid 以产生注意力向量</li></ul></li><li>Meta-loss<ul><li>不同类对象的注意向量应该导致对Roi特征的不同选择,为此提出一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>e</mi><mi>t</mi><mi>a</mi><mo>−</mo><mi>l</mi><mi>o</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">Meta-loss</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">s</span></span></span></span>,使元学习中推断的对象注意力向量多样化。通过交叉熵损失实现的，鼓励对象注意力向量落在每个对象所属的类中</li></ul></li><li>Roi meta-learning<ul><li>训练分为两部分,1. meta-train:只使用基类对象构建 2.meta-test:使用基类和新类对象构建</li></ul></li><li>inference<ul><li>训练时的object attentive vectors将替换class-attentive vectors,用于在Roi特征上作用sotf-attention</li><li>在测试时,PRN接受K-shot来生成class-attentive vectors,然后用于Roi特征上的soft-attention.但是测试时,class-attentive vectors可以提取预处理,然后用于Roi特征上的soft-attention.</li></ul></li></ol><p><strong>补充</strong><br /><a href="https://mp.weixin.qq.com/s/Jp378IF7tTUoz06wjPdmRA"> Deep Traffic 微信公众号:Meta-RCNN</a></p><hr /><!-- Attention-RPN --><h3 id="3-few-shot-object-detection-with-attention-rpn-and-multi-relation-detector"><a class="markdownIt-Anchor" href="#3-few-shot-object-detection-with-attention-rpn-and-multi-relation-detector"></a> 3. Few-Shot Object Detection with Attention-RPN and Multi-Relation Detector</h3><p><img src="https://image.yayan.xyz/20231124163026.png" alt="" /></p><p><strong>思想</strong>:</p><ol><li>Attention-RPN:通过注意力机制向 RPN 引入支持信息来指导 RPN 产生相关的候选框,抑制其他类别的候选框.将support feature变成<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>×</mo><mi>S</mi><mo>×</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">S×S×C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>的向量(作者发现s=1效果最好,就是1×1的卷积核),然后在query feature上进行卷积,建立注意力map(这种卷积其本质是按通道的点积，可以视为求余弦相似度的过程),然后将这个注意力map经过一个卷积送到RPN中.</li><li>Multi-Relation Detector:测量来自查询和支持对象的提议框之间的相似性,分类三个(全局关联，局部关联，以及patch关联);最终得到的是支持对象和候选框直接的匹配得分(matching score).</li><li>对比实验,提出相同类别的对象重要,不同类别的对象更重要.构建了一个三元组(查询对象类比,支持对象类别,支持对象其他类别),来增强模型对前景和背景的区分能力.</li></ol><p><strong>解决</strong>:</p><ol><li>RPN对novel class的提议不好</li><li>现有的模型都需要fine-tune</li></ol><h3 id="4-meta-detr-image-level-few-shot-object-detection-with-inter-class-correlation-exploitation"><a class="markdownIt-Anchor" href="#4-meta-detr-image-level-few-shot-object-detection-with-inter-class-correlation-exploitation"></a> 4. Meta-DETR: Image-Level Few-Shot Object Detection with Inter-Class Correlation Exploitation</h3><p><img src="https://image.yayan.xyz/20231114212457.png" alt="" /></p><p><strong>问题</strong>:</p><ol><li>低质量的新类区域建议</li><li>忽略了不同类的类间相关性</li></ol><p><strong>思想</strong>:</p><p><strong>补充</strong><br /><a href="https://mp.weixin.qq.com/s/Iuqf4TtVeKF1zLtk1VuoXQ"> Deep Traffic 微信公众号:Meta-RCNN</a></p><hr /><h3 id="5-frustratingly-simple-few-shot-object-detection"><a class="markdownIt-Anchor" href="#5-frustratingly-simple-few-shot-object-detection"></a> 5. Frustratingly Simple Few-Shot Object Detection</h3><p><img src="https://image.yayan.xyz/20231112160553.png" alt="" /></p><p><strong>微调方法</strong>:</p><ol><li>使用Faster RCNN作为检测器,第一阶段正常训练</li><li>在新类上微调时,只微调分类器,前面的固定,并且分类器改为cosine similarity classifier<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><mfrac><mrow><mi>α</mi><mi mathvariant="script">F</mi><mo stretchy="false">(</mo><mi>x</mi><msubsup><mo stretchy="false">)</mo><mi>i</mi><mi mathvariant="normal">⊤</mi></msubsup><msub><mi>w</mi><mi>j</mi></msub></mrow><mrow><mrow><mo fence="true">∥</mo><mi mathvariant="script">F</mi><mo stretchy="false">(</mo><mi>x</mi><msub><mo stretchy="false">)</mo><mi>i</mi></msub><mo fence="true">∥</mo></mrow><mrow><mo fence="true">∥</mo><msub><mi>w</mi><mi>j</mi></msub><mo fence="true">∥</mo></mrow></mrow></mfrac></mrow><annotation encoding="application/x-tex">s_{i, j}=\frac{\alpha \mathcal{F}(x)_{i}^{\top} w_{j}}{\left\|\mathcal{F}(x)_{i}\right\|\left\|w_{j}\right\|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7014399999999996em;vertical-align:-0.5423199999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1591199999999997em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="minner mtight"><span class="mopen mtight delimcenter" style="top:0em;"><span class="mtight">∥</span></span><span class="mord mtight"><span class="mord mathcal mtight" style="margin-right:0.09931em;">F</span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight delimcenter" style="top:0em;"><span class="mtight">∥</span></span></span><span class="minner mtight"><span class="mopen mtight delimcenter" style="top:0em;"><span class="mtight">∥</span></span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.02691em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span><span class="mclose mtight delimcenter" style="top:0em;"><span class="mtight">∥</span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5102em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span><span class="mord mtight"><span class="mord mathcal mtight" style="margin-right:0.09931em;">F</span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9270285714285713em;"><span style="top:-2.214em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">⊤</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.02691em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>代表了第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>个区域建议框和第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>个类别的相似度</li></ol><hr /><h3 id="6-meta-learning-to-detect-rare-objectsmeta-det"><a class="markdownIt-Anchor" href="#6-meta-learning-to-detect-rare-objectsmeta-det"></a> 6. Meta-Learning to Detect Rare Objects(Meta-Det)</h3><p><img src="https://image.yayan.xyz/20231124170553.png" alt="" /></p><p><strong>思想</strong>:</p><ol><li>和5.Frustratingly Simple Few-Shot Object Detection 有共同的发现<ul><li>根据CNN的研究,模型分为两部分,1)类别无关(CNN底层)　2)类别相关(CNN顶层)</li><li>类别无关的部分可以直接迁移到新类上(参数共享),类别相关的部分使用一个元参数预测类别相关部分的模型</li></ul></li><li>Weight Prediction Meta-Model<ul><li>从大批量数据中学习到的参数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>w</mi><mrow><mi>d</mi><mi>e</mi><mi>t</mi></mrow><mrow><mi>c</mi><mo separator="true">,</mo><mo>∗</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">w_{det}^{c,*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1079119999999998em;vertical-align:-0.3013079999999999em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.806604em;"><span style="top:-2.3986920000000005em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mpunct mtight">,</span><span class="mord mtight">∗</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3013079999999999em;"><span></span></span></span></span></span></span></span></span></span>,从k-shot样本中学习到的参数是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>w</mi><mrow><mi>d</mi><mi>e</mi><mi>t</mi></mrow><mi>c</mi></msubsup></mrow><annotation encoding="application/x-tex">w_{det}^{c}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9474999999999999em;vertical-align:-0.2831079999999999em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4168920000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831079999999999em;"><span></span></span></span></span></span></span></span></span></span>,mete-model T的任务是:</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>w</mi><mrow><mi>d</mi><mi>e</mi><mi>t</mi></mrow><mrow><mi>c</mi><mo separator="true">,</mo><mo>∗</mo></mrow></msubsup><mo>=</mo><mi>T</mi><mrow><mo fence="true">(</mo><msubsup><mi>w</mi><mrow><mi>d</mi><mi>e</mi><mi>t</mi></mrow><mi>c</mi></msubsup><mo separator="true">,</mo><msub><mi>θ</mi><mi>T</mi></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">w_{det}^{c,*}=T\left(w_{det}^{c}, \theta_{T}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1079119999999998em;vertical-align:-0.3013079999999999em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.806604em;"><span style="top:-2.3986920000000005em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mpunct mtight">,</span><span class="mord mtight">∗</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3013079999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.033108em;vertical-align:-0.2831079999999999em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4168920000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831079999999999em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>,使用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">L2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">L</span><span class="mord">2</span></span></span></span>损失函数</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;few-shot-object-detection&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#few-shot-object-detection&quot;&gt;&lt;/a&gt; Few-shot Object Detection&lt;/h1&gt;
&lt;h2 id</summary>
      
    
    
    
    <category term="论文记录" scheme="https://gladdduck.github.io/categories/%E8%AE%BA%E6%96%87%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Few-shot Object Detection" scheme="https://gladdduck.github.io/tags/Few-shot-Object-Detection/"/>
    
  </entry>
  
  <entry>
    <title>C#学习中的小知识点</title>
    <link href="https://gladdduck.github.io/2023/11/24/C#%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://gladdduck.github.io/2023/11/24/C#%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2023-11-24T12:54:49.890Z</published>
    <updated>2023-11-24T09:14:47.621Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符串前面的字符"><a class="markdownIt-Anchor" href="#字符串前面的字符"></a> 字符串前面的字符</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正常字符串  类似python中的&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">string</span> one = <span class="string">&quot;\\&quot;</span>;</span><br><span class="line"><span class="comment">//模板字符串 类似python中的f&#x27;&#x27;或者&#x27;&#x27;.format() 可以加入变量</span></span><br><span class="line"><span class="built_in">string</span> two = <span class="string">$&quot;\\&quot;</span>;</span><br><span class="line"><span class="comment">//逐字字符串 类似python中的r&#x27;&#x27;  每个字符是本身的意思,不转义</span></span><br><span class="line"><span class="built_in">string</span> three = <span class="string">@&quot;\&quot;</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;字符串前面的字符&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#字符串前面的字符&quot;&gt;&lt;/a&gt; 字符串前面的字符&lt;/h3&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="快捷命令" scheme="https://gladdduck.github.io/categories/%E5%BF%AB%E6%8D%B7%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="CSharp" scheme="https://gladdduck.github.io/tags/CSharp/"/>
    
  </entry>
  
  <entry>
    <title>C#使用PaddleOCRSharp</title>
    <link href="https://gladdduck.github.io/2023/11/24/C#%E4%BD%BF%E7%94%A8PaddleOCRSharp/"/>
    <id>https://gladdduck.github.io/2023/11/24/C#%E4%BD%BF%E7%94%A8PaddleOCRSharp/</id>
    <published>2023-11-24T12:54:49.886Z</published>
    <updated>2023-11-24T09:14:47.710Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-nuget安装"><a class="markdownIt-Anchor" href="#1-nuget安装"></a> 1. Nuget安装</h3><h3 id="2本地编译"><a class="markdownIt-Anchor" href="#2本地编译"></a> 2.本地编译</h3><h4 id="编译"><a class="markdownIt-Anchor" href="#编译"></a> 编译</h4><ol><li><p><a href="https://gitee.com/raoyutian/paddle-ocrsharp">gitee</a>上拉下来源码,github的版本比较老</p></li><li><p>VS2022打开项目,双击项目名称打开.csproj文件.在<code>TargetFrameworks</code>中修改需要的版本,例如:</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TargetFrameworks</span>&gt;</span></span><br><span class="line">  net35;</span><br><span class="line">  net40;</span><br><span class="line">  net45;</span><br><span class="line">  net451;</span><br><span class="line">  net452;</span><br><span class="line">  net46;</span><br><span class="line">  net461;</span><br><span class="line">  net462;</span><br><span class="line">  net47;</span><br><span class="line">  net471;</span><br><span class="line">  net472;</span><br><span class="line">  net48;</span><br><span class="line">  net481;</span><br><span class="line">  netstandard2.0;netcoreapp3.1;</span><br><span class="line">  net5.0;net6.0;net7.0;net8.0</span><br><span class="line"><span class="tag">&lt;/<span class="name">TargetFrameworks</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>如果是<code>.Net8.0</code>,会报错<code>不存在ImageToBytes</code>, 因为在<code>EngineBase.cs</code>中有<code>if !NET8_0_OR_GREATER</code>,<code>ImageToBytes</code>只针对<code>.Net8.0</code>以下版本,所以在<code>#endif</code>后面加上:</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> NET8_0_OR_GREATER</span></span><br><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">protected</span> <span class="built_in">byte</span>[] <span class="title">ImageToBytes</span>(<span class="params">Image image</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">    &#123;</span><br><span class="line">        image.Save(ms, image.RawFormat); <span class="comment">// 保存图片到内存流</span></span><br><span class="line">        <span class="keyword">return</span> ms.ToArray(); <span class="comment">// 返回字节数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol start="4"><li>清理项目,重新生成,就可以在<code>bin</code>文件夹下找到对应版本的dll文件了</li></ol><h4 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h4><ol><li><p>新建项目,在依赖项中,右键添加项目引用,找到生成的dll文件,添加引用<br /><img src="https://image.yayan.xyz/20231122160927.png" alt="" /></p></li><li><p>测试代码可以用下面的</p></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">OpenFileDialog ofd = <span class="keyword">new</span> OpenFileDialog();</span><br><span class="line"></span><br><span class="line">ofd.Filter = <span class="string">&quot;*.*|*.bmp;*.jpg;*.jpeg;*.tiff;*.tiff;*.png&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ofd.ShowDialog() != DialogResult.OK) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> imagebyte = File.ReadAllBytes(ofd.FileName);</span><br><span class="line"></span><br><span class="line">Bitmap bitmap = <span class="keyword">new</span> Bitmap(<span class="keyword">new</span> MemoryStream(imagebyte));</span><br><span class="line"></span><br><span class="line">OCRModelConfig config = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">OCRParameter oCRParameter = <span class="keyword">new</span> OCRParameter();</span><br><span class="line"></span><br><span class="line">OCRResult ocrResult = <span class="keyword">new</span> OCRResult();</span><br><span class="line"></span><br><span class="line"><span class="comment">//建议程序全局初始化一次即可，不必每次识别都初始化，容易报错。    </span></span><br><span class="line"></span><br><span class="line">PaddleOCREngine engine = <span class="keyword">new</span> PaddleOCREngine(config, oCRParameter);</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    ocrResult = engine.DetectText(bitmap);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ocrResult != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    label1.Text = ocrResult.Text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><p>如果不出意外的话,应该会报错,一个错误是<code>无法加载文件或程序集System.Drawing.Common, Version=0.0.0.0, culture=....</code>这个是因为没有安装<code>System.Drawing.Common</code>这个包,在这个项目中用Nuget安装就可以了</p></li><li><p>另一个错误是<code>找不到xxxxx.dll</code>或<code>什么dll文件不存在</code>或<code>ch-xxxxxxx找不到,不存在</code>.解决方法:</p><ul><li>第一种,先显示全部文件,在bin/debug/对应的版本文件夹下,把PaddleOCRSharp项目中的<code>PaddleOCRLib</code>文件下的内容全部复制到这个文件夹下<br /><img src="https://image.yayan.xyz/20231122161507.png" alt="" /></li><li>第二种,把<code>PaddleOCRLib</code>文件夹下的所有文件复制到解决方案同目录,然后把每一个文件的属性都设置位<code>始终复制</code>或者<code>如果较新则复制</code>,但是这样文件结构就复杂了</li><li>第三种,把<code>PaddleOCRLib</code>文件夹复制过来,</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-nuget安装&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-nuget安装&quot;&gt;&lt;/a&gt; 1. Nuget安装&lt;/h3&gt;
&lt;h3 id=&quot;2本地编译&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#2本</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="PaddleOCR" scheme="https://gladdduck.github.io/tags/PaddleOCR/"/>
    
    <category term="CSharp" scheme="https://gladdduck.github.io/tags/CSharp/"/>
    
  </entry>
  
  <entry>
    <title>VS2022快捷键</title>
    <link href="https://gladdduck.github.io/2023/11/24/VS2022%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://gladdduck.github.io/2023/11/24/VS2022%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2023-11-24T12:54:49.882Z</published>
    <updated>2023-11-24T09:14:47.861Z</updated>
    
    <content type="html"><![CDATA[<h4 id="复制一行"><a class="markdownIt-Anchor" href="#复制一行"></a> 复制一行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+D</span><br></pre></td></tr></table></figure><h4 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 注释:Ctrl+K 接上 Ctrl+C</span><br><span class="line">2. 取消注释:Ctrl+K 接上 Ctrl+U</span><br></pre></td></tr></table></figure><h4 id="代码折叠"><a class="markdownIt-Anchor" href="#代码折叠"></a> 代码折叠</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 折叠光标所在部分:Ctrl+M 接上 Ctrl+M</span><br><span class="line">2. 折叠全部函数:Ctrl+M 接上 Ctrl+O</span><br><span class="line">(打开同理)</span><br></pre></td></tr></table></figure><h4 id="代码格式化"><a class="markdownIt-Anchor" href="#代码格式化"></a> 代码格式化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+K 接上 Ctrl+D</span><br></pre></td></tr></table></figure><h4 id="f开头的快捷键"><a class="markdownIt-Anchor" href="#f开头的快捷键"></a> F开头的快捷键</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. F5:开始调试</span><br><span class="line">2. F7:页面跳转代码</span><br><span class="line">3. F9:设置断点</span><br><span class="line">4. F10:单步执行</span><br><span class="line">5. F11:单步进入</span><br><span class="line">6. F12:转到定义</span><br><span class="line">7. Shift+F12:查找变量所有引用</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;复制一行&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#复制一行&quot;&gt;&lt;/a&gt; 复制一行&lt;/h4&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp</summary>
      
    
    
    
    <category term="快捷命令" scheme="https://gladdduck.github.io/categories/%E5%BF%AB%E6%8D%B7%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="VS2022" scheme="https://gladdduck.github.io/tags/VS2022/"/>
    
  </entry>
  
  <entry>
    <title>VSCode登录Github账号同步</title>
    <link href="https://gladdduck.github.io/2023/11/20/VSCode%E7%99%BB%E5%BD%95Github/"/>
    <id>https://gladdduck.github.io/2023/11/20/VSCode%E7%99%BB%E5%BD%95Github/</id>
    <published>2023-11-20T04:44:58.504Z</published>
    <updated>2023-11-20T04:52:43.741Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h3><p><img src="https://image.yayan.xyz/20231120124637.png" alt="" /></p><ol><li>多个设备使用vscode,每次都要配置(快捷键,插件这些),很麻烦</li><li>登录GitHub账号(Microsoft账号也可以),提示:<strong>vscode 登录github 尚未完成授权此扩展使用 GitHub 的操作。是否要尝试其他方式? (本地服务器)</strong><br /><img src="https://image.yayan.xyz/20231120125224.png" alt="" /></li></ol><h3 id="方法"><a class="markdownIt-Anchor" href="#方法"></a> 方法</h3><ol><li>原因是本地电脑连不上github,需要一个全局代理(没有)</li><li>方法:在<code>C:\Windows\System32\drivers\etc</code>下找到<code>hosts</code>文件,添加</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">140.82.112.4 github.com</span><br><span class="line">185.199.108.153 vscode-auth.github.com</span><br><span class="line">185.199.109.153 vscode-auth.github.com</span><br><span class="line">185.199.110.153 vscode-auth.github.com</span><br><span class="line">185.199.111.153 vscode-auth.github.com</span><br></pre></td></tr></table></figure><ol start="3"><li>可以先把host文件复制到桌面,修改桌面的host,然后替换,这样就不存在权限问题了</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#问题&quot;&gt;&lt;/a&gt; 问题&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://image.yayan.xyz/20231120124637.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;</summary>
      
    
    
    
    <category term="杂七杂八配置" scheme="https://gladdduck.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="VSCode Github" scheme="https://gladdduck.github.io/tags/VSCode-Github/"/>
    
  </entry>
  
  <entry>
    <title>Bing Chat国内使用</title>
    <link href="https://gladdduck.github.io/2023/11/20/Bing%20Chat%E4%BD%BF%E7%94%A8/"/>
    <id>https://gladdduck.github.io/2023/11/20/Bing%20Chat%E4%BD%BF%E7%94%A8/</id>
    <published>2023-11-20T01:35:57.276Z</published>
    <updated>2023-11-20T04:56:22.495Z</updated>
    
    <content type="html"><![CDATA[<h4 id="好处"><a class="markdownIt-Anchor" href="#好处"></a> 好处</h4><ol><li>不需要申请,网络Ok都可以用</li><li>DALL·E 3 免费用</li><li>据说是ChatGPT 4.0,多模态,可以上传图片</li><li>后续可以增加插件</li></ol><h4 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h4><ol><li><a href="http://xn--bing-9z2h93o.com">打开bing.com</a>(<a href="http://xn--cn-gy2ck96a40cbvlg4f2xhp4ah8hnx0dhs4d.bing.com">这个地方如果打开的是cn.bing.com</a>,就不会出现Chat窗口),不需要登录</li><li>调整国家和地区,随便国家<br /><img src="http://image.yayan.xyz/20231120095230.png" alt="" /></li><li>左边标签页就有Chat了</li></ol><p><img src="http://image.yayan.xyz/20231120095459.png" alt="" /></p><h4 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h4><ol><li>每天好像只有30次查询机会,不登录只有5次(在Chrome上只有5次,在Edge上是30次)</li><li><a href="http://xn--bing-955fz0yuvfxjp15f1tdh76cvehk8f.com/create%E4%B8%8A%E7%94%9F%E6%88%90,%E9%9C%80%E8%A6%81%E7%99%BB%E5%BD%95">图片生成可以直接在bing.com/create上生成,需要登录</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;好处&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#好处&quot;&gt;&lt;/a&gt; 好处&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;不需要申请,网络Ok都可以用&lt;/li&gt;
&lt;li&gt;DALL·E 3 免费用&lt;/li&gt;
&lt;li&gt;据说是ChatGPT 4.0,多模态,可</summary>
      
    
    
    
    <category term="杂七杂八配置" scheme="https://gladdduck.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Bing Chat" scheme="https://gladdduck.github.io/tags/Bing-Chat/"/>
    
  </entry>
  
  <entry>
    <title>细小知识</title>
    <link href="https://gladdduck.github.io/2023/11/19/%E6%9D%82%E8%AE%B0%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://gladdduck.github.io/2023/11/19/%E6%9D%82%E8%AE%B0%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2023-11-19T07:27:51.051Z</published>
    <updated>2023-11-19T07:28:41.513Z</updated>
    
    <content type="html"><![CDATA[<h4 id="cookie和token的区别是什么"><a class="markdownIt-Anchor" href="#cookie和token的区别是什么"></a> cookie和token的区别是什么</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;cookie和token的区别是什么&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#cookie和token的区别是什么&quot;&gt;&lt;/a&gt; cookie和token的区别是什么&lt;/h4&gt;
</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="知识点 杂谈" scheme="https://gladdduck.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9-%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Zero-shot Detection论文总结</title>
    <link href="https://gladdduck.github.io/2023/11/14/Zero-shotDetection%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/"/>
    <id>https://gladdduck.github.io/2023/11/14/Zero-shotDetection%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/</id>
    <published>2023-11-14T12:57:15.167Z</published>
    <updated>2023-11-14T12:59:53.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zero-shot-object-detection"><a class="markdownIt-Anchor" href="#zero-shot-object-detection"></a> Zero-shot Object Detection</h1><p>缺点: 需要结合文本信息,没办法完全根据图片进行检测</p><h2 id="综述"><a class="markdownIt-Anchor" href="#综述"></a> 综述</h2><p><strong>A Survey of Vision-Language Pre-Trained Models</strong><br />视觉语言多模态综述<br />介绍了视觉语言多模态的1. 特征表示 2. 模态交互 3. 预训练任务 4. 下游任务 5. 方向<br />2022年之前的VL预训练模型和常用数据集</p><h2 id="网页"><a class="markdownIt-Anchor" href="#网页"></a> 网页</h2><p><strong><a href="https://www.width.ai/post/how-zero-shot-object-detection-changes-computer-vision-tasks-in-business">Zero-Shot Object Detection介绍</a></strong></p><p>介绍了Zero-Shot Object Detection的基本概念，以及如何使用Region-CLIP进行Zero-Shot Object Detection</p><p><strong><a href="https://www.pinecone.io/learn/series/image-search/zero-shot-object-detection-clip/">Zero-Shot Object Detection案例</a></strong></p><p>一个样例代码,使用CLIP进行检测</p><h2 id="论文"><a class="markdownIt-Anchor" href="#论文"></a> 论文</h2><h3 id="zero-shot-detection"><a class="markdownIt-Anchor" href="#zero-shot-detection"></a> Zero-Shot Detection</h3><p><img src="https://image.yayan.xyz/20231023204527.png" alt="" /><br /><img src="https://image.yayan.xyz/20231031170459.png" alt="" /></p><ol><li>利用BackBone抽出来图像的特征<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>F</mi></msub></mrow><annotation encoding="application/x-tex">T_F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>F</mi></msub></mrow><annotation encoding="application/x-tex">T_F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>上进行检测,得到目标的位置信息<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>L</mi></msub></mrow><annotation encoding="application/x-tex">T_L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>F</mi></msub></mrow><annotation encoding="application/x-tex">T_F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>上进行语义预测,得到目标的文本信息<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>S</mi></msub></mrow><annotation encoding="application/x-tex">T_S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>把<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>F</mi></msub><mo separator="true">,</mo><msub><mi>T</mi><mi>L</mi></msub><mo separator="true">,</mo><msub><mi>T</mi><mi>S</mi></msub></mrow><annotation encoding="application/x-tex">T_F,T_L,T_S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>拼接起来,进行置信度的预测,得到了最终的预测结果(x,y,w,h,cls)</li><li>损失函数由1)位置损失 2)语义损失 3)置信度损失组成</li><li>在验证过程中分为Test-Seen,Test-Unseen,Test-Mix三种情况</li></ol><p>解决问题:</p><ol><li>RPN可能无法提议出那么多没见过的物体</li><li>基于YOLOv2,性能强大</li><li>简单容易理解</li></ol><h3 id="zero-shot-object-detection-2"><a class="markdownIt-Anchor" href="#zero-shot-object-detection-2"></a> Zero-Shot Object Detection</h3><p>方法:</p><ol><li>两阶段检测器结构,对区域建议框内的物体抽取出图像特征</li><li>通过映射将图像特征映射到文本特征空间(通过wordEmbedding得到)</li><li>在公共空间计算图像特征和文本特征的相似度,得到未见物体的类别</li></ol><p>解决问题:</p><ol><li>将未见物体分为背景的解决<ul><li>使用固定的背景类:在嵌入空间中为背景添加一个固定的向量</li><li>将多个潜在的类分配给背景对象,不断的将背景框标记为对象反复训练</li></ul></li><li>密集采样嵌入空间:数据集中可见类太少了导致公共空间稀疏,未见类的语义和视觉之间无法对齐<ul><li>使用除了未见类之外的额外数据补充训练</li></ul></li></ol><h3 id="region-clip"><a class="markdownIt-Anchor" href="#region-clip"></a> Region-CLIP</h3><ol><li>利用RPN从图像中提取出region,抽取出特征</li><li>利用现有文本解析器,从文本中提取出concept,抽取出特征</li><li>利用CLIP计算region和concept的相似度,得到region-text的配对</li><li>利用三个损失函数训练模型</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;zero-shot-object-detection&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#zero-shot-object-detection&quot;&gt;&lt;/a&gt; Zero-shot Object Detection&lt;/h1&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="论文记录" scheme="https://gladdduck.github.io/categories/%E8%AE%BA%E6%96%87%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Zero-shot Detection" scheme="https://gladdduck.github.io/tags/Zero-shot-Detection/"/>
    
  </entry>
  
  <entry>
    <title>Blazor中的Localization</title>
    <link href="https://gladdduck.github.io/2023/10/09/Blazor%E4%B8%AD%E7%9A%84Localization/"/>
    <id>https://gladdduck.github.io/2023/10/09/Blazor%E4%B8%AD%E7%9A%84Localization/</id>
    <published>2023-10-09T11:38:30.993Z</published>
    <updated>2023-10-09T12:46:09.530Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://code-maze.com/localization-in-blazor-webassembly-applications/">参考连接</a></p><h3 id="1根据浏览器语言显示语言"><a class="markdownIt-Anchor" href="#1根据浏览器语言显示语言"></a> 1.根据浏览器语言显示语言</h3><ol><li><p>项目中新建Resources文件夹</p></li><li><p>新建Text.resx文件(这个不用加语言的后缀,会报错<code>自定义工具 PublicResXFileCodeGenerator 未能对输入文件产生输出</code>)</p></li><li><p>新建其他语言的Text文件,比如Text.zh.resx</p></li><li><p>resx文件中访问修饰符需要设置<code>public</code>,每个文件中的名称需要相同,值是各个语言<br /><img src="https://image.yayan.xyz/20231009202818.png" alt="" /></p></li><li><p>完成之后,类似下图<br /><img src="https://image.yayan.xyz/20231009202906.png" alt="" /></p></li><li><p>在<code>Program.cs</code>中添加<code>builder.Services.AddLocalization();</code></p></li><li><p>在<code>_Imports.razor</code>中添加</p><ul><li><code>@using Microsoft.Extensions.Localization</code></li><li><code>@using 项目名.文件夹名称</code>,例如:<code>@using BlazorWasmLocalization.Shared.ResourceFiles</code></li></ul></li><li><p>在页面中添加代码,其中Text就是resx文件的名称</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@page &quot;/&quot;</span><br><span class="line">@inject IStringLocalizer&lt;Text&gt; localizer</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;@localizer[&quot;resx文件中的一个名称&quot;]&lt;/h1&gt;</span><br><span class="line">@localizer[&quot;resx文件中的一个名称&quot;]</span><br></pre></td></tr></table></figure><h3 id="2根据用户选择的语言显示语言"><a class="markdownIt-Anchor" href="#2根据用户选择的语言显示语言"></a> 2.根据用户选择的语言显示语言</h3><ol><li>可以新建一个组件也可以直接在页面中添加</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 下拉选框 --&gt;</span><br><span class="line">&lt;strong&gt;Culture:&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">&lt;select class=&quot;form-control&quot; @bind=&quot;Culture&quot; style=&quot;width:300px; margin-left:10px;&quot;&gt;</span><br><span class="line">    @foreach (var culture in cultures)</span><br><span class="line">    &#123;</span><br><span class="line">        &lt;option value=&quot;@culture&quot;&gt;@culture.DisplayName&lt;/option&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 组件代码 --&gt;</span><br><span class="line">public partial class CultureSelector</span><br><span class="line">&#123;</span><br><span class="line">    [Inject]</span><br><span class="line">    public NavigationManager NavManager &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    [Inject]</span><br><span class="line">    public IJSRuntime JSRuntime &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 语言列表,和resx文件对应 --&gt;</span><br><span class="line">    CultureInfo[] cultures = new[]</span><br><span class="line">    &#123;</span><br><span class="line">        new CultureInfo(&quot;en-US&quot;),</span><br><span class="line">        new CultureInfo(&quot;zh-CN&quot;)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    CultureInfo Culture</span><br><span class="line">    &#123;</span><br><span class="line">        get =&gt; CultureInfo.CurrentCulture;</span><br><span class="line">        set</span><br><span class="line">        &#123;</span><br><span class="line">            if (CultureInfo.CurrentCulture != value)</span><br><span class="line">            &#123;</span><br><span class="line">                var js = (IJSInProcessRuntime)JSRuntime;</span><br><span class="line">                js.InvokeVoid(&quot;blazorCulture.set&quot;, value.Name);</span><br><span class="line">                &lt;!-- 每次选择之后会刷新一下页面 --&gt;</span><br><span class="line">                NavManager.NavigateTo(NavManager.Uri, forceLoad: true);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在项目下新建一个<code>Extensions</code>文件夹,新建一个<code>WebAssemblyHostExtension.cs</code>文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static class WebAssemblyHostExtension</span><br><span class="line">&#123;</span><br><span class="line">    public async static Task SetDefaultCulture(this WebAssemblyHost host)</span><br><span class="line">    &#123;</span><br><span class="line">        var jsInterop = host.Services.GetRequiredService&lt;IJSRuntime&gt;();</span><br><span class="line">        var result = await jsInterop.InvokeAsync&lt;string&gt;(&quot;blazorCulture.get&quot;);</span><br><span class="line"></span><br><span class="line">        CultureInfo culture;</span><br><span class="line"></span><br><span class="line">        if (result != null)</span><br><span class="line">            culture = new CultureInfo(result);</span><br><span class="line">        else</span><br><span class="line">            culture = new CultureInfo(&quot;zh-CN&quot;);</span><br><span class="line"></span><br><span class="line">        CultureInfo.DefaultThreadCurrentCulture = culture;</span><br><span class="line">        CultureInfo.DefaultThreadCurrentUICulture = culture;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>Program.cs</code>中添加</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var host = builder.Build();</span><br><span class="line">await host.SetDefaultCulture();</span><br><span class="line">await host.RunAsync();</span><br></pre></td></tr></table></figure><ol start="4"><li>在<code>wwwroot/index.html</code>中添加</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       blazorCulture = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">get</span>: <span class="function">() =&gt;</span> <span class="variable language_">localStorage</span>[<span class="string">&#x27;BlazorCulture&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">set</span>: <span class="function">(<span class="params">value</span>) =&gt;</span> <span class="variable language_">localStorage</span>[<span class="string">&#x27;BlazorCulture&#x27;</span>] = value</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>在csproj文件中添加</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">BlazorWebAssemblyLoadAllGlobalizationData</span>&gt;</span>true<span class="tag">&lt;/<span class="name">BlazorWebAssemblyLoadAllGlobalizationData</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>运行即可</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://code-maze.com/localization-in-blazor-webassembly-applications/&quot;&gt;参考连接&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1根据浏览器语言显示语言&quot;&gt;&lt;a class=&quot;markdownIt-</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Blazor Localization" scheme="https://gladdduck.github.io/tags/Blazor-Localization/"/>
    
  </entry>
  
  <entry>
    <title>Blazor学习笔记</title>
    <link href="https://gladdduck.github.io/2023/09/16/C#-Blazor%E7%AC%94%E8%AE%B0/"/>
    <id>https://gladdduck.github.io/2023/09/16/C#-Blazor%E7%AC%94%E8%AE%B0/</id>
    <published>2023-09-16T05:56:55.560Z</published>
    <updated>2023-09-19T02:17:20.040Z</updated>
    
    <content type="html"><![CDATA[<p>😍😍😍</p><h2 id="blazor"><a class="markdownIt-Anchor" href="#blazor"></a> Blazor</h2><p>用C#代替JavaScript创建丰富的UI</p><h2 id="页面组件"><a class="markdownIt-Anchor" href="#页面组件"></a> 页面组件</h2><h3 id="组件"><a class="markdownIt-Anchor" href="#组件"></a> 组件</h3><blockquote><ol><li>以razor结尾,文件名首字母大写,HTML和C#代码的组合.</li><li>类似vue,在组件中可以使用@来引用变量</li></ol></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;font-style:@_headingFontStyle&quot;</span>&gt;@_headingText&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _headingFontStyle = <span class="string">&quot;italic&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _headingText = <span class="string">&quot;你好,世界!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="组件参数"><a class="markdownIt-Anchor" href="#组件参数"></a> 组件参数</h3><blockquote><ol><li>定义一个带有[Parameter]的公共属性,在父类使用这个组件时,可以传参</li></ol></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件:Child</span></span><br><span class="line">&lt;h1&gt;@Title&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;Child Title=<span class="string">&quot;传递参数&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="组件多参数"><a class="markdownIt-Anchor" href="#组件多参数"></a> 组件多参数</h3><blockquote><ol><li>当子组件可携带多个参数时,不用每个参数都进行定义.</li><li>使用@attributes语法关联字段进行绑定</li></ol></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种方式,单独传参</span></span><br><span class="line">&lt;input title=<span class="string">&quot;@Title&quot;</span> <span class="keyword">value</span>=<span class="string">&quot;@Value&quot;</span>  /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式,attribute字典传参</span></span><br><span class="line">&lt;input @attributes=<span class="string">&quot;ButtonAttributes&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Value &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;10&quot;</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; ButtonAttributes &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;()</span><br><span class="line">&#123;</span><br><span class="line">        &#123; <span class="string">&quot;title&quot;</span>,<span class="string">&quot;Hello&quot;</span> &#125; ,</span><br><span class="line">        &#123; <span class="string">&quot;value&quot;</span>,<span class="string">&quot;10&quot;</span> &#125; ,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="组件生命周期"><a class="markdownIt-Anchor" href="#组件生命周期"></a> 组件生命周期</h2><hr /><h2 id="组件模板"><a class="markdownIt-Anchor" href="#组件模板"></a> 组件模板</h2><blockquote><ol><li>父组件在使用子组件时，可以向子组件中插入代码片段.类似vue中的插槽?</li></ol></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 子组件，构建一个RenderFragment模板</span></span><br><span class="line">@typeparam IData</span><br><span class="line">&lt;table&gt;</span><br><span class="line"></span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        @HeaderTemplate</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        @foreach (<span class="keyword">var</span> item <span class="keyword">in</span> Data)</span><br><span class="line">        &#123;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line"></span><br><span class="line">                &lt;td&gt;@RowTemplate(item)&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line"></span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> RenderFragment HeaderTemplate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> RenderFragment&lt;IData&gt; RowTemplate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> IReadOnlyList&lt;IData&gt; Data &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父组件使用时传递html标签</span></span><br><span class="line">&lt;TableTemplate Data=<span class="string">&quot;students&quot;</span>&gt;</span><br><span class="line">    &lt;HeaderTemplate&gt;</span><br><span class="line">        &lt;th&gt;Id&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;Name&lt;/th&gt;</span><br><span class="line">    &lt;/HeaderTemplate&gt;</span><br><span class="line"></span><br><span class="line">    &lt;RowTemplate&gt;</span><br><span class="line">        &lt;td&gt;@context.Id&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;@context.Name&lt;/td&gt;</span><br><span class="line">    &lt;/RowTemplate&gt;</span><br><span class="line">&lt;/TableTemplate&gt;</span><br><span class="line">@code&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Task <span class="title">OnInitializedAsync</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        students = <span class="keyword">new</span> List&lt;Student&gt;();</span><br><span class="line">        students.Add(<span class="keyword">new</span> Student() &#123; Id = <span class="number">1</span>, Name = <span class="string">&quot;John&quot;</span> &#125;);</span><br><span class="line">        students.Add(<span class="keyword">new</span> Student() &#123; Id = <span class="number">2</span>, Name = <span class="string">&quot;Mary&quot;</span> &#125;);</span><br><span class="line">        students.Add(<span class="keyword">new</span> Student() &#123; Id = <span class="number">3</span>, Name = <span class="string">&quot;Jane&quot;</span> &#125;);</span><br><span class="line">        students.Add(<span class="keyword">new</span> Student() &#123; Id = <span class="number">4</span>, Name = <span class="string">&quot;Peter&quot;</span> &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.OnInitializedAsync();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="组件方法"><a class="markdownIt-Anchor" href="#组件方法"></a> 组件方法</h2><blockquote><ol><li>子组件时间完成之后的一个回调,当子组件发生某个事件之后通知父组件，父组件的一个响应函数</li><li>下面的例子，当子组件发生点击事件之后，父组件可做出相应的反应</li></ol></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件：ChildCallBack</span></span><br><span class="line"></span><br><span class="line">&lt;button @onclick=<span class="string">&quot;OnClickChild&quot;</span>&gt;</span><br><span class="line">       Click</span><br><span class="line">&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> EventCallback&lt;MouseEventArgs&gt; OnClickCallback &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">OnClickChild</span>()</span>&#123;</span><br><span class="line">        <span class="comment">// do somethings</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ()传递参数</span></span><br><span class="line">        OnClickCallback.InvokeAsync(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;ChildCallBack OnClickCallback=<span class="string">&quot;ReceiveDataFromSideBar&quot;</span>&gt;&lt;/ChildCallBack&gt;</span><br><span class="line"></span><br><span class="line">@code&#123;</span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ReceiveDataFromSideBar</span>(<span class="params"><span class="built_in">int</span> number</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 可接受参数做处理</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="事件处理"><a class="markdownIt-Anchor" href="#事件处理"></a> 事件处理</h2><blockquote><ol><li>在标签中使用@绑定一个事件，一种使用lambda表达式直接处理，一种使用函数</li></ol></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1.lambda</span></span><br><span class="line">&lt;input @onchange=<span class="string">&quot;@(()=&gt;Console.WriteLine(&quot;</span>Hello<span class="string">&quot;))&quot;</span> /&gt;</span><br><span class="line">&lt;button @onclick=<span class="string">&quot;@(()=&gt;Console.WriteLine(&quot;</span>Hello<span class="string">&quot;))&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.@code中使用函数</span></span><br><span class="line"></span><br><span class="line">&lt;button @onclick=<span class="string">&quot;Show&quot;</span> /&gt;</span><br><span class="line">@code</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">//当按钮被点击, 将执行下面代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.携带事件参数，在默认的情况下, 我们如果只编写一个事件触发的方法, 并且明确它是否有参数, 在UI元素绑定方法上, 我们都无需传递参数</span></span><br><span class="line">&lt;button @onclick=<span class="string">&quot;Show&quot;</span> /&gt;</span><br><span class="line">@code&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Show</span>(<span class="params">MouseEventArgs  e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.可重载，带有事件或不带事件</span></span><br><span class="line">&lt;button @onclick=<span class="string">&quot;@(e=&gt;Show(e))&quot;</span> /&gt;  <span class="comment">//调用带事件参数的方法</span></span><br><span class="line">&lt;button @onclick=<span class="string">&quot;@(()=&gt;Show())&quot;</span> /&gt;  <span class="comment">//调用不带事件参数的方法</span></span><br><span class="line">@code</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//不带事件参数的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带事件参数的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>(<span class="params">MouseEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="数据绑定"><a class="markdownIt-Anchor" href="#数据绑定"></a> 数据绑定</h2><h3 id="绑定字段"><a class="markdownIt-Anchor" href="#绑定字段"></a> 绑定字段</h3><blockquote><ol><li>类似vue中的v-bind，可以绑定C#字段,双向绑定</li><li>@xxx和@bind的区别：value=“@xxx”: 只能做到属性呈现到UI元素当中, 元素发生变化并不会影响到属性变更。</li></ol></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input @bind=<span class="string">&quot;Name&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> Name&#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="绑定对象的属性"><a class="markdownIt-Anchor" href="#绑定对象的属性"></a> 绑定对象的属性</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;input @bind=<span class="string">&quot;Stu.Name&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">@code&#123;</span><br><span class="line">    <span class="keyword">public</span> Student Stu &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="keyword">new</span> Student()</span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">&quot;123&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="绑定数据格式化"><a class="markdownIt-Anchor" href="#绑定数据格式化"></a> 绑定数据格式化</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;input @bind=<span class="string">&quot;StartDate&quot;</span> @bind:format=<span class="string">&quot;yyyy-MM-dd&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> DateTime StartDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="keyword">new</span> DateTime(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="父组件参数绑定到子组件"><a class="markdownIt-Anchor" href="#父组件参数绑定到子组件"></a> 父组件参数绑定到子组件</h3><blockquote><ol><li>当父组件的参数改变时，子组件中的参数也会同时改变</li></ol></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ChildComponent </span></span><br><span class="line">&lt;p&gt;Year: @Year&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Year &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> EventCallback&lt;<span class="built_in">int</span>&gt; YearChanged &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;ChildComponent @bind-Year=<span class="string">&quot;ParentYear&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;input @bind=<span class="string">&quot;ParentYear&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> ParentYear &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="number">1978</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="路由和页面导航"><a class="markdownIt-Anchor" href="#路由和页面导航"></a> 路由和页面导航</h2><blockquote><ol><li>@page “/xxx” 组件的路由</li><li>@page “/xxx/{aaa}”  aaa是路由传参，在@code中添加一个公共字段aaa，</li><li>@page “/xxx/{aaa:int}”  指定参数类型</li><li>NavigationManager.NavigateTo(“/test/999”); 跳转页面(NavLink 也可以)</li></ol></blockquote><hr /><h2 id="blazor-server和blazor-webassembly"><a class="markdownIt-Anchor" href="#blazor-server和blazor-webassembly"></a> Blazor Server和Blazor WebAssembly</h2><p><a href="https://learn.microsoft.com/zh-cn/aspnet/core/blazor/hosting-models?view=aspnetcore-7.0">官网说明</a></p><blockquote><p>服务器把东西全部运行在浏览器的沙盒里,</p></blockquote><ul><li>Blazor WebAssembly的优点<ul><li>在浏览器中执行C#代码，不需要额外的插件</li><li>可以基于WebAssembly的性能优势和可在浏览器内执行的能力，获得更快页面处理速度</li><li>支持无服务器和离线场景</li></ul></li><li>Blazor WebAssembl的缺点<ul><li>需要加载太多资源，首次展现速度较慢</li><li>由于所有代码都在浏览器中执行，不能嵌入机密数据</li></ul></li></ul><blockquote><p>Blazor Server类似MVC,但是Server是长连接,在服务器端计算结果差异,浏览器拿到差异渲染(blazor.server.js)</p></blockquote><ul><li>Blazor Server的优点<ul><li>页面加载是轻量级的</li><li>服务器可以使用机密数据，例如访问数据库</li><li>它支持100%的浏览器，即使是那些没有WASM支持的浏览器，如Internet Explorer。</li></ul></li><li>Blazor Server的缺点<ul><li>需要一个<a href="http://ASP.NET">http://ASP.NET</a> Core服务器</li><li>不支持无服务器和离线场景</li><li>大量SignalR连接可能引发性能问题,保持连接</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;😍😍😍&lt;/p&gt;
&lt;h2 id=&quot;blazor&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#blazor&quot;&gt;&lt;/a&gt; Blazor&lt;/h2&gt;
&lt;p&gt;用C#代替JavaScript创建丰富的UI&lt;/p&gt;
&lt;h2 id=&quot;页面组件&quot;&gt;&lt;a cl</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Blazor" scheme="https://gladdduck.github.io/tags/Blazor/"/>
    
  </entry>
  
  <entry>
    <title>Git学习笔记</title>
    <link href="https://gladdduck.github.io/2023/09/09/Git/"/>
    <id>https://gladdduck.github.io/2023/09/09/Git/</id>
    <published>2023-09-09T02:24:47.503Z</published>
    <updated>2023-11-12T09:37:31.846Z</updated>
    
    <content type="html"><![CDATA[<p>😍😍😍</p><h3 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h3><p><img src="https://image.yayan.xyz/1694228618814.png" alt="" /></p><ul><li>远程仓库(github)</li><li>本地仓库(本机)</li><li>缓冲区(防止误提交)</li><li>工作区(写代码的地方)</li></ul><blockquote><p>github用户名密码存储在用户管理中的管理Windows凭据.<br />git status 查看文件当前所处位置</p></blockquote><hr /><h3 id="gitignore-忽略文件"><a class="markdownIt-Anchor" href="#gitignore-忽略文件"></a> gitignore 忽略文件</h3><p><code>根目录创建  .gitignore</code></p><ol><li>每个配置项单独一行</li><li>可以有空行,方便阅读</li><li>可以是文明目录名,路径或者匹配模式</li><li>如果一个文件已经被提交过了,再ignore没有用</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">模式匹配</span><br><span class="line"><span class="comment"># 用于注释  \用于转义</span></span><br><span class="line"></span><br><span class="line">* 匹配任意字符任意次  ?匹配任意字符1次  但都不匹配/</span><br><span class="line"></span><br><span class="line">[] 用于匹配列表里面的一个字符</span><br><span class="line"></span><br><span class="line">**用于匹配多级目录</span><br><span class="line"></span><br><span class="line">/用户分隔目录</span><br><span class="line">    1)如果/在开头,则匹配根目录下的文件, 否则 所有子文件夹里的文件都会匹配</span><br><span class="line">    2)/ 在末尾时, 只匹配目录, 否则同名的文件和目录都会匹配</span><br><span class="line"></span><br><span class="line">! 用于重新包含某个文件, 如果这个文件的父级目录被排除了,那么它不回被包含了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">1) 忽略所哟内容   </span><br><span class="line">    *</span><br><span class="line">2) 忽略所有目录   </span><br><span class="line">    */</span><br><span class="line">3) 忽略public 目录下的某个文件   </span><br><span class="line">    public/*</span><br><span class="line">    !public/xxxxxxx</span><br><span class="line">4) 只保留public目录下的某个文件</span><br><span class="line">    /*</span><br><span class="line">    !/public/</span><br><span class="line">    /public/*</span><br><span class="line">    !/public/a?z.*</span><br><span class="line"></span><br><span class="line">如何检查自己写的ignore规则是否对</span><br><span class="line"></span><br><span class="line">git check-ignore [-v] &#123;文件或目录路径&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h3 id="分支操作"><a class="markdownIt-Anchor" href="#分支操作"></a> 分支操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git branch -a  查看所有分支</span><br><span class="line">git branch dev  创建分支</span><br><span class="line">git checkout dev 切换分支</span><br><span class="line">git branch -d dev 删除分支</span><br><span class="line">git branch -m 旧名称 新名称 重命名分支</span><br><span class="line">git checkout -b dev 创建并切换分支</span><br><span class="line">git merge dev 合并分支  切换到主分支上,然后再合并子分支,将dev合并到当前分支</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地分支推送到远程</span></span><br><span class="line">git push origin --all</span><br><span class="line">git push origin 分支名</span><br><span class="line">git push origin -d 分支名  删除远端分支</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>修改分支名称</code>:<a href="https://blog.jiabh.cn/2021/rename-branch-from-main-to-master/#:~:text=%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%EF%BC%9A-,%E5%9C%A8GitHub%E4%B8%8A%E5%B0%86%E9%BB%98%E8%AE%A4%E5%88%86%E6%94%AF%E4%BF%AE%E6%94%B9%E4%B8%BA%20master,%E4%BA%86%E9%BB%98%E8%AE%A4%E5%88%86%E6%94%AF%E7%9A%84%E4%BF%AE%E6%94%B9%E3%80%82">参考</a></p><hr /><h3 id="merge-合并"><a class="markdownIt-Anchor" href="#merge-合并"></a> Merge 合并</h3><p><code>修改之前尽量先pull一下</code></p><ul><li>远程仓库已更新,本地没pull,直接修改,之后push,会显示push失败,会提示git pull.</li><li>在git pull之后,</li><li><ol><li>可能会有自动合并,auto-merging, 修改同一文件不同位置</li></ol></li><li><ol start="2"><li>需要手动合并,此时解决冲突需要和冲突者商量,合并时会新建一个临时分支</li></ol></li><li>,修改之后重新提交,add commit push,修改同一文件同一位置</li><li><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;HEAD  冲突开始</code></li><li><code>=============== 不同的内容分隔符</code></li><li><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;冲突结束</code></li></ul><hr /><h3 id="版本回退"><a class="markdownIt-Anchor" href="#版本回退"></a> 版本回退</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 整个文件夹回退</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看历史记录,这个说明commit里面的说明一定要写详细,只会显示当前提交之前的版本</span></span><br><span class="line">git  <span class="built_in">log</span> --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回退到某一个版本,后面提交的就看不到了</span></span><br><span class="line">git reset --hard 输入版本号</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看从现在到最新的commit id</span></span><br><span class="line">git reflog </span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到最新的版本</span></span><br><span class="line">git reset --hard commit <span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单个文件回退,提交修正</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对错误文件修正,提交时漏交文件,提交信息修正,长开发中小提交过多</span></span><br><span class="line"><span class="comment"># 修正之后不会在log中显示</span></span><br><span class="line">git commit --amend -m <span class="string">&quot;提交说明&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h3 id="文件恢复"><a class="markdownIt-Anchor" href="#文件恢复"></a> 文件恢复</h3><ol><li><p>修改或删除之后,没有add</p><ul><li>git checkout 文件名</li><li>会还原成上一次add的文件</li></ul></li><li><p>修改或删除之后,add了,但没有commit</p><ul><li>git checkout commit_id 文件名</li></ul></li><li><p>修改或删除之后,已commit</p><ul><li>git checkout commit_id 文件名</li></ul></li></ol><p><img src="https://image.yayan.xyz/1695030753653.png" alt="" /></p><hr /><h3 id="查看日志"><a class="markdownIt-Anchor" href="#查看日志"></a> 查看日志</h3><p><code>普通日志</code><br /><img src="https://image.yayan.xyz/1695086367249.png" alt="" /></p><p><code>引用日志</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目的最后一根稻草</span></span><br><span class="line"><span class="comment"># 本地日志,不会上传到远端,会把文件回退修正的记录也列出来</span></span><br><span class="line">git reflog</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h3 id="标签管理"><a class="markdownIt-Anchor" href="#标签管理"></a> 标签管理</h3><p><img src="https://image.yayan.xyz/1695087977610.png" alt="" /></p><p>发行: 在github上create a new release</p><h3 id="fork"><a class="markdownIt-Anchor" href="#fork"></a> fork</h3><p>复制别人的仓库<br />然后克隆到本地<br />修改提交…<br />向原仓库发生和并请求,contribute,open a pull request<br />等待原始仓库同意合并</p><hr /><h3 id="本地库与远程库进行关联"><a class="markdownIt-Anchor" href="#本地库与远程库进行关联"></a> 本地库与远程库进行关联</h3><ol><li>github新建仓库</li><li>本地git init初始化</li><li>git remote add origin https://  关联远程</li><li>git push -u origin 分支名称</li><li>如果添加第二个远程仓库,修改origin为一个新的</li><li>*git remote 参数,设置远程仓库的信息  -h查看命令帮助</li><li>git remote -v 查看仓库</li><li>git push 远端库名称 分支名称</li></ol><hr /><h3 id="github仓库美化"><a class="markdownIt-Anchor" href="#github仓库美化"></a> github仓库美化</h3><p><img src="https://github-stats.ubrong.com/api?username=gladdduck&amp;show_icons=true&amp;theme=tokyonight" alt="GitHub账户信息统计" /></p><p><img src="https://github-stats.ubrong.com/api/top-langs/?username=gladdduck&amp;layout=compact&amp;theme=tokyonight" alt="GitHub账户最常用语言" /></p><p><img src="https://github-stats.ubrong.com/api/pin/?username=gladdduck&amp;repo=HotelManagement&amp;theme=dark" alt="GitHub仓库信息卡片" /></p><p><img src="https://profile-counter.glitch.me/%7Bgladdduck%7D/count.svg" alt="Visitor Count" /></p><p><img src="https://stats.justsong.cn/api/github?username=gladdduck&amp;theme=dark&amp;lang=zh-CN" alt="github统计" /></p><p><img src="https://stats.justsong.cn/api/csdn?id=weixin_44151595&amp;theme=dark&amp;lang=zh-CN" alt="CSDN统计" /></p><p><img src="https://stats.justsong.cn/api/bilibili/?id=384115063&amp;theme=dark&amp;lang=zh-CN" alt="B站统计" /></p><p><img src="https://badgen.net/badge/php/8.1/orange?icon=php" alt="tip" /></p><p><img src="https://badgen.net/badge/python/3.1.6/green?icon=packagephobia" alt="tip" /></p><p><a href="https://badgen.net/">图标修改</a></p><hr /><h3 id="流程-2"><a class="markdownIt-Anchor" href="#流程-2"></a> 流程</h3><p>git发布流程<br />分支合并发布流程：<br />git add .# 将所有新增、修改或删除的文件添加到暂存区<br />git commit -m “版本发布” # 将暂存区的文件发版<br />git status # 查看是否还有文件没有发布上去<br />git checkout test# 切换到要合并的分支<br />git pull# 在test 分支上拉取最新代码，避免冲突<br />git merge dev   # 在test 分支上合并 dev 分支上的代码<br />git push# 上传test分支代码</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;😍😍😍&lt;/p&gt;
&lt;h3 id=&quot;流程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#流程&quot;&gt;&lt;/a&gt; 流程&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://image.yayan.xyz/1694228618814.png&quot; alt=&quot;</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Git 重要" scheme="https://gladdduck.github.io/tags/Git-%E9%87%8D%E8%A6%81/"/>
    
  </entry>
  
  <entry>
    <title>AcWing算法基础课</title>
    <link href="https://gladdduck.github.io/2023/06/04/AcWing%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE,/"/>
    <id>https://gladdduck.github.io/2023/06/04/AcWing%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE,/</id>
    <published>2023-06-04T14:26:33.383Z</published>
    <updated>2023-06-09T06:10:38.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础算法"><a class="markdownIt-Anchor" href="#基础算法"></a> 基础算法</h2><h4 id="快速排序"><a class="markdownIt-Anchor" href="#快速排序"></a> 快速排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">lst,start,end</span>):</span><br><span class="line">    <span class="comment"># 边界条件</span></span><br><span class="line">    <span class="keyword">if</span> start&gt;=end:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 选择哨兵点</span></span><br><span class="line">    standby=lst[(start+end)&gt;&gt;<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 左右指针</span></span><br><span class="line">    left=start-<span class="number">1</span></span><br><span class="line">    right=end+<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left&lt;right:</span><br><span class="line">        left+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> lst[left]&lt;standby:</span><br><span class="line">            left+=<span class="number">1</span></span><br><span class="line">        right-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> lst[right]&gt;standby:</span><br><span class="line">            right-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> left&lt;right:</span><br><span class="line">            lst[left],lst[right]=lst[right],lst[left]</span><br><span class="line">    <span class="comment"># if j-l+1&gt;=m:</span></span><br><span class="line">    <span class="comment">#     return quick_sort(nums,l,j,m)</span></span><br><span class="line">    <span class="comment"># else:</span></span><br><span class="line">    <span class="comment">#     return quick_sort(nums,j+1,r,m-(j-l+1))</span></span><br><span class="line">    quick_sort(lst,start,right)</span><br><span class="line">    quick_sort(lst,right+<span class="number">1</span>,end)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">nums=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.read().split()))</span><br><span class="line">quick_sort(nums,<span class="number">0</span>,<span class="built_in">len</span>(nums)-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="built_in">print</span>(item,end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="选择排序"><a class="markdownIt-Anchor" href="#选择排序"></a> 选择排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">lst=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">a,b</span>):</span><br><span class="line">    lena=<span class="built_in">len</span>(a)</span><br><span class="line">    lenb=<span class="built_in">len</span>(b)</span><br><span class="line">    i=j=<span class="number">0</span></span><br><span class="line">    c=[]</span><br><span class="line">    <span class="keyword">while</span> i&lt;lena <span class="keyword">and</span> j&lt;lenb:</span><br><span class="line">        <span class="keyword">if</span> a[i]&lt;b[j]:</span><br><span class="line">            c.append(a[i])</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          <span class="comment"># ans+=len(l)-i</span></span><br><span class="line">            c.append(b[j])</span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i==lena:</span><br><span class="line">        c.extend(b[j:])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        c.extend(a[i:])</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sort</span>(<span class="params">nums</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums)&lt;=<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line">    mid=<span class="built_in">len</span>(nums)&gt;&gt;<span class="number">1</span></span><br><span class="line">    l=sort(nums[:mid])</span><br><span class="line">    r=sort(nums[mid:])</span><br><span class="line">    <span class="keyword">return</span> merge(l,r)</span><br><span class="line"></span><br><span class="line">ret=sort(lst)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ret:</span><br><span class="line">    <span class="built_in">print</span>(item,end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="二分"><a class="markdownIt-Anchor" href="#二分"></a> 二分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">lst=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    q=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    l=<span class="number">0</span></span><br><span class="line">    r=n-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> l&lt;r:</span><br><span class="line">        mid=(l+r)&gt;&gt;<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> lst[mid]&gt;=q:</span><br><span class="line">            r=mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l=mid+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> lst[l]!=q:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-1 -1&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(l,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        l=<span class="number">0</span></span><br><span class="line">        r=n-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;r:</span><br><span class="line">            mid=(r+l+<span class="number">1</span>)&gt;&gt;<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span>  lst[mid]&gt;q:</span><br><span class="line">                r=mid-<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l=mid</span><br><span class="line">        <span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># --------</span></span><br><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line">n,m=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">lst=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    q=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    l=bisect.bisect_left(lst,q)</span><br><span class="line">    r=bisect.bisect_right(lst,q)</span><br><span class="line">    <span class="keyword">if</span> l&gt;=n <span class="keyword">or</span> r&lt;=<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-1 -1&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> r!=<span class="number">0</span> <span class="keyword">and</span> lst[r-<span class="number">1</span>]!=q:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-1 -1&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r-=<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;l&#125;</span> <span class="subst">&#123;r&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="前缀和"><a class="markdownIt-Anchor" href="#前缀和"></a> 前缀和</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="差分"><a class="markdownIt-Anchor" href="#差分"></a> 差分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">nums=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">diff=[<span class="number">0</span>]*(n+<span class="number">1</span>)</span><br><span class="line">diff[<span class="number">0</span>]=nums[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">    diff[i]=nums[i]-nums[i-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a,b,c=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    diff[a-<span class="number">1</span>]+=c</span><br><span class="line">    diff[b]-=c</span><br><span class="line">temp=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    temp+=diff[i]</span><br><span class="line">    <span class="built_in">print</span>(temp,end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="双指针"><a class="markdownIt-Anchor" href="#双指针"></a> 双指针</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="位运算"><a class="markdownIt-Anchor" href="#位运算"></a> 位运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="离散化"><a class="markdownIt-Anchor" href="#离散化"></a> 离散化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">all</span>=<span class="built_in">set</span>()</span><br><span class="line">add=[]</span><br><span class="line">query=[]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    x,c=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    <span class="built_in">all</span>.add(x)</span><br><span class="line">    add.append((x,c))</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    l,r=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    <span class="built_in">all</span>.add(l)</span><br><span class="line">    <span class="built_in">all</span>.add(r)</span><br><span class="line">    query.append((l,r))</span><br><span class="line">  </span><br><span class="line"><span class="built_in">all</span>=<span class="built_in">sorted</span>(<span class="built_in">all</span>)</span><br><span class="line">nums=[<span class="number">0</span>]*<span class="built_in">len</span>(<span class="built_in">all</span>)</span><br><span class="line">nums2index=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i,x <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">all</span>):</span><br><span class="line">    nums2index[x]=i</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> add:</span><br><span class="line">    nums[nums2index[k]]+=v</span><br><span class="line"></span><br><span class="line">sums=[<span class="number">0</span>]*(<span class="built_in">len</span>(<span class="built_in">all</span>)+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">    sums[i+<span class="number">1</span>]=sums[i]+nums[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> l,r <span class="keyword">in</span> query:</span><br><span class="line">    indexl=nums2index[l]</span><br><span class="line">    indexr=nums2index[r]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(sums[indexr+<span class="number">1</span>]-sums[indexl])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="区间和并"><a class="markdownIt-Anchor" href="#区间和并"></a> 区间和并</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">nums=[]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a,b=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">    nums.append((a,b))</span><br><span class="line">nums=<span class="built_in">sorted</span>(nums)</span><br><span class="line">left,right=nums[<span class="number">0</span>][<span class="number">0</span>],nums[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">ans=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">    a,b=nums[i][<span class="number">0</span>],nums[i][<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> a&lt;=right:</span><br><span class="line">        right=<span class="built_in">max</span>(b,right)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ans+=<span class="number">1</span></span><br><span class="line">        left,right=a,b</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><h2 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h2><h4 id="单链表"><a class="markdownIt-Anchor" href="#单链表"></a> 单链表</h4><h4 id="双链表"><a class="markdownIt-Anchor" href="#双链表"></a> 双链表</h4><h4 id="栈"><a class="markdownIt-Anchor" href="#栈"></a> 栈</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">num_stack=[]</span><br><span class="line">op_stack=[]</span><br><span class="line">pro=&#123;<span class="string">&#x27;+&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;-&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;*&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;/&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eval</span>():</span><br><span class="line">    b=num_stack.pop()</span><br><span class="line">    a=num_stack.pop()</span><br><span class="line">    op=op_stack.pop()</span><br><span class="line">    <span class="keyword">if</span> op==<span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">        num_stack.append(a+b)</span><br><span class="line">    <span class="keyword">elif</span> op==<span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">        num_stack.append(a-b)</span><br><span class="line">    <span class="keyword">elif</span> op==<span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">        num_stack.append(a*b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        num_stack.append(<span class="built_in">int</span>(a/b))</span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="built_in">len</span>(s):</span><br><span class="line">    <span class="keyword">if</span> s[i].isdigit():</span><br><span class="line">        temp=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(s) <span class="keyword">and</span> s[i].isdigit():</span><br><span class="line">            temp=temp*<span class="number">10</span>+<span class="built_in">int</span>(s[i])</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        num_stack.append(temp)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> s[i]==<span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">        op_stack.append(<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> s[i]==<span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> op_stack[-<span class="number">1</span>]!=<span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            <span class="built_in">eval</span>()</span><br><span class="line">        op_stack.pop()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">while</span> op_stack <span class="keyword">and</span> op_stack[-<span class="number">1</span>]!=<span class="string">&#x27;(&#x27;</span> <span class="keyword">and</span> pro[s[i]]&lt;=pro[op_stack[-<span class="number">1</span>]]:</span><br><span class="line">            <span class="built_in">eval</span>()</span><br><span class="line">        op_stack.append(s[i])</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> op_stack:</span><br><span class="line">    <span class="built_in">eval</span>()</span><br><span class="line"><span class="built_in">print</span>(num_stack[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h4 id="队列"><a class="markdownIt-Anchor" href="#队列"></a> 队列</h4><h4 id="单调栈"><a class="markdownIt-Anchor" href="#单调栈"></a> 单调栈</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">lst=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stack=[lst[<span class="number">0</span>]]</span><br><span class="line">ans=[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(lst)):</span><br><span class="line">    <span class="keyword">while</span> stack <span class="keyword">and</span> stack[-<span class="number">1</span>]&gt;=lst[i]:</span><br><span class="line">        stack.pop()</span><br><span class="line">    ans.append(stack[-<span class="number">1</span>] <span class="keyword">if</span> stack <span class="keyword">else</span> -<span class="number">1</span>)</span><br><span class="line">    stack.append(lst[i])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="单调队列"><a class="markdownIt-Anchor" href="#单调队列"></a> 单调队列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">n,k=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">lst=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">ans=[]</span><br><span class="line">dq=deque()</span><br><span class="line">ans2=[]</span><br><span class="line">dq2=deque()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">while</span> (dq <span class="keyword">and</span> lst[dq[-<span class="number">1</span>]]&lt;lst[i]):</span><br><span class="line">        dq.pop()</span><br><span class="line">    <span class="keyword">while</span> dq <span class="keyword">and</span> i-dq[<span class="number">0</span>]&gt;=k:</span><br><span class="line">        dq.popleft()</span><br><span class="line">    dq.append(i)</span><br><span class="line">    ans.append(lst[dq[<span class="number">0</span>]])</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">while</span> (dq2 <span class="keyword">and</span> lst[dq2[-<span class="number">1</span>]]&gt;lst[i]):</span><br><span class="line">        dq2.pop()</span><br><span class="line">    <span class="keyword">while</span> dq2 <span class="keyword">and</span> i-dq2[<span class="number">0</span>]&gt;=k:</span><br><span class="line">        dq2.popleft()</span><br><span class="line">    dq2.append(i)</span><br><span class="line">    ans2.append(lst[dq2[<span class="number">0</span>]])</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ans2[k-<span class="number">1</span>:]:</span><br><span class="line">    <span class="built_in">print</span>(item ,end=<span class="string">&#x27; &#x27;</span>)   </span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ans[k-<span class="number">1</span>:]:</span><br><span class="line">    <span class="built_in">print</span>(item ,end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="tire"><a class="markdownIt-Anchor" href="#tire"></a> Tire</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">lst=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">tire=[[<span class="number">0</span>]*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3000000</span>)]</span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">x</span>):</span><br><span class="line">    p=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        t=(x&gt;&gt;i)&amp;<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tire[p][t]:</span><br><span class="line">            <span class="keyword">global</span> count</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">            tire[p][t]=count</span><br><span class="line">        p=tire[p][t]</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">x</span>):</span><br><span class="line">    p=<span class="number">0</span></span><br><span class="line">    res=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        t=(x&gt;&gt;i)&amp;<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> tire[p][<span class="keyword">not</span> t]:</span><br><span class="line">            res+=(<span class="number">1</span>&lt;&lt;i)</span><br><span class="line">            p=tire[p][<span class="keyword">not</span> t]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p=tire[p][t]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">ans=-<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">    insert(i)</span><br><span class="line">    ans=<span class="built_in">max</span>(ans,find(i))</span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="并查集"><a class="markdownIt-Anchor" href="#并查集"></a> 并查集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">size=[<span class="number">1</span>]*(n+<span class="number">1</span>)</span><br><span class="line">p=[i <span class="keyword">for</span> i  <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x!=p[x]:</span><br><span class="line">        p[x]=find(p[x])</span><br><span class="line">    <span class="keyword">return</span> p[x]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">a,b</span>):</span><br><span class="line">    fa=find(a)</span><br><span class="line">    fb=find(b)</span><br><span class="line">    p[fa]=fb</span><br><span class="line">    size[fb]+=size[fa]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    inp=<span class="built_in">input</span>().split()</span><br><span class="line">    q=inp[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> q==<span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">        a,b=<span class="built_in">int</span>(inp[<span class="number">1</span>]),<span class="built_in">int</span>(inp[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">if</span> find(a)!=find(b):</span><br><span class="line">            merge(a,b)</span><br><span class="line">    <span class="keyword">elif</span> q==<span class="string">&#x27;Q1&#x27;</span>:</span><br><span class="line">        a,b=<span class="built_in">int</span>(inp[<span class="number">1</span>]),<span class="built_in">int</span>(inp[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">if</span> find(a)==find(b):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Yes&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;No&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a=<span class="built_in">int</span>(inp[<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">print</span>(size[find(a)])</span><br></pre></td></tr></table></figure><h4 id="堆"><a class="markdownIt-Anchor" href="#堆"></a> 堆</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="哈希表"><a class="markdownIt-Anchor" href="#哈希表"></a> 哈希表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">N=<span class="number">100010</span></span><br><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">h=[<span class="number">0</span>]*N</span><br><span class="line">p=[<span class="number">0</span>]*N</span><br><span class="line">seed=<span class="number">131</span></span><br><span class="line">Q=<span class="number">1</span>&lt;&lt;<span class="number">64</span></span><br><span class="line">s=<span class="string">&#x27; &#x27;</span>+<span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">l,r</span>):</span><br><span class="line">    <span class="keyword">return</span> (h[r]-h[l-<span class="number">1</span>]*p[r-l+<span class="number">1</span>])%Q</span><br><span class="line">  </span><br><span class="line">p[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    p[i]=(p[i-<span class="number">1</span>]*seed)%Q</span><br><span class="line">    h[i]=(h[i-<span class="number">1</span>]*seed+<span class="built_in">ord</span>(s[i]))%Q</span><br><span class="line">  </span><br><span class="line"><span class="keyword">while</span> m:</span><br><span class="line">    m-=<span class="number">1</span></span><br><span class="line">    a,b,x,y=<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">    <span class="keyword">if</span> get(a,b)==get(x,y):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Yes&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="搜索与图论"><a class="markdownIt-Anchor" href="#搜索与图论"></a> 搜索与图论</h2><h4 id="深搜广搜"><a class="markdownIt-Anchor" href="#深搜广搜"></a> 深搜&amp;广搜</h4><h4 id="拓扑排序"><a class="markdownIt-Anchor" href="#拓扑排序"></a> 拓扑排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict,deque</span><br><span class="line">graph=defaultdict(<span class="built_in">list</span>)</span><br><span class="line">degr=[<span class="number">0</span>]*(n+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a,b=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    graph[a].append(b)</span><br><span class="line">    degr[b]+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">topsort</span>():</span><br><span class="line">    ans=[]</span><br><span class="line">    dq=deque()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> degr[i]==<span class="number">0</span>:</span><br><span class="line">            dq.append(i)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span> dq:</span><br><span class="line">        cur = dq.pop()</span><br><span class="line">        ans.append(cur)</span><br><span class="line">        <span class="keyword">for</span> neigh <span class="keyword">in</span> graph.get(cur,[]):</span><br><span class="line">            degr[neigh]-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> degr[neigh]==<span class="number">0</span>:</span><br><span class="line">                dq.append(neigh)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> ans <span class="keyword">if</span> <span class="built_in">len</span>(ans)==n <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">ans=topsort()</span><br><span class="line"><span class="keyword">if</span> ans:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        <span class="built_in">print</span>(i,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="dijkstra"><a class="markdownIt-Anchor" href="#dijkstra"></a> dijkstra</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line">n,m=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">graph=[[-<span class="number">1</span>]*(n+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a,b,c=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">    graph[a-<span class="number">1</span>][b-<span class="number">1</span>]=c <span class="keyword">if</span> graph[a-<span class="number">1</span>][b-<span class="number">1</span>]==-<span class="number">1</span> <span class="keyword">else</span> <span class="built_in">min</span>(graph[a-<span class="number">1</span>][b-<span class="number">1</span>],c)</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dijkstra</span>():</span><br><span class="line"></span><br><span class="line">    dis=[<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)]*(n)</span><br><span class="line">    dis[<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line">    visited=<span class="built_in">set</span>()</span><br><span class="line">    min_heap=[(<span class="number">0</span>,<span class="number">0</span>)]</span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 依次确定n个点的距离</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="comment"># 没有可达的点了</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(min_heap)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 未确定点最近的一个</span></span><br><span class="line">        _,min_index=heapq.heappop(min_heap)</span><br><span class="line">        visited.add(min_index)</span><br><span class="line">        <span class="comment"># 寻找邻居</span></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="comment"># 可达且未访问</span></span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> visited <span class="keyword">and</span> graph[min_index][v]&gt;<span class="number">0</span>:</span><br><span class="line">                new_dis=dis[min_index]+graph[min_index][v]</span><br><span class="line">                <span class="comment"># 更新</span></span><br><span class="line">                <span class="keyword">if</span> dis[v]&gt;new_dis:</span><br><span class="line">                    dis[v]=new_dis</span><br><span class="line">                    heapq.heappush(min_heap,(dis[v],v))</span><br><span class="line">    <span class="keyword">return</span> dis</span><br><span class="line">d=dijkstra()</span><br><span class="line"><span class="built_in">print</span>(d[n-<span class="number">1</span>] <span class="keyword">if</span> d[n-<span class="number">1</span>]!=<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">else</span> -<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">graph=defaultdict(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a,b,c=<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">    graph[a-<span class="number">1</span>].append((b-<span class="number">1</span>,c))</span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dijkstra</span>():</span><br><span class="line"></span><br><span class="line">    dis=[<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)]*n</span><br><span class="line">    dis[<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line">    visit=<span class="built_in">set</span>()</span><br><span class="line">  </span><br><span class="line">    min_heap=[(<span class="number">0</span>,<span class="number">0</span>)]</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(min_heap):</span><br><span class="line">        _,node=heapq.heappop(min_heap)</span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">in</span> visit:<span class="keyword">continue</span></span><br><span class="line">        visit.add(node)</span><br><span class="line">        <span class="keyword">for</span> v,d <span class="keyword">in</span> graph.get(node,[]):</span><br><span class="line">            new_dis=dis[node]+d</span><br><span class="line">            <span class="keyword">if</span> dis[v]&gt;new_dis:</span><br><span class="line">                dis[v]=new_dis</span><br><span class="line">                heapq.heappush(min_heap,(dis[v],v))</span><br><span class="line">    <span class="keyword">return</span> dis</span><br><span class="line">d=dijkstra()</span><br><span class="line"><span class="built_in">print</span>(d[n-<span class="number">1</span>] <span class="keyword">if</span> d[n-<span class="number">1</span>]!=<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">else</span> -<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="bellman-ford"><a class="markdownIt-Anchor" href="#bellman-ford"></a> bellman-ford</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">n,m,k=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">graph=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a,b,c=<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">    graph.append((a,b,c))</span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bellmen_ford</span>():</span><br><span class="line">    dis=[<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)]*(n+<span class="number">1</span>)</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span></span><br><span class="line">    backup=[]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        backup=dis.copy()</span><br><span class="line">        <span class="keyword">for</span> a,b,c <span class="keyword">in</span> graph:</span><br><span class="line">            dis[b]=<span class="built_in">min</span>(backup[a]+c,dis[b])</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">float</span>(dis[n])&gt;<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)/<span class="number">2</span> <span class="keyword">or</span> dis[n]==<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;impossible&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> dis[n]</span><br><span class="line">ans=bellmen_ford()</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><h4 id="spfa"><a class="markdownIt-Anchor" href="#spfa"></a> spfa</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict,deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">graph=defaultdict(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a,b,c=<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">    graph[a].append((b,c))</span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">spfa</span>():</span><br><span class="line">    dist = [<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * (n+<span class="number">1</span>)</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>  </span><br><span class="line">    visited = [<span class="number">0</span>] * (n+<span class="number">1</span>)</span><br><span class="line">    q=deque()</span><br><span class="line">    q.append(<span class="number">1</span>)</span><br><span class="line">    visited[<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        cur=q.popleft()</span><br><span class="line">        visited[cur]=<span class="number">0</span></span><br><span class="line">      </span><br><span class="line">        <span class="keyword">for</span> b,c <span class="keyword">in</span> graph.get(cur,[]):</span><br><span class="line">            <span class="keyword">if</span> dist[b]&gt;dist[cur]+c:</span><br><span class="line">                dist[b]=dist[cur]+c</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span>  visited[b]:</span><br><span class="line">                    visited[b]=<span class="number">1</span></span><br><span class="line">                    q.append(b)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dist[n] <span class="keyword">if</span> dist[n]!=<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">else</span> <span class="string">&#x27;impossible&#x27;</span></span><br><span class="line">ans=spfa()</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><h4 id="floyd"><a class="markdownIt-Anchor" href="#floyd"></a> floyd</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">n,m,k=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">dist = [[<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * (n+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a,b,c=<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">    dist[a][b]=<span class="built_in">min</span>(c,dist[a][b])</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>):</span><br><span class="line">    dist[i][i]=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">floyd</span>():</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">                dist[i][j]=<span class="built_in">min</span>(dist[i][j],dist[i][k]+dist[k][j])</span><br><span class="line"></span><br><span class="line">ans=floyd()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">    a,b=<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;impossible&#x27;</span> <span class="keyword">if</span> dist[a][b]==<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">else</span> dist[a][b])</span><br></pre></td></tr></table></figure><h4 id="prime"><a class="markdownIt-Anchor" href="#prime"></a> prime</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">INF=<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">graph = [[INF] * (n+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a,b,c=<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">    graph[b][a]=<span class="built_in">min</span>(c,graph[b][a])</span><br><span class="line">    graph[a][b]=graph[b][a]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>):</span><br><span class="line">    graph[i][i]=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prime</span>():</span><br><span class="line">    dist= [INF] * (n+<span class="number">1</span>)</span><br><span class="line">    visit= [<span class="literal">False</span>] * (n+<span class="number">1</span>)</span><br><span class="line">    res=<span class="number">0</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        t=-<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j  <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> visit[j] <span class="keyword">and</span> (t==-<span class="number">1</span> <span class="keyword">or</span> dist[t]&gt;dist[j] ):</span><br><span class="line">                t=j</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">and</span> dist[t]==INF:<span class="keyword">return</span> INF</span><br><span class="line">        <span class="keyword">if</span> i:res+=dist[t]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">            dist[j]=<span class="built_in">min</span>(dist[j],graph[t][j])</span><br><span class="line">      </span><br><span class="line">        visit[t]=<span class="literal">True</span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">ans=prime()</span><br><span class="line"><span class="built_in">print</span>(ans <span class="keyword">if</span> ans!=INF <span class="keyword">else</span> <span class="string">&#x27;impossible&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="kruskal"><a class="markdownIt-Anchor" href="#kruskal"></a> kruskal</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">INF=<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">graph = []</span><br><span class="line">p = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a,b,c=<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">    graph.append((c,a,b))</span><br><span class="line">    </span><br><span class="line">graph=<span class="built_in">sorted</span>(graph)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> p[x]!=x:</span><br><span class="line">        p[x]=find(p[x])</span><br><span class="line">    <span class="keyword">return</span> p[x]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">kruskal</span>():</span><br><span class="line">    res=<span class="number">0</span></span><br><span class="line">    cnt=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> w,a,b <span class="keyword">in</span> graph:</span><br><span class="line">        a=find(a)</span><br><span class="line">        b=find(b)</span><br><span class="line">        <span class="keyword">if</span> a!=b:</span><br><span class="line">            p[a]=b</span><br><span class="line">            cnt+=<span class="number">1</span></span><br><span class="line">            res+=w</span><br><span class="line">    <span class="keyword">return</span> INF <span class="keyword">if</span> cnt&lt;n-<span class="number">1</span> <span class="keyword">else</span> res</span><br><span class="line"></span><br><span class="line">ans=kruskal()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ans <span class="keyword">if</span> ans!=INF <span class="keyword">else</span> <span class="string">&#x27;impossible&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数学知识"><a class="markdownIt-Anchor" href="#数学知识"></a> 数学知识</h2><h4 id="筛质数"><a class="markdownIt-Anchor" href="#筛质数"></a> 筛质数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_prime</span>(<span class="params">n</span>):</span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line">    isprime=[<span class="number">1</span>]*(n+<span class="number">1</span>)</span><br><span class="line">    isprime[<span class="number">0</span>]=isprime[<span class="number">1</span>]=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> isprime[i]:</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> j*i&gt;n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            isprime[i*j]=<span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"><span class="comment"># 埃式筛法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_prime2</span>(<span class="params">n</span>):</span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line">    isprime=[<span class="number">1</span>]*(n+<span class="number">1</span>)</span><br><span class="line">    isprime[<span class="number">0</span>]=isprime[<span class="number">1</span>]=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> isprime[i]:</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> j*i&gt;n:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                isprime[i*j]=<span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"><span class="comment"># 线性筛法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_prime3</span>(<span class="params">n</span>):</span><br><span class="line"></span><br><span class="line">    nums=[<span class="number">1</span>]*(n+<span class="number">1</span>)</span><br><span class="line">    isprime=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> nums[i]:</span><br><span class="line">            isprime.append(i)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(isprime)):</span><br><span class="line">            <span class="keyword">if</span> i*isprime[j]&gt;n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            nums[i*isprime[j]]=<span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> i%isprime[j]==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(isprime)</span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(get_prime3(n))</span><br></pre></td></tr></table></figure><h4 id="约数"><a class="markdownIt-Anchor" href="#约数"></a> 约数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a <span class="keyword">if</span> b==<span class="number">0</span> <span class="keyword">else</span> gcd(b,a%b)</span><br></pre></td></tr></table></figure><p><code>约数定理</code></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mo>∏</mo><msubsup><mi>p</mi><mi>i</mi><msub><mi>a</mi><mi>i</mi></msub></msubsup><mo>=</mo><msubsup><mi>p</mi><mn>1</mn><msub><mi>a</mi><mn>1</mn></msub></msubsup><mo>∗</mo><msubsup><mi>p</mi><mn>2</mn><msub><mi>a</mi><mn>2</mn></msub></msubsup><mo>∗</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>∗</mo><msubsup><mi>p</mi><mi>k</mi><msub><mi>a</mi><mi>k</mi></msub></msubsup></mrow><annotation encoding="application/x-tex">n=\prod p_i^{a_i}= p_1^{a_1}* p_2^{a_2}*...*p_k^{a_k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.026864em;vertical-align:-0.276864em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0126em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0126em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0533599999999999em;vertical-align:-0.3013079999999999em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7520519999999999em;"><span style="top:-2.3986920000000005em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.1506600000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3013079999999999em;"><span></span></span></span></span></span></span></span></span></span></p><p>约数个数:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mo>∏</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>∗</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mi>k</mi></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)=\prod (a_i+1)= (a_1+1)*(a_2+1)*...*(a_k+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p>约数和:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">(</mo><msubsup><mi>p</mi><mn>1</mn><mn>0</mn></msubsup><mo>+</mo><msubsup><mi>p</mi><mn>1</mn><mn>1</mn></msubsup><mo>+</mo><msubsup><mi>p</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><mo>⋯</mo><msubsup><mi>p</mi><mn>1</mn><msub><mi>a</mi><mn>1</mn></msub></msubsup><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><msubsup><mi>p</mi><mn>2</mn><mn>0</mn></msubsup><mo>+</mo><msubsup><mi>p</mi><mn>2</mn><mn>1</mn></msubsup><mo>+</mo><msubsup><mi>p</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><mo>⋯</mo><msubsup><mi>p</mi><mn>2</mn><msub><mi>a</mi><mn>2</mn></msub></msubsup><mo fence="true">)</mo></mrow><mo>⋯</mo><mrow><mo fence="true">(</mo><msubsup><mi>p</mi><mi>k</mi><mn>0</mn></msubsup><mo>+</mo><msubsup><mi>p</mi><mi>k</mi><mn>1</mn></msubsup><mo>+</mo><msubsup><mi>p</mi><mi>k</mi><mn>2</mn></msubsup><mo>+</mo><mo>⋯</mo><msubsup><mi>p</mi><mi>k</mi><msub><mi>a</mi><mi>k</mi></msub></msubsup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\sigma(n)=\left(p_{1}^{0}+p_{1}^{1}+p_{1}^{2}+\cdots p_{1}^{a_{1}}\right)\left(p_{2}^{0}+p_{2}^{1}+p_{2}^{2}+\cdots p_{2}^{a_{2}}\right) \cdots\left(p_{k}^{0}+p_{k}^{1}+p_{k}^{2}+\cdots p_{k}^{a_{k}}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831079999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831079999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831079999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7520519999999999em;"><span style="top:-2.3986920000000005em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.1506600000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3013079999999999em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span></p><p>互质个数:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi><mo>×</mo><mfrac><mrow><msub><mi>p</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn></mrow><msub><mi>p</mi><mn>1</mn></msub></mfrac><mo>×</mo><mfrac><mrow><msub><mi>p</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn></mrow><msub><mi>p</mi><mn>2</mn></msub></mfrac><mo>×</mo><mo>…</mo><mo>×</mo><mfrac><mrow><msub><mi>p</mi><mi>k</mi></msub><mo>−</mo><mn>1</mn></mrow><msub><mi>p</mi><mi>k</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">\phi(n)=n \times \frac{p_{1}-1}{p_{1}} \times \frac{p_{2}-1}{p_{2}} \times \ldots \times \frac{p_{k}-1}{p_{k}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.378324em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.897216em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.378324em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.897216em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.378324em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.897216em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 约数个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 约数之和</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1~n中与n互质的数的个数(欧拉函数)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="欧拉函数"><a class="markdownIt-Anchor" href="#欧拉函数"></a> 欧拉函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 筛法求欧拉函数</span></span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">oula</span>():</span><br><span class="line">    nums=[<span class="number">1</span>]*(n+<span class="number">1</span>)</span><br><span class="line">    oula=[<span class="number">0</span>]*(n+<span class="number">1</span>)</span><br><span class="line">    oula[<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line">    prime=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> nums[i]:</span><br><span class="line">            prime.append(i)</span><br><span class="line">            oula[i]=i-<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(prime)):</span><br><span class="line">            <span class="keyword">if</span> i*prime[j]&gt;n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            nums[i*prime[j]]=<span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> i%prime[j]==<span class="number">0</span>:</span><br><span class="line">                oula[i*prime[j]]=oula[i]*prime[j]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            oula[i*prime[j]]=oula[i]*(prime[j]-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(oula)</span><br><span class="line"><span class="built_in">print</span>(oula())</span><br></pre></td></tr></table></figure><h4 id="快速幂"><a class="markdownIt-Anchor" href="#快速幂"></a> 快速幂</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a,b,c=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">    ans=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        <span class="keyword">if</span> b&amp;<span class="number">1</span>:</span><br><span class="line">            ans*=a</span><br><span class="line">            ans%=c</span><br><span class="line">        a*=a</span><br><span class="line">        a%=c</span><br><span class="line">        b//=<span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(ans))</span><br></pre></td></tr></table></figure><h4 id="求组合数"><a class="markdownIt-Anchor" href="#求组合数"></a> 求组合数</h4><table><thead><tr><th>数据量</th><th>数据范围</th><th>方法</th><th>复杂度</th></tr></thead><tbody><tr><td>十万</td><td>1&lt;=b&lt;=a&lt;=2000</td><td>递推</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">N^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></td></tr><tr><td>一万</td><td>1&lt;=b&lt;=a&lt;=<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></td><td>预处理打表</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">NlogN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></td></tr><tr><td>二十</td><td>1&lt;=b&lt;=a&lt;=<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>1</mn></msup><mn>8</mn></mrow><annotation encoding="application/x-tex">10^18</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mord">8</span></span></span></span></td><td>卢卡斯定理(Lucas)</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>p</mi></msub><mi>m</mi></mrow><annotation encoding="application/x-tex">Plog_pm</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathnormal">m</span></span></span></span></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1&lt;=b&lt;=a&lt;=2000</span></span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">MOD=<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span></span><br><span class="line">C=[[<span class="number">0</span>]*(<span class="number">2005</span>+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2005</span>+<span class="number">1</span>)]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2005</span>+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> j==<span class="number">0</span>:</span><br><span class="line">                C[i][j]=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                C[i][j]=(C[i-<span class="number">1</span>][j]+C[i-<span class="number">1</span>][j-<span class="number">1</span>])%MOD</span><br><span class="line">init()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a,b=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    <span class="built_in">print</span>(C[a][b])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1&lt;=b&lt;=a&lt;=$10^5$</span></span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">MOD=<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span></span><br><span class="line">N=<span class="number">100010</span></span><br><span class="line">fact=[<span class="number">0</span>]*(N)</span><br><span class="line">infact=[<span class="number">0</span>]*N</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qmi</span>(<span class="params">a,b,m</span>):</span><br><span class="line">    res=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> b :</span><br><span class="line">        <span class="keyword">if</span> b&amp;<span class="number">1</span>:</span><br><span class="line">            res=(res*a)%MOD</span><br><span class="line">        a=(a*a)%MOD</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    fact[<span class="number">0</span>]=infact[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,N):</span><br><span class="line">        fact[i]=(fact[i-<span class="number">1</span>]*i)%MOD</span><br><span class="line">        infact[i]=infact[i-<span class="number">1</span>]*qmi(i,MOD-<span class="number">2</span>,MOD)%MOD</span><br><span class="line"></span><br><span class="line">init()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a,b=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    <span class="built_in">print</span>(fact[a]*infact[a-b]%MOD*infact[b]%MOD)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1&lt;=b&lt;=a&lt;=$10^18$</span></span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">p=<span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qmi</span>(<span class="params">x,q</span>):</span><br><span class="line">    res=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        <span class="keyword">if</span> q&amp;<span class="number">1</span>:</span><br><span class="line">            res=res*x%p</span><br><span class="line">        x=(x*x)%p</span><br><span class="line">        q&gt;&gt;=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">C</span>(<span class="params">a,b</span>):</span><br><span class="line">    res=<span class="number">1</span></span><br><span class="line">    i=<span class="number">1</span></span><br><span class="line">    j=a</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,b+<span class="number">1</span>):</span><br><span class="line">        res=(res*j)%p</span><br><span class="line">        res=(res*qmi(i,p-<span class="number">2</span>))%p</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">        j-=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lucas</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">if</span> a&lt;p <span class="keyword">and</span> b&lt;p:</span><br><span class="line">        <span class="keyword">return</span> C(a,b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> C(a%p,b%p)*lucas(a//p,b//p)%p</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a,b,p=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    <span class="built_in">print</span>(lucas(a,b))</span><br></pre></td></tr></table></figure><h4 id="容斥原理"><a class="markdownIt-Anchor" href="#容斥原理"></a> 容斥原理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">lst=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">res=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1</span>&lt;&lt;m):</span><br><span class="line">    t=<span class="number">1</span></span><br><span class="line">    s=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">if</span> num&gt;&gt;i&amp;<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> t*lst[i]&gt;n:</span><br><span class="line">                t=-<span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            s+=<span class="number">1</span></span><br><span class="line">            t*=lst[i]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> t!=-<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> s&amp;<span class="number">1</span>:</span><br><span class="line">            res+=(n//t)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res-=(n//t)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h4 id="博弈论"><a class="markdownIt-Anchor" href="#博弈论"></a> 博弈论</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">count=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">m=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">store=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">memory=[-<span class="number">1</span>]*<span class="number">10005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sg</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> memory[x]!=-<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> memory[x]</span><br><span class="line">    mex=<span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> count:</span><br><span class="line">        <span class="keyword">if</span> x&gt;=i:</span><br><span class="line">            mex.add(sg(x-i))</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> mex:</span><br><span class="line">            memory[x]=i</span><br><span class="line">            <span class="keyword">return</span> memory[x]</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">res=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> store:</span><br><span class="line">    res^=sg(num)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Yes&#x27;</span> <span class="keyword">if</span> res <span class="keyword">else</span> <span class="string">&#x27;No&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a class="markdownIt-Anchor" href="#动态规划"></a> 动态规划</h2><h4 id="0-1背包"><a class="markdownIt-Anchor" href="#0-1背包"></a> 0-1背包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">weight=[<span class="number">0</span>]</span><br><span class="line">value=[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a,b=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    weight.append(a)</span><br><span class="line">    value.append(b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dp1</span>():</span><br><span class="line">    dp=[[<span class="number">0</span>]*<span class="number">1005</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1005</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">            dp[i][j]=dp[i-<span class="number">1</span>][j]</span><br><span class="line">            <span class="keyword">if</span> j&gt;=weight[i]:</span><br><span class="line">                dp[i][j]=<span class="built_in">max</span>(dp[i-<span class="number">1</span>][j],dp[i-<span class="number">1</span>][j-weight[i]]+value[i])</span><br><span class="line">    <span class="built_in">print</span>(dp[n][m])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dp2</span>():</span><br><span class="line">    dp=[<span class="number">0</span>]*<span class="number">1005</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> j&gt;=weight[i]:</span><br><span class="line">                dp[j]=<span class="built_in">max</span>(dp[j],dp[j-weight[i]]+value[i])</span><br><span class="line">    <span class="built_in">print</span>(dp[m])</span><br><span class="line">dp2()</span><br></pre></td></tr></table></figure><h4 id="完全背包"><a class="markdownIt-Anchor" href="#完全背包"></a> 完全背包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">weight=[<span class="number">0</span>]</span><br><span class="line">value=[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a,b=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    weight.append(a)</span><br><span class="line">    value.append(b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dp1</span>():</span><br><span class="line">    dp=[[<span class="number">0</span>]*<span class="number">1005</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1005</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">            dp[i][j]=dp[i-<span class="number">1</span>][j]</span><br><span class="line">            <span class="keyword">if</span> j&gt;=weight[i]:</span><br><span class="line">                <span class="comment"># dp[i][j]=max(dp[i-1][j],dp[i-1][j-weight[i]]+value[i],dp[i][j-weight[i]]+value[i])</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># dp[i][j]=max(dp[i-1][j],dp[i-1][j-weight]+value,dp[i-1][j-2*weight]+2*value,...)</span></span><br><span class="line">                <span class="comment"># dp[i][j-weight]=max(dp[i-1][j-weight],dp[i-1][j-2*weight]+value,dp[i-1][j-3*weight]+2*value,...)</span></span><br><span class="line">                <span class="comment"># dp[i][j]=max(dp[i-1][j],dp[i][j-weight]+value)</span></span><br><span class="line">                dp[i][j]=<span class="built_in">max</span>(dp[i-<span class="number">1</span>][j],dp[i][j-weight[i]]+value[i])</span><br><span class="line">    <span class="built_in">print</span>(dp[n][m])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dp2</span>():</span><br><span class="line">    dp=[<span class="number">0</span>]*<span class="number">1005</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> j&gt;=weight[i]:</span><br><span class="line">                dp[j]=<span class="built_in">max</span>(dp[j],dp[j-weight[i]]+value[i])</span><br><span class="line">    <span class="built_in">print</span>(dp[m])</span><br><span class="line">dp2()</span><br></pre></td></tr></table></figure><h4 id="多重背包"><a class="markdownIt-Anchor" href="#多重背包"></a> 多重背包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">weight=[<span class="number">0</span>]</span><br><span class="line">value=[<span class="number">0</span>]</span><br><span class="line">nums=[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a,b,c=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    weight.append(a)</span><br><span class="line">    value.append(b)</span><br><span class="line">    nums.append(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dp1</span>():</span><br><span class="line">    dp=[[<span class="number">0</span>]*<span class="number">1005</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1005</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">            dp[i][j]=dp[i-<span class="number">1</span>][j]</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(nums[i]+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> j&lt;k*weight[i]:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                dp[i][j]=<span class="built_in">max</span>(dp[i][j],dp[i-<span class="number">1</span>][j-k*weight[i]]+k*value[i])</span><br><span class="line"></span><br><span class="line">                <span class="comment"># dp[i][j]=max(dp[i-1][j],dp[i-1][j-weight]+value,dp[i-1][j-2*weight]+2*value,...)</span></span><br><span class="line">                <span class="comment"># dp[i][j-weight]=max(dp[i-1][j-weight],dp[i-1][j-2*weight]+value,dp[i-1][j-3*weight]+2*value,...)</span></span><br><span class="line">                <span class="comment"># dp[i][j]=max(dp[i-1][j],dp[i][j-weight]+value)</span></span><br><span class="line">                <span class="comment"># dp[i][j]=max(dp[i-1][j],dp[i][j-weight[i]]+value[i])</span></span><br><span class="line">    <span class="built_in">print</span>(dp[n][m])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dp2</span>():</span><br><span class="line">    dp=[<span class="number">0</span>]*<span class="number">1005</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(nums[i]+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> j&lt;k*weight[i]:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                dp[j]=<span class="built_in">max</span>(dp[j],dp[j-k*weight[i]]+k*value[i])</span><br><span class="line">    <span class="built_in">print</span>(dp[m])</span><br><span class="line">dp2()</span><br></pre></td></tr></table></figure><h4 id="分组背包"><a class="markdownIt-Anchor" href="#分组背包"></a> 分组背包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">weight=defaultdict(<span class="built_in">list</span>)</span><br><span class="line">value=defaultdict(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1</span>+n):</span><br><span class="line">    nums=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(nums):</span><br><span class="line">        a,b=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">        weight[i].append(a)</span><br><span class="line">        value[i].append(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dp1</span>():</span><br><span class="line">    dp=[[<span class="number">0</span>]*<span class="number">105</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10005</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1</span>+n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">            dp[i][j]=dp[i-<span class="number">1</span>][j]</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(weight[i])):</span><br><span class="line">                <span class="keyword">if</span> j&gt;=weight[i][k]:</span><br><span class="line"></span><br><span class="line">                    dp[i][j]=<span class="built_in">max</span>(dp[i][j],dp[i-<span class="number">1</span>][j-weight[i][k]]+value[i][k])</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(dp[n][m])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dp2</span>():</span><br><span class="line">    dp=[<span class="number">0</span>]*<span class="number">10005</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(weight[i])):</span><br><span class="line">                <span class="keyword">if</span> j&gt;=weight[i][k]:</span><br><span class="line">                    dp[j]=<span class="built_in">max</span>(dp[j],dp[j-weight[i][k]]+value[i][k])</span><br><span class="line">    <span class="built_in">print</span>(dp[m])</span><br><span class="line">dp2()</span><br></pre></td></tr></table></figure><h4 id="最长递增子序列"><a class="markdownIt-Anchor" href="#最长递增子序列"></a> 最长递增子序列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">nums=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">dp=[<span class="number">0</span>]*n</span><br><span class="line">ans=<span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    dp[i]=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">        <span class="keyword">if</span> nums[j]&lt;nums[i]:</span><br><span class="line">            dp[i]=<span class="built_in">max</span>(dp[i],dp[j]+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    ans=<span class="built_in">max</span>(ans,dp[i])</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"><span class="comment"># ----------</span></span><br><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">nums=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">INF=<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">length=[INF]*(n+<span class="number">1</span>)</span><br><span class="line">ans=<span class="number">1</span></span><br><span class="line">length[<span class="number">0</span>]=-INF</span><br><span class="line"><span class="keyword">for</span> index,num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">    i=bisect.bisect_left(length,num)</span><br><span class="line">    length[i]=num</span><br><span class="line">    ans=<span class="built_in">max</span>(ans,i)</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><h4 id="最长公共子序列"><a class="markdownIt-Anchor" href="#最长公共子序列"></a> 最长公共子序列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">s=<span class="string">&#x27; &#x27;</span>+<span class="built_in">input</span>()</span><br><span class="line">t=<span class="string">&quot; &quot;</span>+<span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">dp=[[<span class="number">0</span>]*(m+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,m+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> s[i]==t[j]:</span><br><span class="line">            dp[i][j]=dp[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dp[i][j]=<span class="built_in">max</span>(dp[i-<span class="number">1</span>][j],dp[i][j-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(dp[n][m]) </span><br></pre></td></tr></table></figure><h4 id="最短编辑距离"><a class="markdownIt-Anchor" href="#最短编辑距离"></a> 最短编辑距离</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">s=<span class="string">&#x27; &#x27;</span>+<span class="built_in">input</span>()</span><br><span class="line">m=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">t=<span class="string">&quot; &quot;</span>+<span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">dp=[[<span class="number">0</span>]*(m+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>):</span><br><span class="line">    dp[i][<span class="number">0</span>]=i</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">    dp[<span class="number">0</span>][j]=j</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,m+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> s[i]==t[j]:</span><br><span class="line">            dp[i][j]=<span class="built_in">min</span>(dp[i-<span class="number">1</span>][j-<span class="number">1</span>],dp[i-<span class="number">1</span>][j]+<span class="number">1</span>,dp[i][j-<span class="number">1</span>]+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dp[i][j]=<span class="built_in">min</span>(dp[i-<span class="number">1</span>][j-<span class="number">1</span>],dp[i-<span class="number">1</span>][j],dp[i][j-<span class="number">1</span>])+<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(dp[n][m])</span><br></pre></td></tr></table></figure><h2 id="贪心"><a class="markdownIt-Anchor" href="#贪心"></a> 贪心</h2><h4 id="区间覆盖"><a class="markdownIt-Anchor" href="#区间覆盖"></a> 区间覆盖</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">s,t=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">pair=[]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a,b=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    <span class="keyword">if</span> a&gt;t <span class="keyword">or</span> b&lt;s:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    pair.append([a,b])</span><br><span class="line"></span><br><span class="line">pair=<span class="built_in">sorted</span>(pair)</span><br><span class="line">start=s</span><br><span class="line">end=<span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line">count=<span class="number">1</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> end&lt;t <span class="keyword">and</span> i &lt;<span class="built_in">len</span>(pair):</span><br><span class="line">    a,b=pair[i]</span><br><span class="line">    <span class="keyword">if</span> a&lt;=start:</span><br><span class="line">        end=<span class="built_in">max</span>(end,b)</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> a&gt;start:</span><br><span class="line">        <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        start=end</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> end&gt;=t:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> a&gt;end:</span><br><span class="line">            end=<span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(count <span class="keyword">if</span> end&gt;=t <span class="keyword">else</span> -<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="区间分组"><a class="markdownIt-Anchor" href="#区间分组"></a> 区间分组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">pair=[]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    pair.append(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())))</span><br><span class="line">pair=<span class="built_in">sorted</span>(pair)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line">count=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pair)):</span><br><span class="line">    a,b=pair[i]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(count)==<span class="number">0</span> <span class="keyword">or</span> a&lt;=count[<span class="number">0</span>]:</span><br><span class="line">        heapq.heappush(count,b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        heapq.heappop(count)</span><br><span class="line">        heapq.heappush(count,b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(count))</span><br></pre></td></tr></table></figure><h4 id="最大不相交区间"><a class="markdownIt-Anchor" href="#最大不相交区间"></a> 最大不相交区间</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">pair=[]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line"></span><br><span class="line">    pair.append(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())))</span><br><span class="line"></span><br><span class="line">pair=<span class="built_in">sorted</span>(pair,key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">start=pair[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">end=pair[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">count=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(pair)):</span><br><span class="line">    a,b=pair[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> a&lt;=end <span class="keyword">and</span> b&gt;end:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> a&lt;=end <span class="keyword">and</span> b&lt;=end:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> a&gt;end:</span><br><span class="line">        start=a</span><br><span class="line">        end=b</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure><h4 id="区间选点"><a class="markdownIt-Anchor" href="#区间选点"></a> 区间选点</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">pair=[]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line"></span><br><span class="line">    pair.append(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())))</span><br><span class="line"></span><br><span class="line">pair=<span class="built_in">sorted</span>(pair)</span><br><span class="line"></span><br><span class="line">start=pair[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">end=pair[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">count=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(pair)):</span><br><span class="line">    a,b=pair[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> a&lt;=end <span class="keyword">and</span> b&gt;end:</span><br><span class="line">        start=a</span><br><span class="line">    <span class="keyword">elif</span> a&lt;=end <span class="keyword">and</span> b&lt;=end:</span><br><span class="line">        start=a</span><br><span class="line">        end=b</span><br><span class="line">    <span class="keyword">elif</span> a&gt;end:</span><br><span class="line">        start=a</span><br><span class="line">        end=b</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure><h4 id="哈夫曼树"><a class="markdownIt-Anchor" href="#哈夫曼树"></a> 哈夫曼树</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">nums=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line">heapq.heapify(nums)</span><br><span class="line"></span><br><span class="line">ans=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">    a=heapq.heappop(nums)</span><br><span class="line">    b=heapq.heappop(nums)</span><br><span class="line">    ans+=(a+b)</span><br><span class="line">    heapq.heappush(nums,a+b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><h4 id="耍杂技的牛"><a class="markdownIt-Anchor" href="#耍杂技的牛"></a> 耍杂技的牛</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">pair=[]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a,b=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">    pair.append((a,b))</span><br><span class="line">pair=<span class="built_in">sorted</span>(pair,key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>]+x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ans=<span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line">weight=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pair)):</span><br><span class="line">    temp=weight-pair[i][<span class="number">1</span>]</span><br><span class="line">    ans=<span class="built_in">max</span>(ans,temp)</span><br><span class="line">    weight+=pair[i][<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础算法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础算法&quot;&gt;&lt;/a&gt; 基础算法&lt;/h2&gt;
&lt;h4 id=&quot;快速排序&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#快速排序&quot;&gt;&lt;/a&gt; 快速排序&lt;/h4</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="算法刷题笔记" scheme="https://gladdduck.github.io/tags/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>目标检测会议</title>
    <link href="https://gladdduck.github.io/2023/06/03/%E5%9E%83%E5%9C%BE%E6%A3%80%E6%B5%8B%E4%BC%9A%E8%AE%AE/"/>
    <id>https://gladdduck.github.io/2023/06/03/%E5%9E%83%E5%9C%BE%E6%A3%80%E6%B5%8B%E4%BC%9A%E8%AE%AE/</id>
    <published>2023-06-03T07:02:51.042Z</published>
    <updated>2023-11-13T07:05:45.331Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://wikicfp.com/cfp/">call for paper</a></p><p>ASIG 2023 7.15<br />Asia Symposium on Image and Graphics</p><p>ICCPR 2023 7.05<br />International Conference on Computing and Pattern Recognition</p><p>ICGIP 2023  6.25<br />International Conference on Graphics and Image Processing</p><p>ISVC 2023  7.20<br />International Symposium on Visual Computing</p><p>ICMV 2023 7.05<br />International Conference on Machine Vision</p><p>ICTAI 2023 6.25  -CCFC<br />International Conference on Tools with Artificial Intelligence</p><p>ICVISP 2023 7.15<br />International Conference on Vision, Image and Signal Processing</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://wikicfp.com/cfp/&quot;&gt;call for paper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASIG 2023 7.15&lt;br /&gt;
Asia Symposium on Image and Graphics&lt;/p&gt;
&lt;p&gt;ICCPR 2023 7</summary>
      
    
    
    
    <category term="论文记录" scheme="https://gladdduck.github.io/categories/%E8%AE%BA%E6%96%87%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="目标检测" scheme="https://gladdduck.github.io/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>垃圾检测相关论文</title>
    <link href="https://gladdduck.github.io/2023/04/15/%E5%9E%83%E5%9C%BE%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/"/>
    <id>https://gladdduck.github.io/2023/04/15/%E5%9E%83%E5%9C%BE%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/</id>
    <published>2023-04-15T08:51:40.893Z</published>
    <updated>2023-11-13T07:05:38.024Z</updated>
    
    <content type="html"><![CDATA[<p><strong>数据增强、改进Backbone、改进FPN、改进检测头、改进loss、改进后处理</strong></p><h2 id="基础网络"><a class="markdownIt-Anchor" href="#基础网络"></a> 基础网络</h2><h3 id="r-cnn"><a class="markdownIt-Anchor" href="#r-cnn"></a> R-CNN</h3><p><a href="https://www.bilibili.com/video/BV1CZ4y1a7NP/?spm_id_from=333.999.0.0&amp;vd_source=602787b9249cd70cfca4def5e041f060">B 站论文</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 之前都是人工提取特征,用机器学习分类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把人工提取特征改成CNN提取特征</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 三个模块</span></span><br><span class="line"><span class="comment"># 1.候选区域生成(Selective search)(2000个)(统一大小)</span></span><br><span class="line"><span class="comment"># 2.特征抽取(扩展16个像素)(AlexNet)</span></span><br><span class="line"><span class="comment"># 3.分类,框回归</span></span><br></pre></td></tr></table></figure><h3 id="sppnet"><a class="markdownIt-Anchor" href="#sppnet"></a> SPPnet</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用CNN提取整个图的特征，把候选区域映射到特征图上</span></span><br><span class="line"><span class="comment"># 最后用空间金字塔(三个层)，一个动态池化层，对候选区域特征图得到固定大小的输出特征，拼接在一起</span></span><br><span class="line"><span class="comment"># 还是用svm分类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不能很好的更新cnn权重</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/W1995S/article/details/118028384">FPN,ASFF,PANet,NASFPN,BiFPN结构</a></p><h3 id="fpn"><a class="markdownIt-Anchor" href="#fpn"></a> FPN</h3><p><code>1612</code></p><p><img src="https://image.yayan.xyz/20230331104242.png" alt="" /></p><h3 id="panet"><a class="markdownIt-Anchor" href="#panet"></a> PANet</h3><p><code>1803:FPN是自上而下,首次提出了自下而上</code><br /><img src="https://image.yayan.xyz/20230331104133.png" alt="" /></p><h3 id="cspnet"><a class="markdownIt-Anchor" href="#cspnet"></a> CSPnet</h3><p><code>梯度分流,减少计算量和内存</code><br /><img src="https://image.yayan.xyz/20230425170230.png" alt="" /></p><h3 id="spp"><a class="markdownIt-Anchor" href="#spp"></a> SPP</h3><p><code>1406</code></p><p><img src="https://image.yayan.xyz/20230331103844.png" alt="" /></p><h3 id="sppf"><a class="markdownIt-Anchor" href="#sppf"></a> SPPF</h3><p><img src="https://image.yayan.xyz/20230331152040.png" alt="" /></p><h3 id="fast-r-cnn"><a class="markdownIt-Anchor" href="#fast-r-cnn"></a> Fast R-CNN</h3><p><a href="https://www.bilibili.com/video/BV1y94y1Q7QJ/?spm_id_from=333.999.0.0&amp;vd_source=602787b9249cd70cfca4def5e041f060">B 站论文</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 针对R-CNN和SPPnet</span></span><br><span class="line"><span class="comment"># 多阶段模型,不同的模块都要分别训练</span></span><br><span class="line"><span class="comment"># 要把提取到的特征存到磁盘里，再给分类器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单阶段，不用存特征</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用CNN得到整张图片的特征</span></span><br><span class="line"><span class="comment"># 根据候选区域在图片上的位置（输入坐标），利用ROI投影获得候选区域在特征图上的特征</span></span><br><span class="line"><span class="comment"># 用ROI池化层（空间金字塔特殊情况，一个层）把候选区域特征转为固定大小的特征图</span></span><br><span class="line"><span class="comment"># 两个并行全连接层，分类、预测坐标</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他验证性实验 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试阶段输入图像和候选区域坐标</span></span><br><span class="line"><span class="comment"># 候选区域建议是单独的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="faster-r-cnn"><a class="markdownIt-Anchor" href="#faster-r-cnn"></a> Faster R-CNN</h3><p><a href="https://www.bilibili.com/video/BV1y94y1Q7QJ/?spm_id_from=333.999.0.0&amp;vd_source=602787b9249cd70cfca4def5e041f060">B 站论文</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Fast R-CNN还是需要单独的模块生成候选区域投影</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决候选区域选择的问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RPNs和特征提取层 共享卷积层</span></span><br><span class="line"><span class="comment"># 用n*n的滑动窗口在特征图上提取，传给small network 判断是否能生成候选区域</span></span><br><span class="line"><span class="comment"># 使用三个尺度（128，256，512 1:1,1:2,2:1，九个框）生成k个anchor boxes，（根据数据集设置框的大小），非极大值抑制</span></span><br><span class="line"><span class="comment"># 与标注狂IOU值最大，与标注框IOU值大于0.7  分给正标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交替训练</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.yayan.xyz/20230315150418.png" alt="" /><br /><img src="https://image.yayan.xyz/20230315150330.png" alt="" /></p><h3 id="mask-r-cnn"><a class="markdownIt-Anchor" href="#mask-r-cnn"></a> Mask R-CNN</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Faster R-CNN的RoI Pooling 是直接取整,会导致实例偏移,对于像素级  不可取</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把候选区域的特征图转换为固定大小的ROI feature时 也会取整</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 两次误差</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 骨干网络换成ResNet-FPN</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mask R-CNN使用双线性插值解决缩放的问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加MASK 分支,三路并行,MASK head两种实现 1.ResNet  2.ResNet+FPN 变成K*M*M </span></span><br><span class="line"><span class="comment"># K*M*M 大小,K个类别</span></span><br><span class="line"><span class="comment"># 与FCN方法是不同，FCN是对每个像素进行多类别softmax分类，然后计算交叉熵损失，这种做法是会造成类间竞争的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="论文"><a class="markdownIt-Anchor" href="#论文"></a> 论文</h2><h3 id="analysis-of-object-detection-performance-based-on-faster-rcnn"><a class="markdownIt-Anchor" href="#analysis-of-object-detection-performance-based-on-faster-rcnn"></a> Analysis of Object Detection Performance Based on Faster RCNN</h3><p><code>基于Faster R-CNN的目标检测性能分析</code></p><p><code>介绍了R-CNN-&gt;Fast R-CNN-&gt; Faster R-CNN的变化过程</code><br /><code>Faster R-CNN的大概结构</code></p><p><code>对比三个模型在不同数据集上的效果</code></p><h3 id="end-to-end-object-detection-with-transformers"><a class="markdownIt-Anchor" href="#end-to-end-object-detection-with-transformers"></a> End-to-End Object Detection with Transformers</h3><p><code>里程碑:端到端的方法,不用非极大值抑制</code><br /><code>变成集合预测问题</code><br /><code>CNN抽取特征－＞送入Transformer学习全局特征-&gt;输出100个框-&gt;二分图loss匹配真实框-&gt;计算loss</code></p><p><code>问题:小目标,训练epoch长</code></p><h3 id="efficientdet-scalable-and-efficient-object-detection"><a class="markdownIt-Anchor" href="#efficientdet-scalable-and-efficient-object-detection"></a> EfficientDet: Scalable and Efficient Object Detection</h3><p><img src="https://image.yayan.xyz/20230317135128.png" alt="" /></p><p><code>新的结构,多层特征融合</code></p><h3 id="deformable-detr-deformable-transformers-for-end-to-end-object-detection"><a class="markdownIt-Anchor" href="#deformable-detr-deformable-transformers-for-end-to-end-object-detection"></a> Deformable DETR: Deformable Transformers for End-to-End Object Detection</h3><p><code>解决DETR的两个问题</code><br /><img src="http://image.yayan.xyz/20230316214546.png" alt="" /><br /><img src="http://image.yayan.xyz/20230316215004.png" alt="" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.不用TRansformer原有的自注意力,改为可变注意力(可变卷积变来的)</span><br><span class="line">一个像素向量z根据偏移量选择四个其他像素,然后一层Liner得到权重,和选出的像素进行运算更新</span><br><span class="line"></span><br><span class="line">2.多尺度的注意力机制(Mulit-Scale),不同尺度的特征图上做,多头可变注意力机制,然后相加</span><br></pre></td></tr></table></figure><h3 id="deep-learning-based-waste-detection-in-natural-and-urban-environments"><a class="markdownIt-Anchor" href="#deep-learning-based-waste-detection-in-natural-and-urban-environments"></a> ★Deep learning-based waste detection in natural and urban environments</h3><p><code>传统图像分类网络:ResNet,DenseNet,EfficientNet,EfficientNet-B2,EfficientNetv2</code></p><p><code>经典目标检测网络:R-CNN,Fast R-CNN ,Faster R-CNN,SSD,Yolo,DETR,Deformable DETR,EfficientDet</code></p><p><code>垃圾数据集</code></p><p><img src="https://image.yayan.xyz/20230316155331.png" alt="" /></p><p><code>对所有数据集进行处理</code></p><p><code>对比模型:Efficentdet, DETR和Mask RCNN，发现Efficentdet能产生最高的mAP</code></p><p><code>一个目标检测网络EfficientDet-D2,一个图像分类网络EfficientNet-B2</code></p><p><code>训练步骤:分开训练,先训练目标检测网络,再训练图像分类网络</code></p><p><code>问题:小目标,推理时间</code></p><h3 id="garbage-object-detection-method-based-on-improved-faster-r-cnn"><a class="markdownIt-Anchor" href="#garbage-object-detection-method-based-on-improved-faster-r-cnn"></a> Garbage object detection method based on improved Faster R-CNN</h3><p><code>对Faster R-CNN进行了两点改进:</code></p><p><code>1.基础网络从VGG16改成了ResNet50</code></p><p><code>2.增加了FPN特征金字塔</code></p><p><code>3.将原本的ROI改成ROI Align(Mask R-CNN)</code></p><p><code>4.修改了RPN结构参数</code></p><h3 id="基于改进-faster-rcnn-的垃圾检测与分类方法"><a class="markdownIt-Anchor" href="#基于改进-faster-rcnn-的垃圾检测与分类方法"></a> 基于改进 Faster R⁃CNN 的垃圾检测与分类方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把Faster R-CNN 的网络换成了ResNet50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把非极大值抑制（NMS）换成了Soft-NMS</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比实验把VGG16的7*7 5*5 换成了叠加的3*3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 五折交叉验证</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用FasterR-CNN相同的交替训练训练</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 73-&gt;81%</span></span><br></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mi>M</mi><mi>S</mi><mo>:</mo><mn>0</mn><mo separator="true">,</mo><mi>I</mi><mi>o</mi><mi>U</mi><mo stretchy="false">(</mo><mi>M</mi><mo separator="true">,</mo><msub><mi>b</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>≥</mo><msub><mi>N</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">NMS:0,IoU(M,b_i) \geq N_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>o</mi><mi>f</mi><mi>t</mi><mo>−</mo><mi>N</mi><mi>M</mi><mi>S</mi><mo>:</mo><msub><mi>s</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>I</mi><mi>o</mi><mi>U</mi><mo stretchy="false">(</mo><mi>M</mi><mo separator="true">,</mo><msub><mi>b</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>I</mi><mi>o</mi><mi>U</mi><mo stretchy="false">(</mo><mi>M</mi><mo separator="true">,</mo><msub><mi>b</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>≥</mo><msub><mi>N</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">Soft-NMS:s_i(1-IoU(M,b_i)),IoU(M,b_i) \geq N_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><h3 id="object-detection-for-autonomous-trash-and-litter-collection毕业论文"><a class="markdownIt-Anchor" href="#object-detection-for-autonomous-trash-and-litter-collection毕业论文"></a> Object detection for autonomous trash and litter collection(毕业论文)</h3><p><code>针对垃圾收集机器人,管道方法:从数据收集到预测出结果的一系列</code></p><ol><li>介绍:在机器人上部署最先进的目标检测模型</li><li>背景:深度学习(MLP,CNN,YOLO),目标检测,垃圾检测数据集</li><li>管道方法组成(收集,预处理,增强,训练,验证)</li><li>自己的管道定义与实现(tile数据增强方法,光强归一化,不同模型)</li><li>结果与分析</li><li>Future work</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 根据数据集中物体大小不同使用不同模型,参数</span><br><span class="line"><span class="number">2.</span> 专门为小目标设计一个检测器(Yolo-z)</span><br><span class="line"><span class="number">3.</span> 无监督学习,创建全功能检测器</span><br><span class="line"><span class="number">4.</span> 对图像的不同位置使用不同的检测器</span><br><span class="line"><span class="number">5.</span> 稍微扩大边界框,获取更多上下文信息</span><br><span class="line"><span class="number">6.</span> 利用GAN生成更多的类别均衡数据集</span><br><span class="line"><span class="number">7.</span> 开发减少假阳性数量的方法</span><br><span class="line"><span class="number">8.</span> 集成学习,使用多个较小的模型,加权盒融合</span><br><span class="line"><span class="number">9.</span> 更多的数据增广</span><br><span class="line"><span class="number">10.</span> 统一处理类别不可知的垃圾,避免对垃圾进行分类</span><br></pre></td></tr></table></figure><h3 id="tiny-object-detection-based-on-yolov5"><a class="markdownIt-Anchor" href="#tiny-object-detection-based-on-yolov5"></a> Tiny Object Detection based on YOLOv5</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 生成<span class="number">4</span>幅特征图像进行融合</span><br><span class="line"><span class="number">2.</span> 在Neck部分,使用FPN和PANet对特征进行融合</span><br><span class="line"><span class="number">3.</span> 使用GIoU损失函数替换IoU</span><br><span class="line"><span class="number">4.</span> 用SWISH激活函数替换ReLU</span><br><span class="line"><span class="number">5.</span> 马赛克数据增强和学习率余弦退火</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自己数据集上</span></span><br><span class="line"><span class="comment"># map@50: 45+  =&gt;  55+</span></span><br><span class="line"><span class="comment"># mAP@0.5:0.95 : 25+   =&gt;   30+</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># recall,precision,....</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="yolo-z-improving-small-object-detection-in-yolov5-for-autonomous-vehicles"><a class="markdownIt-Anchor" href="#yolo-z-improving-small-object-detection-in-yolov5-for-autonomous-vehicles"></a> YOLO-Z: Improving small object detection in YOLOv5 for autonomous vehicles</h3><p><code>在自动驾驶领域,对小物体检测和检测速度要求很高</code></p><p><code>很多模型没有修改模型的架构,修改的不痛不痒</code></p><p><img src="https://image.yayan.xyz/20230330170112.png" alt="" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">修改:</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> ResNet50与DenseNet作为主干网络的比较</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> PanNet换成FPN和BiFPN</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 对head部分的输入,将neck不同的特征图送入head(最有效)</span><br><span class="line"></span><br><span class="line">结果分析:</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>DenseNet效果比ResNet好,这可能是由于网络深度不够，无法获得ResNet主干的好处，而DenseNet在保存特征图的细节方面做得很好</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 在小模型上FPN比BiFPN效果好,因为较简单的模型受益于保持特征图相对不变，而其他比例需要额外的步骤来适应添加的特征图处理，并最终优于前者。但都优于传统模型.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 特征图的修改最有效果,因为在头部包含更高分辨率的特征图后，小对象最终会占用更多像素，因此具有更大的影响，而不是在主干的卷积阶段丢失。同样，删除原始较低分辨率的要素特征图会减少所需的处理量，并防止模型抵消较高分辨率贴图提供的细节级别。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 小模型anchor少比较好,大模型多了好,因为更复杂或更深入的模型确实可能受益于额外的锚，或者换句话说，可能更有能力利用额外锚提供的细节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>其他学习率,深度宽度影响,</span><br></pre></td></tr></table></figure><h3 id="accuracy-and-efficiency-comparison-of-object-detection-open-source-models"><a class="markdownIt-Anchor" href="#accuracy-and-efficiency-comparison-of-object-detection-open-source-models"></a> Accuracy and Efficiency Comparison of Object Detection Open-Source Models</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">自己构建的杂草检测数据集,使用多种数据增强方法</span><br><span class="line"></span><br><span class="line">使用EfficientDet,Faster R-CNN,YOLOv5,Detectron2 四个开源模型实验</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.yayan.xyz/20230414103141.png" alt="" /></p><h3 id="the-object-detection-of-underwater-garbage-with-an-improved-yolov5-algorithm"><a class="markdownIt-Anchor" href="#the-object-detection-of-underwater-garbage-with-an-improved-yolov5-algorithm"></a> The Object Detection of Underwater Garbage with an Improved YOLOv5 Algorithm</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用K-means对anchor进行聚类，产生九个新的框大小</span><br><span class="line"></span><br><span class="line">将IoU或者GIoU损失函数改为CIoU损失函数</span><br><span class="line"></span><br><span class="line">没有使用数据增强</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="an-irregularly-dropped-garbage-detection-method-based-on-improved-yolov5s"><a class="markdownIt-Anchor" href="#an-irregularly-dropped-garbage-detection-method-based-on-improved-yolov5s"></a> An Irregularly Dropped Garbage Detection Method Based on Improved YOLOv5s</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CBAM 注意力模块</span><br><span class="line">EIoU Loss</span><br><span class="line">DeepSort 过滤静态物品</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">只选取了小部分垃圾种类</span><br></pre></td></tr></table></figure><h3 id="towards-lightweight-neural-networks-for-garbage-object-detection"><a class="markdownIt-Anchor" href="#towards-lightweight-neural-networks-for-garbage-object-detection"></a> Towards Lightweight Neural Networks for Garbage Object Detection</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Yolov3</span><br><span class="line">用DarkNet53做分类器</span><br><span class="line"></span><br><span class="line">Yolov4的backbone是CSPDarkNet53</span><br><span class="line">对CSPResNet优化得到DCSPResNet</span><br><span class="line">对结构进行替换</span><br><span class="line"></span><br><span class="line">轻量型Yolov4 的1/10 的参数</span><br><span class="line">激活函数的修改 SiLU LReLU</span><br><span class="line">DCSPDarkNet+膨胀卷积/膨胀变形卷积</span><br><span class="line">使用膨胀变形卷积对CSPResNet结构进行了改进</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">没有考虑垃圾堆场景</span><br><span class="line">不能在价格较低、性能较低的CPU设备上实时运行</span><br><span class="line">对于目标遮挡和相对少见的目标识别，YOLOG的识别效果较差</span><br></pre></td></tr></table></figure><h3 id="real-time-garbage-object-detection-with-data-augmentation-and-feature-fusion-using-suav-low-altitude-remote-sensing-images"><a class="markdownIt-Anchor" href="#real-time-garbage-object-detection-with-data-augmentation-and-feature-fusion-using-suav-low-altitude-remote-sensing-images"></a> Real-Time Garbage Object Detection With Data Augmentation and Feature Fusion Using SUAV Low-Altitude Remote Sensing Images</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修改Yolov4</span><br><span class="line">使用不同结构</span><br><span class="line">FPN,ASFF,PANet,NASFPN,BiFPN</span><br><span class="line"></span><br><span class="line">加上数据增强</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="yolov5"><a class="markdownIt-Anchor" href="#yolov5"></a> Yolov5</h2><h3 id="yolox"><a class="markdownIt-Anchor" href="#yolox"></a> Yolox</h3><h3 id="yolov3"><a class="markdownIt-Anchor" href="#yolov3"></a> Yolov3</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">提出了Darknet53</span><br><span class="line"></span><br><span class="line">修修补补</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="yolov4"><a class="markdownIt-Anchor" href="#yolov4"></a> Yolov4</h3><p><a href="https://blog.csdn.net/WZZ18191171661/article/details/113765995">Yolov4分析</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">针对input,backbone,neck,head选择不同的结构</span><br><span class="line"></span><br><span class="line">Bag of freebies:在训练时的技巧不影响推测时间</span><br><span class="line">数据增广,损失函数,归一化</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Bag of special:应用到模型中的技巧</span><br><span class="line">特征聚合结构块,注意力机制,激活函数,NMS,骨干网络选择</span><br><span class="line"></span><br><span class="line">检测头继续用yolov3</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="yolov5-2"><a class="markdownIt-Anchor" href="#yolov5-2"></a> Yolov5</h3><p><a href="https://blog.csdn.net/WZZ18191171661/article/details/113789486">yolov5分析</a><br /><img src="https://image.yayan.xyz/20230330184730.png" alt="" /></p><p><img src="https://image.yayan.xyz/20230331152436.png" alt="" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># YOLOv5 v6.0 backbone</span><br><span class="line">backbone:</span><br><span class="line">  # [from, number, module, args]</span><br><span class="line">  [[-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2</span><br><span class="line">   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4</span><br><span class="line">   [-1, 3, C3, [128]],</span><br><span class="line">   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8</span><br><span class="line">   [-1, 6, C3, [256]],</span><br><span class="line">   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16</span><br><span class="line">   [-1, 9, C3, [512]],</span><br><span class="line">   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32</span><br><span class="line">   [-1, 3, C3, [1024]],</span><br><span class="line">   [-1, 1, SPPF, [1024, 5]],  # 9</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"># YOLOv5 v6.0 head</span><br><span class="line">head:</span><br><span class="line">  [[-1, 1, Conv, [512, 1, 1]],</span><br><span class="line">   [-1, 1, nn.Upsample, [None, 2, &#x27;nearest&#x27;]],</span><br><span class="line">   [[-1, 6], 1, Concat, [1]],  # cat backbone P4</span><br><span class="line">   [-1, 3, C3, [512, False]],  # 13</span><br><span class="line"></span><br><span class="line">   [-1, 1, Conv, [256, 1, 1]],</span><br><span class="line">   [-1, 1, nn.Upsample, [None, 2, &#x27;nearest&#x27;]],</span><br><span class="line">   [[-1, 4], 1, Concat, [1]],  # cat backbone P3</span><br><span class="line">   [-1, 3, C3, [256, False]],  # 17 (P3/8-small)</span><br><span class="line"></span><br><span class="line">   [-1, 1, Conv, [256, 3, 2]],</span><br><span class="line">   [[-1, 14], 1, Concat, [1]],  # cat head P4</span><br><span class="line">   [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)</span><br><span class="line"></span><br><span class="line">   [-1, 1, Conv, [512, 3, 2]],</span><br><span class="line">   [[-1, 10], 1, Concat, [1]],  # cat head P5</span><br><span class="line">   [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)</span><br><span class="line"></span><br><span class="line">   [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)</span><br><span class="line">  ]</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="开源复现"><a class="markdownIt-Anchor" href="#开源复现"></a> 开源复现</h2><h3 id="fasterr-cnn"><a class="markdownIt-Anchor" href="#fasterr-cnn"></a> FasterR-CNN</h3><p><a href="https://github.com/chenyuntc/simple-faster-rcnn-pytorch">模型链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 下载到Google Colab</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 安装依赖</span><br><span class="line">!pip install ipdb visdom torchnet fire</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 修改代码</span><br><span class="line">data\voc_dataset.py中的VOC_BBOX_LABEL_NAMES修改成自己类别</span><br><span class="line">utils\vis_tool.py 中的VOC_BBOX_LABEL_NAMES修改成自己类别</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 源代码直接运行会报错</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&#x27;need at least one array to stack&#x27;</span>)</span><br><span class="line">ValueError: need at least one array to stack</span><br><span class="line">因为只训练有物体的图片,</span><br><span class="line">在data\voc_dataset.py</span><br><span class="line"><span class="number">76</span>行替换如下</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">id_list_file = os.path.join(data_dir, &#x27;ImageSets/Main/&#123;0&#125;.txt&#x27;.format(split))</span></span><br><span class="line"><span class="string">id_list_read = [id_.strip() for id_ in open(id_list_file)]</span></span><br><span class="line"><span class="string">id_list = list()</span></span><br><span class="line"><span class="string">for i in id_list_read:</span></span><br><span class="line"><span class="string">  obj = ET.parse(os.path.join(data_dir, &#x27;Annotations&#x27;, i + &#x27;.xml&#x27;))</span></span><br><span class="line"><span class="string">  if obj.findall(&#x27;object&#x27;):</span></span><br><span class="line"><span class="string">    id_list.append(i)</span></span><br><span class="line"><span class="string">self.ids = id_list</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>在Google Colab运行不能可视化会报错</span><br><span class="line">! npm install -g localtunnel</span><br><span class="line">get_ipython().system_raw(<span class="string">&#x27;python3 -m pip install visdom&#x27;</span>)</span><br><span class="line">get_ipython().system_raw(<span class="string">&#x27;python3 -m visdom.server -port 8097 &gt;&gt; visdomlog.txt 2&gt;&amp;1 &amp;&#x27;</span>)</span><br><span class="line">get_ipython().system_raw(<span class="string">&#x27;lt --port 8097 &gt;&gt; url.txt 2&gt;&amp;1 &amp;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">在运行,打开url.txt 查看可视化的窗口</span><br><span class="line"></span><br><span class="line">code_root/</span><br><span class="line">└── data/</span><br><span class="line">    └── VOC2007/</span><br><span class="line">        ├── Annotations/</span><br><span class="line">        ├── JPEGImages/</span><br><span class="line">        └── ImageSets/</span><br><span class="line">        └── Main/</span><br><span class="line">              ├── test.txt</span><br><span class="line">                ├── train.txt</span><br><span class="line">                ├── val.txt</span><br><span class="line">                └── trainval.txt</span><br></pre></td></tr></table></figure><h3 id="efficientdet"><a class="markdownIt-Anchor" href="#efficientdet"></a> EfficientDet</h3><p><a href="https://github.com/rwightman/efficientdet-pytorch">模型链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行环境Google Colab</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>下载到工作区</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>安装依赖</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 代码:effdet\data\parsers\parser_voc.py 文件中的DEFAULT_CLASSES改成自己的类别名称</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>! python ..../efficientdet-pytorch-master/train.py /content --dataset VOC2007 --num-classes 自己的类别 </span><br><span class="line"></span><br><span class="line"><span class="comment"># JPEGImages:所有图片  Annotations:所有xml标注  txt:用作训练测试的文件名,不带后缀</span></span><br><span class="line">code_root/</span><br><span class="line">└── data/</span><br><span class="line">    └── VOC2007/</span><br><span class="line">        ├── Annotations/</span><br><span class="line">        ├── JPEGImages/</span><br><span class="line">        └── ImageSets/</span><br><span class="line">        └── Main/</span><br><span class="line">              ├── test.txt</span><br><span class="line">                ├── train.txt</span><br><span class="line">                ├── val.txt</span><br><span class="line">                └── trainval.txt</span><br></pre></td></tr></table></figure><h3 id="deformable-detr"><a class="markdownIt-Anchor" href="#deformable-detr"></a> Deformable-DETR</h3><p><a href="https://github.com/fundamentalvision/Deformable-DETR">模型链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行环境Google Colab</span></span><br><span class="line"><span class="number">1.</span>下载到工作区</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>安装相关依赖</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>!python ..(绝对路径..)/Deformable-DETR-main/models/ops/setup.py build install (用的jupyter)(可以用ops文件夹下的test.py测试环境是否正确)</span><br><span class="line"></span><br><span class="line"><span class="comment">#错误名称:找不到....h文件</span></span><br><span class="line">如果报错,添加 export CUDA_PATH=/usr/local/cuda-你的版本</span><br><span class="line"><span class="comment"># 错误名</span></span><br><span class="line">吧这一段修改到setup.py里面</span><br><span class="line">extra_compile_args[<span class="string">&quot;nvcc&quot;</span>] = [</span><br><span class="line">            <span class="string">&quot;-DCUDA_HAS_FP16=1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-D__CUDA_NO_HALF_OPERATORS__&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-D__CUDA_NO_HALF_CONVERSIONS__&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-D__CUDA_NO_HALF2_OPERATORS__&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-arch=sm_60&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-gencode=arch=compute_60,code=sm_60&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-gencode=arch=compute_61,code=sm_61&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-gencode=arch=compute_70,code=sm_70&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-gencode=arch=compute_75,code=sm_75&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>代码:...../Deformable-DETR-main/util/misc.py 里面的</span><br><span class="line"><span class="comment"># float(torchvision.__version__[:3]) &lt; 0.5/0.7 </span></span><br><span class="line">需要改动,因为对于<span class="number">0.10</span>.x版本的不适用,自己改成了</span><br><span class="line"><span class="comment"># float(torchvision.__version__[:4]) &lt; 0.05:</span></span><br><span class="line">否则报错cannot <span class="keyword">import</span> name <span class="string">&#x27;_NewEmptyTensorOp&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;torchvision.ops.misc&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>! python ...../Deformable-DETR-main/main.py --coco_path ..../coco </span><br><span class="line"></span><br><span class="line"><span class="comment"># train2017:训练图片  val2017:测试图片   annotations两个文件下面的标注图片</span></span><br><span class="line">code_root/</span><br><span class="line">└── data/</span><br><span class="line">    └── coco/</span><br><span class="line">        ├── train2017/</span><br><span class="line">        ├── val2017/</span><br><span class="line">        └── annotations/</span><br><span class="line">        ├── instances_train2017.json</span><br><span class="line">        └── instances_val2017.json</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="yolov5-3"><a class="markdownIt-Anchor" href="#yolov5-3"></a> YOLOv5</h3><p><a href="https://github.com/ultralytics/yolov5">模型链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行环境Google Colab</span></span><br><span class="line"><span class="number">1.</span>下载到工作区</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>安装相关依赖</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>指定数据路径 运行</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="yolov8"><a class="markdownIt-Anchor" href="#yolov8"></a> YOLOv8</h3><p><a href="https://github.com/ultralytics/ultralytics">模型链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行环境Google Colab</span></span><br><span class="line"><span class="number">1.</span>!pip install ultralytics==<span class="number">8.0</span><span class="number">.20</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>安装相关依赖</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>指定数据路径 运行</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;数据增强、改进Backbone、改进FPN、改进检测头、改进loss、改进后处理&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;基础网络&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础网络&quot;&gt;&lt;/a&gt; 基础网络&lt;/h2&gt;
&lt;h3 </summary>
      
    
    
    
    <category term="论文记录" scheme="https://gladdduck.github.io/categories/%E8%AE%BA%E6%96%87%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="垃圾检测" scheme="https://gladdduck.github.io/tags/%E5%9E%83%E5%9C%BE%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://gladdduck.github.io/2023/04/11/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    <id>https://gladdduck.github.io/2023/04/11/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</id>
    <published>2023-04-11T12:46:41.871Z</published>
    <updated>2023-04-14T02:19:59.376Z</updated>
    
    <content type="html"><![CDATA[<p>一种介乎CNN和selfAttention之间的操作</p><p>将空间不变性(平移不变性)与通道变换性 交换了</p><h4 id="普通卷积"><a class="markdownIt-Anchor" href="#普通卷积"></a> 普通卷积</h4><p>好处<br />1.不同位置之间重用卷积核,减少参数<br />2.不同通道代表不同含义的信息</p><p>缺点<br />1.通道冗余</p><p>2.卷积的接受范围</p><p>3.不能根据输入自适应卷积核大小</p><h4 id="involution"><a class="markdownIt-Anchor" href="#involution"></a> Involution</h4><p>空间互异,通道不变</p><p>在通道之间共享卷积核,不同位置卷积核不同</p><p>Involution 卷积核大小<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo>×</mo><mi>W</mi><mo>×</mo><mi>K</mi><mo>×</mo><mi>K</mi><mo>×</mo><mi>G</mi></mrow><annotation encoding="application/x-tex">H×W×K×K×G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">G</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">G</span></span></span></span>是group<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>是邻域</p><p>表示:对于HW(核的HW是根据输出特征图大小计算得到)个像素点,每个像素点都有一个K*K大小的卷积核,把C个通道分成G组,组内的通道共享卷积核</p><p><img src="https://image.yayan.xyz/20230413170754.png" alt="" /></p><p>对于一个像素点<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn><mo>×</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">1×1×C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span> -(两层线性变换)&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn><mo>×</mo><msup><mi>K</mi><mn>2</mn></msup><mo>×</mo><mi>G</mi></mrow><annotation encoding="application/x-tex">1×1×K^2×G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">G</span></span></span></span> -(Reshape)&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn><mo>×</mo><mi>K</mi><mo>×</mo><mi>K</mi><mo>×</mo><mi>G</mi></mrow><annotation encoding="application/x-tex">1×1×K×K×G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">G</span></span></span></span> -(注意力机制)&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn><mo>×</mo><mi>K</mi><mo>×</mo><mi>K</mi><mo>×</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">1×1×K×K×C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span> -(聚合)&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn><mo>×</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">1×1×C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p><p><img src="https://image.yayan.xyz/20230413170813.png" alt="" /></p><h4 id="与自注意力的区别"><a class="markdownIt-Anchor" href="#与自注意力的区别"></a> 与自注意力的区别</h4><p>是一种更加简洁通用的自注意力机制</p><p>自注意力公式:<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><mo>=</mo><mi>X</mi><msup><mi>W</mi><mi>Q</mi></msup></mrow><annotation encoding="application/x-tex">Q=XW^Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">Q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">Q</span></span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi><mo>=</mo><mi>X</mi><msup><mi>W</mi><mi>K</mi></msup></mrow><annotation encoding="application/x-tex">K=XW^K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span></span></span></span></span></span></span></span></span></span></span> ,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo>=</mo><mi>X</mi><msup><mi>W</mi><mi>V</mi></msup></mrow><annotation encoding="application/x-tex">V=XW^V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span></span></span></span></span></span></span></span></span></span></span><br /><img src="https://image.yayan.xyz/20230414101940.png" alt="" /></p><p>Involution:<br />通用描述:<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><mi>X</mi><msup><mi>W</mi><mi>Q</mi></msup><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>X</mi><msup><mi>W</mi><mi>K</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H_{i,j}=(XW^Q)(XW^K)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">Q</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p><img src="https://image.yayan.xyz/20230414101953.png" alt="" /></p><p>多头注意力头数&lt;-&gt;通道组数</p><p>相似矩阵:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><mi>K</mi></mrow><annotation encoding="application/x-tex">QK</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">Q</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>&lt;-&gt;核:H</p><p>位置编码&lt;-&gt;生成的核有序的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一种介乎CNN和selfAttention之间的操作&lt;/p&gt;
&lt;p&gt;将空间不变性(平移不变性)与通道变换性 交换了&lt;/p&gt;
&lt;h4 id=&quot;普通卷积&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#普通卷积&quot;&gt;&lt;/a&gt; 普通卷积&lt;/h4&gt;
&lt;p&gt;好</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>AcWing每日一题</title>
    <link href="https://gladdduck.github.io/2023/04/06/AcWing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    <id>https://gladdduck.github.io/2023/04/06/AcWing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</id>
    <published>2023-04-06T11:15:17.545Z</published>
    <updated>2023-04-22T10:51:26.840Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前缀和"><a class="markdownIt-Anchor" href="#前缀和"></a> 前缀和</h3><p>将区间求和求差,改为两个值的运算</p><h3 id="差分"><a class="markdownIt-Anchor" href="#差分"></a> 差分</h3><p>前缀和的逆运算,可以在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>的时间内更新区间</p><h3 id="二分"><a class="markdownIt-Anchor" href="#二分"></a> 二分</h3><p>下标二分</p><p>答案二分</p><p>注意边界</p><h3 id="双指针"><a class="markdownIt-Anchor" href="#双指针"></a> 双指针</h3><p>区间问题,最大最小值,但是左指针是递增(单调性)</p><h3 id="递推"><a class="markdownIt-Anchor" href="#递推"></a> 递推</h3><p>根据规律或者推断,找解</p><h3 id="递归"><a class="markdownIt-Anchor" href="#递归"></a> 递归</h3><p>树的遍历</p><h3 id="并查集"><a class="markdownIt-Anchor" href="#并查集"></a> 并查集</h3><p>集合划分与合并</p><h3 id="哈希"><a class="markdownIt-Anchor" href="#哈希"></a> 哈希</h3><p>重复值或者出现的次数</p><h3 id="单调队列"><a class="markdownIt-Anchor" href="#单调队列"></a> 单调队列</h3><p>之前或者之后的最大最小值</p><h3 id="kmp"><a class="markdownIt-Anchor" href="#kmp"></a> KMP</h3><p>字符串匹配</p><h3 id="trie"><a class="markdownIt-Anchor" href="#trie"></a> Trie</h3><p>字典树,最大的异或对</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tire[<span class="number">3100005</span>][<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> index=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">31</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="type">int</span> temp=(num&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(tire[p][temp]==<span class="number">0</span>)&#123;</span><br><span class="line">            tire[p][temp]=index++;</span><br><span class="line">        &#125;</span><br><span class="line">        p=tire[p][temp];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">31</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="type">int</span> temp=(num&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(tire[p][!temp])&#123;</span><br><span class="line">            ans+=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">            p=tire[p][!temp];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p=tire[p][temp];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> t;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">        <span class="built_in">build</span>(t);</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(t));</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="bfs"><a class="markdownIt-Anchor" href="#bfs"></a> BFS</h3><h3 id="dfs"><a class="markdownIt-Anchor" href="#dfs"></a> DFS</h3><h3 id="拓扑排序"><a class="markdownIt-Anchor" href="#拓扑排序"></a> 拓扑排序</h3><h3 id="dijkstra"><a class="markdownIt-Anchor" href="#dijkstra"></a> Dijkstra</h3><p>Dijkstra算法是一种广泛使用的最短路径算法，可以求解从单个源节点到其他所有节点的最短路径。其基本思路是维护两个集合，一个集合存储已经确定最短路径的节点，另一个集合存储未确定路径的节点。初始时，只有源节点在已确定的路径集合中，其他节点在未确定路径的集合中。每次从未确定节点中选择距离源节点最近的节点加入到已确定路径的集合中，更新该节点到其他未确定节点的最短距离。重复此步骤直到已确定的路径集合中包含所有节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dijkstra</span>(<span class="params">graph</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(graph)</span><br><span class="line">    dist = [<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * (n)</span><br><span class="line">    dist[<span class="number">0</span>] = <span class="number">0</span>  </span><br><span class="line">    visited = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    min_heap = [(<span class="number">0</span>, <span class="number">0</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="comment"># 找到还没确定的里面距离最小的</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(min_heap)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        temp, min_index = heapq.heappop(min_heap)</span><br><span class="line">        <span class="comment"># 已经确定了</span></span><br><span class="line">        visited.add(min_index)</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> visited <span class="keyword">and</span> graph[min_index][v] &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># graph[min_index][v] &gt; 0 表示存在这个路径</span></span><br><span class="line">                new_dist = dist[min_index] + graph[min_index][v]</span><br><span class="line">                <span class="keyword">if</span> dist[v] &gt; new_dist:  <span class="comment"># 表示值得被更新</span></span><br><span class="line">                    dist[v] = new_dist</span><br><span class="line">                    heapq.heappush(min_heap, (dist[v], v))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n,m=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">graph = [[<span class="number">0</span>]*(n+<span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">2</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a,b=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">    graph[a-<span class="number">1</span>][b-<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line">    graph[b-<span class="number">1</span>][a-<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">ans=dijkstra(graph)   </span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ans[<span class="number">1</span>:n]:</span><br><span class="line"><span class="built_in">print</span>(item)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="质数问题"><a class="markdownIt-Anchor" href="#质数问题"></a> 质数问题</h3><p>筛质数</p><p>1.埃氏筛 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(NloglogN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span><br /><code>可优化</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">esieve</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;<span class="comment">//标记0~n的数字的质数状态,并统计质数个数</span></span><br><span class="line">vis[<span class="number">0</span>]=vis[<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//0，1属于非质数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;<span class="comment">//标记剩下的2~n的数字的状态</span></span><br><span class="line"><span class="keyword">if</span>(vis[i]==<span class="number">0</span>)&#123;<span class="comment">//判断i是不是质数 思考：为什么这样就能判断i是质数？</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>*i;j&lt;=n;j+=i)&#123;<span class="comment">//遍历范围内的i的倍数</span></span><br><span class="line">vis[j]=<span class="number">1</span>;<span class="comment">//将倍数标记为1（非质数）</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>优化后</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">esieve</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;<span class="comment">//标记0~n的数字的质数状态,并统计质数个数</span></span><br><span class="line">    vis[<span class="number">0</span>]=vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)&#123;<span class="comment">//标记剩下的2~n的数字的状态 优化：到根号n即可停止</span></span><br><span class="line"><span class="keyword">if</span>(vis[i]==<span class="number">0</span>)&#123;<span class="comment">//判断i是不是质数 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i*i;j&lt;=n;j+=i)&#123;<span class="comment">//遍历范围内的i的倍数 从i*i开始，减少重复筛选</span></span><br><span class="line">vis[j]=<span class="number">1</span>;<span class="comment">//将倍数标记为1（非质数）</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.欧拉筛 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>  线性筛</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e8</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">bool</span> vis[N];<span class="comment">//标记数组</span></span><br><span class="line"><span class="type">int</span> prime[N/<span class="number">10</span>];<span class="comment">//质数表，存放质数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">erla</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">vis[<span class="number">0</span>]=vis[<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//0.1不是质数</span></span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>;<span class="comment">//统计质数的个数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;<span class="comment">//判断i是不是质数</span></span><br><span class="line">prime[cnt++]=i;<span class="comment">//将质数存到质数表中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历质数表 新序列 prime[j]*i</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;prime[j]*i&lt;=n&amp;&amp;j&lt;cnt;j++)&#123;</span><br><span class="line">vis[prime[j]*i]=<span class="number">1</span>;<span class="comment">//标记组成的序列为非质数</span></span><br><span class="line"><span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;<span class="comment">//prime[j]是i的最小质因子 ，不能继续组合，避免重复</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;<span class="comment">//返回质数个数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.欧拉函数<br /><code>对正整数n欧拉函数是小于或等于n的正整数中与n互质的数的数目</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> vis[N];<span class="comment">//标记数组</span></span><br><span class="line"><span class="type">int</span> prime[N];<span class="comment">//质数表，存放质数</span></span><br><span class="line"><span class="type">int</span> phi[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">erla</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">vis[<span class="number">0</span>]=vis[<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//0.1不是质数</span></span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>;<span class="comment">//统计质数的个数</span></span><br><span class="line">phi[<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//1的欧拉函数值是1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;<span class="comment">//判断i是不是质数</span></span><br><span class="line">prime[cnt++]=i;<span class="comment">//将质数存到质数表中</span></span><br><span class="line">phi[i]=i<span class="number">-1</span>;<span class="comment">//性质1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历质数表 新序列 prime[j]*i</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;prime[j]*i&lt;=n&amp;&amp;j&lt;cnt;j++)&#123;</span><br><span class="line">vis[prime[j]*i]=<span class="number">1</span>;<span class="comment">//标记组成的序列为非质数</span></span><br><span class="line"><span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)&#123;</span><br><span class="line">phi[i*prime[j]]=prime[j]*phi[i];<span class="comment">//性质2</span></span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//prime[j]是i的最小质因子 ，不能继续组合，避免重复</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">phi[i*prime[j]]=(prime[j]<span class="number">-1</span>)*phi[i];<span class="comment">//性质3</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;<span class="comment">//返回质数个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大公约数"><a class="markdownIt-Anchor" href="#最大公约数"></a> 最大公约数</h3><h3 id="最近公共祖先"><a class="markdownIt-Anchor" href="#最近公共祖先"></a> 最近公共祖先</h3><h3 id="排列组合"><a class="markdownIt-Anchor" href="#排列组合"></a> 排列组合</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前缀和&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前缀和&quot;&gt;&lt;/a&gt; 前缀和&lt;/h3&gt;
&lt;p&gt;将区间求和求差,改为两个值的运算&lt;/p&gt;
&lt;h3 id=&quot;差分&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="算法刷题笔记" scheme="https://gladdduck.github.io/tags/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯题目</title>
    <link href="https://gladdduck.github.io/2023/04/03/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%9D%82%E9%A2%98/"/>
    <id>https://gladdduck.github.io/2023/04/03/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%9D%82%E9%A2%98/</id>
    <published>2023-04-03T09:24:36.314Z</published>
    <updated>2023-04-06T08:57:06.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="苏州大学2023编程菁英挑战赛第一场"><a class="markdownIt-Anchor" href="#苏州大学2023编程菁英挑战赛第一场"></a> 苏州大学2023编程菁英挑战赛第一场</h2><h3 id="a"><a class="markdownIt-Anchor" href="#a"></a> A</h3><p><a href="https://ac.nowcoder.com/acm/contest/54569/A">题目连接</a></p><blockquote><p>n个人,从第一个开始传球,经过m次回到第一个人手里的方法数</p></blockquote><p>做题思路:笨比方法:1作为root,建了棵二叉树,每次分裂出两个节点,然后再dfs,搜索路径数量(叶节点是1),超内存了</p><p>正确思路:dp[i][j] 表示传了i次在j手里的可能,判断一下1和n的边界情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">input</span>().split()</span><br><span class="line">n=<span class="built_in">int</span>(n)</span><br><span class="line">m=<span class="built_in">int</span>(m)</span><br><span class="line">dp=[[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>)]</span><br><span class="line"><span class="comment"># dp[i][j] 穿了i次在j手里的可能</span></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,m+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> j==n-<span class="number">1</span>:</span><br><span class="line">            dp[i][j]=dp[i-<span class="number">1</span>][<span class="number">0</span>]+dp[i-<span class="number">1</span>][j-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> j==<span class="number">0</span>:</span><br><span class="line">            dp[i][j]=dp[i-<span class="number">1</span>][n-<span class="number">1</span>]+dp[i-<span class="number">1</span>][j+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dp[i][j]=dp[i-<span class="number">1</span>][j+<span class="number">1</span>]+dp[i-<span class="number">1</span>][j-<span class="number">1</span>]</span><br><span class="line">      </span><br><span class="line"><span class="built_in">print</span>(dp[m][<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h3 id="b"><a class="markdownIt-Anchor" href="#b"></a> B</h3><p><a href="https://ac.nowcoder.com/acm/contest/54569/B">题目连接</a></p><blockquote><p>n对果子,一堆堆合并,果子的数量是消耗的体力,求n堆合成一堆的最小体力</p></blockquote><p>思路:哈夫曼树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">nums=[]</span><br><span class="line">numstr=<span class="built_in">input</span>().split()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    heapq.heappush(nums,<span class="built_in">int</span>(numstr[i]))</span><br><span class="line">  </span><br><span class="line">ans=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(nums)!=<span class="number">1</span>:</span><br><span class="line">    a=heapq.heappop(nums)</span><br><span class="line">    b=heapq.heappop(nums)</span><br><span class="line">    temp=a+b</span><br><span class="line">    ans+=temp</span><br><span class="line">    heapq.heappush(nums,temp)</span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><h3 id="c"><a class="markdownIt-Anchor" href="#c"></a> C</h3><p><a href="https://ac.nowcoder.com/acm/contest/54569/C">题目链接</a></p><blockquote><p>一个矩阵,每个点有对应的值,从(0,0)走到(n,n),走两次,每次走过之后会把矩阵的值清零,问这两次能得到的最大值</p></blockquote><p>思路:笨比方法:以为两次BFS就行,每次都拿到最大的,这样有可能本来上三角一次,下三角一次最大,但是第一次走最大路径把这个打破了,会导致上下三角有的没拿到</p><p>正确思路:f[i][j][h][k];表示两条路同时走，第一条路径走到(i,j)时，第二条走到（h,k）时的最大数字和；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">m=[[<span class="number">0</span>]*(n+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n*n):</span><br><span class="line">    x,y,v=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">    <span class="keyword">if</span> v==<span class="number">0</span> <span class="keyword">and</span> x==<span class="number">0</span> <span class="keyword">and</span> y==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    m[x][y]=v</span><br><span class="line"></span><br><span class="line">dp=[[[[<span class="number">0</span>]*(n+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">                dp[i][j][h][k]=<span class="built_in">max</span>(</span><br><span class="line">                    dp[i-<span class="number">1</span>][j][h-<span class="number">1</span>][k],</span><br><span class="line">                    dp[i-<span class="number">1</span>][j][h][k-<span class="number">1</span>],</span><br><span class="line">                    dp[i][j-<span class="number">1</span>][h-<span class="number">1</span>][k],</span><br><span class="line">                    dp[i][j-<span class="number">1</span>][h][k-<span class="number">1</span>]</span><br><span class="line">                )+m[i][j]+m[h][k]</span><br><span class="line">                <span class="keyword">if</span> i==h <span class="keyword">and</span> j==k:</span><br><span class="line">                    dp[i][j][h][k]-=m[h][k]</span><br><span class="line">                  </span><br><span class="line"><span class="built_in">print</span>(dp[n][n][n][n])</span><br></pre></td></tr></table></figure><h3 id="d"><a class="markdownIt-Anchor" href="#d"></a> D</h3><p><a href="https://ac.nowcoder.com/acm/contest/54569/D">题目链接</a></p><blockquote><p>一个数是两个质数的乘积,返回较大的质数</p></blockquote><p>80%思路:从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>0.5</mn></msup></mrow><annotation encoding="application/x-tex">n^{0.5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mord mtight">.</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span>遍历,余数为0就返回,80莫名其妙(答案错误),笨比,写的是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>0.5</mn></msup></mrow><annotation encoding="application/x-tex">n^{0.5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mord mtight">.</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>遍历了</p><p>正确思路:从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>0.5</mn></msup></mrow><annotation encoding="application/x-tex">n^{0.5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mord mtight">.</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span>,余数为0,返回商</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">right=<span class="built_in">int</span>(n**<span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,right+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> n%i==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(n//i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="e"><a class="markdownIt-Anchor" href="#e"></a> E</h3><p><a href="https://ac.nowcoder.com/acm/contest/54569/E">题目链接</a>\</p><p>难,略</p><h3 id="f"><a class="markdownIt-Anchor" href="#f"></a> F</h3><p><a href="https://ac.nowcoder.com/acm/contest/54569/F">题目链接</a></p><blockquote><p>n种不同面额的货币,但是有的面值能表示,有的面值不能表示,求最少只要几种货币,能和n种表示的面值一样</p></blockquote><p>80%思路:如果n里面有的数能够被其他数表示,这个就是多余的,可以去掉(???抄别人100的代码也是80),判断一个数能不能被其他的表示有点背包的感觉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">T=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="comment"># n=100</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">x,lst</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(lst)==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    dp=[<span class="literal">False</span>]*(x+<span class="number">1</span>)</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> lst:</span><br><span class="line">        <span class="keyword">for</span> index,item  <span class="keyword">in</span> <span class="built_in">enumerate</span>(dp):</span><br><span class="line">            <span class="keyword">if</span> index-num&gt;=<span class="number">0</span>:</span><br><span class="line">                dp[index]|=dp[index-num]</span><br><span class="line">        <span class="keyword">if</span> dp[x]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> dp[x]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(T):</span><br><span class="line">    n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    nums=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">    nums.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">    temp=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> index,item <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">        <span class="keyword">if</span> check(item,nums[index+<span class="number">1</span>:]):</span><br><span class="line">            temp+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(n-temp)</span><br></pre></td></tr></table></figure><h3 id="g"><a class="markdownIt-Anchor" href="#g"></a> G</h3><p><a href="https://ac.nowcoder.com/acm/contest/54569/G">题目链接</a></p><blockquote><p>n个囚犯,两个犯人中间有怨气值,把他们分成两个监狱,求一个监狱内怨气值最大的,如果监狱内的犯人之间没有怨气值,返回0</p></blockquote><p>思路:不会,随便想的,想到并查集了,但是感觉更像二分图匹配,没做出来,0蛋</p><p>正确思路:并查集,但是不是两个有怨气的犯人之间,如果A和B有怨气,B和C有怨气,那么应该把A和C归并,B单独,先按照怨气值从大到小排序,如果这两个人在一个集里面了,那就说明不可避免了,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">input</span>().split()</span><br><span class="line">n=<span class="built_in">int</span>(n)</span><br><span class="line">m=<span class="built_in">int</span>(m)</span><br><span class="line"></span><br><span class="line">parent=[-<span class="number">1</span>]*(n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findx</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> parent[x]!=-<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> findx(parent[x])</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">a,b</span>):</span><br><span class="line">    a_p=findx(a)</span><br><span class="line">    b_p=findx(b)</span><br><span class="line">    <span class="keyword">if</span> a_p!=b_p:</span><br><span class="line">        parent[a_p]=b_p</span><br><span class="line"></span><br><span class="line">values=[]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a,b,c=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">    values.append((a,b,c))</span><br><span class="line">  </span><br><span class="line">values=<span class="built_in">sorted</span>(values,key=<span class="keyword">lambda</span> x:x[<span class="number">2</span>],reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">disfriend=[<span class="number">0</span>]*(n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>():</span><br><span class="line">    <span class="keyword">for</span> a,b,c <span class="keyword">in</span> values:</span><br><span class="line">        <span class="keyword">if</span> findx(a)==findx(b):</span><br><span class="line">            <span class="built_in">print</span>(c)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> disfriend[a]==<span class="number">0</span>:</span><br><span class="line">            disfriend[a]=b</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            merge(disfriend[a],b)</span><br><span class="line">        <span class="keyword">if</span> disfriend[b]==<span class="number">0</span>:</span><br><span class="line">            disfriend[b]=a</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            merge(disfriend[b],a)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> solve():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="h"><a class="markdownIt-Anchor" href="#h"></a> H</h3><p><a href="https://ac.nowcoder.com/acm/contest/54569/H">题目链接</a></p><blockquote><p>在有向图G中，每条边的长度均为1，现给定起点和终点，请你在图中找一条从起点到终点的路径，该路径满足以下条件：<br />1．路径上的所有点的出边所指向的点都直接或间接与终点连通。<br />2．在满足条件1的情况下使路径最短。</p></blockquote><p>难,略</p><blockquote><p>建双向边，对于正边和反边我们标记一下即可。<br />那么建完边后我们先从终点bfs一遍，只跑反向边，对于每个遍历到的边进行标记，这样我们就可以找出不能直接或间接到达终点的点。<br />得到这些点后，我们再遍历这些点的反向边的出边，将与这些点相连的点进行标记。<br />标记完后我们剩下的没有被第二次标记的点就是可以走的点。这时我们再从起点bfs一遍，只跑正向边，且不走被第二次标记过的点，那么第一次到达终点的时候就是可到达的最短路。</p></blockquote><h2 id="背包问题"><a class="markdownIt-Anchor" href="#背包问题"></a> 背包问题</h2><p><a href="https://seramasumi.github.io/docs/Algorithms/mc-%E5%BE%AE%E8%AF%BE%E5%A0%82-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98.html">背包问题</a></p><p><strong>0-1背包</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= V; ++j) &#123;</span><br><span class="line">        backpack[i][j] = backpack[i - <span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">if</span> (j &gt;= cap[i]) &#123;</span><br><span class="line">            backpack[i][j] = Math.max(backpack[i][j], backpack[i - <span class="number">1</span>][j - cap[i]] + val[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>多重背包</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= V; ++j) &#123;</span><br><span class="line">        backpack[i][j] = backpack[i - <span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= num[i]; ++k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= k * cap[i]) &#123;</span><br><span class="line">                backpack[i][j] = Math.max(backpack[i][j], backpack[i - <span class="number">1</span>][j - k * cap[i]] + k * val[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>完全背包</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k * cap[i] &lt;= V; ++k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> V; j &gt;= cap[i]; --j) &#123;</span><br><span class="line">            f[j] = Math.max(f[j], f[j - cap[i]] + val[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>动态规划补充</strong></p><p>从集合的角度</p><p>有限集中的最优化</p><p>动态规划</p><p><code>01背包</code></p><p><code>完全背包</code></p><p>``</p><p><code>最长公共子序列</code></p><p><code>字符串编辑距离</code></p><p><a href="https://blog.csdn.net/qq_35644234/article/details/61614581">最短路径</a></p><p><a href="https://blog.csdn.net/ustbbsy/article/details/81984329">快速幂</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"># 矩阵相乘</span><br><span class="line">def mul(A, B):</span><br><span class="line">    # A:m*n, B:n*p  结果m*p</span><br><span class="line">    m = len(A)</span><br><span class="line">    n1 = len(A[0])</span><br><span class="line">    n2 = len(B)</span><br><span class="line">    p = len(B[0])</span><br><span class="line">    if n1 !=n2:</span><br><span class="line">        return</span><br><span class="line">    n = n1= n2</span><br><span class="line">    ans = []</span><br><span class="line">    # 初始化ans</span><br><span class="line">    for i in range(m):</span><br><span class="line">        ans.append([0]*p) # 都用同一个变量row = [0]*p，会同时修改，所以不用同一个变量</span><br><span class="line"> </span><br><span class="line">    for i in range(m):</span><br><span class="line">        for j in range(p):</span><br><span class="line">            temp = 0</span><br><span class="line">            for q in range(n):</span><br><span class="line">                temp += A[i][q]*B[q][j]</span><br><span class="line">                temp%=9999991</span><br><span class="line">            ans[i][j] = temp</span><br><span class="line"> </span><br><span class="line">    return ans</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def fib(n):</span><br><span class="line">    if n==0:</span><br><span class="line">        return 0</span><br><span class="line">    elif n==1 or n==2:</span><br><span class="line">        return 1</span><br><span class="line">    base = [[1,1],[1,0]]</span><br><span class="line"> </span><br><span class="line">    n = n-2</span><br><span class="line">    ans = [[1,0],[0,1]]</span><br><span class="line">    while n:</span><br><span class="line">        if n&amp;1:</span><br><span class="line">            ans = mul(base,ans)</span><br><span class="line">        base = mul(base,base)</span><br><span class="line">        n = n&gt;&gt;1</span><br><span class="line">    # temp=mul([[1,1]],ans)</span><br><span class="line">    # print(temp[0][0],ans[0][0] + ans[0][1])</span><br><span class="line">    return ans[0][0] + ans[0][1]</span><br><span class="line"> </span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    # 前20个斐波那契数列</span><br><span class="line">    # 0是第0个</span><br><span class="line">    # 2023040313301730</span><br><span class="line">    print(fib(2023040313301730)%9999991)</span><br><span class="line">    # for i in range(20230403%1330173):</span><br><span class="line">    #     print(fib(i),end=&#x27; &#x27;)</span><br></pre></td></tr></table></figure><p><a href="https://www.dotcpp.com/oj/lanqiao/?page=1">真题C语言网</a></p><p><a href="https://www.lanqiao.cn/problem-list/5/?sort=students_count">真题官网</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;苏州大学2023编程菁英挑战赛第一场&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#苏州大学2023编程菁英挑战赛第一场&quot;&gt;&lt;/a&gt; 苏州大学2023编程菁英挑战赛第一场&lt;/h2&gt;
&lt;h3 id=&quot;a&quot;&gt;&lt;a class=&quot;markdo</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="蓝桥杯 算法刷题笔记" scheme="https://gladdduck.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>python标准库-3</title>
    <link href="https://gladdduck.github.io/2023/04/02/python3lib-3/"/>
    <id>https://gladdduck.github.io/2023/04/02/python3lib-3/</id>
    <published>2023-04-02T03:24:30.616Z</published>
    <updated>2023-04-02T03:25:48.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络通信"><a class="markdownIt-Anchor" href="#网络通信"></a> 网络通信</h2><h3 id="ipaddress"><a class="markdownIt-Anchor" href="#ipaddress"></a> ipaddress</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ipaddress</span><br><span class="line"><span class="comment"># ipaddress:解析ip地址</span></span><br></pre></td></tr></table></figure><h3 id="socket"><a class="markdownIt-Anchor" href="#socket"></a> socket</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment"># 网络通信</span></span><br><span class="line"><span class="comment"># 多线程网络服务</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;服务器端&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket, SOCK_STREAM, AF_INET</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> dumps</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 自定义线程类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">FileTransferHandler</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, cclient</span>):</span><br><span class="line">            <span class="built_in">super</span>().__init__()</span><br><span class="line">            self.cclient = cclient</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">            my_dict = &#123;&#125;</span><br><span class="line">            my_dict[<span class="string">&#x27;filename&#x27;</span>] = <span class="string">&#x27;guido.jpg&#x27;</span></span><br><span class="line">            <span class="comment"># JSON是纯文本不能携带二进制数据</span></span><br><span class="line">            <span class="comment"># 所以图片的二进制数据要处理成base64编码</span></span><br><span class="line">            my_dict[<span class="string">&#x27;filedata&#x27;</span>] = <span class="string">&#x27;data&#x27;</span></span><br><span class="line">            <span class="comment"># 通过dumps函数将字典处理成JSON字符串</span></span><br><span class="line">            json_str = dumps(my_dict)</span><br><span class="line">            <span class="comment"># 发送JSON字符串</span></span><br><span class="line">            self.cclient.send(json_str.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">            self.cclient.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.创建套接字对象并指定使用哪种传输服务</span></span><br><span class="line">    server = socket()</span><br><span class="line">    <span class="comment"># 2.绑定IP地址和端口(区分不同的服务)</span></span><br><span class="line">    server.bind((<span class="string">&#x27;localhost&#x27;</span>, <span class="number">5566</span>))</span><br><span class="line">    <span class="comment"># 3.开启监听 - 监听客户端连接到服务器</span></span><br><span class="line">    server.listen(<span class="number">512</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;服务器启动开始监听...&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        client, addr = server.accept()</span><br><span class="line">        <span class="comment"># 启动一个线程来处理客户端的请求</span></span><br><span class="line">        FileTransferHandler(client).start()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;客户端&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> loads</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    client = socket()</span><br><span class="line">    client.connect((<span class="string">&#x27;localhost&#x27;</span>, <span class="number">5566</span>))</span><br><span class="line">    <span class="comment"># 定义一个保存二进制数据的对象</span></span><br><span class="line">    in_data = <span class="built_in">bytes</span>()</span><br><span class="line">    <span class="comment"># 由于不知道服务器发送的数据有多大每次接收1024字节</span></span><br><span class="line">    data = client.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">while</span> data:</span><br><span class="line">        <span class="comment"># 将收到的数据拼接起来</span></span><br><span class="line">        in_data += data</span><br><span class="line">        data = client.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># 将收到的二进制数据解码成JSON字符串并转换成字典</span></span><br><span class="line">    <span class="comment"># loads函数的作用就是将JSON字符串转成字典对象</span></span><br><span class="line">    my_dict = loads(in_data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(my_dict)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;图片已保存.&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="selectors"><a class="markdownIt-Anchor" href="#selectors"></a> selectors</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> selectors</span><br><span class="line"></span><br><span class="line"><span class="comment"># io多路复用抽象</span></span><br></pre></td></tr></table></figure><h3 id="select"><a class="markdownIt-Anchor" href="#select"></a> select</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="comment"># 高效等待IO</span></span><br></pre></td></tr></table></figure><h3 id="socketserver"><a class="markdownIt-Anchor" href="#socketserver"></a> socketserver</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="comment"># 创建网络服务器</span></span><br></pre></td></tr></table></figure><h2 id="互联网"><a class="markdownIt-Anchor" href="#互联网"></a> 互联网</h2><h3 id="urllibparase"><a class="markdownIt-Anchor" href="#urllibparase"></a> urllib.parase</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parase</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分解url</span></span><br></pre></td></tr></table></figure><h3 id="urllibrequest"><a class="markdownIt-Anchor" href="#urllibrequest"></a> urllib.request</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据url获取web资源</span></span><br><span class="line"><span class="comment"># get/post/参数/头文件/</span></span><br></pre></td></tr></table></figure><h3 id="urllibrobotparser"><a class="markdownIt-Anchor" href="#urllibrobotparser"></a> urllib.robotparser</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> robotparser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得网页的robots.txt文件,测试是否允许爬取页面</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> robotparser</span><br><span class="line"></span><br><span class="line">AGENT_NAME = <span class="string">&#x27;Googlebot&#x27;</span></span><br><span class="line">URL_BASE = <span class="string">&#x27;https://zhuanlan.zhihu.com/&#x27;</span></span><br><span class="line">parser = robotparser.RobotFileParser()</span><br><span class="line">parser.set_url(parse.urljoin(URL_BASE, <span class="string">&#x27;robots.txt&#x27;</span>))</span><br><span class="line">parser.read()</span><br><span class="line"></span><br><span class="line">PATHS = [</span><br><span class="line">    <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/search-special&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/s&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> PATHS:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;!r:&gt;6&#125; : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        parser.can_fetch(AGENT_NAME, path), path))</span><br><span class="line">    url = parse.urljoin(URL_BASE, path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;!r:&gt;6&#125; : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        parser.can_fetch(AGENT_NAME, url), url))</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>  True : /  True : https://zhuanlan.zhihu.com/ False : /search-special False : https://zhuanlan.zhihu.com/search-special False : /login False : https://zhuanlan.zhihu.com/login  True : /s  True : https://zhuanlan.zhihu.com/s</code></pre><h3 id="base64"><a class="markdownIt-Anchor" href="#base64"></a> base64</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="comment"># 将二进制数据转换为适合使用文本协议传输的ASCII的一个子集</span></span><br><span class="line">initial_data=<span class="string">&#x27;Copyright (c) 2008 Doug Hellmann All rights reserved.&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;initial_data:<span class="subst">&#123;initial_data&#125;</span>&#x27;</span>)</span><br><span class="line">byte_string = initial_data.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">encoded_data = base64.b64encode(byte_string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;base64 data:<span class="subst">&#123;encoded_data&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">encoded_data = <span class="string">b&#x27;VGhpcyBpcyB0aGUgZGF0YSwgaW4gdGhlIGNsZWFyLg==&#x27;</span></span><br><span class="line">decoded_data = base64.b64decode(encoded_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Encoded :&#x27;</span>, encoded_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Decoded :&#x27;</span>, decoded_data)</span><br></pre></td></tr></table></figure><pre><code>initial_data:Copyright (c) 2008 Doug Hellmann All rights reserved.base64 data:b'Q29weXJpZ2h0IChjKSAyMDA4IERvdWcgSGVsbG1hbm4gQWxsIHJpZ2h0cyByZXNlcnZlZC4='Encoded : b'VGhpcyBpcyB0aGUgZGF0YSwgaW4gdGhlIGNsZWFyLg=='Decoded : b'This is the data, in the clear.'</code></pre><h3 id="httpserver"><a class="markdownIt-Anchor" href="#httpserver"></a> http.server</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> http <span class="keyword">import</span> server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自己实现do_GET(),do_POST()方法的web服务器</span></span><br></pre></td></tr></table></figure><h3 id="httpcookie"><a class="markdownIt-Anchor" href="#httpcookie"></a> http.cookie</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> http <span class="keyword">import</span> cookie</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br></pre></td></tr></table></figure><h3 id="webbrowser"><a class="markdownIt-Anchor" href="#webbrowser"></a> webbrowser</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line"><span class="comment"># 浏览器打开界面</span></span><br><span class="line">webbrowser.open_new_tab(</span><br><span class="line">    <span class="string">&#x27;https://docs.python.org/3/library/webbrowser.html&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>True</code></pre><h3 id="uuid"><a class="markdownIt-Anchor" href="#uuid"></a> uuid</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(uuid.getnode())</span><br><span class="line"><span class="built_in">print</span>(uuid.uuid1())</span><br></pre></td></tr></table></figure><pre><code>49437450489921e4a5d1c-cc80-11ed-8e72-047f0e2ae1a0</code></pre><h3 id="json"><a class="markdownIt-Anchor" href="#json"></a> json</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 键必须是字符串类型</span></span><br><span class="line"><span class="comment"># tuple会转成list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件</span></span><br><span class="line">json.load()</span><br><span class="line">json.dump()</span><br><span class="line"><span class="comment"># 字符串</span></span><br><span class="line">json.loads()</span><br><span class="line">json.dumps()</span><br></pre></td></tr></table></figure><h2 id="email"><a class="markdownIt-Anchor" href="#email"></a> email</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> smtplib <span class="keyword">import</span> SMTP,SMTP_SSL</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建一个带附件的邮件消息对象</span></span><br><span class="line">    message = MIMEMultipart()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建文本内容</span></span><br><span class="line">    text_content = MIMEText(<span class="string">&#x27;附件中有本月数据请查收&#x27;</span>, <span class="string">&#x27;plain&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    message[<span class="string">&#x27;From&#x27;</span>] = Header(<span class="string">&#x27;gladdduck&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    message[<span class="string">&#x27;To&#x27;</span>] = Header(<span class="string">&#x27;亚哥&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    message[<span class="string">&#x27;Subject&#x27;</span>] = Header(<span class="string">&#x27;本月数据&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment"># 将文本内容添加到邮件消息对象中</span></span><br><span class="line">    message.attach(text_content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取文件并将文件作为附件添加到邮件消息对象中</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;words.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        txt = MIMEText(f.read(), <span class="string">&#x27;base64&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        txt[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;text/plain&#x27;</span></span><br><span class="line">        txt[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment; filename=hello.txt&#x27;</span></span><br><span class="line">        message.attach(txt)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建SMTP对象</span></span><br><span class="line">    smtper = SMTP_SSL(<span class="string">&#x27;smtp.qq.com&#x27;</span>)</span><br><span class="line">    <span class="comment"># 开启安全连接</span></span><br><span class="line">    <span class="comment"># smtper.starttls()</span></span><br><span class="line">    sender = <span class="string">&#x27;703214452@qq.com&#x27;</span></span><br><span class="line">    receivers = [<span class="string">&#x27;syxue@stu.suda.edu.cn&#x27;</span>]</span><br><span class="line">    <span class="comment"># 登录到SMTP服务器</span></span><br><span class="line">    <span class="comment"># 请注意此处不是使用密码而是邮件客户端授权码进行登录</span></span><br><span class="line">    <span class="comment"># 对此有疑问的读者可以联系自己使用的邮件服务器客服</span></span><br><span class="line">    smtper.login(sender, <span class="string">&#x27;*****&#x27;</span>)</span><br><span class="line">    <span class="comment"># 发送邮件</span></span><br><span class="line">    smtper.sendmail(sender, receivers, message.as_string())</span><br><span class="line">    <span class="comment"># 与邮件服务器断开连接</span></span><br><span class="line">    smtper.quit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;发送完成!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="应用构建模块"><a class="markdownIt-Anchor" href="#应用构建模块"></a> 应用构建模块</h2><h3 id="argparse"><a class="markdownIt-Anchor" href="#argparse"></a> argparse</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="comment"># 声明</span></span><br><span class="line"><span class="comment"># parents参数,合并其他解析器</span></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 位置参数,必填</span></span><br><span class="line">parser.add_argument(<span class="string">&quot;echo&quot;</span>)</span><br><span class="line"><span class="comment"># 可选参数,一个简称,一个全称,不给默认为None</span></span><br><span class="line">parser.add_argument(<span class="string">&quot;-v&quot;</span>, <span class="string">&quot;--verbose&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">add_argument()参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">action:默认是store,存储参数</span></span><br><span class="line"><span class="string">    store_const:表示只能赋值为const</span></span><br><span class="line"><span class="string">    append:把参数存储成列表</span></span><br><span class="line"><span class="string">    append_const:把const的值存储为列表</span></span><br><span class="line"><span class="string">    count:统计参数出现的次数</span></span><br><span class="line"><span class="string">    store_true/store_false:保存布尔值,出现就是true or false</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">default:默认值</span></span><br><span class="line"><span class="string">type:参数类型</span></span><br><span class="line"><span class="string">choice:只能从里面选</span></span><br><span class="line"><span class="string">required:可以省略 (仅针对可选参数)。</span></span><br><span class="line"><span class="string">help:打印的时候的帮助信息</span></span><br><span class="line"><span class="string">dest:解析后的参数名称</span></span><br><span class="line"><span class="string">nargs:表示后面要跟几个参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">group=parser.add_mutually_exclusive_group()互斥选项,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析,默认解析的sys.argv[1:]</span></span><br><span class="line">parser.parse_args()</span><br></pre></td></tr></table></figure><h3 id="getopt"><a class="markdownIt-Anchor" href="#getopt"></a> getopt</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> getopt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令行选项解析</span></span><br></pre></td></tr></table></figure><h3 id="readline"><a class="markdownIt-Anchor" href="#readline"></a> readline</h3><h3 id="getpass"><a class="markdownIt-Anchor" href="#getpass"></a> getpass</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line"></span><br><span class="line">p=getpass.getpass(prompt=<span class="string">&#x27;输入密码&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p,p)</span><br></pre></td></tr></table></figure><h3 id="cmd"><a class="markdownIt-Anchor" href="#cmd"></a> cmd</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 面向行的命令处理器</span></span><br></pre></td></tr></table></figure><h3 id="shlex"><a class="markdownIt-Anchor" href="#shlex"></a> shlex</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shlex</span><br><span class="line"><span class="comment"># 解析shell语法</span></span><br></pre></td></tr></table></figure><h3 id="configparser"><a class="markdownIt-Anchor" href="#configparser"></a> configparser</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[DEFAULT]</span></span><br><span class="line"><span class="string">serveraliveinterval = 45</span></span><br><span class="line"><span class="string">compression = yes</span></span><br><span class="line"><span class="string">compressionlevel = 9</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[bitbucket]</span></span><br><span class="line"><span class="string">user = kk</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[topsecrect]</span></span><br><span class="line"><span class="string">port = 22</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不存在忽略,可以多个配置文件合并</span></span><br><span class="line">config.read(<span class="string">&#x27;example.ini&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sections就是[]中的配置,has_section()</span></span><br><span class="line"><span class="comment"># options是[]下面的选项,has_option()</span></span><br><span class="line"><span class="keyword">for</span> section_name <span class="keyword">in</span> config.sections():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Section:&#x27;</span>, section_name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;  Options:&#x27;</span>, config.options(section_name))</span><br><span class="line">    <span class="keyword">for</span> name, value <span class="keyword">in</span> config.items(section_name):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;  &#123;&#125; = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name, value))</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    </span><br><span class="line">config.add_section(<span class="string">&#x27;bug_tracker&#x27;</span>)</span><br><span class="line">config.<span class="built_in">set</span>(<span class="string">&#x27;bug_tracker&#x27;</span>, <span class="string">&#x27;url&#x27;</span>, <span class="string">&#x27;http://localhost:8080/bugs&#x27;</span>)</span><br><span class="line">config.<span class="built_in">set</span>(<span class="string">&#x27;bug_tracker&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;dhellmann&#x27;</span>)</span><br><span class="line">config.<span class="built_in">set</span>(<span class="string">&#x27;bug_tracker&#x27;</span>, <span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;secret&#x27;</span>)</span><br><span class="line">config.remove_option(<span class="string">&#x27;bug_tracker&#x27;</span>, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">config.remove_section(<span class="string">&#x27;wiki&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># parser.write(f)</span></span><br></pre></td></tr></table></figure><h3 id="logging"><a class="markdownIt-Anchor" href="#logging"></a> logging</h3><p><img src="http://image.yayan.xyz/20230328215242.png" alt="" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.WARNING)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同模块的日志</span></span><br><span class="line"></span><br><span class="line">logger1 = logging.getLogger(<span class="string">&#x27;package1.module1&#x27;</span>)</span><br><span class="line">logger2 = logging.getLogger(<span class="string">&#x27;package2.module2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">logger1.warning(<span class="string">&#x27;This message comes from one module&#x27;</span>)</span><br><span class="line">logger2.warning(<span class="string">&#x27;This comes from another module&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>WARNING:package1.module1:This message comes from one moduleWARNING:package2.module2:This comes from another module</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="comment"># 格式化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LOG_FILENAME = &#x27;logging_example.out&#x27;</span></span><br><span class="line">logging.basicConfig(<span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(pathname)s[line:%(lineno)d] - %(levelname)s: %(message)s&#x27;</span>,</span><br><span class="line">                    level=logging.DEBUG,</span><br><span class="line">                    <span class="comment"># filename=LOG_FILENAME,</span></span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">&#x27;debug 信息&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;info 信息&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;warning 信息&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;error 信息&#x27;</span>)</span><br><span class="line">logging.critical(<span class="string">&#x27;critial 信息&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">级别  数值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CRITICAL 50</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ERROR  40</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">WARNING  30</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">INFO  20</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">DEBUG  10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">NOTSET  0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>2023-03-28 21:44:07,434 - C:\Users\22627\AppData\Local\Temp\ipykernel_2380\2094327826.py[line:8] - DEBUG: debug 信息2023-03-28 21:44:07,436 - C:\Users\22627\AppData\Local\Temp\ipykernel_2380\2094327826.py[line:9] - INFO: info 信息2023-03-28 21:44:07,438 - C:\Users\22627\AppData\Local\Temp\ipykernel_2380\2094327826.py[line:10] - WARNING: warning 信息2023-03-28 21:44:07,440 - C:\Users\22627\AppData\Local\Temp\ipykernel_2380\2094327826.py[line:11] - ERROR: error 信息2023-03-28 21:44:07,443 - C:\Users\22627\AppData\Local\Temp\ipykernel_2380\2094327826.py[line:12] - CRITICAL: critial 信息</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写不同文件</span></span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.handlers</span><br><span class="line"></span><br><span class="line">LOG_FILENAME = <span class="string">&#x27;logging_rotatingfile_example.out&#x27;</span></span><br><span class="line"></span><br><span class="line">my_logger = logging.getLogger(<span class="string">&#x27;MyLogger&#x27;</span>)</span><br><span class="line">my_logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">handler = logging.handlers.RotatingFileHandler(</span><br><span class="line">    LOG_FILENAME,</span><br><span class="line">    maxBytes=<span class="number">20</span>,</span><br><span class="line">    backupCount=<span class="number">5</span>,</span><br><span class="line">)</span><br><span class="line">my_logger.addHandler(handler)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    my_logger.debug(<span class="string">&#x27;i = %d&#x27;</span> % i)</span><br><span class="line"></span><br><span class="line">logfiles = glob.glob(<span class="string">&#x27;%s*&#x27;</span> % LOG_FILENAME)</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> <span class="built_in">sorted</span>(logfiles):</span><br><span class="line">    <span class="built_in">print</span>(filename)</span><br></pre></td></tr></table></figure><h3 id="fileinput"><a class="markdownIt-Anchor" href="#fileinput"></a> fileinput</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令行过滤器框架</span></span><br></pre></td></tr></table></figure><h3 id="atexit"><a class="markdownIt-Anchor" href="#atexit"></a> atexit</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> atexit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序关闭回调</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_cleanup</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;my_cleanup(&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"></span><br><span class="line">atexit.register(my_cleanup, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">atexit.register(my_cleanup, <span class="string">&#x27;second&#x27;</span>)</span><br><span class="line">atexit.register(my_cleanup, <span class="string">&#x27;third&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为信号终止</span></span><br><span class="line"><span class="comment"># os._exit()</span></span><br><span class="line"><span class="comment"># 致命错误</span></span><br><span class="line"><span class="meta">@atexit.register</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">all_done</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;all_done()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;starting main program&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>starting main program</code></pre><h3 id="sched"><a class="markdownIt-Anchor" href="#sched"></a> sched</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sched</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在指定时刻运行任务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sched</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">scheduler = sched.scheduler(time.time, time.sleep)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">long_event</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;BEGIN EVENT :&#x27;</span>, time.ctime(time.time()), name)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;FINISH EVENT:&#x27;</span>, time.ctime(time.time()), name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;START:&#x27;</span>, time.ctime(time.time()))</span><br><span class="line"><span class="comment"># 时间,优先级,函数,参数</span></span><br><span class="line">scheduler.enter(<span class="number">2</span>, <span class="number">1</span>, long_event, (<span class="string">&#x27;first&#x27;</span>,))</span><br><span class="line"><span class="comment"># run是阻塞的,但是这个是到了就执行,要在不同线程内取消</span></span><br><span class="line">scheduler.enter(<span class="number">3</span>, <span class="number">1</span>, long_event, (<span class="string">&#x27;second&#x27;</span>,))</span><br><span class="line"></span><br><span class="line">scheduler.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>START: Tue Mar 28 21:57:03 2023BEGIN EVENT : Tue Mar 28 21:57:05 2023 firstFINISH EVENT: Tue Mar 28 21:57:07 2023 firstBEGIN EVENT : Tue Mar 28 21:57:07 2023 secondFINISH EVENT: Tue Mar 28 21:57:09 2023 second</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">price=<span class="number">0</span></span><br><span class="line">age=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> age&lt;<span class="number">12</span>:</span><br><span class="line">    price=<span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> age&lt;=<span class="number">65</span>:</span><br><span class="line">    price=<span class="number">40</span></span><br><span class="line"><span class="keyword">elif</span> age&gt;<span class="number">65</span>:</span><br><span class="line">    price=<span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Your price is <span class="subst">&#123;price&#125;</span> yuan&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>Your price is 40 yuan</code></pre><h2 id="国际化和本地化"><a class="markdownIt-Anchor" href="#国际化和本地化"></a> 国际化和本地化</h2><h2 id="开发工具"><a class="markdownIt-Anchor" href="#开发工具"></a> 开发工具</h2><h3 id="pydoc"><a class="markdownIt-Anchor" href="#pydoc"></a> pydoc</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pydoc</span><br><span class="line"><span class="keyword">import</span> atexit</span><br><span class="line"><span class="comment"># 运行时生成帮助文本</span></span><br><span class="line">pydoc.doc(atexit)</span><br></pre></td></tr></table></figure><h3 id="doctest"><a class="markdownIt-Anchor" href="#doctest"></a> doctest</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> doctest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行嵌入文档中的例子，验证是否生成期望的结果</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a * b.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Works with numbers:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_function(2, 3)</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    and strings:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_function(&#x27;a&#x27;, 3)</span></span><br><span class="line"><span class="string">    &#x27;aaa&#x27;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    # 忽略可能会变化的部分</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; unpredictable(MyClass()) #doctest: +ELLIPSIS</span></span><br><span class="line"><span class="string">    [&lt;doctest_ellipsis.MyClass object at 0x...&gt;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    doctest.testmod()</span><br><span class="line"><span class="comment"># !python3 -m doctest -v xxx.py</span></span><br></pre></td></tr></table></figure><h3 id="unittest"><a class="markdownIt-Anchor" href="#unittest"></a> unittest</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="comment"># 自动测试框架</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimplisticTest</span>(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        a = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">        b = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">        self.assertEqual(a, b)</span><br><span class="line">        self.assertFalse()</span><br><span class="line">        self.assertTrue()</span><br><span class="line">        self.assertNotEqual()</span><br><span class="line">        self.assertNotEqual()</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="trace"><a class="markdownIt-Anchor" href="#trace"></a> trace</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> trace</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监视所执行的语句，生成报告，查看互相调用的函数之间的关系</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 会生成函数之间的调用关系</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recurse</span>(<span class="params">level</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;recurse(&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(level))</span><br><span class="line">    <span class="keyword">if</span> level:</span><br><span class="line">        recurse(level - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">not_called</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This function is never called.&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This is the main program.&#x27;</span>)</span><br><span class="line">    recurse(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">tracer = trace.Trace(count=<span class="literal">False</span>, trace=<span class="literal">True</span>)</span><br><span class="line">tracer.run(<span class="string">&#x27;recurse(2)&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="traceback"><a class="markdownIt-Anchor" href="#traceback"></a> traceback</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用栈来生成错误消息</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="cgitb"><a class="markdownIt-Anchor" href="#cgitb"></a> cgitb</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cgitb</span><br><span class="line"></span><br><span class="line"><span class="comment"># cgitb把sys.excepthook 换成一个函数,格式化输出，更详细</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="pdb"><a class="markdownIt-Anchor" href="#pdb"></a> pdb</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂停程序，逐步监视执行</span></span><br><span class="line"><span class="comment"># debug</span></span><br></pre></td></tr></table></figure><h3 id="profile-pstats"><a class="markdownIt-Anchor" href="#profile-pstats"></a> profile &amp; pstats</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> profile</span><br><span class="line"><span class="keyword">import</span> pstats</span><br><span class="line"><span class="comment"># profile收集消耗处理器资源的统计信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib_seq</span>(<span class="params">n</span>):</span><br><span class="line">    seq = []</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        seq.extend(fib_seq(n - <span class="number">1</span>))</span><br><span class="line">    seq.append(fib(n))</span><br><span class="line">    <span class="keyword">return</span> seq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># profile.run(&#x27;print(fib_seq(20)); print()&#x27;)</span></span><br><span class="line">profile.runctx(</span><br><span class="line">    <span class="string">&#x27;print(fib_seq(n)); print()&#x27;</span>,</span><br><span class="line">    <span class="built_in">globals</span>(),</span><br><span class="line">    &#123;<span class="string">&#x27;n&#x27;</span>: <span class="number">20</span>&#125;,</span><br><span class="line">)</span><br><span class="line"><span class="comment"># pstats与profile结合</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]         57409 function calls (119 primitive calls) in 0.156 seconds   Ordered by: standard name   ncalls  tottime  percall  cumtime  percall filename:lineno(function)     21/1    0.000    0.000    0.156    0.156 1066040024.py:12(fib_seq) 57291/21    0.156    0.000    0.156    0.007 1066040024.py:4(fib)        4    0.000    0.000    0.000    0.000 :0(acquire)       25    0.000    0.000    0.000    0.000 :0(append)        1    0.000    0.000    0.156    0.156 :0(exec)       20    0.000    0.000    0.000    0.000 :0(extend)        3    0.000    0.000    0.000    0.000 :0(getpid)        3    0.000    0.000    0.000    0.000 :0(isinstance)        3    0.000    0.000    0.000    0.000 :0(len)        2    0.000    0.000    0.000    0.000 :0(print)        1    0.000    0.000    0.000    0.000 :0(setprofile)        1    0.000    0.000    0.156    0.156 &lt;string&gt;:1(&lt;module&gt;)        4    0.000    0.000    0.000    0.000 iostream.py:206(schedule)        3    0.000    0.000    0.000    0.000 iostream.py:418(_is_master_process)        3    0.000    0.000    0.000    0.000 iostream.py:437(_schedule_flush)        3    0.000    0.000    0.000    0.000 iostream.py:500(write)        4    0.000    0.000    0.000    0.000 iostream.py:96(_event_pipe)        1    0.000    0.000    0.156    0.156 profile:0(print(fib_seq(n)); print())        0    0.000             0.000          profile:0(profiler)        4    0.000    0.000    0.000    0.000 socket.py:543(send)        4    0.000    0.000    0.000    0.000 threading.py:1066(_wait_for_tstate_lock)        4    0.000    0.000    0.000    0.000 threading.py:1133(is_alive)        4    0.000    0.000    0.000    0.000 threading.py:536(is_set)</code></pre><h3 id="timeit"><a class="markdownIt-Anchor" href="#timeit"></a> timeit</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"><span class="comment"># 测量小代码时间</span></span><br><span class="line">t = timeit.Timer(<span class="string">&quot;print(&#x27;main statement&#x27;)&quot;</span>, <span class="string">&quot;print(&#x27;setup&#x27;)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;TIMEIT:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(t.timeit(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;REPEAT:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(t.repeat(<span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>TIMEIT:setupmain statementmain statement1.2299999980314169e-05REPEAT:setupmain statementmain statementsetupmain statementmain statementsetupmain statementmain statement[0.00017259999958696426, 2.790000007735216e-05, 1.540000039312872e-05]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># Yolov5时间记录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Profile</span>(contextlib.ContextDecorator):</span><br><span class="line">    <span class="comment"># YOLOv5 Profile class. Usage: @Profile() decorator or &#x27;with Profile():&#x27; context manager</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, t=<span class="number">0.0</span></span>):</span><br><span class="line">        self.t = t</span><br><span class="line">        <span class="comment"># self.cuda = torch.cuda.is_available()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        self.start = self.time()</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, <span class="built_in">type</span>, value, traceback</span>):</span><br><span class="line">        self.dt = self.time() - self.start  <span class="comment"># delta-time</span></span><br><span class="line">        self.t += self.dt  <span class="comment"># accumulate dt</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">time</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># if self.cuda:</span></span><br><span class="line">        <span class="comment">#     torch.cuda.synchronize()</span></span><br><span class="line">        <span class="keyword">return</span> time.time()</span><br><span class="line">    </span><br><span class="line">ttt=Profile()</span><br><span class="line"><span class="keyword">with</span> ttt:</span><br><span class="line">    [_ <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="number">1e7</span>))]</span><br><span class="line"><span class="built_in">print</span>(ttt.t)</span><br></pre></td></tr></table></figure><pre><code>0.534808874130249</code></pre><h3 id="tabnanny"><a class="markdownIt-Anchor" href="#tabnanny"></a> tabnanny</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tabnanny</span><br><span class="line"><span class="comment"># 缩进验证工具</span></span><br></pre></td></tr></table></figure><h3 id="compileall"><a class="markdownIt-Anchor" href="#compileall"></a> compileall</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> compileall</span><br></pre></td></tr></table></figure><h3 id="venv"><a class="markdownIt-Anchor" href="#venv"></a> venv</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> venv</span><br><span class="line"><span class="comment"># 创建虚拟环境</span></span><br></pre></td></tr></table></figure><h2 id="运行时特性"><a class="markdownIt-Anchor" href="#运行时特性"></a> 运行时特性</h2><h3 id="site"><a class="markdownIt-Anchor" href="#site"></a> site</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> site</span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点特定的配置,导入路径</span></span><br></pre></td></tr></table></figure><h3 id="sys"><a class="markdownIt-Anchor" href="#sys"></a> sys</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># 系统特定配置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Version info:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;sys.version      =&#x27;</span>, <span class="built_in">repr</span>(sys.version))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;sys.version_info =&#x27;</span>, sys.version_info)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;sys.hexversion   =&#x27;</span>, <span class="built_in">hex</span>(sys.hexversion))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;sys.api_version  =&#x27;</span>, sys.api_version)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;This interpreter was built for:&#x27;</span>, sys.platform)</span><br><span class="line"><span class="comment"># 获取运行时参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Arguments:&#x27;</span>, sys.argv)</span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="comment"># sys.exit(1)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Name:&#x27;</span>, sys.implementation.name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Version:&#x27;</span>, sys.implementation.version)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Cache tag:&#x27;</span>, sys.implementation.cache_tag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&#x27;STATUS: Reading from stdin&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># data = sys.stdin.read()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&#x27;STATUS: Writing data to stdout&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sys.stdout.write(data)</span></span><br><span class="line"><span class="comment"># sys.stdout.flush()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&#x27;STATUS: Done&#x27;)</span></span><br><span class="line"><span class="comment"># 参数的引用计数</span></span><br><span class="line">one = []</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;At start         :&#x27;</span>, sys.getrefcount(one))</span><br><span class="line">two = one</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Second reference :&#x27;</span>, sys.getrefcount(one))</span><br><span class="line"><span class="keyword">del</span> two</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;After del        :&#x27;</span>, sys.getrefcount(one))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数大小</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">objects = [</span><br><span class="line">    [], (), &#123;&#125;, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">b&#x27;bytes&#x27;</span>, <span class="number">1</span>, <span class="number">2.3</span>,</span><br><span class="line">    MyClass, MyClass(),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 不统计类的属性大小</span></span><br><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> objects:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:&gt;10&#125; : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(obj).__name__,sys.getsizeof(obj)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>Version info:sys.version      = '3.9.13 (main, Aug 25 2022, 23:51:50) [MSC v.1916 64 bit (AMD64)]'sys.version_info = sys.version_info(major=3, minor=9, micro=13, releaselevel='final', serial=0)sys.hexversion   = 0x3090df0sys.api_version  = 1013This interpreter was built for: win32Arguments: ['C:\\Users\\Ada\\AppData\\Roaming\\Python\\Python39\\site-packages\\ipykernel_launcher.py', '--ip=127.0.0.1', '--stdin=9008', '--control=9006', '--hb=9005', '--Session.signature_scheme=&quot;hmac-sha256&quot;', '--Session.key=b&quot;fb322aac-cfd4-4a49-87ab-e11c0e6aea3e&quot;', '--shell=9007', '--transport=&quot;tcp&quot;', '--iopub=9009', '--f=c:\\Users\\Ada\\AppData\\Roaming\\jupyter\\runtime\\kernel-v2-100766YwHlokYHZ1d.json']Name: cpythonVersion: sys.version_info(major=3, minor=9, micro=13, releaselevel='final', serial=0)Cache tag: cpython-39At start         : 2Second reference : 3After del        : 2      list : 56     tuple : 40      dict : 64       str : 50       str : 55     bytes : 38       int : 28     float : 24      type : 1064   MyClass : 48</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WithAttributes</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">        self.b = <span class="string">&#x27;b&#x27;</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__sizeof__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">object</span>.__sizeof__(self) + \</span><br><span class="line">            <span class="built_in">sum</span>(sys.getsizeof(v) <span class="keyword">for</span> v <span class="keyword">in</span> self.__dict__.values())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计带参数的类大小</span></span><br><span class="line">my_inst = WithAttributes()</span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(my_inst))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># getrecursionlimit()  setrecursionlimit() 查看设置最大递归深度</span></span><br><span class="line"><span class="comment"># getswitchinterval()  setswitchinterval() 查看设置线程获取的cpu运行时间</span></span><br><span class="line"><span class="comment"># 列表字典串的最大大小</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;maxsize   :&#x27;</span>, sys.maxsize)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;maxunicode:&#x27;</span>, sys.maxunicode)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数的信息</span></span><br><span class="line"><span class="comment"># sys.float_info</span></span><br><span class="line"><span class="comment"># sys.int_info</span></span><br></pre></td></tr></table></figure><pre><code>148maxsize   : 9223372036854775807maxunicode: 1114111</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理错误信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_excepthook</span>(<span class="params"><span class="built_in">type</span>, value, traceback</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Unhandled error:&#x27;</span>, <span class="built_in">type</span>, value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sys.excepthook = my_excepthook</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Before exception&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;This is the error message&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;After exception&#x27;</span>)</span><br><span class="line"><span class="comment"># Before exception</span></span><br><span class="line"><span class="comment"># Unhandled error: &lt;class &#x27;RuntimeError&#x27;&gt; This is the error </span></span><br><span class="line"><span class="comment"># message</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_something_with_exception</span>():</span><br><span class="line">    exc_type, exc_value = sys.exc_info()[:<span class="number">2</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Handling &#123;&#125; exception with message &quot;&#123;&#125;&quot; in &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        exc_type.__name__, exc_value,</span><br><span class="line">        threading.current_thread().name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cause_exception</span>(<span class="params">delay</span>):</span><br><span class="line">    time.sleep(delay)</span><br><span class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;This is the error message&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">thread_target</span>(<span class="params">delay</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cause_exception(delay)</span><br><span class="line">    <span class="keyword">except</span> RuntimeError:</span><br><span class="line">        do_something_with_exception()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">threads = [</span><br><span class="line">    threading.Thread(target=thread_target, args=(<span class="number">0.3</span>,)),</span><br><span class="line">    threading.Thread(target=thread_target, args=(<span class="number">0.1</span>,)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    t.start()</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    t.join()</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>Handling RuntimeError exception with message &quot;This is the error message&quot; in Thread-7Handling RuntimeError exception with message &quot;This is the error message&quot; in Thread-6</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">names = <span class="built_in">sorted</span>(sys.modules.keys())</span><br><span class="line">name_text = <span class="string">&#x27;, &#x27;</span>.join(names)</span><br><span class="line"><span class="comment"># print(name_text)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> sys.path:</span><br><span class="line">    <span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sys.path 加入路径,</span></span><br></pre></td></tr></table></figure><pre><code>d:\BaiduSyncdisk\Blog\source\_postse:\Anaconda3\envs\AAA\python39.zipe:\Anaconda3\envs\AAA\DLLse:\Anaconda3\envs\AAA\libe:\Anaconda3\envs\AAAC:\Users\Ada\AppData\Roaming\Python\Python39\site-packagese:\Anaconda3\envs\AAA\lib\site-packagese:\Anaconda3\envs\AAA\lib\site-packages\openea-1.0-py3.9.egge:\Anaconda3\envs\AAA\lib\site-packages\python_levenshtein-0.20.7-py3.9.egge:\Anaconda3\envs\AAA\lib\site-packages\gensim-4.2.0-py3.9-win-amd64.egge:\Anaconda3\envs\AAA\lib\site-packages\matching-0.1.1-py3.9.egge:\Anaconda3\envs\AAA\lib\site-packages\win32e:\Anaconda3\envs\AAA\lib\site-packages\win32\libe:\Anaconda3\envs\AAA\lib\site-packages\PythonwinC:\Users\Ada\AppData\Roaming\Python\Python39\site-packages\IPython\extensionsC:\Users\Ada\.ipython</code></pre><h3 id="os"><a class="markdownIt-Anchor" href="#os"></a> os</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="string">r&#x27;D:\BaiduSyncdisk\Blog\source&#x27;</span>)</span><br><span class="line"><span class="comment"># os.listdir()</span></span><br><span class="line">root=<span class="string">&#x27;D:\BaiduSyncdisk\Blog\source&#x27;</span></span><br><span class="line"><span class="keyword">for</span> dir_name, sub_dirs, files <span class="keyword">in</span> os.walk(root):</span><br><span class="line">    <span class="built_in">print</span>(dir_name,sub_dirs,files)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> entry <span class="keyword">in</span> os.scandir(root):</span><br><span class="line">    <span class="keyword">if</span> entry.is_dir():</span><br><span class="line">        typ = <span class="string">&#x27;dir&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> entry.is_file():</span><br><span class="line">        typ = <span class="string">&#x27;file&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> entry.is_symlink():</span><br><span class="line">        typ = <span class="string">&#x27;link&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        typ = <span class="string">&#x27;unknown&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;name&#125; &#123;typ&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        name=entry.name,</span><br><span class="line">        typ=typ,</span><br><span class="line">    ))</span><br><span class="line"><span class="comment"># stat()查看详细信息</span></span><br><span class="line"><span class="comment"># chmod()修改权限</span></span><br><span class="line"><span class="comment"># access()测试进程权限</span></span><br><span class="line"><span class="comment"># mkdir() 前面的路径必须存在</span></span><br><span class="line"><span class="comment"># makedirs() 创建不存在的父路径</span></span><br><span class="line"><span class="comment"># rmdir() 只会删除子目录</span></span><br><span class="line"><span class="comment"># removedirs() 删除为空的所有父目录</span></span><br><span class="line"><span class="comment"># replace() </span></span><br><span class="line"><span class="comment"># rename()重命名</span></span><br><span class="line"><span class="comment"># environ() 环境变量</span></span><br><span class="line"><span class="comment"># getenv()</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前工作目录</span></span><br><span class="line"><span class="built_in">print</span>(os.getcwd())</span><br><span class="line"><span class="comment"># 更改工作目录</span></span><br><span class="line">os.chdir(<span class="string">&#x27;d:\\BaiduSyncdisk\\Blog\\source&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(os.getcwd())</span><br><span class="line"><span class="comment"># 运行外部命令</span></span><br><span class="line"><span class="built_in">print</span>(os.system(<span class="string">&#x27;pwd&#x27;</span>))</span><br><span class="line"><span class="comment"># 创建进程</span></span><br><span class="line"><span class="comment"># os.fork()</span></span><br></pre></td></tr></table></figure><pre><code>d:\BaiduSyncdisk\Blog\sourced:\BaiduSyncdisk\Blog\source1</code></pre><h3 id="platform"><a class="markdownIt-Anchor" href="#platform"></a> platform</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;uname:&#x27;</span>, platform.uname())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;system   :&#x27;</span>, platform.system())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;node     :&#x27;</span>, platform.node())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;release  :&#x27;</span>, platform.release())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;version  :&#x27;</span>, platform.version())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;machine  :&#x27;</span>, platform.machine())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;processor:&#x27;</span>, platform.processor())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;interpreter:&#x27;</span>, platform.architecture())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;/bin/ls    :&#x27;</span>, platform.architecture(<span class="string">&#x27;/bin/ls&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Normal :&#x27;</span>, platform.platform())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Aliased:&#x27;</span>, platform.platform(aliased=<span class="literal">True</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Terse  :&#x27;</span>, platform.platform(terse=<span class="literal">True</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Version      :&#x27;</span>, platform.python_version())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Version tuple:&#x27;</span>, platform.python_version_tuple())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Compiler     :&#x27;</span>, platform.python_compiler())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Build        :&#x27;</span>, platform.python_build())</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>uname: uname_result(system='Windows', node='DESKTOP-SFFEKV7', release='10', version='10.0.19041', machine='AMD64')system   : Windowsnode     : DESKTOP-SFFEKV7release  : 10version  : 10.0.19041machine  : AMD64processor: Intel64 Family 6 Model 158 Stepping 10, GenuineIntelinterpreter: ('64bit', 'WindowsPE')/bin/ls    : ('64bit', '')Normal : Windows-10-10.0.19041-SP0Aliased: Windows-10-10.0.19041-SP0Terse  : Windows-10Version      : 3.9.13Version tuple: ('3', '9', '13')Compiler     : MSC v.1916 64 bit (AMD64)Build        : ('main', 'Aug 25 2022 23:51:50')</code></pre><h3 id="resource"><a class="markdownIt-Anchor" href="#resource"></a> resource</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> resource</span><br><span class="line"><span class="comment"># 系统资源管理</span></span><br><span class="line">RESOURCES = [</span><br><span class="line">    (<span class="string">&#x27;ru_utime&#x27;</span>, <span class="string">&#x27;User time&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;ru_stime&#x27;</span>, <span class="string">&#x27;System time&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;ru_maxrss&#x27;</span>, <span class="string">&#x27;Max. Resident Set Size&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;ru_ixrss&#x27;</span>, <span class="string">&#x27;Shared Memory Size&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;ru_idrss&#x27;</span>, <span class="string">&#x27;Unshared Memory Size&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;ru_isrss&#x27;</span>, <span class="string">&#x27;Stack Size&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;ru_inblock&#x27;</span>, <span class="string">&#x27;Block inputs&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;ru_oublock&#x27;</span>, <span class="string">&#x27;Block outputs&#x27;</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">usage = resource.getrusage(resource.RUSAGE_SELF)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, desc <span class="keyword">in</span> RESOURCES:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:&lt;25&#125; (&#123;:&lt;10&#125;) = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        desc, name, <span class="built_in">getattr</span>(usage, name)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="gc"><a class="markdownIt-Anchor" href="#gc"></a> gc</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gc</span><br><span class="line"><span class="comment"># 垃圾回收</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">enable()             --启用自动垃圾回收。</span></span><br><span class="line"><span class="string">disable()            --禁用自动垃圾回收。</span></span><br><span class="line"><span class="string">isenabled()          --如果启用了自动收集，则返回true。</span></span><br><span class="line"><span class="string">collect()            --立即执行完全收集。</span></span><br><span class="line"><span class="string">get_count()          --返回当前集合计数。</span></span><br><span class="line"><span class="string">get_stats()          --返回包含每代统计信息的词典列表。</span></span><br><span class="line"><span class="string">set_debug()          --设置调试标志。</span></span><br><span class="line"><span class="string">get_debug()          --获取调试标志。</span></span><br><span class="line"><span class="string">set_threshold()      --设置收集阈值。</span></span><br><span class="line"><span class="string">get_threshold()      --返回集合阈值的当前值。</span></span><br><span class="line"><span class="string">get_objects()        --返回收集器跟踪的所有对象的列表。</span></span><br><span class="line"><span class="string">is_tracked()         --如果跟踪给定对象，则返回true。</span></span><br><span class="line"><span class="string">is_finalized()       --如果给定对象已定稿，则返回true。</span></span><br><span class="line"><span class="string">get_referrers()      --返回引用对象的对象列表。</span></span><br><span class="line"><span class="string">get_referents()      --返回对象引用的对象列表。</span></span><br><span class="line"><span class="string">freeze()             --冻结所有跟踪对象，并在将来的收集中忽略它们。</span></span><br><span class="line"><span class="string">unfreeze()           --解冻永久生成中的所有对象。</span></span><br><span class="line"><span class="string">get_freeze_count()   --返回永久生成中的对象数。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>():</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line">k = Test()</span><br><span class="line">t._self = t</span><br><span class="line"><span class="comment"># 会多一个 因为gc会用一个</span></span><br><span class="line"><span class="built_in">print</span>(sys.getrefcount(t))    <span class="comment">#sys.getrefcount函数用来查看一个对象有几个引用</span></span><br><span class="line"><span class="built_in">print</span>(sys.getrefcount(k))</span><br><span class="line"><span class="comment"># del语句可以消除一个引用关系</span></span><br><span class="line"><span class="comment"># 引用计数为主，标记-清除+分代回收为辅的回收策略</span></span><br><span class="line"><span class="comment"># 专门用来处理这些循环引用</span></span><br><span class="line"><span class="comment"># gc.collect()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  gc.get_threshold()</span></span><br><span class="line"><span class="comment"># python中默认把所有对象分成三代。</span></span><br><span class="line"><span class="comment"># 第0代包含了最新的对象，第2代则是最早的一些对象。</span></span><br><span class="line"><span class="comment"># 在一次垃圾回收中，所有未被回收的对象会被移到高一代的地方。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个方法返回的是(700,10,10)，这也是gc的默认值。</span></span><br><span class="line"><span class="comment"># 这个值的意思是说，在第0代对象数量达到700个之前，不把未被回收的对象放入第一代；</span></span><br><span class="line"><span class="comment"># 而在第一代对象数量达到10个之前也不把未被回收的对象移到第二代。</span></span><br><span class="line"><span class="comment"># 可以是使用gc.set_threshold(threashold0,threshold1,threshold2)来手动设置这组阈值。</span></span><br></pre></td></tr></table></figure><h3 id="sysconfig"><a class="markdownIt-Anchor" href="#sysconfig"></a> sysconfig</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sysconfig</span><br><span class="line"><span class="comment"># 解释器编译时配置</span></span><br></pre></td></tr></table></figure><h2 id="语言工具"><a class="markdownIt-Anchor" href="#语言工具"></a> 语言工具</h2><h2 id="warnings"><a class="markdownIt-Anchor" href="#warnings"></a> warnings</h2><p><img src="https://image.yayan.xyz/20230330103900.png" alt="" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 报告非致命条件或可修复错误</span></span><br><span class="line"><span class="comment"># error把警告变成错误,simplefilter是filterwarnings简化版</span></span><br><span class="line">warnings.simplefilter(<span class="string">&#x27;ignore&#x27;</span>, UserWarning)</span><br><span class="line"><span class="comment"># 发出一个warnings</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Before the warning&#x27;</span>)</span><br><span class="line">warnings.warn(<span class="string">&#x27;This is a warning message&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;After the warning&#x27;</span>)</span><br><span class="line"><span class="comment"># filterwarnings() 根据规则过滤信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>, <span class="string">&#x27;.*do not.*&#x27;</span>,)</span><br><span class="line"></span><br><span class="line">warnings.warn(<span class="string">&#x27;Show this message&#x27;</span>)</span><br><span class="line">warnings.warn(<span class="string">&#x27;Do not show this message&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>Before the warningAfter the warning</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.simplefilter(<span class="string">&#x27;once&#x27;</span>, UserWarning)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">warning_on_one_line</span>(<span class="params">message, category, filename, lineno,</span></span><br><span class="line"><span class="params">                        file=<span class="literal">None</span>, line=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;-&gt; &#123;&#125;:&#123;&#125;: &#123;&#125;:&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        filename, lineno, category.__name__, message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">warnings.warn(<span class="string">&#x27;Warning message, before&#x27;</span>)</span><br><span class="line">warnings.formatwarning = warning_on_one_line</span><br><span class="line">warnings.warn(<span class="string">&#x27;Warning message, after&#x27;</span>)</span><br><span class="line"></span><br><span class="line">warnings.warn(<span class="string">&#x27;This is a warning!&#x27;</span>)</span><br><span class="line">warnings.warn(<span class="string">&#x27;This is a warning!&#x27;</span>)</span><br><span class="line">warnings.warn(<span class="string">&#x27;This is a warning!&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>C:\Users\Ada\AppData\Local\Temp/ipykernel_9460/3571311107.py:9: UserWarning: Warning message, before  warnings.warn('Warning message, before')-&gt; C:\Users\Ada\AppData\Local\Temp/ipykernel_9460/3571311107.py:11: UserWarning:Warning message, after-&gt; C:\Users\Ada\AppData\Local\Temp/ipykernel_9460/3571311107.py:13: UserWarning:This is a warning!</code></pre><h3 id="abc"><a class="markdownIt-Anchor" href="#abc"></a> abc</h3><h3 id="dis"><a class="markdownIt-Anchor" href="#dis"></a> dis</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字节码反汇编工具</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">*args</span>):</span><br><span class="line">    nargs = <span class="built_in">len</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(nargs, args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> dis</span><br><span class="line">    dis.dis(f)</span><br><span class="line">    dis.show_code(f)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>  6           0 LOAD_GLOBAL              0 (len)              2 LOAD_FAST                0 (args)              4 CALL_FUNCTION            1              6 STORE_FAST               1 (nargs)  7           8 LOAD_GLOBAL              1 (print)             10 LOAD_FAST                1 (nargs)             12 LOAD_FAST                0 (args)             14 CALL_FUNCTION            2             16 POP_TOP             18 LOAD_CONST               0 (None)             20 RETURN_VALUEName:              fFilename:          C:\Users\Ada\AppData\Local\Temp/ipykernel_9460/3862671634.pyArgument count:    0Positional-only arguments: 0Kw-only arguments: 0Number of locals:  2Stack size:        3Flags:             OPTIMIZED, NEWLOCALS, VARARGS, NOFREEConstants:   0: NoneNames:   0: len   1: printVariable names:   0: args   1: nargs</code></pre><h3 id="inspect"><a class="markdownIt-Anchor" href="#inspect"></a> inspect</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查现场对象,获取一个文件内的类,函数,示例,等等</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># getnumbers() 发现对象的成员属性,,example是py文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, data <span class="keyword">in</span> inspect.getmembers(example):</span><br><span class="line">    <span class="keyword">if</span> name.startswith(<span class="string">&#x27;__&#x27;</span>):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; : &#123;!r&#125;&#x27;</span>.<span class="built_in">format</span>(name, data))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="模块和包"><a class="markdownIt-Anchor" href="#模块和包"></a> 模块和包</h2><h3 id="importlib"><a class="markdownIt-Anchor" href="#importlib"></a> importlib</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行时import</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">├── clazz</span></span><br><span class="line"><span class="string">│   ├── __init__.py</span></span><br><span class="line"><span class="string">│   ├── a.py</span></span><br><span class="line"><span class="string">│   └── b.py</span></span><br><span class="line"><span class="string">└── main.py</span></span><br><span class="line"><span class="string">a.py</span></span><br><span class="line"><span class="string">def show():</span></span><br><span class="line"><span class="string">    print(&quot;show A&quot;)</span></span><br><span class="line"><span class="string">b.py</span></span><br><span class="line"><span class="string">def show():</span></span><br><span class="line"><span class="string">    print(&quot;show B&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_modules</span>(<span class="params">package=<span class="string">&quot;.&quot;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取包名下所有非__init__的模块名</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    modules = []</span><br><span class="line">    files = os.listdir(package)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file.startswith(<span class="string">&quot;__&quot;</span>):</span><br><span class="line">            name, ext = os.path.splitext(file)</span><br><span class="line">            modules.append(<span class="string">&quot;.&quot;</span> + name)</span><br><span class="line">    <span class="keyword">return</span> modules</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    package = <span class="string">&quot;clazz&quot;</span></span><br><span class="line">    modules = get_modules(package)</span><br><span class="line">    <span class="comment"># 将包下的所有模块，逐个导入，并调用其中的函数</span></span><br><span class="line">    <span class="keyword">for</span> module <span class="keyword">in</span> modules:</span><br><span class="line">        module = importlib.import_module(module, package)</span><br><span class="line">        <span class="keyword">for</span> attr <span class="keyword">in</span> <span class="built_in">dir</span>(module):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> attr.startswith(<span class="string">&quot;__&quot;</span>):</span><br><span class="line">                func = <span class="built_in">getattr</span>(module, attr)</span><br><span class="line">                func()</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    show A</span></span><br><span class="line"><span class="string">    show B</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="pkgutil"><a class="markdownIt-Anchor" href="#pkgutil"></a> pkgutil</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pkgutil</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包扩展工具</span></span><br><span class="line"><span class="comment"># 一个.py文件就是一个python模块（module），如果一个目录下面有一个__init__.py文件，那么这个目录就是一个python包（package）</span></span><br><span class="line"><span class="comment"># 实际上包是一种特殊的模块，而任何定义了__path__属性的模块都被当做包。</span></span><br><span class="line"></span><br><span class="line">iter_modules(path=<span class="literal">None</span>, prefix=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># path是包的目录路径，prefix是输出时，所有包的名字的前缀。用来获取该path下的子模块或子包。</span></span><br><span class="line">walk_packages(path=<span class="literal">None</span>, prefix=<span class="string">&#x27;&#x27;</span>, onerror=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 同上，但是这个方法是递归获取路径下的所有模块。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, name, ispkg <span class="keyword">in</span> pkgutil.walk_packages(test.__path__, test.__name__ + <span class="string">&quot;.&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;name: &#123;0:12&#125;, is_sub_package: &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(name, ispkg)</span><br></pre></td></tr></table></figure><h3 id="zipimport"><a class="markdownIt-Anchor" href="#zipimport"></a> zipimport</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipimport</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从zip文档中导入包</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;网络通信&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#网络通信&quot;&gt;&lt;/a&gt; 网络通信&lt;/h2&gt;
&lt;h3 id=&quot;ipaddress&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ipaddress&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="python3 标准库" scheme="https://gladdduck.github.io/tags/python3-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>python标准库-2</title>
    <link href="https://gladdduck.github.io/2023/03/30/python3lib-2/"/>
    <id>https://gladdduck.github.io/2023/03/30/python3lib-2/</id>
    <published>2023-03-30T05:59:49.971Z</published>
    <updated>2023-04-02T03:25:37.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数学模块"><a class="markdownIt-Anchor" href="#数学模块"></a> 数学模块</h2><h3 id="decimal"><a class="markdownIt-Anchor" href="#decimal"></a> decimal</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> decimal</span><br><span class="line"></span><br><span class="line"><span class="comment"># 精准的小数计算</span></span><br><span class="line"><span class="comment"># 可以设置精度,取值等</span></span><br></pre></td></tr></table></figure><h3 id="fractions"><a class="markdownIt-Anchor" href="#fractions"></a> fractions</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fractions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分数/有理数  加减乘除正常用</span></span><br><span class="line"><span class="comment"># 创建  小数\字符串\整数 都行</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> [<span class="number">0.1</span>, <span class="number">0.5</span>, <span class="number">1.5</span>, <span class="number">2.0</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(v, fractions.Fraction(v)))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> [<span class="string">&#x27;1/2&#x27;</span>, <span class="string">&#x27;2/4&#x27;</span>, <span class="string">&#x27;3/6&#x27;</span>]:</span><br><span class="line">    f = fractions.Fraction(s)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(s, f))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> [<span class="string">&#x27;0.5&#x27;</span>, <span class="string">&#x27;1.5&#x27;</span>, <span class="string">&#x27;2.0&#x27;</span>, <span class="string">&#x27;5e-1&#x27;</span>]:</span><br><span class="line">    f = fractions.Fraction(s)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;0:&gt;4&#125; = &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(s, f))</span><br><span class="line"><span class="keyword">for</span> n, d <span class="keyword">in</span> [(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">6</span>)]:</span><br><span class="line">    f = fractions.Fraction(n, d)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;/&#123;&#125; = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(n, d, f))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 精确度</span></span><br><span class="line"><span class="keyword">import</span> fractions</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;PI       =&#x27;</span>, math.pi)</span><br><span class="line"></span><br><span class="line">f_pi = fractions.Fraction(<span class="built_in">str</span>(math.pi))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;No limit =&#x27;</span>, f_pi)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">60</span>, <span class="number">70</span>, <span class="number">90</span>, <span class="number">100</span>]:</span><br><span class="line">    limited = f_pi.limit_denominator(i)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;0:8&#125; = &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(i, limited))</span><br></pre></td></tr></table></figure><pre><code>0.1 = 3602879701896397/360287970189639680.5 = 1/21.5 = 3/22.0 = 21/2 = 1/22/4 = 1/23/6 = 1/2 0.5 = 1/2 1.5 = 3/2 2.0 = 25e-1 = 1/21/2 = 1/22/4 = 1/23/6 = 1/2PI       = 3.141592653589793No limit = 3141592653589793/1000000000000000       1 = 3       6 = 19/6      11 = 22/7      60 = 179/57      70 = 201/64      90 = 267/85     100 = 311/99</code></pre><h3 id="random"><a class="markdownIt-Anchor" href="#random"></a> random</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># r1=random.Random()</span></span><br><span class="line"><span class="comment"># r2=random.Random()</span></span><br><span class="line"><span class="comment"># r1r2互不影响</span></span><br><span class="line"><span class="comment"># random 生成一个[0,1)的小数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%04.3f&#x27;</span> % random.random(), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定区间的小数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:04.3f&#125;&#x27;</span>.<span class="built_in">format</span>(random.uniform(<span class="number">1</span>, <span class="number">100</span>)), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><pre><code>0.413 0.516 0.783 0.878 0.469 50.379 1.563 83.167 90.209 54.711 </code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 固定种子，怎么运行都是相同的数</span></span><br><span class="line">random.seed(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:04.3f&#125;&#x27;</span>.<span class="built_in">format</span>(random.random()), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><pre><code>0.134 0.847 0.764 0.255 0.495 </code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机整数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[1, 100]:&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(random.randint(<span class="number">1</span>, <span class="number">100</span>), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n[-5, 5]:&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(random.randint(-<span class="number">5</span>, <span class="number">5</span>), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><pre><code>[1, 100]: 58 61 84 [-5, 5]: 1 -2 -4 </code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从序列中随机选择一个</span></span><br><span class="line"></span><br><span class="line">outcomes = &#123;</span><br><span class="line">    <span class="string">&#x27;heads&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;tails&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line">sides = <span class="built_in">list</span>(outcomes.keys())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">    outcomes[random.choice(sides)] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Heads:&#x27;</span>, outcomes[<span class="string">&#x27;heads&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Tails:&#x27;</span>, outcomes[<span class="string">&#x27;tails&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打乱序列</span></span><br><span class="line"></span><br><span class="line">l=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;l      :<span class="subst">&#123;l&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">random.shuffle(l)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;shuffled l:<span class="subst">&#123;l&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 采样</span></span><br><span class="line"></span><br><span class="line">samplelist=random.sample(l, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;sample l:<span class="subst">&#123;samplelist&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>Heads: 4902Tails: 5098l      :[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]shuffled l:[9, 4, 8, 3, 6, 7, 0, 5, 2, 1]sample l:[4, 6, 9, 5, 3]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 非均匀分布</span></span><br><span class="line"><span class="comment"># 高斯分布，正态分布</span></span><br><span class="line">random.gauss(mu=<span class="number">1</span>,sigma=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>-0.21029077107544225</code></pre><h3 id="math"><a class="markdownIt-Anchor" href="#math"></a> math</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment"># 常见常量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  π: &#123;:.30f&#125;&#x27;</span>.<span class="built_in">format</span>(math.pi))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  e: &#123;:.30f&#125;&#x27;</span>.<span class="built_in">format</span>(math.e))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;nan: &#123;:.30f&#125;&#x27;</span>.<span class="built_in">format</span>(math.nan))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;inf: &#123;:.30f&#125;&#x27;</span>.<span class="built_in">format</span>(math.inf))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断异常值</span></span><br><span class="line"><span class="built_in">print</span>(math.isinf(<span class="number">10.0</span> ** <span class="number">140</span>))</span><br><span class="line"><span class="built_in">print</span>(math.isinf((<span class="number">10.0</span> ** <span class="number">200</span>)*(<span class="number">10.0</span> ** <span class="number">200</span>)))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 比较,根据相对误差和绝对误差</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span>*<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(math.isclose(<span class="number">1000</span>,<span class="number">900</span>, rel_tol=<span class="number">0.1</span>))</span><br><span class="line"><span class="built_in">print</span>(math.isclose(<span class="number">1000</span>,<span class="number">900</span>, abs_tol=<span class="number">0.1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浮点数转整数</span></span><br><span class="line"><span class="comment"># trunc() 直接截断 只留整数部分</span></span><br><span class="line"><span class="comment"># floor() 不大于他的整数</span></span><br><span class="line"><span class="comment"># ceil()  数轴左侧的最小整数</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span>*<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">HEADINGS = (<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;trunk&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:^5&#125; &#123;:^5&#125; &#123;:^5&#125; &#123;:^5&#125; &#123;:^5&#125;&#x27;</span>.<span class="built_in">format</span>(*HEADINGS))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:-^5&#125; &#123;:-^5&#125; &#123;:-^5&#125; &#123;:-^5&#125; &#123;:-^5&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>,))</span><br><span class="line">fmt = <span class="string">&#x27;&#123;:5.1f&#125; &#123;:5.1f&#125; &#123;:5.1f&#125; &#123;:5.1f&#125; &#123;:5.1f&#125;&#x27;</span></span><br><span class="line">TEST_VALUES = [-<span class="number">1.5</span>,-<span class="number">0.8</span>,-<span class="number">0.5</span>,-<span class="number">0.2</span>,<span class="number">0</span>,<span class="number">0.2</span>,<span class="number">0.5</span>,<span class="number">0.8</span>,<span class="number">1</span>,]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> TEST_VALUES:</span><br><span class="line">    <span class="built_in">print</span>(fmt.<span class="built_in">format</span>(i,<span class="built_in">int</span>(i),math.trunc(i),math.floor(i),math.ceil(i),))</span><br></pre></td></tr></table></figure><pre><code>  π: 3.141592653589793115997963468544  e: 2.718281828459045090795598298428nan: naninf: infFalseTrue==========TrueFalse==========  i    int  trunk floor ceil ----- ----- ----- ----- ----- -1.5  -1.0  -1.0  -2.0  -1.0 -0.8   0.0   0.0  -1.0   0.0 -0.5   0.0   0.0  -1.0   0.0 -0.2   0.0   0.0  -1.0   0.0  0.0   0.0   0.0   0.0   0.0  0.2   0.0   0.0   0.0   1.0  0.5   0.0   0.0   0.0   1.0  0.8   0.0   0.0   0.0   1.0  1.0   1.0   1.0   1.0   1.0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 划分整数和小数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;/2 = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i, math.modf(i / <span class="number">2.0</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排列组合数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:2.0f&#125; &#123;:6.0f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">10</span>, math.factorial(<span class="number">10</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浮点数精确计算</span></span><br><span class="line">values = [<span class="number">0.1</span>] * <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;for-loop    : &#123;:.20f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">sum</span>(values)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;math.fsum() : &#123;:.20f&#125;&#x27;</span>.<span class="built_in">format</span>(math.fsum(values)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># gcd 最大公约数</span></span><br><span class="line"><span class="built_in">print</span>(math.gcd(<span class="number">10</span>, <span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(math.gcd(<span class="number">10</span>, <span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(math.gcd(<span class="number">50</span>, <span class="number">225</span>))</span><br><span class="line"><span class="built_in">print</span>(math.gcd(<span class="number">11</span>, <span class="number">9</span>))</span><br><span class="line"><span class="built_in">print</span>(math.gcd(<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他特殊函数</span></span><br></pre></td></tr></table></figure><pre><code>0/2 = (0.0, 0.0)1/2 = (0.5, 0.0)2/2 = (0.0, 1.0)3/2 = (0.5, 1.0)4/2 = (0.0, 2.0)5/2 = (0.5, 2.0)10 3628800for-loop    : 0.99999999999999988898math.fsum() : 1.000000000000000000002102510</code></pre><h3 id="statistics"><a class="markdownIt-Anchor" href="#statistics"></a> statistics</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> statistics <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">12</span>]</span><br><span class="line"><span class="comment"># 均值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:0.2f&#125;&#x27;</span>.<span class="built_in">format</span>(mean(data)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中位数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;median     : &#123;:0.2f&#125;&#x27;</span>.<span class="built_in">format</span>(median(data)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;low        : &#123;:0.2f&#125;&#x27;</span>.<span class="built_in">format</span>(median_low(data)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;high       : &#123;:0.2f&#125;&#x27;</span>.<span class="built_in">format</span>(median_high(data)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 众数</span></span><br><span class="line"><span class="built_in">print</span>(mode(data))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准差,方差</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  pstdev    : &#123;:6.2f&#125;&#x27;</span>.<span class="built_in">format</span>(pstdev(data)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  pvariance : &#123;:6.2f&#125;&#x27;</span>.<span class="built_in">format</span>(pvariance(data)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>5.33median     : 3.50low        : 2.00high       : 5.002  pstdev    :   4.23  pvariance :  17.89</code></pre><h2 id="文件系统"><a class="markdownIt-Anchor" href="#文件系统"></a> 文件系统</h2><h3 id="ospath"><a class="markdownIt-Anchor" href="#ospath"></a> os.path</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># os.path  把路径当作字符串处理</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 相对路劲改为绝对路径</span></span><br><span class="line"><span class="string">abspath</span></span><br><span class="line"><span class="string"># 公共路径</span></span><br><span class="line"><span class="string">commonpath()</span></span><br><span class="line"><span class="string"># 公共前缀</span></span><br><span class="line"><span class="string">commonprefix()</span></span><br><span class="line"><span class="string"># 路径的最后一部分</span></span><br><span class="line"><span class="string">basename</span></span><br><span class="line"><span class="string"># 路径的前面的部分</span></span><br><span class="line"><span class="string">dirname</span></span><br><span class="line"><span class="string"># 文件是否存在</span></span><br><span class="line"><span class="string">exists</span></span><br><span class="line"><span class="string"># 字符串合并路径</span></span><br><span class="line"><span class="string">join()</span></span><br><span class="line"><span class="string"># 清除多余分隔符或者相对路径</span></span><br><span class="line"><span class="string">normpath</span></span><br><span class="line"><span class="string"># 把环境变量的指示符换成真正的值</span></span><br><span class="line"><span class="string">expandvars</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 访问时间</span></span><br><span class="line"><span class="string">getatime</span></span><br><span class="line"><span class="string"># 修改时间</span></span><br><span class="line"><span class="string">getmtime</span></span><br><span class="line"><span class="string"># 创建时间</span></span><br><span class="line"><span class="string">getctime</span></span><br><span class="line"><span class="string"># 返回字节大小</span></span><br><span class="line"><span class="string">getsize</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">FILENAMES = [</span><br><span class="line">    <span class="comment"># os.path.dirname(__file__),</span></span><br><span class="line">    <span class="string">&#x27;D:\BaiduSyncdisk\Blog\source&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> FILENAMES:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;File        : &#123;!r&#125;&#x27;</span>.<span class="built_in">format</span>(file))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Absolute    :&#x27;</span>, os.path.isabs(file))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Is File?    :&#x27;</span>, os.path.isfile(file))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Is Dir?     :&#x27;</span>, os.path.isdir(file))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Is Link?    :&#x27;</span>, os.path.islink(file))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Mountpoint? :&#x27;</span>, os.path.ismount(file))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Exists?     :&#x27;</span>, os.path.exists(file))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Link Exists?:&#x27;</span>, os.path.lexists(file))</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><pre><code>File        : 'D:\\BaiduSyncdisk\\Blog\\source'Absolute    : TrueIs File?    : FalseIs Dir?     : TrueIs Link?    : FalseMountpoint? : FalseExists?     : TrueLink Exists?: True</code></pre><h3 id="pathlib"><a class="markdownIt-Anchor" href="#pathlib"></a> pathlib</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 把路劲当作对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Path(<span class="string">r&#x27;./&#x27;</span>)</span><br><span class="line"><span class="comment"># iterdir目录种的每个生成一个对象</span></span><br><span class="line"><span class="built_in">print</span>([x <span class="keyword">for</span> x <span class="keyword">in</span> p.iterdir() <span class="keyword">if</span> x.is_dir()])</span><br><span class="line"><span class="comment"># 模式查询所有文本</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(p.glob(<span class="string">&#x27;python3lib*.ipynb&#x27;</span>)))</span><br><span class="line"><span class="built_in">print</span>(p.exists())</span><br><span class="line"><span class="built_in">print</span>(p.is_dir())</span><br><span class="line"><span class="comment"># p.mkdir()</span></span><br><span class="line"><span class="comment"># p.rmdir() #空目录</span></span><br><span class="line"><span class="comment"># p.unlink() #文件等其他</span></span><br><span class="line"><span class="comment"># 直接用/拼接字符串</span></span><br><span class="line">q=p/<span class="string">&#x27;python3lib-1.ipynb&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line"><span class="comment"># 读文件</span></span><br><span class="line"><span class="keyword">with</span> q.<span class="built_in">open</span>() <span class="keyword">as</span> f: <span class="built_in">print</span>(f.readline())</span><br></pre></td></tr></table></figure><pre><code>[][WindowsPath('python3lib-1.ipynb'), WindowsPath('python3lib-2.ipynb')]TrueTruepython3lib-1.ipynb&#123;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Check the file types</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">p = Path(<span class="string">r&#x27;../&#x27;</span>)</span><br><span class="line">to_scan = itertools.chain(</span><br><span class="line">    p.iterdir(),</span><br><span class="line">)</span><br><span class="line">hfmt = <span class="string">&#x27;&#123;:18s&#125;&#x27;</span> + (<span class="string">&#x27;  &#123;:&gt;5&#125;&#x27;</span> * <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(hfmt.<span class="built_in">format</span>(<span class="string">&#x27;Name&#x27;</span>, <span class="string">&#x27;File&#x27;</span>, <span class="string">&#x27;Dir&#x27;</span>, <span class="string">&#x27;Link&#x27;</span>, <span class="string">&#x27;FIFO&#x27;</span>, <span class="string">&#x27;Block&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;Character&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">fmt = <span class="string">&#x27;&#123;:20s&#125;  &#x27;</span> + (<span class="string">&#x27;&#123;!r:&gt;5&#125;  &#x27;</span> * <span class="number">6</span>)</span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> to_scan:</span><br><span class="line">    <span class="built_in">print</span>(fmt.<span class="built_in">format</span>(</span><br><span class="line">        <span class="built_in">str</span>(f),</span><br><span class="line">        f.is_file(),</span><br><span class="line">        f.is_dir(),</span><br><span class="line">        f.is_symlink(),</span><br><span class="line">        f.is_fifo(),</span><br><span class="line">        f.is_block_device(),</span><br><span class="line">        f.is_char_device(),</span><br><span class="line">    ))</span><br><span class="line">    </span><br><span class="line">p = pathlib.Path(<span class="string">r&#x27;../_post&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;path  : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(p))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;name  : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(p.name))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;suffix: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(p.suffix))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;stem  : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(p.stem))</span><br></pre></td></tr></table></figure><pre><code>Name                 File    Dir   Link   FIFO  Block  Character..\404                False   True  False  False  False  False  ..\about              False   True  False  False  False  False  ..\books              False   True  False  False  False  False  ..\categories         False   True  False  False  False  False  ..\links              False   True  False  False  False  False  ..\repository         False   True  False  False  False  False  ..\tags               False   True  False  False  False  False  ..\_data              False   True  False  False  False  False  ..\_posts             False   True  False  False  False  False  path  : ..\_postname  : _postsuffix: stem  : _post</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">p = pathlib.Path(<span class="string">r&#x27;./&#x27;</span>)</span><br><span class="line">stat_info = p.stat()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;:&#x27;</span>.<span class="built_in">format</span>(<span class="string">r&#x27;./&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  Size:&#x27;</span>, stat_info.st_size)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  Permissions:&#x27;</span>, <span class="built_in">oct</span>(stat_info.st_mode))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  Owner:&#x27;</span>, stat_info.st_uid)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  Device:&#x27;</span>, stat_info.st_dev)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  Created      :&#x27;</span>, time.ctime(stat_info.st_ctime))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  Last modified:&#x27;</span>, time.ctime(stat_info.st_mtime))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  Last accessed:&#x27;</span>, time.ctime(stat_info.st_atime))</span><br><span class="line"></span><br><span class="line"><span class="comment"># touch()创建一个文件或者更新修改时间</span></span><br><span class="line"><span class="comment"># chmod()更改权限</span></span><br></pre></td></tr></table></figure><pre><code>./:  Size: 4096  Permissions: 0o40777  Owner: 0  Device: 3527538052  Created      : Sat Oct 22 08:58:30 2022  Last modified: Thu Mar 16 13:20:36 2023  Last accessed: Thu Mar 16 13:36:45 2023path  : ..\_postname  : _postsuffix: stem  : _post</code></pre><h3 id="glob"><a class="markdownIt-Anchor" href="#glob"></a> glob</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找匹配,类似正则</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只会匹配目中的所有路径,不会递归的搜索到子目录</span></span><br><span class="line"><span class="comment"># *匹配多个 ?匹配一个</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">sorted</span>(glob.glob(<span class="string">&#x27;./*.md&#x27;</span>))[:<span class="number">5</span>]:</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>.\LeetCode75.md.\LeetCode剑指offer1.md.\Linux常用命令.md.\Neo4j.md.\Neo4j安装.md</code></pre><h3 id="fnmatch"><a class="markdownIt-Anchor" href="#fnmatch"></a> fnmatch</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fnmatch</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">pattern = <span class="string">&#x27;python*.ipynb&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Pattern :&#x27;</span>, pattern)</span><br><span class="line"></span><br><span class="line">files = <span class="built_in">list</span>(<span class="built_in">sorted</span>(os.listdir(<span class="string">&#x27;.&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nFiles   :&#x27;</span>)</span><br><span class="line">pprint.pprint(files[:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nMatches :&#x27;</span>)</span><br><span class="line">pprint.pprint(fnmatch.<span class="built_in">filter</span>(files, pattern))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回是否匹配</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">sorted</span>(files)[:<span class="number">3</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Filename: &#123;:&lt;25&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        name, fnmatch.fnmatchcase(name, pattern)))</span><br></pre></td></tr></table></figure><pre><code>Pattern : python*.ipynbFiles   :['LeetCode75.md', 'LeetCode剑指offer1.md', 'Linux常用命令.md', 'Neo4j.md', 'Neo4j安装.md']Matches :['python3lib-1.ipynb', 'python3lib-2.ipynb']Filename: LeetCode75.md             FalseFilename: LeetCode剑指offer1.md       FalseFilename: Linux常用命令.md              False</code></pre><h3 id="linechache"><a class="markdownIt-Anchor" href="#linechache"></a> linechache</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> linecache</span><br><span class="line"><span class="comment"># 高效读取文本文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filename=<span class="string">r&#x27;D:\BaiduSyncdisk\Blog\source\_posts\第一篇博客记录.md&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 超过回返回空字符穿</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;!r&#125;&#x27;</span>.<span class="built_in">format</span>(linecache.getline(filename, <span class="number">2</span>)))</span><br><span class="line"><span class="comment"># 读取python源文件代码</span></span><br><span class="line">module_line = linecache.getline(<span class="string">&#x27;linecache.py&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;MODULE:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(module_line))</span><br></pre></td></tr></table></figure><pre><code>'title: 第一篇博客记录\n'MODULE:'This is intended to read lines from modules imported -- hence if a filename\n'</code></pre><h3 id="tempfile"><a class="markdownIt-Anchor" href="#tempfile"></a> tempfile</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时文件对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认是在系统的临时文件区创建import tempfile</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;gettempdir():&#x27;</span>, tempfile.gettempdir())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;gettempprefix():&#x27;</span>, tempfile.gettempprefix())</span><br><span class="line"><span class="comment"># 关闭文件回删除,默认句柄是w+b</span></span><br><span class="line"><span class="comment"># TemporaryFile()没有文件名</span></span><br><span class="line"><span class="keyword">with</span> tempfile.NamedTemporaryFile(mode=<span class="string">&#x27;w+t&#x27;</span>,</span><br><span class="line">                                 suffix=<span class="string">&#x27;_suffix&#x27;</span>,</span><br><span class="line">                                 prefix=<span class="string">&#x27;prefix_&#x27;</span>,</span><br><span class="line">                                 <span class="built_in">dir</span>=<span class="string">&#x27;./&#x27;</span>) <span class="keyword">as</span> temp:</span><br><span class="line">    temp.write(<span class="string">&#x27;Some data&#x27;</span>)</span><br><span class="line">    <span class="comment"># 回滚到前面</span></span><br><span class="line">    temp.seek(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(temp.read())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;temp.name:&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;  &#123;!r&#125;&#x27;</span>.<span class="built_in">format</span>(temp.name))</span><br><span class="line">    f = pathlib.Path(temp.name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Exists after close:&#x27;</span>, f.exists())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时目录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tempfile.TemporaryDirectory() <span class="keyword">as</span> directory_name:</span><br><span class="line">    the_dir = pathlib.Path(directory_name)</span><br><span class="line">    <span class="built_in">print</span>(the_dir)</span><br><span class="line">    a_file = the_dir / <span class="string">&#x27;a_file.txt&#x27;</span></span><br><span class="line">    a_file.write_text(<span class="string">&#x27;This file is deleted.&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(a_file.read_text())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Directory exists after?&#x27;</span>, the_dir.exists())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Contents after:&#x27;</span>, <span class="built_in">list</span>(the_dir.glob(<span class="string">&#x27;*&#x27;</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>gettempdir(): C:\Users\Ada\AppData\Local\Tempgettempprefix(): tmpSome datatemp.name:  'd:\\BaiduSyncdisk\\Blog\\source\\_posts\\prefix_0iyyalif_suffix'Exists after close: FalseC:\Users\Ada\AppData\Local\Temp\tmpm9xfa5bwThis file is deleted.Directory exists after? FalseContents after: []</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="comment"># SpooledTemporaryFile 到一定阈值才写进去文件</span></span><br><span class="line"><span class="keyword">with</span> tempfile.SpooledTemporaryFile(max_size=<span class="number">1000</span>,</span><br><span class="line">                                   mode=<span class="string">&#x27;w+t&#x27;</span>,</span><br><span class="line">                                   encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> temp:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;temp: &#123;!r&#125;&#x27;</span>.<span class="built_in">format</span>(temp.name))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        temp.write(<span class="string">&#x27;This line is repeated over and over.\n&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(temp._rolled, temp._file)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;rolling over&#x27;</span>)</span><br><span class="line">    <span class="comment"># 手动指定</span></span><br><span class="line">    temp.rollover()</span><br><span class="line">    <span class="built_in">print</span>(temp._rolled, temp._file)</span><br></pre></td></tr></table></figure><pre><code>temp: NoneFalse &lt;_io.TextIOWrapper encoding='utf-8'&gt;False &lt;_io.TextIOWrapper encoding='utf-8'&gt;False &lt;_io.TextIOWrapper encoding='utf-8'&gt;rolling overTrue &lt;tempfile._TemporaryFileWrapper object at 0x000001E88C4ECE20&gt;</code></pre><h3 id="shutil"><a class="markdownIt-Anchor" href="#shutil"></a> shutil</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 高层文件操作</span></span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;BEFORE:&#x27;</span>, glob.glob(<span class="string">&#x27;./doing.*&#x27;</span>))</span><br><span class="line"><span class="comment"># 复制文件,底层函数copyfileobj()</span></span><br><span class="line"><span class="comment"># shutil.copyfile(&#x27;./doing.ipynb&#x27;, &#x27;./doing.ipynb.copy&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;AFTER:&#x27;</span>, glob.glob(<span class="string">&#x27;./doing.*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy()如果指定目录,就会用源文件名,copy2会复制文件访问修改时间</span></span><br><span class="line"><span class="comment"># shutil.copy(&#x27;doing.ipynb&#x27;, &#x27;example&#x27;)</span></span><br><span class="line"><span class="comment"># 拷贝权限,和其他元素</span></span><br><span class="line"><span class="comment"># shutil.copymode()</span></span><br><span class="line"><span class="comment"># shutil.copystat()</span></span><br><span class="line"><span class="comment"># 拷贝目录,可以过滤某些</span></span><br><span class="line"><span class="comment"># shutil.copytree()</span></span><br><span class="line"><span class="comment"># 删除目录</span></span><br><span class="line"><span class="comment"># shutil.rmtree()</span></span><br><span class="line"><span class="comment"># 移动,如果在同目录不一样的名字就是复制,否则移动</span></span><br><span class="line"><span class="comment"># shutil.move()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(shutil.which(<span class="string">&#x27;virtualenv&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(shutil.which(<span class="string">&#x27;（小区）13幢北侧垃圾亭周边袋装垃圾1处(3).jpg&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(shutil.which(<span class="string">&#x27;no-such-program&#x27;</span>))</span><br></pre></td></tr></table></figure><pre><code>BEFORE: ['.\\doing.ipynb']AFTER: ['.\\doing.ipynb']E:\Anaconda3\envs\AAA\Scripts\virtualenv.EXENoneNone</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># # 压缩解压缩文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># import logging</span></span><br><span class="line"><span class="comment"># import shutil</span></span><br><span class="line"><span class="comment"># import sys</span></span><br><span class="line"><span class="comment"># import tarfile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># logging.basicConfig(</span></span><br><span class="line"><span class="comment">#     format=&#x27;%(message)s&#x27;,</span></span><br><span class="line"><span class="comment">#     stream=sys.stdout,</span></span><br><span class="line"><span class="comment">#     level=logging.DEBUG,</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line"><span class="comment"># logger = logging.getLogger(&#x27;pymotw&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&#x27;Creating archive:&#x27;)</span></span><br><span class="line"><span class="comment"># shutil.make_archive(</span></span><br><span class="line"><span class="comment">#     &#x27;example&#x27;, &#x27;gztar&#x27;,</span></span><br><span class="line"><span class="comment">#     root_dir=&#x27;..&#x27;,</span></span><br><span class="line"><span class="comment">#     base_dir=&#x27;./&#x27;,</span></span><br><span class="line"><span class="comment">#     logger=logger,</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&#x27;\nArchive contents:&#x27;)</span></span><br><span class="line"><span class="comment"># with tarfile.open(&#x27;example.tar.gz&#x27;, &#x27;r&#x27;) as t:</span></span><br><span class="line"><span class="comment">#     for n in t.getnames():</span></span><br><span class="line"><span class="comment">#         print(n)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import shutil</span></span><br><span class="line"><span class="comment"># # 解压缩文件</span></span><br><span class="line"><span class="comment"># for format, exts, description in shutil.get_unpack_formats(&#x27;文件名&#x27;):</span></span><br><span class="line"><span class="comment">#     print(&#x27;&#123;:&lt;5&#125;: &#123;&#125;, names ending in &#123;&#125;&#x27;.format(</span></span><br><span class="line"><span class="comment">#         format, description, exts))</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="comment"># 查看文件系统空间</span></span><br><span class="line">total_b, used_b, free_b = shutil.disk_usage(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gib = <span class="number">2</span> ** <span class="number">30</span>  <span class="comment"># GiB == gibibyte</span></span><br><span class="line">gb = <span class="number">10</span> ** <span class="number">9</span>   <span class="comment"># GB == gigabyte</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Total: &#123;:6.2f&#125; GB  &#123;:6.2f&#125; GiB&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">    total_b / gb, total_b / gib))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Used : &#123;:6.2f&#125; GB  &#123;:6.2f&#125; GiB&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">    used_b / gb, used_b / gib))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Free : &#123;:6.2f&#125; GB  &#123;:6.2f&#125; GiB&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">    free_b / gb, free_b / gib))</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>Total: 209.72 GB  195.31 GiBUsed :  67.00 GB   62.40 GiBFree : 142.72 GB  132.92 GiB</code></pre><h3 id="filecmp"><a class="markdownIt-Anchor" href="#filecmp"></a> filecmp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> filecmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># shadow 是否比较文件内容</span></span><br><span class="line">filecmp.cmp(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,shallow=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只比较当前目录,不比较内容</span></span><br><span class="line">filecmp.dircmp(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="mmap"><a class="markdownIt-Anchor" href="#mmap"></a> mmap</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mmap</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用操作系统虚拟内存来访问数据</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./doing.ipynb&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">with</span> mmap.mmap(f.fileno(), <span class="number">0</span>,</span><br><span class="line">                   access=mmap.ACCESS_READ) <span class="keyword">as</span> m:</span><br><span class="line">        <span class="comment"># 指针向右移动10</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;First 10 bytes via read :&#x27;</span>, m.read(<span class="number">10</span>))</span><br><span class="line">        <span class="comment"># 分片操作符将指针移回起始位置,分片在向右移动10</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;First 10 bytes via slice:&#x27;</span>, m[:<span class="number">10</span>])</span><br><span class="line">        <span class="comment"># 再向右移动10</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;2nd   10 bytes via read :&#x27;</span>, m.read(<span class="number">10</span>))</span><br><span class="line">        <span class="comment"># m.flush() 修改</span></span><br><span class="line">        <span class="comment"># 单独回滚</span></span><br><span class="line">        <span class="comment">#  m.seek(0)  # rewind</span></span><br><span class="line">        <span class="comment"># f.seek(0)  # rewind</span></span><br><span class="line">        </span><br><span class="line">        </span><br></pre></td></tr></table></figure><pre><code>First 10 bytes via read : b'&#123;\n &quot;cells&quot;'First 10 bytes via slice: b'&#123;\n &quot;cells&quot;'2nd   10 bytes via read : b': [\n  &#123;\n  '</code></pre><h3 id="codes"><a class="markdownIt-Anchor" href="#codes"></a> codes</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编码!</span></span><br><span class="line"><span class="comment"># unicode</span></span><br><span class="line"><span class="comment"># utf-8</span></span><br><span class="line"><span class="comment"># assic</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><h3 id="io"><a class="markdownIt-Anchor" href="#io"></a> io</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line">output = io.StringIO()</span><br><span class="line">output.write(<span class="string">&#x27;This goes into the buffer. &#x27;</span>)</span><br><span class="line"><span class="comment"># 可以替换成文件</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;And so does this.&#x27;</span>, file=output)</span><br><span class="line"><span class="comment"># Retrieve the value written</span></span><br><span class="line"><span class="built_in">print</span>(output.getvalue())</span><br><span class="line">output.close()  <span class="comment"># discard buffer memory</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize a read buffer</span></span><br><span class="line"><span class="built_in">input</span> = io.StringIO(<span class="string">&#x27;Inital value for read buffer&#x27;</span>)</span><br><span class="line"><span class="comment"># Read from the buffer</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>.read())</span><br></pre></td></tr></table></figure><pre><code>This goes into the buffer. And so does this.Inital value for read buffer</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">output = io.BytesIO()</span><br><span class="line">output.write(<span class="string">&#x27;This goes into the buffer. &#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">output.write(<span class="string">&#x27;ÁÇÊ&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment"># Retrieve the value written</span></span><br><span class="line"><span class="built_in">print</span>(output.getvalue())</span><br><span class="line">output.close()  <span class="comment"># discard buffer memory</span></span><br><span class="line"><span class="comment"># Initialize a read buffer</span></span><br><span class="line"><span class="built_in">input</span> = io.BytesIO(<span class="string">b&#x27;Inital value for read buffer&#x27;</span>)</span><br><span class="line"><span class="comment"># Read from the buffer</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>.read())</span><br></pre></td></tr></table></figure><pre><code>b'This goes into the buffer. \xc3\x81\xc3\x87\xc3\x8a'b'Inital value for read buffer'</code></pre><h2 id="数据持久存储与交换"><a class="markdownIt-Anchor" href="#数据持久存储与交换"></a> 数据持久存储与交换</h2><h3 id="pickle"><a class="markdownIt-Anchor" href="#pickle"></a> pickle</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="comment"># 带s的是字符串</span></span><br><span class="line"><span class="comment"># 不带s的是文件</span></span><br><span class="line">pickle.loads()</span><br><span class="line">pickle.load()</span><br><span class="line"></span><br><span class="line">pickle.dump()</span><br><span class="line">pickle.dumps()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="json"><a class="markdownIt-Anchor" href="#json"></a> json</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带s的是字符串</span></span><br><span class="line"><span class="comment"># 不带s的是文件</span></span><br><span class="line">json.loads()</span><br><span class="line">json.load()</span><br><span class="line"></span><br><span class="line">json.dump()</span><br><span class="line">json.dumps()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="shelvedbm"><a class="markdownIt-Anchor" href="#shelvedbm"></a> shelve,dbm</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shelve</span><br><span class="line"><span class="keyword">import</span> dbm</span><br><span class="line"><span class="comment"># 类似于字典,按键访问</span></span><br></pre></td></tr></table></figure><h3 id="sqlite3"><a class="markdownIt-Anchor" href="#sqlite3"></a> sqlite3</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进程中的嵌入式关系数据库</span></span><br></pre></td></tr></table></figure><h3 id="xml"><a class="markdownIt-Anchor" href="#xml"></a> xml</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xml.etree <span class="keyword">import</span> ElementTree</span><br><span class="line"><span class="comment"># 必须一次性遍历全部文档</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按顺序访问所有子节点iter()</span></span><br><span class="line"></span><br><span class="line">f=<span class="string">&#x27;&#x27;&#x27;&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="string">&lt;PurchaseOrder PurchaseOrderNumber=&quot;99503&quot; OrderDate=&quot;1999-10-20&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;Address Type=&quot;Shipping&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;Name&gt;Ellen Adams&lt;/Name&gt;</span></span><br><span class="line"><span class="string">    &lt;Street&gt;123 Maple Street&lt;/Street&gt;</span></span><br><span class="line"><span class="string">    &lt;City&gt;Mill Valley&lt;/City&gt;</span></span><br><span class="line"><span class="string">    &lt;State&gt;CA&lt;/State&gt;</span></span><br><span class="line"><span class="string">    &lt;Zip&gt;10999&lt;/Zip&gt;</span></span><br><span class="line"><span class="string">    &lt;Country&gt;USA&lt;/Country&gt;</span></span><br><span class="line"><span class="string">  &lt;/Address&gt;</span></span><br><span class="line"><span class="string">  &lt;Address Type=&quot;Billing&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;Name&gt;Tai Yee&lt;/Name&gt;</span></span><br><span class="line"><span class="string">    &lt;Street&gt;8 Oak Avenue&lt;/Street&gt;</span></span><br><span class="line"><span class="string">    &lt;City&gt;Old Town&lt;/City&gt;</span></span><br><span class="line"><span class="string">    &lt;State&gt;PA&lt;/State&gt;</span></span><br><span class="line"><span class="string">    &lt;Zip&gt;95819&lt;/Zip&gt;</span></span><br><span class="line"><span class="string">    &lt;Country&gt;USA&lt;/Country&gt;</span></span><br><span class="line"><span class="string">  &lt;/Address&gt;</span></span><br><span class="line"><span class="string">  &lt;DeliveryNotes&gt;Please leave packages in shed by driveway.&lt;/DeliveryNotes&gt;</span></span><br><span class="line"><span class="string">  &lt;Items&gt;</span></span><br><span class="line"><span class="string">    &lt;Item PartNumber=&quot;872-AA&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;ProductName&gt;Lawnmower&lt;/ProductName&gt;</span></span><br><span class="line"><span class="string">      &lt;Quantity&gt;1&lt;/Quantity&gt;</span></span><br><span class="line"><span class="string">      &lt;USPrice&gt;148.95&lt;/USPrice&gt;</span></span><br><span class="line"><span class="string">      &lt;Comment&gt;Confirm this is electric&lt;/Comment&gt;</span></span><br><span class="line"><span class="string">    &lt;/Item&gt;</span></span><br><span class="line"><span class="string">    &lt;Item PartNumber=&quot;926-AA&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;ProductName&gt;Baby Monitor&lt;/ProductName&gt;</span></span><br><span class="line"><span class="string">      &lt;Quantity&gt;2&lt;/Quantity&gt;</span></span><br><span class="line"><span class="string">      &lt;USPrice&gt;39.98&lt;/USPrice&gt;</span></span><br><span class="line"><span class="string">      &lt;ShipDate&gt;1999-05-21&lt;/ShipDate&gt;</span></span><br><span class="line"><span class="string">    &lt;/Item&gt;</span></span><br><span class="line"><span class="string">  &lt;/Items&gt;</span></span><br><span class="line"><span class="string">&lt;/PurchaseOrder&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line">tree=ElementTree.fromstring(f)</span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> tree.<span class="built_in">iter</span>():</span><br><span class="line">    <span class="built_in">print</span>(item.tag)</span><br><span class="line">    <span class="built_in">print</span>(item.text)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 使用attrib.get()获取属性</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> tree.<span class="built_in">iter</span>(<span class="string">&#x27;PurchaseOrder&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(item.attrib.get(<span class="string">&#x27;OrderDate&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(item.attrib.items())</span><br><span class="line"><span class="comment"># findall获取所有节点</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> tree.findall(<span class="string">&#x27;./PurchaseOrder/Items/Item&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(item.attrib.get(<span class="string">&#x27;PartNumber&#x27;</span>))</span><br></pre></td></tr></table></figure><pre><code>PurchaseOrder  1999-10-20dict_items([('PurchaseOrderNumber', '99503'), ('OrderDate', '1999-10-20')])</code></pre><h3 id="csv"><a class="markdownIt-Anchor" href="#csv"></a> csv</h3><h2 id="数据压缩于归档"><a class="markdownIt-Anchor" href="#数据压缩于归档"></a> 数据压缩于归档</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">import</span> bz2</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="加密"><a class="markdownIt-Anchor" href="#加密"></a> 加密</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="comment"># 可用加密算法</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Guaranteed:\n&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">    <span class="string">&#x27;, &#x27;</span>.join(<span class="built_in">sorted</span>(hashlib.algorithms_guaranteed))))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Available:\n&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">    <span class="string">&#x27;, &#x27;</span>.join(<span class="built_in">sorted</span>(hashlib.algorithms_available))))</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>Guaranteed:blake2b, blake2s, md5, sha1, sha224, sha256, sha384, sha3_224, sha3_256, sha3_384, sha3_512, sha512, shake_128, shake_256Available:blake2b, blake2s, md4, md5, md5-sha1, mdc2, ripemd160, sha1, sha224, sha256, sha384, sha3_224, sha3_256, sha3_384, sha3_512, sha512, sha512_224, sha512_256, shake_128, shake_256, sm3, whirlpool</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br></pre></td></tr></table></figure><h2 id="使用进程-线程和协程提供并发性"><a class="markdownIt-Anchor" href="#使用进程-线程和协程提供并发性"></a> 使用进程、线程和协程提供并发性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数学模块&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数学模块&quot;&gt;&lt;/a&gt; 数学模块&lt;/h2&gt;
&lt;h3 id=&quot;decimal&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#decimal&quot;&gt;&lt;/a&gt; de</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="python3 标准库" scheme="https://gladdduck.github.io/tags/python3-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>python标准库-1</title>
    <link href="https://gladdduck.github.io/2023/03/30/python3lib-1/"/>
    <id>https://gladdduck.github.io/2023/03/30/python3lib-1/</id>
    <published>2023-03-30T05:59:34.925Z</published>
    <updated>2023-04-02T03:25:27.941Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># help()函数查看</span></span><br><span class="line"><span class="comment"># https://learnku.com/docs/pymotw/date-and-time/3380</span></span><br></pre></td></tr></table></figure><h2 id="文本处理"><a class="markdownIt-Anchor" href="#文本处理"></a> 文本处理</h2><h3 id="string"><a class="markdownIt-Anchor" href="#string"></a> string</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="comment"># 文本常量,格式化,模板</span></span><br><span class="line"><span class="built_in">print</span>(string.ascii_letters)</span><br><span class="line"><span class="built_in">print</span>(string.printable )</span><br><span class="line"><span class="built_in">print</span>(string.hexdigits)</span><br><span class="line"><span class="built_in">print</span>(string.octdigits)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:&lt;30&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;left aligned&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:0&gt;30&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;right aligned&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:^30&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;centered&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:*^30&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;centered&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;<span class="string">&quot;centered&quot;</span>:*^<span class="number">30</span>&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;int: &#123;0:d&#125;;  hex: &#123;0:x&#125;;  oct: &#123;0:o&#125;;  bin: &#123;0:b&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">42</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;int: &#123;0:d&#125;;  hex: &#123;0:#x&#125;;  oct: &#123;0:#o&#125;;  bin: &#123;0:#b&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">42</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;int: <span class="subst">&#123;<span class="number">42</span>:d&#125;</span>;  hex: <span class="subst">&#123;<span class="number">42</span>:#x&#125;</span>;  oct: <span class="subst">&#123;<span class="number">42</span>:#o&#125;</span>;  bin: <span class="subst">&#123;<span class="number">42</span>:#b&#125;</span>&quot;</span>)</span><br><span class="line"> <span class="comment"># 总是显示它符号</span></span><br><span class="line">formatstr = <span class="string">&#x27;&#123;:+f&#125;; &#123;:+f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">3.14</span>, -<span class="number">3.14</span>) </span><br><span class="line"><span class="built_in">print</span>(formatstr)   </span><br><span class="line"><span class="comment"># 正数前显示空格</span></span><br><span class="line">formatstr = <span class="string">&#x27;&#123;: f&#125;; &#123;: f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">3.14</span>, -<span class="number">3.14</span>)  </span><br><span class="line"><span class="built_in">print</span>(formatstr)   </span><br><span class="line"><span class="comment"># 只显示负号 同 &#x27;&#123;:f&#125;; &#123;:f&#125;&#x27;</span></span><br><span class="line">formatstr = <span class="string">&#x27;&#123;:-f&#125;; &#123;:-f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">3.14</span>, -<span class="number">3.14</span>)  </span><br><span class="line"><span class="built_in">print</span>(formatstr)   </span><br></pre></td></tr></table></figure><pre><code>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!&quot;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~ 0123456789abcdefABCDEF01234567left aligned                  00000000000000000right aligned           centered           ***********centered**********************centered***********int: 42;  hex: 2a;  oct: 52;  bin: 101010int: 42;  hex: 0x2a;  oct: 0o52;  bin: 0b101010int: 42;  hex: 0x2a;  oct: 0o52;  bin: 0b101010+3.140000; -3.140000 3.140000; -3.1400003.140000; -3.140000</code></pre><h3 id="textwrap"><a class="markdownIt-Anchor" href="#textwrap"></a> textwrap</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line"><span class="comment"># 多行文本处理,格式化文本段落(缩进)</span></span><br><span class="line">sample_text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    The textwrap module can be used to format text for output in</span></span><br><span class="line"><span class="string">    situations where pretty-printing is desired.  It offers</span></span><br><span class="line"><span class="string">    programmatic functionality similar to the paragraph wrapping</span></span><br><span class="line"><span class="string">    or filling features found in many text editors.</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">dedented_text = textwrap.dedent(sample_text).strip()</span><br><span class="line"><span class="built_in">print</span>(dedented_text)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">for</span> width <span class="keyword">in</span> [<span class="number">45</span>, <span class="number">60</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; Columns:\n&#x27;</span>.<span class="built_in">format</span>(width))</span><br><span class="line">    <span class="built_in">print</span>(textwrap.fill(dedented_text, width=width))</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dedented_text = textwrap.dedent(sample_text).strip()</span><br><span class="line"><span class="built_in">print</span>(textwrap.fill(dedented_text,</span><br><span class="line">                    initial_indent=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    subsequent_indent=<span class="string">&#x27; &#x27;</span> * <span class="number">4</span>,</span><br><span class="line">                    width=<span class="number">50</span>,</span><br><span class="line">                    ))</span><br></pre></td></tr></table></figure><pre><code>The textwrap module can be used to format text for output insituations where pretty-printing is desired.  It offersprogrammatic functionality similar to the paragraph wrappingor filling features found in many text editors.45 Columns:The textwrap module can be used to formattext for output in situations where pretty-printing is desired.  It offers programmaticfunctionality similar to the paragraphwrapping or filling features found in manytext editors.60 Columns:The textwrap module can be used to format text for output insituations where pretty-printing is desired.  It offersprogrammatic functionality similar to the paragraph wrappingor filling features found in many text editors.The textwrap module can be used to format text for    output in situations where pretty-printing is    desired.  It offers programmatic functionality    similar to the paragraph wrapping or filling    features found in many text editors.</code></pre><h3 id="re"><a class="markdownIt-Anchor" href="#re"></a> re</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># **正则表达式**</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.直接用re模块的函数搜索</span></span><br><span class="line"><span class="comment"># 2.先用compile编译，然后用编译过的搜索</span></span><br><span class="line"><span class="comment"># 匹配</span></span><br><span class="line">pattern = <span class="string">&#x27;this&#x27;</span></span><br><span class="line">text = <span class="string">&#x27;Does this text match the pattern?&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> = re.search(pattern, text)</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">match</span>.start()</span><br><span class="line">e = <span class="keyword">match</span>.end()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Found &quot;&#123;&#125;&quot;\nin &quot;&#123;&#125;&quot;\nfrom &#123;&#125; to &#123;&#125; (&quot;&#123;&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">    <span class="keyword">match</span>.re.pattern, <span class="keyword">match</span>.string, s, e, text[s:e]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询所有</span></span><br><span class="line">text = <span class="string">&#x27;abbaaabbbbaaaaa&#x27;</span></span><br><span class="line"></span><br><span class="line">pattern = <span class="string">&#x27;ab&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> re.findall(pattern, text):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Found &#123;!r&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="keyword">match</span>))</span><br><span class="line">    </span><br><span class="line">text = <span class="string">&#x27;This is some text -- with punctuation.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(text)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment"># 组匹配</span></span><br><span class="line">patterns = [</span><br><span class="line">    (<span class="string">r&#x27;^(\w+)&#x27;</span>, <span class="string">&#x27;word at start of string&#x27;</span>),</span><br><span class="line">    (<span class="string">r&#x27;(\w+)\S*$&#x27;</span>, <span class="string">&#x27;word at end, with optional punctuation&#x27;</span>),</span><br><span class="line">    (<span class="string">r&#x27;(\bt\w+)\W+(\w+)&#x27;</span>, <span class="string">&#x27;word starting with t, another word&#x27;</span>),</span><br><span class="line">    (<span class="string">r&#x27;(\w+t)\b&#x27;</span>, <span class="string">&#x27;word ending with t&#x27;</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pattern, desc <span class="keyword">in</span> patterns:</span><br><span class="line">    regex = re.<span class="built_in">compile</span>(pattern)</span><br><span class="line">    <span class="keyword">match</span> = regex.search(text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#x27;&#123;&#125;&#x27; (&#123;&#125;)\n&quot;</span>.<span class="built_in">format</span>(pattern, desc))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;  &#x27;</span>, <span class="keyword">match</span>.groups())</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line">re.sub()</span><br><span class="line"><span class="comment"># 拆分</span></span><br><span class="line">re.split()</span><br></pre></td></tr></table></figure><pre><code>Found &quot;this&quot;in &quot;Does this text match the pattern?&quot;from 5 to 9 (&quot;this&quot;)Found 'ab'Found 'ab'This is some text -- with punctuation.'^(\w+)' (word at start of string)   ('This',)'(\w+)\S*$' (word at end, with optional punctuation)   ('punctuation',)'(\bt\w+)\W+(\w+)' (word starting with t, another word)   ('text', 'with')'(\w+t)\b' (word ending with t)   ('text',)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">*:0次或多次</span></span><br><span class="line"><span class="string">+:一次或多次</span></span><br><span class="line"><span class="string">?:零次或一次</span></span><br><span class="line"><span class="string">&#123;a,b&#125;:指定出现次数</span></span><br><span class="line"><span class="string">?:在重复指令后面,取消贪心模式</span></span><br><span class="line"><span class="string">[ab]:匹配a或b</span></span><br><span class="line"><span class="string">[^ab]:不匹配a和b</span></span><br><span class="line"><span class="string">.:任意单个字符</span></span><br><span class="line"><span class="string">\d:数字</span></span><br><span class="line"><span class="string">\D:非数字</span></span><br><span class="line"><span class="string">\s:空白符(制表符,空格,换行)</span></span><br><span class="line"><span class="string">\S:非空白符</span></span><br><span class="line"><span class="string">\w:字母数字</span></span><br><span class="line"><span class="string">\W:非字母数字</span></span><br><span class="line"><span class="string">(?&lt;=pattern):匹配pattern开头的 (?&lt;=exp2)exp1:查找 exp2 后面的 exp1。</span></span><br><span class="line"><span class="string">(?&lt;!pattern):不匹配pattern开头的 (?&lt;!exp2)exp1:查找前面不是 exp2 的 exp1。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="difflib"><a class="markdownIt-Anchor" href="#difflib"></a> difflib</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> difflib</span><br><span class="line"><span class="comment"># 字符串比较序列</span></span><br><span class="line">text1 = <span class="string">&quot;&quot;&quot;Lorem ipsum dolor sit amet, consectetuer adipiscing</span></span><br><span class="line"><span class="string">elit. Integer eu lacus accumsan arcu fermentum euismod. Donec</span></span><br><span class="line"><span class="string">pulvinar porttitor tellus. Aliquam venenatis. Donec facilisis</span></span><br><span class="line"><span class="string">pharetra tortor.  In nec mauris eget magna consequat</span></span><br><span class="line"><span class="string">convalis. Nam sed sem vitae odio pellentesque interdum. Sed</span></span><br><span class="line"><span class="string">consequat viverra nisl. Suspendisse arcu metus, blandit quis,</span></span><br><span class="line"><span class="string">rhoncus ac, pharetra eget, velit. Mauris urna. Morbi nonummy</span></span><br><span class="line"><span class="string">molestie orci. Praesent nisi elit, fringilla ac, suscipit non,</span></span><br><span class="line"><span class="string">tristique vel, mauris. Curabitur vel lorem id nisl porta</span></span><br><span class="line"><span class="string">adipiscing. Suspendisse eu lectus. In nunc. Duis vulputate</span></span><br><span class="line"><span class="string">tristique enim. Donec quis lectus a justo imperdiet tempus.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">text1_lines = text1.splitlines()</span><br><span class="line"></span><br><span class="line">text2 = <span class="string">&quot;&quot;&quot;Lorem ipsum dolor sit amet, consectetuer adipiscing</span></span><br><span class="line"><span class="string">elit. Integer eu lacus accumsan arcu fermentum euismod. Donec</span></span><br><span class="line"><span class="string">pulvinar, porttitor tellus. Aliquam venenatis. Donec facilisis</span></span><br><span class="line"><span class="string">pharetra tortor. In nec mauris eget magna consequat</span></span><br><span class="line"><span class="string">convalis. Nam cras vitae mi vitae odio pellentesque interdum. Sed</span></span><br><span class="line"><span class="string">consequat viverra nisl. Suspendisse arcu metus, blandit quis,</span></span><br><span class="line"><span class="string">rhoncus ac, pharetra eget, velit. Mauris urna. Morbi nonummy</span></span><br><span class="line"><span class="string">molestie orci. Praesent nisi elit, fringilla ac, suscipit non,</span></span><br><span class="line"><span class="string">tristique vel, mauris. Curabitur vel lorem id nisl porta</span></span><br><span class="line"><span class="string">adipiscing. Duis vulputate tristique enim. Donec quis lectus a</span></span><br><span class="line"><span class="string">justo imperdiet tempus.  Suspendisse eu lectus. In nunc.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">text2_lines = text2.splitlines()</span><br><span class="line">d = difflib.Differ()</span><br><span class="line">diff = d.compare(text1_lines, text2_lines)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>.join(diff))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">- 只在第一个文件有</span></span><br><span class="line"><span class="string">+ 只在第二个文件有</span></span><br><span class="line"><span class="string">  两个文件中都有</span></span><br><span class="line"><span class="string">? 没有出现在两个文件中</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><pre><code>  Lorem ipsum dolor sit amet, consectetuer adipiscing  elit. Integer eu lacus accumsan arcu fermentum euismod. Donec- pulvinar porttitor tellus. Aliquam venenatis. Donec facilisis+ pulvinar, porttitor tellus. Aliquam venenatis. Donec facilisis?         +- pharetra tortor.  In nec mauris eget magna consequat?                 -+ pharetra tortor. In nec mauris eget magna consequat- convalis. Nam sed sem vitae odio pellentesque interdum. Sed?                 - --+ convalis. Nam cras vitae mi vitae odio pellentesque interdum. Sed?               +++ +++++   +  consequat viverra nisl. Suspendisse arcu metus, blandit quis,  rhoncus ac, pharetra eget, velit. Mauris urna. Morbi nonummy  molestie orci. Praesent nisi elit, fringilla ac, suscipit non,  tristique vel, mauris. Curabitur vel lorem id nisl porta- adipiscing. Suspendisse eu lectus. In nunc. Duis vulputate- tristique enim. Donec quis lectus a justo imperdiet tempus.+ adipiscing. Duis vulputate tristique enim. Donec quis lectus a+ justo imperdiet tempus.  Suspendisse eu lectus. In nunc.</code></pre><h2 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h2><h3 id="enum"><a class="markdownIt-Anchor" href="#enum"></a> enum</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> enum</span><br><span class="line"><span class="comment"># IntEnum支持大小比较</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BugStatus</span>(enum.Enum):</span><br><span class="line"></span><br><span class="line">    new = <span class="number">7</span></span><br><span class="line">    incomplete = <span class="number">6</span></span><br><span class="line">    invalid = <span class="number">5</span></span><br><span class="line">    wont_fix = <span class="number">4</span></span><br><span class="line">    in_progress = <span class="number">3</span></span><br><span class="line">    fix_committed = <span class="number">2</span></span><br><span class="line">    fix_released = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    by_design = <span class="number">4</span></span><br><span class="line">    closed = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个东西都有一个name一个value</span></span><br><span class="line"><span class="keyword">for</span> status <span class="keyword">in</span> BugStatus:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:15&#125; = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(status.name, status.value))</span><br><span class="line"><span class="comment"># 如果存在多个值，下面出现的就是别名，不想出现多个值，使用@unique</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nSame: by_design is wont_fix: &#x27;</span>,</span><br><span class="line">      BugStatus.by_design <span class="keyword">is</span> BugStatus.wont_fix)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Same: closed is fix_released: &#x27;</span>,</span><br><span class="line">      BugStatus.closed <span class="keyword">is</span> BugStatus.fix_released)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 空格分开，从1开始，也可以使用元组列表</span></span><br><span class="line">BugStatus = enum.Enum(</span><br><span class="line">    value=<span class="string">&#x27;BugStatus&#x27;</span>,</span><br><span class="line">    names=(<span class="string">&#x27;fix_released fix_committed in_progress &#x27;</span></span><br><span class="line">           <span class="string">&#x27;wont_fix invalid incomplete new&#x27;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Member: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(BugStatus.new))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nAll members:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> status <span class="keyword">in</span> BugStatus:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:15&#125; = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(status.name, status.value))</span><br></pre></td></tr></table></figure><pre><code>new             = 7incomplete      = 6invalid         = 5wont_fix        = 4in_progress     = 3fix_committed   = 2fix_released    = 1Same: by_design is wont_fix:  TrueSame: closed is fix_released:  True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用元组作为值</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BugStatus</span>(enum.Enum):</span><br><span class="line">    new = (<span class="number">7</span>, [<span class="string">&#x27;incomplete&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;invalid&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;wont_fix&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;in_progress&#x27;</span>])</span><br><span class="line">    incomplete = (<span class="number">6</span>, [<span class="string">&#x27;new&#x27;</span>, <span class="string">&#x27;wont_fix&#x27;</span>])</span><br><span class="line">    invalid = (<span class="number">5</span>, [<span class="string">&#x27;new&#x27;</span>])</span><br><span class="line">    wont_fix = (<span class="number">4</span>, [<span class="string">&#x27;new&#x27;</span>])</span><br><span class="line">    in_progress = (<span class="number">3</span>, [<span class="string">&#x27;new&#x27;</span>, <span class="string">&#x27;fix_committed&#x27;</span>])</span><br><span class="line">    fix_committed = (<span class="number">2</span>, [<span class="string">&#x27;in_progress&#x27;</span>, <span class="string">&#x27;fix_released&#x27;</span>])</span><br><span class="line">    fix_released = (<span class="number">1</span>, [<span class="string">&#x27;new&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num, transitions</span>):</span><br><span class="line">        self.num = num</span><br><span class="line">        self.transitions = transitions</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">can_transition</span>(<span class="params">self, new_state</span>):</span><br><span class="line">        <span class="keyword">return</span> new_state.name <span class="keyword">in</span> self.transitions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Name:&#x27;</span>, BugStatus.in_progress)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Value:&#x27;</span>, BugStatus.in_progress.value)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Custom attribute:&#x27;</span>, BugStatus.in_progress.transitions)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Using attribute:&#x27;</span>,</span><br><span class="line">      BugStatus.in_progress.can_transition(BugStatus.new))</span><br></pre></td></tr></table></figure><pre><code>Name: BugStatus.in_progressValue: (3, ['new', 'fix_committed'])Custom attribute: ['new', 'fix_committed']Using attribute: True</code></pre><h3 id="collection"><a class="markdownIt-Anchor" href="#collection"></a> collection</h3><h4 id="chainmap"><a class="markdownIt-Anchor" href="#chainmap"></a> ChainMap</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ChainMap</span></span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于把几个字典装入一个列表，会按照进入列表的顺序覆盖相同值</span></span><br><span class="line"><span class="comment"># 修改任一个，会修改到原来的数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;C&#x27;</span>&#125;</span><br><span class="line">b = &#123;<span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;D&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 合并多个字典</span></span><br><span class="line">m = collections.ChainMap(a, b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(m.maps)</span><br><span class="line"><span class="comment">#当多个字典中有相同的key值是，默认取第一个key对应的value</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Before: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(m[<span class="string">&#x27;c&#x27;</span>]))</span><br><span class="line">a[<span class="string">&#x27;c&#x27;</span>] = <span class="string">&#x27;E&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;After : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(m[<span class="string">&#x27;c&#x27;</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a:&#x27;</span>, a)</span><br><span class="line"><span class="comment"># reverse the list</span></span><br><span class="line">m.maps = <span class="built_in">list</span>(<span class="built_in">reversed</span>(m.maps))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(m.maps)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(m[<span class="string">&#x27;c&#x27;</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>[&#123;'a': 'A', 'c': 'C'&#125;, &#123;'b': 'B', 'c': 'D'&#125;]Before: CAfter : Ea: &#123;'a': 'A', 'c': 'E'&#125;[&#123;'b': 'B', 'c': 'D'&#125;, &#123;'a': 'A', 'c': 'E'&#125;]c = D</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索查询底层映射，直到一个键被找到。不同的是，写，更新和删除只操作第一个映射。</span></span><br><span class="line">dict1= &#123;<span class="string">&quot;a&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;b&quot;</span>:<span class="string">&quot;lisi&quot;</span>&#125;</span><br><span class="line">dict2= &#123;<span class="string">&quot;c&quot;</span>:<span class="string">&quot;wangwu&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">new_dict = collections.ChainMap(dict1,dict2)</span><br><span class="line"><span class="built_in">print</span>(new_dict)</span><br><span class="line"></span><br><span class="line">new_dict1 = new_dict.new_child()</span><br><span class="line"><span class="built_in">print</span>(new_dict1)</span><br><span class="line">new_dict1[<span class="string">&quot;x&quot;</span>]=<span class="number">0</span></span><br><span class="line">new_dict1[<span class="string">&quot;y&quot;</span>] = <span class="number">100.0</span></span><br><span class="line">new_dict1[<span class="string">&quot;a&quot;</span>] = <span class="number">666</span></span><br><span class="line"><span class="built_in">print</span>(new_dict1)</span><br></pre></td></tr></table></figure><pre><code>ChainMap(&#123;'a': 'zhangsan', 'b': 'lisi'&#125;, &#123;'c': 'wangwu'&#125;)ChainMap(&#123;&#125;, &#123;'a': 'zhangsan', 'b': 'lisi'&#125;, &#123;'c': 'wangwu'&#125;)ChainMap(&#123;'x': 0, 'y': 100.0, 'a': 666&#125;, &#123;'a': 'zhangsan', 'b': 'lisi'&#125;, &#123;'c': 'wangwu'&#125;)</code></pre><h4 id="counter"><a class="markdownIt-Anchor" href="#counter"></a> Counter</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三种构建方式1.一个元素序列，一个键值字典，关键字传参import collections</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(collections.Counter([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="built_in">print</span>(collections.Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">1</span>&#125;))</span><br><span class="line"><span class="built_in">print</span>(collections.Counter(a=<span class="number">2</span>, b=<span class="number">3</span>, c=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计数只会根据新数据增加，替换数据不会改变计数</span></span><br><span class="line"></span><br><span class="line">c = collections.Counter()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Initial :&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line">c.update(<span class="string">&#x27;abcdaab&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Sequence:&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line">c.update(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">5</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Dict    :&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以用字典API获取值,如果没有返回0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c[<span class="string">&#x27;a&#x27;</span>],c[<span class="string">&#x27;666&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># elements返回所有元素,most_common()返回前n个最多的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 算数操作</span></span><br><span class="line">c1 = collections.Counter([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>])</span><br><span class="line">c2 = collections.Counter(<span class="string">&#x27;alphabet&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;C1:&#x27;</span>, c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;C2:&#x27;</span>, c2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计数相加</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nCombined counts:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c1 + c2)</span><br><span class="line"><span class="comment"># 计数相减,小于0自动删除</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nSubtraction:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c1 - c2)</span><br><span class="line"><span class="comment"># 取最小值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nIntersection (taking positive minimums):&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c1 &amp; c2)</span><br><span class="line"><span class="comment"># 取最大值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nUnion (taking maximums):&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c1 | c2)</span><br></pre></td></tr></table></figure><pre><code>Counter(&#123;'b': 3, 'a': 2, 'c': 1&#125;)Counter(&#123;'b': 3, 'a': 2, 'c': 1&#125;)Counter(&#123;'b': 3, 'a': 2, 'c': 1&#125;)Initial : Counter()Sequence: Counter(&#123;'a': 3, 'b': 2, 'c': 1, 'd': 1&#125;)Dict    : Counter(&#123;'d': 6, 'a': 4, 'b': 2, 'c': 1&#125;)4 0C1: Counter(&#123;'b': 3, 'a': 2, 'c': 1&#125;)C2: Counter(&#123;'a': 2, 'l': 1, 'p': 1, 'h': 1, 'b': 1, 'e': 1, 't': 1&#125;)Combined counts:Counter(&#123;'a': 4, 'b': 4, 'c': 1, 'l': 1, 'p': 1, 'h': 1, 'e': 1, 't': 1&#125;)Subtraction:Counter(&#123;'b': 2, 'c': 1&#125;)Intersection (taking positive minimums):Counter(&#123;'a': 2, 'b': 1&#125;)Union (taking maximums):Counter(&#123;'b': 3, 'a': 2, 'c': 1, 'l': 1, 'p': 1, 'h': 1, 'e': 1, 't': 1&#125;)</code></pre><h4 id="defaultdict"><a class="markdownIt-Anchor" href="#defaultdict"></a> defaultdict</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 没有键时,返回函数默认值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">default_factory</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;default value&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = collections.defaultdict(default_factory, foo=<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;d:&#x27;</span>, d)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;foo =&gt;&#x27;</span>, d[<span class="string">&#x27;foo&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;bar =&gt;&#x27;</span>, d[<span class="string">&#x27;bar&#x27;</span>])</span><br></pre></td></tr></table></figure><pre><code>d: defaultdict(&lt;function default_factory at 0x000001AA941D3DC0&gt;, &#123;'foo': 'bar'&#125;)foo =&gt; barbar =&gt; default value</code></pre><h4 id="deque"><a class="markdownIt-Anchor" href="#deque"></a> deque</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 双端队列</span></span><br><span class="line"><span class="comment"># list常用函数+线程安全</span></span><br><span class="line"><span class="comment"># append(),appendleft(),pop(),popleft()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以设置最大长度,队列达到指定长度时会删除之前(队头)的元素</span></span><br><span class="line">d1 = collections.deque(maxlen=<span class="number">3</span>)</span><br><span class="line">d2 = collections.deque(maxlen=<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    n = random.randint(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>, n)</span><br><span class="line">    d1.append(n)</span><br><span class="line">    d2.appendleft(n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;D1:&#x27;</span>, d1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;D2:&#x27;</span>, d2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 旋转</span></span><br><span class="line">d = collections.deque(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Normal        :&#x27;</span>, d)</span><br><span class="line"></span><br><span class="line">d = collections.deque(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">d.rotate(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Right rotation:&#x27;</span>, d)</span><br><span class="line"></span><br><span class="line">d = collections.deque(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">d.rotate(-<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Left rotation :&#x27;</span>, d)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>n = 7D1: deque([7], maxlen=3)D2: deque([7], maxlen=3)n = 73D1: deque([7, 73], maxlen=3)D2: deque([73, 7], maxlen=3)n = 34D1: deque([7, 73, 34], maxlen=3)D2: deque([34, 73, 7], maxlen=3)n = 56D1: deque([73, 34, 56], maxlen=3)D2: deque([56, 34, 73], maxlen=3)n = 79D1: deque([34, 56, 79], maxlen=3)D2: deque([79, 56, 34], maxlen=3)Normal        : deque([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])Right rotation: deque([8, 9, 0, 1, 2, 3, 4, 5, 6, 7])Left rotation : deque([2, 3, 4, 5, 6, 7, 8, 9, 0, 1])</code></pre><h4 id="namedtuple"><a class="markdownIt-Anchor" href="#namedtuple"></a> namedtuple</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带有名字的元组,会返回一个有指定属性的类</span></span><br><span class="line"><span class="comment"># 属性名字不能是关键字,属性不能修改</span></span><br><span class="line">Person = collections.namedtuple(<span class="string">&#x27;Person&#x27;</span>, <span class="string">&#x27;name age&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bob = Person(name=<span class="string">&#x27;Bob&#x27;</span>, age=<span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Representation:&#x27;</span>, bob)</span><br><span class="line"><span class="comment"># 转为OrderedDict</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;As Dictionary:&#x27;</span>, bob._asdict())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nBefore:&#x27;</span>, bob)</span><br><span class="line">bob2 = bob._replace(name=<span class="string">&#x27;Robert&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;After:&#x27;</span>, bob2)</span><br><span class="line"><span class="comment"># 不是同一个实例</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Same?:&#x27;</span>, bob <span class="keyword">is</span> bob2)</span><br></pre></td></tr></table></figure><pre><code>Representation: Person(name='Bob', age=30)As Dictionary: &#123;'name': 'Bob', 'age': 30&#125;Before: Person(name='Bob', age=30)After: Person(name='Robert', age=30)Same?: False</code></pre><h4 id="ordereddict"><a class="markdownIt-Anchor" href="#ordereddict"></a> OrderedDict</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="comment"># 会记住往字典里添加的顺序import collections</span></span><br><span class="line"><span class="comment"># 进行比较时,不仅比较值是否相同,也比较加入顺序</span></span><br><span class="line">d = collections.OrderedDict(</span><br><span class="line">    [(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;A&#x27;</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;B&#x27;</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;C&#x27;</span>)]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Before:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br><span class="line"></span><br><span class="line">d.move_to_end(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nmove_to_end():&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br><span class="line"></span><br><span class="line">d.move_to_end(<span class="string">&#x27;b&#x27;</span>, last=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nmove_to_end(last=False):&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br></pre></td></tr></table></figure><pre><code>Before:a Ab Bc Cmove_to_end():a Ac Cb Bmove_to_end(last=False):b Ba Ac C</code></pre><h4 id="collectionsabc"><a class="markdownIt-Anchor" href="#collectionsabc"></a> collections.abc</h4><h3 id="array数组"><a class="markdownIt-Anchor" href="#array数组"></a> array数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="comment"># 返回二进制数据 data 的十六进制表示形式。 data 的每个字节都被转换为相应的2位十六进制表示形式。</span></span><br><span class="line"></span><br><span class="line">a = array.array(<span class="string">&#x27;i&#x27;</span>, <span class="built_in">range</span>(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Initial :&#x27;</span>, a)</span><br><span class="line"></span><br><span class="line">s = <span class="string">b&#x27;This is the array.&#x27;</span></span><br><span class="line">a = array.array(<span class="string">&#x27;b&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;As byte string:&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;As array      :&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;As hex        :&#x27;</span>, binascii.hexlify(a))</span><br><span class="line"><span class="comment"># 与序列类似的函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(a[<span class="number">0</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>Initial : array('i', [0, 1, 2])As byte string: b'This is the array.'As array      : array('b', [84, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 97, 114, 114, 97, 121, 46])As hex        : b'54686973206973207468652061727261792e'T</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二进制转换</span></span><br><span class="line"><span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">a = array.array(<span class="string">&#x27;i&#x27;</span>, <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A1:&#x27;</span>, a)</span><br><span class="line"></span><br><span class="line">as_bytes = a.tobytes()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Byets: <span class="subst">&#123;as_bytes&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Bytes:&#x27;</span>, binascii.hexlify(as_bytes))</span><br><span class="line"></span><br><span class="line">a2 = array.array(<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">a2.frombytes(as_bytes)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A2:&#x27;</span>, a2)</span><br></pre></td></tr></table></figure><pre><code>A1: array('i', [0, 1, 2, 3, 4])Byets: b'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00'Bytes: b'0000000001000000020000000300000004000000'A2: array('i', [0, 1, 2, 3, 4])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># array文件转换</span></span><br><span class="line"><span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"></span><br><span class="line">a = array.array(<span class="string">&#x27;i&#x27;</span>, <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A1:&#x27;</span>, a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Write the array of numbers to a temporary file</span></span><br><span class="line">output = tempfile.NamedTemporaryFile()</span><br><span class="line">a.tofile(output.file)  <span class="comment"># must pass an *actual* file</span></span><br><span class="line">output.flush()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read the raw data</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(output.name, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> <span class="built_in">input</span>:</span><br><span class="line">    raw_data = <span class="built_in">input</span>.read()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Raw Contents:&#x27;</span>, binascii.hexlify(raw_data))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Read the data into an array</span></span><br><span class="line">    <span class="built_in">input</span>.seek(<span class="number">0</span>)</span><br><span class="line">    a2 = array.array(<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">    a2.fromfile(<span class="built_in">input</span>, <span class="built_in">len</span>(a))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;A2:&#x27;</span>, a2)</span><br></pre></td></tr></table></figure><h3 id="heapq"><a class="markdownIt-Anchor" href="#heapq"></a> heapq</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="comment"># 堆排序,只有小项堆</span></span><br><span class="line"><span class="comment"># 用数组的形式表示堆,N的子元素位于2*N+1和2*N+2</span></span><br><span class="line">data=[<span class="number">19</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">11</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;original data: <span class="subst">&#123;data&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># 把原数组转为堆结构数组</span></span><br><span class="line"><span class="comment"># 可以之间转换堆,也可以一个个往里面添加元素heappush</span></span><br><span class="line">heapq.heapify(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;heapify data: <span class="subst">&#123;data&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># heapreplace 删除最小元素并加入一个</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">13</span>]:</span><br><span class="line">    smallest = heapq.heapreplace(data, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;replace &#123;:&gt;2&#125; with &#123;:&gt;2&#125;:&#x27;</span>.<span class="built_in">format</span>(smallest, n))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;replaced data: <span class="subst">&#123;data&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># nlargest nsmallest返回前几个大/小的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># heapq.merge()合并几个有序列表</span></span><br></pre></td></tr></table></figure><pre><code>original data: [19, 9, 4, 10, 11]heapify data: [4, 9, 19, 10, 11]replace  4 with  0:replace  0 with 13:replaced data: [9, 10, 19, 13, 11]</code></pre><h3 id="bisect"><a class="markdownIt-Anchor" href="#bisect"></a> bisect</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"></span><br><span class="line">values = [<span class="number">14</span>, <span class="number">85</span>, <span class="number">77</span>, <span class="number">26</span>, <span class="number">50</span>, <span class="number">45</span>, <span class="number">66</span>, <span class="number">79</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">84</span>, <span class="number">77</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---  ---  --------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> values:</span><br><span class="line">    <span class="comment"># 默认右插</span></span><br><span class="line">    position = bisect.bisect(l, i)</span><br><span class="line">    bisect.insort(l, i)    </span><br><span class="line">    <span class="comment"># position = bisect.bisect_left(l, i)</span></span><br><span class="line">    <span class="comment"># bisect.insort_left(l, i)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:3&#125;  &#123;:3&#125;&#x27;</span>.<span class="built_in">format</span>(i, position), l)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>---  ---  -------- 14    0 [14] 85    1 [14, 85] 77    1 [14, 77, 85] 26    1 [14, 26, 77, 85] 50    2 [14, 26, 50, 77, 85] 45    2 [14, 26, 45, 50, 77, 85] 66    4 [14, 26, 45, 50, 66, 77, 85] 79    6 [14, 26, 45, 50, 66, 77, 79, 85] 10    0 [10, 14, 26, 45, 50, 66, 77, 79, 85]  3    0 [3, 10, 14, 26, 45, 50, 66, 77, 79, 85] 84    9 [3, 10, 14, 26, 45, 50, 66, 77, 79, 84, 85] 77    8 [3, 10, 14, 26, 45, 50, 66, 77, 77, 79, 84, 85]  1    0 [1, 3, 10, 14, 26, 45, 50, 66, 77, 77, 79, 84, 85]</code></pre><h3 id="queue"><a class="markdownIt-Anchor" href="#queue"></a> queue</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="comment"># 线程安全的队列</span></span><br><span class="line"><span class="comment"># maxsize 是个整数，用于设置可以放入队列中的项目数的上限。</span></span><br><span class="line"><span class="comment"># 当达到这个大小的时候，插入操作将阻塞至队列中的项目被消费掉</span></span><br><span class="line"><span class="comment"># FIFO队列,普通队列</span></span><br><span class="line">queue.Queue()</span><br><span class="line"><span class="comment"># LIFO栈</span></span><br><span class="line">queue.LifoQueue()</span><br><span class="line"><span class="comment"># 优先队列</span></span><br><span class="line">queue.PriorityQueue()</span><br><span class="line"></span><br><span class="line">q = queue.PriorityQueue()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 队列的变体，按优先级顺序（最低优先）检索打开的条目。</span></span><br><span class="line"><span class="comment"># 条目通常是以下格式的元组：</span></span><br><span class="line"><span class="comment"># 插入格式：q.put((priority number, data))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义类,实现比较方法,__eq__,__lt__</span></span><br><span class="line">q=queue.PriorityQueue()</span><br><span class="line">q.put((<span class="number">2</span>, <span class="string">&quot;Lisa&quot;</span>))</span><br><span class="line">q.put((<span class="number">1</span>, <span class="string">&quot;Lucy&quot;</span>))</span><br><span class="line">q.put((<span class="number">0</span>, <span class="string">&quot;Tom&quot;</span>))</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">    <span class="built_in">print</span>(q.get())</span><br></pre></td></tr></table></figure><pre><code>(0, 'Tom')(1, 'Lucy')(2, 'Lisa')</code></pre><h3 id="struct二进制数据结构"><a class="markdownIt-Anchor" href="#struct二进制数据结构"></a> struct:二进制数据结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="comment"># 将字节串解读为打包的二进制数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># struct的pack函数把任意数据类型变成bytes</span></span><br><span class="line">p=struct.pack(<span class="string">&#x27;&gt;I&#x27;</span>, <span class="number">66666</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;type-&gt;bytes:<span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># unpack把bytes变成相应的数据类型</span></span><br><span class="line">p=struct.unpack(<span class="string">&quot;&gt;I&quot;</span>, <span class="string">b&quot;\x00\x01\x04j&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;bytes-&gt;type:<span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>type-&gt;bytes:b'\x00\x01\x04j'bytes-&gt;type:(66666,)</code></pre><h3 id="weakref对象的非永久引用"><a class="markdownIt-Anchor" href="#weakref对象的非永久引用"></a> weakref:对象的非永久引用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> weakref</span><br><span class="line"><span class="comment"># 弱引用不会增加对象的引用数量。因此，弱引用不会妨碍所指对象被当作垃圾回收。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExpensiveObject</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;(Deleting &#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(self))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&#x27;ExpensiveObject&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback</span>(<span class="params">reference</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Invoked when referenced object is deleted&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;callback(&#123;!r&#125;)&#x27;</span>.<span class="built_in">format</span>(reference))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = ExpensiveObject()</span><br><span class="line">r = weakref.ref(obj, callback)</span><br><span class="line"><span class="comment"># 会在finalize中提供一个对象的引用,永远不会被回收</span></span><br><span class="line"><span class="comment"># f = weakref.finalize(obj, on_finalize, obj)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;obj:&#x27;</span>, obj)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ref:&#x27;</span>, r)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;r():&#x27;</span>, r())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;deleting obj&#x27;</span>)</span><br><span class="line"><span class="keyword">del</span> obj</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;r():&#x27;</span>, r())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># WeakValueDictionary： 实现的是一种可变映射，里面的值是对象的弱引用。</span></span><br><span class="line"><span class="comment"># 被引用的对象在程序中的其他地方被当作垃圾回收后，对应的键会自动从 WeakValueDictionary 中删除。因此，WeakValueDictionary 经常用于缓存。</span></span><br><span class="line"><span class="comment"># WeakValueDictionary 示例：</span></span><br><span class="line"><span class="comment"># WeakValueDictionary 示例：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cheese</span>:</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, kind</span>):</span><br><span class="line">        self.kind = kind</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Cheese(%r)&#x27;</span> % self.kind</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 执行：</span></span><br><span class="line"> </span><br><span class="line">stock = weakref.WeakValueDictionary()  <span class="comment"># 创建弱引用字典实例。</span></span><br><span class="line"> </span><br><span class="line">catalog = [Cheese(<span class="string">&#x27;Read Leicester&#x27;</span>), Cheese(<span class="string">&#x27;Tilsit&#x27;</span>),Cheese(<span class="string">&#x27;Brie&#x27;</span>), Cheese(<span class="string">&#x27;Parmesan&#x27;</span>)]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> cheese <span class="keyword">in</span> catalog:</span><br><span class="line">   stock[cheese.kind] = cheese  <span class="comment"># 名称映射到实例. [弱引用]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(stock.keys()))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">del</span> catalog</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(stock.keys()) ) <span class="comment"># 为什么还剩一个？ 因为临时变量。</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">del</span> cheese</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(stock.keys()) ) <span class="comment"># 临时变量删除后，为空.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> weakref</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:                            <span class="comment"># 这里新建一个类，因为WeakValueDictionary()</span></span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):      <span class="comment"># 要求value是一个obj</span></span><br><span class="line">             self.value = value</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_weak_value_dict</span>():</span><br><span class="line">     d= weakref.WeakValueDictionary() <span class="comment">#如果d是普通字典,那么还是会print(test1)</span></span><br><span class="line">     k1 = <span class="string">&#x27;test1&#x27;</span>                    </span><br><span class="line">     v1 = C(<span class="number">1</span>)                       <span class="comment"># 这时候C(1)是有一个强引用的：v1</span></span><br><span class="line">     d[k1] = v1                      <span class="comment"># 这个语句也就是字典赋值，但是由于我们用的</span></span><br><span class="line">     <span class="built_in">print</span>(d[k1])                    <span class="comment"># WeakValueDictionary()，所以字典里的是弱引用</span></span><br><span class="line">     <span class="keyword">del</span> v1                          <span class="comment"># 这时候删除了C(1)唯一的强引用 v1，因此</span></span><br><span class="line">     <span class="built_in">print</span>(d[k1])                   <span class="comment"># 会报错</span></span><br></pre></td></tr></table></figure><pre><code>instance ExpensiveObjectobj: ExpensiveObjectref: &lt;weakref at 0x000001AA94201360; to 'ExpensiveObject' at 0x000001AA94117AF0&gt;r(): ExpensiveObjectdeleting objr(): ExpensiveObject['Brie', 'Parmesan', 'Read Leicester', 'Tilsit']['Parmesan'][]</code></pre><h3 id="copy"><a class="markdownIt-Anchor" href="#copy"></a> copy</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 浅拷贝深拷贝</span></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当重载比较运算符时，可以只实现其中一两种，其他的会自动生成</span></span><br><span class="line"><span class="meta">@functools.total_ordering</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name == other.name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__gt__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name &gt; other.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = MyClass(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">my_list = [a]</span><br><span class="line">dup = copy.copy(my_list)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;             my_list:&#x27;</span>, my_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;                 dup:&#x27;</span>, dup)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;      dup is my_list:&#x27;</span>, (dup <span class="keyword">is</span> my_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;      dup == my_list:&#x27;</span>, (dup == my_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dup[0] is my_list[0]:&#x27;</span>, (dup[<span class="number">0</span>] <span class="keyword">is</span> my_list[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dup[0] == my_list[0]:&#x27;</span>, (dup[<span class="number">0</span>] == my_list[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = MyClass(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">my_list = [a]</span><br><span class="line">dup = copy.deepcopy(my_list)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;             my_list:&#x27;</span>, my_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;                 dup:&#x27;</span>, dup)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;      dup is my_list:&#x27;</span>, (dup <span class="keyword">is</span> my_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;      dup == my_list:&#x27;</span>, (dup == my_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dup[0] is my_list[0]:&#x27;</span>, (dup[<span class="number">0</span>] <span class="keyword">is</span> my_list[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dup[0] == my_list[0]:&#x27;</span>, (dup[<span class="number">0</span>] == my_list[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类实现,控制建立副本</span></span><br><span class="line"><span class="comment"># __copy()__</span></span><br><span class="line"><span class="comment"># __deepcopy()__</span></span><br></pre></td></tr></table></figure><pre><code>             my_list: [&lt;__main__.MyClass object at 0x000001AA940FF340&gt;]                 dup: [&lt;__main__.MyClass object at 0x000001AA940FF340&gt;]      dup is my_list: False      dup == my_list: Truedup[0] is my_list[0]: Truedup[0] == my_list[0]: True             my_list: [&lt;__main__.MyClass object at 0x000001AA94208A90&gt;]                 dup: [&lt;__main__.MyClass object at 0x000001AA941FFFD0&gt;]      dup is my_list: False      dup == my_list: Truedup[0] is my_list[0]: Falsedup[0] == my_list[0]: True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, connections</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.connections = connections</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_connection</span>(<span class="params">self, other</span>):</span><br><span class="line">        self.connections.append(other)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Graph(name=&#123;&#125;, id=&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            self.name, <span class="built_in">id</span>(self))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__deepcopy__</span>(<span class="params">self, memo</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\nCalling __deepcopy__ for &#123;!r&#125;&#x27;</span>.<span class="built_in">format</span>(self))</span><br><span class="line">        <span class="keyword">if</span> self <span class="keyword">in</span> memo:</span><br><span class="line">            existing = memo.get(self)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;  Already copied to &#123;!r&#125;&#x27;</span>.<span class="built_in">format</span>(existing))</span><br><span class="line">            <span class="keyword">return</span> existing</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;  Memo dictionary:&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> memo:</span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> memo.items():</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;    &#123;&#125;: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(k, v))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;    (empty)&#x27;</span>)</span><br><span class="line">        dup = Graph(copy.deepcopy(self.name, memo), [])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;  Copying to new object &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(dup))</span><br><span class="line">        memo[self] = dup</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> self.connections:</span><br><span class="line">            dup.add_connection(copy.deepcopy(c, memo))</span><br><span class="line">        <span class="keyword">return</span> dup</span><br><span class="line"></span><br><span class="line"><span class="comment"># memo字典跟踪已复制的对象避免递归</span></span><br><span class="line">root = Graph(<span class="string">&#x27;root&#x27;</span>, [])</span><br><span class="line">a = Graph(<span class="string">&#x27;a&#x27;</span>, [root])</span><br><span class="line">b = Graph(<span class="string">&#x27;b&#x27;</span>, [a, root])</span><br><span class="line">root.add_connection(a)</span><br><span class="line">root.add_connection(b)</span><br><span class="line"></span><br><span class="line">dup = copy.deepcopy(root)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="pprint"><a class="markdownIt-Anchor" href="#pprint"></a> pprint</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"><span class="comment"># 美观打印</span></span><br><span class="line">data = [</span><br><span class="line">    (<span class="number">1</span>, &#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;d&#x27;</span>: <span class="string">&#x27;D&#x27;</span>&#125;),</span><br><span class="line">    (<span class="number">2</span>, &#123;<span class="string">&#x27;e&#x27;</span>: <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;g&#x27;</span>: <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;h&#x27;</span>: <span class="string">&#x27;H&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;i&#x27;</span>: <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;j&#x27;</span>: <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;k&#x27;</span>: <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;l&#x27;</span>: <span class="string">&#x27;L&#x27;</span>&#125;),</span><br><span class="line">    (<span class="number">3</span>, [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>]),</span><br><span class="line">    (<span class="number">4</span>, [<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>]),</span><br><span class="line">    (<span class="number">5</span>, [<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span><span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment"># depth可以控制打印深度,width控制打印宽度,compact会尝试更加紧凑</span></span><br><span class="line">pprint.pprint(data,compact=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><pre><code>[(1, &#123;'a': 'A', 'b': 'B', 'c': 'C', 'd': 'D'&#125;), (2, &#123;'e': 'E', 'f': 'F', 'g': 'G', 'h': 'H', 'i': 'I', 'j': 'J', 'k': 'K', 'l': 'L'&#125;), (3, ['m', 'n']), (4, ['o', 'p', 'q']), (5, ['r', 's', 'tu', 'v', 'x', 'y', 'z'])][(1, &#123;'a': 'A', 'b': 'B', 'c': 'C', 'd': 'D'&#125;), (2,  &#123;'e': 'E',   'f': 'F',   'g': 'G',   'h': 'H',   'i': 'I',   'j': 'J',   'k': 'K',   'l': 'L'&#125;), (3, ['m', 'n']), (4, ['o', 'p', 'q']), (5, ['r', 's', 'tu', 'v', 'x', 'y', 'z'])]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pformat</span><br><span class="line"></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    level=logging.DEBUG,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&#x27;%(levelname)-8s %(message)s&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">&#x27;Logging pformatted data&#x27;</span>)</span><br><span class="line"><span class="comment"># 格式化转成字符串</span></span><br><span class="line">formatted = pformat(data)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> formatted.splitlines():</span><br><span class="line">    logging.debug(line.rstrip())</span><br><span class="line">    <span class="comment"># print(line.rstrip())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归打印</span></span><br><span class="line">local_data = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">local_data.append(local_data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;id(local_data) =&gt;&#x27;</span>, <span class="built_in">id</span>(local_data))</span><br><span class="line">pprint.pprint(local_data)</span><br><span class="line"><span class="built_in">print</span>(local_data)</span><br></pre></td></tr></table></figure><pre><code>DEBUG    Logging pformatted dataDEBUG    [(1, &#123;'a': 'A', 'b': 'B', 'c': 'C', 'd': 'D'&#125;),DEBUG     (2,DEBUG      &#123;'e': 'E',DEBUG       'f': 'F',DEBUG       'g': 'G',DEBUG       'h': 'H',DEBUG       'i': 'I',DEBUG       'j': 'J',DEBUG       'k': 'K',DEBUG       'l': 'L'&#125;),DEBUG     (3, ['m', 'n']),DEBUG     (4, ['o', 'p', 'q']),DEBUG     (5, ['r', 's', 'tu', 'v', 'x', 'y', 'z'])]id(local_data) =&gt; 1832127417216['a', 'b', 1, 2, &lt;Recursion on list with id=1832127417216&gt;]['a', 'b', 1, 2, [...]]</code></pre><h2 id="算法"><a class="markdownIt-Anchor" href="#算法"></a> 算法</h2><h3 id="functools管理函数的工具"><a class="markdownIt-Anchor" href="#functools管理函数的工具"></a> functools:管理函数的工具</h3><h4 id="partial"><a class="markdownIt-Anchor" href="#partial"></a> partial</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="comment"># 将一个函数的部分参数预先绑定为某些值，从而得到一个新的具有较少可变参数的函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b,*args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;a:<span class="subst">&#123;a&#125;</span>,  b:<span class="subst">&#123;b&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="comment"># 打印位置参数</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 打印关键字参数</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;%s:%s&#x27;</span> % (k, v))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通调用</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, v1=<span class="number">10</span>, v2=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># partial的参数会先占用函数前面的参数,后面传的会依次当作后面的形参</span></span><br><span class="line">add_partial = partial(add, <span class="number">10</span>, k1=<span class="number">10</span>, k2=<span class="number">20</span>)</span><br><span class="line">add_partial(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, k3=<span class="number">20</span>)</span><br><span class="line">add_partial(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, k1=<span class="number">20</span>)</span><br></pre></td></tr></table></figure><pre><code>a:1,  b:23--------------------v1:10v2:20--------------------a:10,  b:123--------------------k1:10k2:20k3:20--------------------a:10,  b:123--------------------k1:20k2:20--------------------</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># partialmethod和partial实现相同的功能，只是 partial在类方法中使用会报错，而此函数用在类方法中；</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partialmethod</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cell</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self._alive = <span class="literal">False</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">alive</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._alive</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_state</span>(<span class="params">self, state</span>):</span><br><span class="line">        self._alive = <span class="built_in">bool</span>(state)</span><br><span class="line">    set_alive = partialmethod(set_state, <span class="literal">True</span>)</span><br><span class="line">    set_dead = partialmethod(set_state, <span class="literal">False</span>)</span><br><span class="line"> </span><br><span class="line">c = Cell()</span><br><span class="line">c.alive <span class="comment"># 结果为:False</span></span><br><span class="line"> </span><br><span class="line">c.set_alive()</span><br><span class="line">c.alive <span class="comment"># 结果为:True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">standalone</span>(<span class="params">self, a=<span class="number">1</span>, b=<span class="number">2</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;  called standalone with:&#x27;</span>, (self, a, b))</span><br><span class="line">    <span class="keyword">if</span> self <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;  self.attr =&#x27;</span>, self.attr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.attr = <span class="string">&#x27;instance attribute&#x27;</span></span><br><span class="line"></span><br><span class="line">    method1 = partialmethod(standalone)</span><br><span class="line">    method2 = partial(standalone)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">o = MyClass()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;standalone&#x27;</span>)</span><br><span class="line">standalone(<span class="literal">None</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment"># 可以把对象传进去</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;method1 as partialmethod&#x27;</span>)</span><br><span class="line">o.method1()</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment"># 穿不进去对象</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;method2 as partial&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    o.method2()</span><br><span class="line"><span class="keyword">except</span> TypeError <span class="keyword">as</span> err:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ERROR: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(err))</span><br></pre></td></tr></table></figure><pre><code>standalone  called standalone with: (None, 1, 2)method1 as partialmethod  called standalone with: (&lt;__main__.MyClass object at 0x0000021B97BA8B80&gt;, 1, 2)  self.attr = instance attributemethod2 as partialERROR: standalone() missing 1 required positional argument: 'self'</code></pre><h4 id="富比较"><a class="markdownIt-Anchor" href="#富比较"></a> 富比较</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">大于 &gt;  __gt__()</span></span><br><span class="line"><span class="string">大于等于 &gt;=  __ge__()</span></span><br><span class="line"><span class="string">等于 ==  __eq__()</span></span><br><span class="line"><span class="string">小于 &lt;  __lt__()</span></span><br><span class="line"><span class="string">小于等于 &lt;=  __le__()</span></span><br><span class="line"><span class="string">不等于 != __ne()__</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@functools.total_ordering</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyObject</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val</span>):</span><br><span class="line">        self.val = val</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;  testing __eq__(&#123;&#125;, &#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            self.val, other.val))</span><br><span class="line">        <span class="keyword">return</span> self.val == other.val</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__gt__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;  testing __gt__(&#123;&#125;, &#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            self.val, other.val))</span><br><span class="line">        <span class="keyword">return</span> self.val &gt; other.val</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Methods:\n&#x27;</span>)</span><br><span class="line">pprint(inspect.getmembers(MyObject, inspect.isfunction))</span><br><span class="line"></span><br><span class="line">a = MyObject(<span class="number">1</span>)</span><br><span class="line">b = MyObject(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nComparisons:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> expr <span class="keyword">in</span> [<span class="string">&#x27;a &lt; b&#x27;</span>, <span class="string">&#x27;a &lt;= b&#x27;</span>, <span class="string">&#x27;a == b&#x27;</span>, <span class="string">&#x27;a &gt;= b&#x27;</span>, <span class="string">&#x27;a &gt; b&#x27;</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#123;:&lt;6&#125;:&#x27;</span>.<span class="built_in">format</span>(expr))</span><br><span class="line">    result = <span class="built_in">eval</span>(expr)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;  result of &#123;&#125;: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(expr, result))</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>Methods:[('__eq__', &lt;function MyObject.__eq__ at 0x0000021B998A7940&gt;), ('__ge__', &lt;function _ge_from_gt at 0x0000021B932024C0&gt;), ('__gt__', &lt;function MyObject.__gt__ at 0x0000021B998A70D0&gt;), ('__init__', &lt;function MyObject.__init__ at 0x0000021B998A79D0&gt;), ('__le__', &lt;function _le_from_gt at 0x0000021B93202550&gt;), ('__lt__', &lt;function _lt_from_gt at 0x0000021B93202430&gt;)]Comparisons:a &lt; b :  testing __gt__(1, 2)  testing __eq__(1, 2)  result of a &lt; b: Truea &lt;= b:  testing __gt__(1, 2)  result of a &lt;= b: Truea == b:  testing __eq__(1, 2)  result of a == b: Falsea &gt;= b:  testing __gt__(1, 2)  testing __eq__(1, 2)  result of a &gt;= b: Falsea &gt; b :  testing __gt__(1, 2)  result of a &gt; b: False</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cmp_to_key将 Python 2 程序转换至新版的转换工具，以保持对比较函数的兼容。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">key 参数：Python 3 支持，接受的函数（入参为每个元素）返回值（对这个元素的计算），表示此元素的权值，sorted 将按照权值大小进行排序</span></span><br><span class="line"><span class="string">cmp 参数：Python 2 支持，接受的函数是元素中的所有需要对比的两个元素，这个函数定义大于（一般返回1）、小于（-1）、等于逻辑（1），最后根据这些比较逻辑排序</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> cmp_to_key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mycmp</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="comment"># 提取字符中的数字</span></span><br><span class="line">    a = <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i.isdigit()]))</span><br><span class="line">    b = <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([i <span class="keyword">for</span> i <span class="keyword">in</span> b <span class="keyword">if</span> i.isdigit()]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> a &gt; b:</span><br><span class="line">        <span class="built_in">print</span>(a, <span class="string">&quot;vs&quot;</span>, b, <span class="string">&#x27;=&#x27;</span> , <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> a &lt; b:</span><br><span class="line">        <span class="built_in">print</span>(a, <span class="string">&quot;vs&quot;</span>, b, <span class="string">&#x27;=&#x27;</span> , -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(a, <span class="string">&quot;vs&quot;</span>, b, <span class="string">&#x27;=&#x27;</span> , <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>([<span class="string">&#x27;b29s&#x27;</span>, <span class="string">&#x27;c2s20&#x27;</span>, <span class="string">&#x27;a1-1&#x27;</span>, <span class="string">&#x27;88d&#x27;</span>], key=cmp_to_key(mycmp)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>([<span class="string">&#x27;b29s&#x27;</span>, <span class="string">&#x27;c2s20&#x27;</span>, <span class="string">&#x27;a1-1&#x27;</span>, <span class="string">&#x27;88d&#x27;</span>], key=<span class="keyword">lambda</span> x: <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([i <span class="keyword">for</span> i <span class="keyword">in</span> x <span class="keyword">if</span> i.isdigit()]))))</span><br></pre></td></tr></table></figure><pre><code>220 vs 29 = 111 vs 220 = -111 vs 220 = -111 vs 29 = -188 vs 29 = 188 vs 220 = -1['a1-1', 'b29s', '88d', 'c2s20']['a1-1', 'b29s', '88d', 'c2s20']</code></pre><h4 id="缓存"><a class="markdownIt-Anchor" href="#缓存"></a> 缓存</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="comment"># maxsize 设置最大缓存量</span></span><br><span class="line"><span class="comment"># 最近最少使用</span></span><br><span class="line"><span class="meta">@functools.lru_cache()</span></span><br><span class="line"><span class="comment"># @functools.cache()</span></span><br><span class="line"><span class="comment"># cache不需要移出旧值，缓存大小没有限制</span></span><br><span class="line"><span class="comment"># return lru_cache(maxsize=None)(user_function)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">expensive</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="comment"># 参数必须是可散列的</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;expensive(&#123;&#125;, &#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(a, b))</span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"></span><br><span class="line">MAX = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;First set of calls:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(MAX):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(MAX):</span><br><span class="line">        expensive(i, j)</span><br><span class="line"><span class="built_in">print</span>(expensive.cache_info())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nSecond set of calls:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(MAX + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(MAX + <span class="number">1</span>):</span><br><span class="line">        expensive(i, j)</span><br><span class="line"><span class="built_in">print</span>(expensive.cache_info())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nClearing cache:&#x27;</span>)</span><br><span class="line">expensive.cache_clear()</span><br><span class="line"><span class="built_in">print</span>(expensive.cache_info())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nThird set of calls:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(MAX):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(MAX):</span><br><span class="line">        expensive(i, j)</span><br><span class="line"><span class="built_in">print</span>(expensive.cache_info())</span><br></pre></td></tr></table></figure><pre><code>First set of calls:expensive(0, 0)expensive(0, 1)expensive(1, 0)expensive(1, 1)CacheInfo(hits=0, misses=4, maxsize=128, currsize=4)Second set of calls:expensive(0, 2)expensive(1, 2)expensive(2, 0)expensive(2, 1)expensive(2, 2)CacheInfo(hits=4, misses=9, maxsize=128, currsize=9)Clearing cache:CacheInfo(hits=0, misses=0, maxsize=128, currsize=0)Third set of calls:expensive(0, 0)expensive(0, 1)expensive(1, 0)expensive(1, 1)CacheInfo(hits=0, misses=4, maxsize=128, currsize=4)</code></pre><h4 id="缩减"><a class="markdownIt-Anchor" href="#缩减"></a> 缩减</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="comment"># def reduce(function, iterable, initializer=None):</span></span><br><span class="line"><span class="comment">#     it = iter(iterable)</span></span><br><span class="line"><span class="comment">#     if initializer is None:</span></span><br><span class="line"><span class="comment">#         value = next(it)</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         value = initializer</span></span><br><span class="line"><span class="comment">#     for element in it:</span></span><br><span class="line"><span class="comment">#         value = function(value, element)</span></span><br><span class="line"><span class="comment">#     return value</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是计算 ((((1+2)+3)+4)+5) 的值,前缀和</span></span><br><span class="line"><span class="built_in">print</span>(reduce(<span class="keyword">lambda</span> x, y: x+y, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认参数放第一个initializer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_reduce</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;do_reduce(&#123;&#125;, &#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(a, b))</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">result = functools.reduce(do_reduce, data, <span class="number">999</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;result: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(result))</span><br></pre></td></tr></table></figure><pre><code>15range(1, 5)do_reduce(999, 1)do_reduce(1000, 2)do_reduce(1002, 3)do_reduce(1005, 4)result: 1009</code></pre><h4 id="泛型函数"><a class="markdownIt-Anchor" href="#泛型函数"></a> 泛型函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="comment"># 不同的类型进不同的函数,根据参数的第一个参数切换函数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@functools.singledispatch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;default myfunc(&#123;!r&#125;)&#x27;</span>.<span class="built_in">format</span>(arg))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@myfunc.register(<span class="params"><span class="built_in">int</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc_int</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;myfunc_int(&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(arg))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@myfunc.register(<span class="params"><span class="built_in">list</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc_list</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;myfunc_list()&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> arg:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;  &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(item))</span><br><span class="line"></span><br><span class="line"><span class="meta">@myfunc.register</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc_list</span>(<span class="params">arg: <span class="built_in">float</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;myfunc_float(&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(arg))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找不到匹配的类型会计算继承顺序,匹配最近的父类</span></span><br><span class="line">myfunc(<span class="string">&#x27;string argument&#x27;</span>)</span><br><span class="line">myfunc(<span class="number">1</span>)</span><br><span class="line">myfunc(<span class="number">2.3</span>)</span><br><span class="line">myfunc([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br></pre></td></tr></table></figure><pre><code>default myfunc('string argument')myfunc_int(1)myfunc_float(2.3)myfunc_list()  a  b  c</code></pre><h3 id="itertools迭代器函数"><a class="markdownIt-Anchor" href="#itertools迭代器函数"></a> itertools:迭代器函数</h3><h4 id="chain"><a class="markdownIt-Anchor" href="#chain"></a> chain</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在消费数据之前不从迭代器生成数据</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> chain([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_iterables_to_chain</span>():</span><br><span class="line">    <span class="keyword">yield</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="keyword">yield</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> chain.from_iterable(make_iterables_to_chain()):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><pre><code>1 2 3 a b c 1 2 3 a b c </code></pre><h4 id="zip_longest"><a class="markdownIt-Anchor" href="#zip_longest"></a> zip_longest</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> zip_longest</span><br><span class="line"></span><br><span class="line">r1 = <span class="built_in">range</span>(<span class="number">3</span>)</span><br><span class="line">r2 = <span class="built_in">range</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;zip stops early:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">zip</span>(r1, r2)))</span><br><span class="line"></span><br><span class="line">r1 = <span class="built_in">range</span>(<span class="number">3</span>)</span><br><span class="line">r2 = <span class="built_in">range</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nzip_longest processes all of the values:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(zip_longest(r1, r2)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(zip_longest(r1, r2,fillvalue=<span class="number">6666</span>)))</span><br></pre></td></tr></table></figure><pre><code>zip stops early:[(0, 0), (1, 1)]zip_longest processes all of the values:[(0, 0), (1, 1), (2, None)][(0, 0), (1, 1), (2, 6666)]</code></pre><h4 id="islice"><a class="markdownIt-Anchor" href="#islice"></a> islice</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> islice</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Stop at 5:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> islice(<span class="built_in">range</span>(<span class="number">100</span>), <span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Start at 5, Stop at 10:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> islice(<span class="built_in">range</span>(<span class="number">100</span>), <span class="number">5</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;By tens to 100:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> islice(<span class="built_in">range</span>(<span class="number">100</span>), <span class="number">0</span>, <span class="number">100</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>Stop at 5:0 1 2 3 4 Start at 5, Stop at 10:5 6 7 8 9 By tens to 100:0 10 20 30 40 50 60 70 80 90 </code></pre><h4 id="tee"><a class="markdownIt-Anchor" href="#tee"></a> tee</h4><h4 id="mapstarmap"><a class="markdownIt-Anchor" href="#mapstarmap"></a> map,starmap</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">times_two</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> (x, y, x * y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Doubles:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">map</span>(times_two, <span class="built_in">range</span>(<span class="number">5</span>)):</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nMultiples:&#x27;</span>)</span><br><span class="line">r1 = <span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line">r2 = <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">map</span>(multiply, r1, r2):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:d&#125; * &#123;:d&#125; = &#123;:d&#125;&#x27;</span>.<span class="built_in">format</span>(*i))</span><br><span class="line"><span class="comment"># 只运行完最短的</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nStopping:&#x27;</span>)</span><br><span class="line">r1 = <span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line">r2 = <span class="built_in">range</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">map</span>(multiply, r1, r2):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> starmap</span><br><span class="line"><span class="comment"># map 传入的函数为f(x,y) starmap传入的函数为f(*x)</span></span><br><span class="line">values = [(<span class="number">0</span>, <span class="number">5</span>), (<span class="number">1</span>, <span class="number">6</span>), (<span class="number">2</span>, <span class="number">7</span>), (<span class="number">3</span>, <span class="number">8</span>), (<span class="number">4</span>, <span class="number">9</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> starmap(<span class="keyword">lambda</span> x,y: (x*y,x,y), values):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; * &#123;&#125; = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(*i))</span><br></pre></td></tr></table></figure><pre><code>Doubles:0 2 4 6 8 Multiples:0 * 5 = 01 * 6 = 62 * 7 = 143 * 8 = 244 * 9 = 36Stopping:(0, 0, 0)(1, 1, 1)0 * 0 = 56 * 1 = 614 * 2 = 724 * 3 = 836 * 4 = 9</code></pre><h4 id="countcyclerepear"><a class="markdownIt-Anchor" href="#countcyclerepear"></a> count,cycle,repear</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> count,repeat,cycle</span><br><span class="line"></span><br><span class="line"><span class="comment"># count无限产生值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">zip</span>(count(start=<span class="number">1</span>, step=<span class="number">10</span>), [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(*i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># cycle无限重复值 </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="number">7</span>), cycle([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># repear重复n次值,不提供就是无限 </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> repeat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], <span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 组合</span></span><br><span class="line"><span class="keyword">for</span> i, s <span class="keyword">in</span> <span class="built_in">zip</span>(count(), repeat(<span class="string">&#x27;over-and-over&#x27;</span>, <span class="number">5</span>)):</span><br><span class="line">    <span class="built_in">print</span>(i, s)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">map</span>(<span class="keyword">lambda</span> x, y: (x, y, x * y), repeat(<span class="number">2</span>), <span class="built_in">range</span>(<span class="number">5</span>)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:d&#125; * &#123;:d&#125; = &#123;:d&#125;&#x27;</span>.<span class="built_in">format</span>(*i))</span><br></pre></td></tr></table></figure><pre><code>1: a11: b21: c(0, 'a')(1, 'b')(2, 'c')(3, 'a')(4, 'b')(5, 'c')(6, 'a')[1, 2, 3, 4][1, 2, 3, 4][1, 2, 3, 4][1, 2, 3, 4][1, 2, 3, 4]0 over-and-over1 over-and-over2 over-and-over3 over-and-over4 over-and-over2 * 0 = 02 * 1 = 22 * 2 = 42 * 3 = 62 * 4 = 8</code></pre><h4 id="dropwhiletakewhilefilterfilterfalsecompress"><a class="markdownIt-Anchor" href="#dropwhiletakewhilefilterfilterfalsecompress"></a> dropwhile,takewhile,filter,filterfalse,compress</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> dropwhile,takewhile,filterfalse,compress</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_drop</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Testing:&#x27;</span>, x)</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">1</span></span><br><span class="line"><span class="comment"># 第一次为false之后的元素都会返回</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dropwhile(should_drop, [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, -<span class="number">2</span>]):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Yielding:&#x27;</span>, i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_take</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Testing:&#x27;</span>, x)</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">2</span></span><br><span class="line"><span class="comment"># 第一次为false之前的元素都会返回,遇见false就不返回了</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> takewhile(should_take, [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, -<span class="number">2</span>]):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Yielding:&#x27;</span>, i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只返回true的元素,每一个都会计算</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_item</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Testing:&#x27;</span>, x)</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">filter</span>(check_item, [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, -<span class="number">2</span>]):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Yielding:&#x27;</span>, i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相反</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_item</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Testing:&#x27;</span>, x)</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> filterfalse(check_item, [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, -<span class="number">2</span>]):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Yielding:&#x27;</span>, i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据true和false选择数据</span></span><br><span class="line">every_third = cycle([<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>])</span><br><span class="line">data = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> compress(data, every_third):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>Testing: -1Testing: 0Testing: 1Yielding: 1Yielding: 2Yielding: -2------------------------Testing: -1Yielding: -1Testing: 0Yielding: 0Testing: 1Yielding: 1Testing: 2------------------------Testing: -1Yielding: -1Testing: 0Yielding: 0Testing: 1Testing: 2Testing: -2Yielding: -2------------------------Testing: -1Testing: 0Testing: 1Yielding: 1Testing: 2Yielding: 2Testing: -2------------------------3 6 9 </code></pre><h4 id="groupby"><a class="markdownIt-Anchor" href="#groupby"></a> groupby</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> groupby</span><br><span class="line"></span><br><span class="line">d = <span class="built_in">dict</span>(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">1</span>, d=<span class="number">2</span>, e=<span class="number">1</span>, f=<span class="number">2</span>, g=<span class="number">3</span>)</span><br><span class="line">d = [(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">4</span>),(<span class="number">4</span>,<span class="number">2</span>)]</span><br><span class="line">di = <span class="built_in">sorted</span>(d, key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> k, g <span class="keyword">in</span> groupby(di, key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>]):</span><br><span class="line">    <span class="built_in">print</span>(k, <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x[<span class="number">1</span>], g)))</span><br></pre></td></tr></table></figure><pre><code>2 [2, 2]3 [3]4 [4]</code></pre><h4 id="accumulate"><a class="markdownIt-Anchor" href="#accumulate"></a> accumulate</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> accumulate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算累计和</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(accumulate(<span class="built_in">range</span>(<span class="number">5</span>))))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(accumulate(<span class="string">&#x27;abcde&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b)</span><br><span class="line">    <span class="keyword">return</span> b + a + b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(accumulate(<span class="string">&#x27;abcde&#x27;</span>, f)))</span><br></pre></td></tr></table></figure><pre><code>[0, 1, 3, 6, 10]['a', 'ab', 'abc', 'abcd', 'abcde']a bbab ccbabc ddcbabcd e['a', 'bab', 'cbabc', 'dcbabcd', 'edcbabcde']</code></pre><h4 id="product"><a class="markdownIt-Anchor" href="#product"></a> product</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="comment"># 笛卡尔积</span></span><br><span class="line"></span><br><span class="line">FACE_CARDS = (<span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">SUITS = (<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;S&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 顺序由输入顺序决定</span></span><br><span class="line">DECK = <span class="built_in">list</span>(</span><br><span class="line">    product(</span><br><span class="line">        chain(<span class="built_in">range</span>(<span class="number">2</span>, <span class="number">11</span>), FACE_CARDS),</span><br><span class="line">        SUITS,</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> card <span class="keyword">in</span> DECK:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:&gt;2&#125;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(*card), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> card[<span class="number">1</span>] == SUITS[-<span class="number">1</span>]:</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment"># repear控制几个自身</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">iterable</span>):</span><br><span class="line">    <span class="keyword">for</span> i, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(iterable, <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(item, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span>) == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Repeat 2:\n&#x27;</span>)</span><br><span class="line">show(<span class="built_in">list</span>(product(<span class="built_in">range</span>(<span class="number">3</span>), repeat=<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Repeat 3:\n&#x27;</span>)</span><br><span class="line">show(<span class="built_in">list</span>(product(<span class="built_in">range</span>(<span class="number">3</span>), repeat=<span class="number">3</span>)))</span><br></pre></td></tr></table></figure><pre><code> 2H  2D  2C  2S  3H  3D  3C  3S  4H  4D  4C  4S  5H  5D  5C  5S  6H  6D  6C  6S  7H  7D  7C  7S  8H  8D  8C  8S  9H  9D  9C  9S 10H 10D 10C 10S  JH  JD  JC  JS  QH  QD  QC  QS  KH  KD  KC  KS  AH  AD  AC  AS Repeat 2:(0, 0) (0, 1) (0, 2) (1, 0) (1, 1) (1, 2) (2, 0) (2, 1) (2, 2) Repeat 3:(0, 0, 0) (0, 0, 1) (0, 0, 2) (0, 1, 0) (0, 1, 1) (0, 1, 2) (0, 2, 0) (0, 2, 1) (0, 2, 2) (1, 0, 0) (1, 0, 1) (1, 0, 2) (1, 1, 0) (1, 1, 1) (1, 1, 2) (1, 2, 0) (1, 2, 1) (1, 2, 2) (2, 0, 0) (2, 0, 1) (2, 0, 2) (2, 1, 0) (2, 1, 1) (2, 1, 2) (2, 2, 0) (2, 2, 1) (2, 2, 2) </code></pre><h4 id="permutationscombinations"><a class="markdownIt-Anchor" href="#permutationscombinations"></a> permutations,combinations</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations,combinations,combinations_with_replacement</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">iterable</span>):</span><br><span class="line">    first = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> i, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(iterable, <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> first != item[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">if</span> first <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>()</span><br><span class="line">            first = item[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(item), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排列</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;All permutations:\n&#x27;</span>)</span><br><span class="line">show(permutations(<span class="string">&#x27;abcd&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nPairs:\n&#x27;</span>)</span><br><span class="line">show(permutations(<span class="string">&#x27;abcd&#x27;</span>, r=<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组合</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nUnique pairs:\n&#x27;</span>)</span><br><span class="line">show(combinations(<span class="string">&#x27;abcd&#x27;</span>, r=<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 包含自身</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nUnique pairs:\n&#x27;</span>)</span><br><span class="line">show(combinations_with_replacement(<span class="string">&#x27;abcd&#x27;</span>, r=<span class="number">2</span>))</span><br></pre></td></tr></table></figure><pre><code>All permutations:abcd abdc acbd acdb adbc adcb bacd badc bcad bcda bdac bdca cabd cadb cbad cbda cdab cdba dabc dacb dbac dbca dcab dcba Pairs:ab ac ad ba bc bd ca cb cd da db dc Unique pairs:ab ac ad bc bd cd Unique pairs:aa ab ac ad bb bc bd cc cd dd </code></pre><h3 id="operator内置操作符的函数结构"><a class="markdownIt-Anchor" href="#operator内置操作符的函数结构"></a> operator:内置操作符的函数结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键字的函数实现</span></span><br><span class="line"></span><br><span class="line">a = -<span class="number">1</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b =&#x27;</span>, b)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;not_(a)     :&#x27;</span>, not_(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;truth(a)    :&#x27;</span>, truth(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;is_(a, b)   :&#x27;</span>, is_(a, b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;is_not(a, b):&#x27;</span>, is_not(a, b))</span><br><span class="line"><span class="keyword">for</span> func <span class="keyword">in</span> (lt, le, eq, ne, ge, gt):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;(a, b): &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(func.__name__, func(a, b)))</span><br></pre></td></tr></table></figure><pre><code>a = -1b = 5not_(a)     : Falsetruth(a)    : Trueis_(a, b)   : Falseis_not(a, b): Truelt(a, b): Truele(a, b): Trueeq(a, b): Falsene(a, b): Truege(a, b): Falsegt(a, b): False</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyObj</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;example class for attrgetter&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, arg</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.arg = arg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;MyObj(&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(self.arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l = [MyObj(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;objects   :&#x27;</span>, l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extract the &#x27;arg&#x27; value from each object</span></span><br><span class="line">g = attrgetter(<span class="string">&#x27;arg&#x27;</span>)</span><br><span class="line">vals = [g(i) <span class="keyword">for</span> i <span class="keyword">in</span> l]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;arg values:&#x27;</span>, vals)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sort using arg</span></span><br><span class="line">l.reverse()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;reversed  :&#x27;</span>, l)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;sorted    :&#x27;</span>, <span class="built_in">sorted</span>(l, key=g))</span><br></pre></td></tr></table></figure><pre><code>objects   : [MyObj(0), MyObj(1), MyObj(2), MyObj(3), MyObj(4)]arg values: [0, 1, 2, 3, 4]reversed  : [MyObj(4), MyObj(3), MyObj(2), MyObj(1), MyObj(0)]sorted    : [MyObj(0), MyObj(1), MyObj(2), MyObj(3), MyObj(4)]</code></pre><h3 id="contextlib上下文管理器工具"><a class="markdownIt-Anchor" href="#contextlib上下文管理器工具"></a> contextlib:上下文管理器工具</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WithinContext</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, context</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;WithinContext.__init__(&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(context))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_something</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;WithinContext.do_something()&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;WithinContext.__del__&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, handle_error</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__init__(&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(handle_error))</span><br><span class="line">        self.handle_error = handle_error</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Context.__enter__()&#x27;</span>)</span><br><span class="line">        <span class="comment"># 此处返回作为as使用</span></span><br><span class="line">        <span class="keyword">return</span> WithinContext(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__exit__()&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;  exc_type =&#x27;</span>, exc_type)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;  exc_val  =&#x27;</span>, exc_val)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;  exc_tb   =&#x27;</span>, exc_tb)</span><br><span class="line">        <span class="comment"># 返回true就不继续传递,返回false继续传递</span></span><br><span class="line">        <span class="keyword">return</span> self.handle_error</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Context(<span class="literal">False</span>) <span class="keyword">as</span> c:</span><br><span class="line">    c.do_something()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------------&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> Context(<span class="literal">True</span>):</span><br><span class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;error message handled&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>__init__(False)Context.__enter__()WithinContext.__init__(&lt;__main__.Context object at 0x0000021B997DA3D0&gt;)WithinContext.__del__WithinContext.do_something()__exit__()  exc_type = None  exc_val  = None  exc_tb   = None---------------__init__(True)Context.__enter__()WithinContext.__init__(&lt;__main__.Context object at 0x0000021B997DA3D0&gt;)WithinContext.__del____exit__()  exc_type = &lt;class 'RuntimeError'&gt;  exc_val  = error message handled  exc_tb   = &lt;traceback object at 0x0000021B998C7D80&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timethis</span>(<span class="params">label</span>):</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="comment"># yield 之前的代码会在上下文管理器中作为 __enter__() 方法执行</span></span><br><span class="line">    <span class="comment"># 所有在 yield 之后的代码会作为 __exit__() 方法执行</span></span><br><span class="line">    <span class="comment"># 如果出现了异常，异常会在yield语句那里抛出。</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(label, end - start))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example use</span></span><br><span class="line"><span class="keyword">with</span> timethis(<span class="string">&#x27;counting&#x27;</span>):</span><br><span class="line">    n = <span class="number">10000000</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n -= <span class="number">1</span></span><br></pre></td></tr></table></figure><pre><code>counting: 0.678372859954834</code></pre><h2 id="日期和时间"><a class="markdownIt-Anchor" href="#日期和时间"></a> 日期和时间</h2><h3 id="time"><a class="markdownIt-Anchor" href="#time"></a> time</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 报告系统挂钟时间,返回某一时刻的秒数</span></span><br><span class="line"><span class="built_in">print</span>(time.time())</span><br><span class="line"></span><br><span class="line"><span class="comment"># monotonic()递增函数,time可能因为系统时间后退</span></span><br><span class="line"><span class="comment"># monotonic的起始时间无意义,主要是差值</span></span><br><span class="line"><span class="built_in">print</span>(time.monotonic())</span><br><span class="line"></span><br><span class="line"><span class="comment"># perf_counter高分辨率时钟</span></span><br><span class="line"><span class="built_in">print</span>(time.perf_counter())</span><br><span class="line"></span><br><span class="line"><span class="comment"># process_time处理器处理时间</span></span><br><span class="line"><span class="built_in">print</span>(time.process_time())</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctime 返回人能看懂的时间字符串,默认返回当前时间</span></span><br><span class="line"><span class="built_in">print</span>(time.ctime())</span><br><span class="line"><span class="built_in">print</span>(time.ctime(time.time()+<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前时间的结构化时间</span></span><br><span class="line"><span class="built_in">print</span>(time.localtime())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回UTC时区的结构化时间</span></span><br><span class="line"><span class="built_in">print</span>(time.gmtime())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把结构化时间转化为浮点秒数</span></span><br><span class="line"><span class="built_in">print</span>(time.mktime(time.localtime()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理时区问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串时间转为结构化时间</span></span><br><span class="line"><span class="built_in">print</span>(time.strptime(time.ctime()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结构化时间转化为指定格式</span></span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">r&quot;%Y-%m-%d %H:%M:%S&quot;</span>,time.localtime()))</span><br></pre></td></tr></table></figure><pre><code>1678199761.7579758951660.75644.11602483.59375Tue Mar  7 22:36:01 2023Tue Mar  7 22:36:21 2023time.struct_time(tm_year=2023, tm_mon=3, tm_mday=7, tm_hour=22, tm_min=36, tm_sec=1, tm_wday=1, tm_yday=66, tm_isdst=0)time.struct_time(tm_year=2023, tm_mon=3, tm_mday=7, tm_hour=14, tm_min=36, tm_sec=1, tm_wday=1, tm_yday=66, tm_isdst=0)1678199761.0time.struct_time(tm_year=2023, tm_mon=3, tm_mday=7, tm_hour=22, tm_min=36, tm_sec=1, tm_wday=1, tm_yday=66, tm_isdst=-1)2023-03-07 22:36:01</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">available_clocks = [</span><br><span class="line">    (<span class="string">&#x27;monotonic&#x27;</span>, time.monotonic),</span><br><span class="line">    (<span class="string">&#x27;perf_counter&#x27;</span>, time.perf_counter),</span><br><span class="line">    (<span class="string">&#x27;process_time&#x27;</span>, time.process_time),</span><br><span class="line">    (<span class="string">&#x27;time&#x27;</span>, time.time),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> clock_name, func <span class="keyword">in</span> available_clocks:</span><br><span class="line">    <span class="built_in">print</span>(textwrap.dedent(<span class="string">&#x27;&#x27;&#x27;\</span></span><br><span class="line"><span class="string">    &#123;name&#125;:</span></span><br><span class="line"><span class="string">        adjustable    : &#123;info.adjustable&#125;</span></span><br><span class="line"><span class="string">        implementation: &#123;info.implementation&#125;</span></span><br><span class="line"><span class="string">        monotonic     : &#123;info.monotonic&#125;</span></span><br><span class="line"><span class="string">        resolution    : &#123;info.resolution&#125;</span></span><br><span class="line"><span class="string">        current       : &#123;current&#125;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>).<span class="built_in">format</span>(</span><br><span class="line">        name=clock_name,</span><br><span class="line">        info=time.get_clock_info(clock_name),</span><br><span class="line">        current=func())</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><pre><code>monotonic:    adjustable    : False    implementation: GetTickCount64()    monotonic     : True    resolution    : 0.015625    current       : 951073.281perf_counter:    adjustable    : False    implementation: QueryPerformanceCounter()    monotonic     : True    resolution    : 1e-07    current       : 56.6460748process_time:    adjustable    : False    implementation: GetProcessTimes()    monotonic     : True    resolution    : 1e-07    current       : 2.59375time:    adjustable    : True    implementation: GetSystemTimeAsFileTime()    monotonic     : False    resolution    : 0.015625    current       : 1678199174.288961</code></pre><h3 id="datetime"><a class="markdownIt-Anchor" href="#datetime"></a> datetime</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment"># 获取年月日等</span></span><br><span class="line">today = datetime.date.today()</span><br><span class="line"><span class="built_in">print</span>(today)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ctime  :&#x27;</span>, today.ctime())</span><br><span class="line">tt = today.timetuple()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;tuple  : tm_year  =&#x27;</span>, tt.tm_year)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;         tm_mon   =&#x27;</span>, tt.tm_mon)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;         tm_mday  =&#x27;</span>, tt.tm_mday)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;         tm_hour  =&#x27;</span>, tt.tm_hour)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;         tm_min   =&#x27;</span>, tt.tm_min)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;         tm_sec   =&#x27;</span>, tt.tm_sec)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;         tm_wday  =&#x27;</span>, tt.tm_wday)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;         tm_yday  =&#x27;</span>, tt.tm_yday)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;         tm_isdst =&#x27;</span>, tt.tm_isdst)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ordinal:&#x27;</span>, today.toordinal())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Year   :&#x27;</span>, today.year)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Mon    :&#x27;</span>, today.month)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Day    :&#x27;</span>, today.day)</span><br></pre></td></tr></table></figure><pre><code>2023-03-07ctime  : Tue Mar  7 00:00:00 2023tuple  : tm_year  = 2023         tm_mon   = 3         tm_mday  = 7         tm_hour  = 0         tm_min   = 0         tm_sec   = 0         tm_wday  = 1         tm_yday  = 66         tm_isdst = -1ordinal: 738586Year   : 2023Mon    : 3Day    : 7</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 根据天数返回日期</span></span><br><span class="line">o = <span class="number">733114</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;o               :&#x27;</span>, o)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;fromordinal(o)  :&#x27;</span>, datetime.date.fromordinal(o))</span><br><span class="line"></span><br><span class="line">t = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;t               :&#x27;</span>, t)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;fromtimestamp(t):&#x27;</span>, datetime.date.fromtimestamp(t))</span><br></pre></td></tr></table></figure><pre><code>o               : 733114fromordinal(o)  : 2008-03-13t               : 1678199846.9677696fromtimestamp(t): 2023-03-07</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取时间对应秒数</span></span><br><span class="line"><span class="keyword">for</span> delta <span class="keyword">in</span> [datetime.timedelta(microseconds=<span class="number">1</span>),</span><br><span class="line">              datetime.timedelta(milliseconds=<span class="number">1</span>),</span><br><span class="line">              datetime.timedelta(seconds=<span class="number">1</span>),</span><br><span class="line">              datetime.timedelta(minutes=<span class="number">1</span>),</span><br><span class="line">              datetime.timedelta(hours=<span class="number">1</span>),</span><br><span class="line">              datetime.timedelta(days=<span class="number">1</span>),</span><br><span class="line">              datetime.timedelta(weeks=<span class="number">1</span>),</span><br><span class="line">              ]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:15&#125; = &#123;:8&#125; seconds&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        <span class="built_in">str</span>(delta), delta.total_seconds())</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><pre><code>0:00:00.000001  =    1e-06 seconds0:00:00.001000  =    0.001 seconds0:00:01         =      1.0 seconds0:01:00         =     60.0 seconds1:00:00         =   3600.0 seconds1 day, 0:00:00  =  86400.0 seconds7 days, 0:00:00 = 604800.0 seconds</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment"># 时间的计算</span></span><br><span class="line">today = datetime.date.today()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Today    :&#x27;</span>, today)</span><br><span class="line"></span><br><span class="line">one_day = datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;One day  :&#x27;</span>, one_day)</span><br><span class="line"></span><br><span class="line">yesterday = today - one_day</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Yesterday:&#x27;</span>, yesterday)</span><br><span class="line"></span><br><span class="line">tomorrow = today + one_day</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Tomorrow :&#x27;</span>, tomorrow)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;tomorrow - yesterday:&#x27;</span>, tomorrow - yesterday)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;yesterday - tomorrow:&#x27;</span>, yesterday - tomorrow)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 时间比较</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Times:&#x27;</span>)</span><br><span class="line">t1 = datetime.time(<span class="number">12</span>, <span class="number">55</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  t1:&#x27;</span>, t1)</span><br><span class="line">t2 = datetime.time(<span class="number">13</span>, <span class="number">5</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  t2:&#x27;</span>, t2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  t1 &lt; t2:&#x27;</span>, t1 &lt; t2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Dates:&#x27;</span>)</span><br><span class="line">d1 = datetime.date.today()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  d1:&#x27;</span>, d1)</span><br><span class="line">d2 = datetime.date.today() + datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  d2:&#x27;</span>, d2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  d1 &gt; d2:&#x27;</span>, d1 &gt; d2)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment"># 时间和日期组合在一起</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Now    :&#x27;</span>, datetime.datetime.now())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Today  :&#x27;</span>, datetime.datetime.today())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;UTC Now:&#x27;</span>, datetime.datetime.utcnow())</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">FIELDS = [</span><br><span class="line">    <span class="string">&#x27;year&#x27;</span>, <span class="string">&#x27;month&#x27;</span>, <span class="string">&#x27;day&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;hour&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>, <span class="string">&#x27;second&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;microsecond&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">d = datetime.datetime.now()</span><br><span class="line"><span class="keyword">for</span> attr <span class="keyword">in</span> FIELDS:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:15&#125;: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(attr, <span class="built_in">getattr</span>(d, attr)))</span><br></pre></td></tr></table></figure><pre><code>Now    : 2023-03-07 22:41:14.718075Today  : 2023-03-07 22:41:14.718076UTC Now: 2023-03-07 14:41:14.718075year           : 2023month          : 3day            : 7hour           : 22minute         : 41second         : 14microsecond    : 719073</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment"># 日期格式化</span></span><br><span class="line"><span class="built_in">format</span> = <span class="string">&quot;%a %b %d %H:%M:%S %Y&quot;</span></span><br><span class="line"></span><br><span class="line">today = datetime.datetime.today()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ISO     :&#x27;</span>, today)</span><br><span class="line"></span><br><span class="line">s = today.strftime(<span class="built_in">format</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;strftime:&#x27;</span>, s)</span><br><span class="line"></span><br><span class="line">d = datetime.datetime.strptime(s, <span class="built_in">format</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;strptime:&#x27;</span>, d.strftime(<span class="built_in">format</span>))</span><br></pre></td></tr></table></figure><pre><code>ISO     : 2023-03-07 22:40:31.254463strftime: Tue Mar 07 22:40:31 2023strptime: Tue Mar 07 22:40:31 2023</code></pre><h3 id="日期操作"><a class="markdownIt-Anchor" href="#日期操作"></a> 日期操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"><span class="comment"># 设置星期一是第一天还是星期天是第一天</span></span><br><span class="line">c = calendar.TextCalendar(calendar.MONDAY)</span><br><span class="line">c.prmonth(<span class="number">2023</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>     March 2023Mo Tu We Th Fr Sa Su       1  2  3  4  5 6  7  8  9 10 11 1213 14 15 16 17 18 1920 21 22 23 24 25 2627 28 29 30 31</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">pprint.pprint(calendar.monthcalendar(<span class="number">2023</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>[[0, 0, 1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26], [27, 28, 29, 30, 31, 0, 0]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jupyter nbconvert --to markdown ***.ipynb</span></span><br><span class="line"><span class="comment"># ipynb-&gt;markdown</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="python3 标准库" scheme="https://gladdduck.github.io/tags/python3-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
  </entry>
  
</feed>
