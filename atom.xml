<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gladdduck</title>
  
  
  <link href="https://gladdduck.github.io/atom.xml" rel="self"/>
  
  <link href="https://gladdduck.github.io/"/>
  <updated>2023-12-11T06:36:17.828Z</updated>
  <id>https://gladdduck.github.io/</id>
  
  <author>
    <name>syxue</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo博客新增菜单栏</title>
    <link href="https://gladdduck.github.io/2023/12/11/hexo%E6%96%B0%E5%A2%9E%E8%8F%9C%E5%8D%95%E6%A0%8F/"/>
    <id>https://gladdduck.github.io/2023/12/11/hexo%E6%96%B0%E5%A2%9E%E8%8F%9C%E5%8D%95%E6%A0%8F/</id>
    <published>2023-12-11T06:27:08.586Z</published>
    <updated>2023-12-11T06:36:17.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-新增菜单栏"><a class="markdownIt-Anchor" href="#1-新增菜单栏"></a> 1. 新增菜单栏</h2><ol><li>打开主题配置文件<code>_config.yml</code></li><li>找到<code>menu</code>字段，新增菜单栏</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">.</span></span><br><span class="line">  <span class="attr">Archives:</span> <span class="string">archives</span>  <span class="comment"># 归档</span></span><br><span class="line">  <span class="attr">Categories:</span> <span class="string">categories</span>  <span class="comment"># 分类</span></span><br><span class="line">  <span class="attr">Repository:</span> <span class="string">repository</span>  <span class="comment"># github repositories</span></span><br><span class="line">  <span class="attr">About:</span> <span class="string">about</span>  <span class="comment"># 关于</span></span><br><span class="line">  <span class="comment"># 新增的菜单栏</span></span><br><span class="line">  <span class="attr">Picture:</span> <span class="string">picturewall</span> <span class="comment"># 图片墙</span></span><br></pre></td></tr></table></figure><ol start="3"><li>修改菜单栏对应的图标,具体的图标名称可以在主题的<code>themes\pure\source\css\style.css</code>中找到,是以<code>icon-</code>开头的类名.<br />但是看不到图标什么样,文件都在<code>fonts</code>文件夹里了</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 是否启用导航菜单图标</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">icon-home-fill</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">icon-archives-fill</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">icon-folder</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">icon-tags</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">icon-project</span></span><br><span class="line">  <span class="attr">books:</span> <span class="string">icon-book-fill</span></span><br><span class="line">  <span class="attr">picture:</span> <span class="string">icon-starfish</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">icon-cup-fill</span></span><br></pre></td></tr></table></figure><ol start="4"><li>修改菜单栏的名称<code>themes\pure\languages\zh-CN.yml</code>中修改:</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">首页</span></span><br><span class="line">  <span class="attr">Archives:</span> <span class="string">归档</span></span><br><span class="line">  <span class="attr">Categories:</span> <span class="string">分类</span></span><br><span class="line">  <span class="attr">Tags:</span> <span class="string">标签</span></span><br><span class="line">  <span class="attr">Repository:</span> <span class="string">项目</span></span><br><span class="line">  <span class="attr">Books:</span> <span class="string">书单</span></span><br><span class="line">  <span class="attr">Movies:</span> <span class="string">电影</span></span><br><span class="line">  <span class="attr">Links:</span> <span class="string">友链</span></span><br><span class="line">  <span class="attr">About:</span> <span class="string">关于</span></span><br><span class="line">  <span class="attr">Picture:</span> <span class="string">图片墙</span>  <span class="comment"># 新增的</span></span><br></pre></td></tr></table></figure><ol start="5"><li>在<code>source</code>目录下新建<code>picturewall</code>文件夹,就是第一步中menu菜单对应的,并在该文件夹下新建<code>index.md</code>文件,内容如下:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 照片墙</span><br><span class="line">layout: xxxx</span><br><span class="line">comments: false</span><br><span class="line">sidebar: none</span><br><span class="line">---</span><br><span class="line">#layout可以设置为现有的布局,比如links,books这些,也可以直接把layout删掉</span><br></pre></td></tr></table></figure><ol start="6"><li><p>后续<code>public/picturewall</code>文件夹下的index.html就会根据这个index.md渲染</p></li><li><p>固定菜单栏的页面(如果这个页面不需要改动的话,可以设置为跳过渲染),在<code>_config.yml</code>中设置(这一段还没太搞明白):</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">picturewall/index.html</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-新增菜单栏&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-新增菜单栏&quot;&gt;&lt;/a&gt; 1. 新增菜单栏&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;打开主题配置文件&lt;code&gt;_config.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;找到&lt;code&gt;</summary>
      
    
    
    
    <category term="杂七杂八配置" scheme="https://gladdduck.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Hexo" scheme="https://gladdduck.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>mmfewshot配置</title>
    <link href="https://gladdduck.github.io/2023/12/10/mmfewshot%E9%85%8D%E7%BD%AE/"/>
    <id>https://gladdduck.github.io/2023/12/10/mmfewshot%E9%85%8D%E7%BD%AE/</id>
    <published>2023-12-10T07:46:36.918Z</published>
    <updated>2023-12-10T10:25:16.562Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基配置础信息"><a class="markdownIt-Anchor" href="#基配置础信息"></a> 基配置础信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关于mmfewshot</span></span><br><span class="line">1. 配置时间:2023/12/10</span><br><span class="line">2. mmfewshot版本: 0.1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关于mmcv</span></span><br><span class="line">1. mmcv  2.x版本之前叫做mmcv-full</span><br><span class="line">2. mmcv  2.x版本之后改名</span><br><span class="line">--之前--   |--现在--</span><br><span class="line">mmcv-full  | mmcv</span><br><span class="line">mmcv       | mmcv-lite</span><br><span class="line">3. mmcv是2023年4月份才改名的,所以mmfewshot要安装mmcv-full这个名字</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关于mmdet</span></span><br><span class="line">1. mmdet 3.x版本之前的版本,mmdet/datasets/custome.py文件用到的numpy的一个方法是np.int,这个是numpy的1.20版本丢弃的,所以使用mmdet3.x之前的版本要安装numpy 1.20一下办的</span><br><span class="line">2. 使用mmdet3.x的版本会提示,mmcv版本过低,需要安装mmcv2.x版本(但是mmcv-full这个版本最高只能是1.x,所以无解(不知道理解的对不对)),意味着mmfewshot 0.1.0可能不支持mmdet3.x版本</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总之:</span></span><br><span class="line">mmcv</span><br><span class="line">mmdet</span><br><span class="line">mmfewshot</span><br><span class="line">这三个库之间的版本相互依赖,所以要安装对应的版本,否则会报错</span><br></pre></td></tr></table></figure><h3 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h3><ol><li>安装mmcv-full(如果已经有mmcv,需要把mmcv卸载)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个要加上-f参数,不然 MMCV CUDA Compiler: not available</span></span><br><span class="line"><span class="comment"># MMCV CUDA Compiler: 10.1 是正确的</span></span><br><span class="line">pip install mmcv-full==1.5.0 -f https://download.openmmlab.com/mmcv/dist/cu102/torch1.7.0/index.html</span><br></pre></td></tr></table></figure><ol start="2"><li>安装mmdet</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mmdet==2.24.0</span><br></pre></td></tr></table></figure><ol start="3"><li>安装mmcls,这个库好像没有特别大的区别</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mmcls==0.23.2</span><br></pre></td></tr></table></figure><ol start="4"><li>安装mmfewshot</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git下来之后进入mmfewshot目录</span></span><br><span class="line"></span><br><span class="line">pip install -r requirements/build.txt</span><br><span class="line">pip install -v -e .  <span class="comment"># or &quot;python setup.py develop&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>安装numpy</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy==1.19.5</span><br><span class="line"><span class="comment"># matplotlib和pandas现在要求的最低的numpy版本是1.20.0,所以要安装旧版的pandas和matplotlib</span></span><br><span class="line"><span class="comment"># 这两个版本是支持numpy1.19.5的</span></span><br><span class="line">pip install matplotlib==3.6.0</span><br><span class="line">pip install pandas==1.4.4</span><br></pre></td></tr></table></figure><ol start="6"><li>最后的版本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mmcls                   0.23.2</span><br><span class="line">mmcv-full               1.5.0</span><br><span class="line">mmdet                   2.24.0</span><br><span class="line">mmfewshot               0.1.0  </span><br><span class="line">Pillow                  8.4.0</span><br><span class="line">pandas                  1.4.4</span><br><span class="line">matplotlib              3.6.0</span><br></pre></td></tr></table></figure><p>###　可能的报错</p><ol><li><code>TypeError: FormatCode() got an unexpected keyword argument 'verify'</code></li></ol><p><a href="https://github.com/open-mmlab/mmdetection/issues/10962">Issue</a></p><p>安装yapf解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install yapf==0.40.1</span><br></pre></td></tr></table></figure><ol start="2"><li><code>RuntimeError: roi_align_forward_impl: implementation for device cuda:0 not found.</code></li></ol><p>运行mmfewshot/utils/collect_env.py的文件,看看cuda是否可用,安装对应的cuda版本<br />参考上面<code>安装mmcv-full</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mmcv -f https://download.openmmlab.com/mmcv/dist/cu102/torch1.7.0/index.html</span><br></pre></td></tr></table></figure><ol start="3"><li>初始安装版本不对的报错</li></ol><p><a href="https://github.com/open-mmlab/mmfewshot/issues/144">Issue</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">===================================</span><br><span class="line">mmcls      0.25.0     https://github.com/open-mmlab/mmclassification</span><br><span class="line">mmcv-lite  2.1.0      https://github.com/open-mmlab/mmcv</span><br><span class="line">mmdet      3.0.0      https://github.com/open-mmlab/mmdetection</span><br><span class="line">mmengine   0.10.1     https://github.com/open-mmlab/mmengine</span><br><span class="line"></span><br><span class="line">GPU 0: Tesla V100-SXM2-32GB (UUID: GPU-828d98d3-ad2a-0a92-d4d9-0dac21a5439f)</span><br><span class="line">/public/home/zhaol/syxue20225227095/fewshotdetection/mmfewshot-main</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;tools/detection/train.py&quot;</span>, line 12, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from mmcv import Config, DictAction</span><br><span class="line">ImportError: cannot import name <span class="string">&#x27;Config&#x27;</span> from <span class="string">&#x27;mmcv&#x27;</span> (/public/home/zhaol/anaconda3/envs/syxue2/lib/python3.8/site-packages/mmcv/__init__.py)</span><br><span class="line"></span><br><span class="line">===================================</span><br><span class="line">mmcls      0.25.0     https://github.com/open-mmlab/mmclassification</span><br><span class="line">mmcv       2.1.0      https://github.com/open-mmlab/mmcv</span><br><span class="line">mmdet      3.2.0      https://github.com/open-mmlab/mmdetection</span><br><span class="line">mmengine   0.10.1     https://github.com/open-mmlab/mmengine</span><br><span class="line">GPU 0: Tesla V100-SXM2-32GB (UUID: GPU-828d98d3-ad2a-0a92-d4d9-0dac21a5439f)</span><br><span class="line">/public/home/zhaol/syxue20225227095/fewshotdetection/mmfewshot-main</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;tools/detection/train.py&quot;</span>, line 12, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from mmcv import Config, DictAction</span><br><span class="line">ImportError: cannot import name <span class="string">&#x27;Config&#x27;</span> from <span class="string">&#x27;mmcv&#x27;</span> (unknown location)</span><br><span class="line">===================================</span><br><span class="line">mmcls      0.25.0     https://github.com/open-mmlab/mmclassification</span><br><span class="line">mmdet      3.0.0      https://github.com/open-mmlab/mmdetection</span><br><span class="line">mmengine   0.10.1     https://github.com/open-mmlab/mmengine</span><br><span class="line">mmcv-full  1.7.1      https://github.com/open-mmlab/mmcv</span><br><span class="line">GPU 0: Tesla V100-SXM2-32GB (UUID: GPU-828d98d3-ad2a-0a92-d4d9-0dac21a5439f)</span><br><span class="line">/public/home/zhaol/syxue20225227095/fewshotdetection/mmfewshot-main</span><br><span class="line">/public/home/zhaol/anaconda3/envs/syxue2/lib/python3.8/site-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, <span class="keyword">in</span> <span class="built_in">which</span> it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md <span class="keyword">for</span> more details.</span><br><span class="line">  warnings.warn(</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;tools/detection/train.py&quot;</span>, line 15, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from mmdet.utils import collect_env</span><br><span class="line">  File <span class="string">&quot;/public/home/zhaol/anaconda3/envs/syxue2/lib/python3.8/site-packages/mmdet/__init__.py&quot;</span>, line 16, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    assert (mmcv_version &gt;= digit_version(mmcv_minimum_version)</span><br><span class="line">AssertionError: MMCV==1.7.1 is used but incompatible. Please install mmcv&gt;=2.0.0rc4, &lt;2.1.0.</span><br></pre></td></tr></table></figure><ol start="4"><li><code>RuntimeError: CUDA error: no kernel image is available for execution on the device 错误</code></li></ol><p>安装的pytorch版本和cuda版本不对应<br />刚开始安装的pytorch 1.6.0 + cuda 10.1,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torch==1.13.1+cu117 torchvision==0.14.1+cu117 torchaudio==0.13.1 --extra-index-url https://download.pytorch.org/whl/cu117</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;基配置础信息&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基配置础信息&quot;&gt;&lt;/a&gt; 基配置础信息&lt;/h3&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    <category term="杂七杂八配置" scheme="https://gladdduck.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="mmfewshot" scheme="https://gladdduck.github.io/tags/mmfewshot/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客参数记录</title>
    <link href="https://gladdduck.github.io/2023/12/03/Hexo%E5%8D%9A%E5%AE%A2%E5%8F%82%E6%95%B0%E8%AE%B0%E5%BD%95/"/>
    <id>https://gladdduck.github.io/2023/12/03/Hexo%E5%8D%9A%E5%AE%A2%E5%8F%82%E6%95%B0%E8%AE%B0%E5%BD%95/</id>
    <published>2023-12-03T05:54:00.181Z</published>
    <updated>2023-12-03T06:05:39.077Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hexo官网api"><a class="markdownIt-Anchor" href="#hexo官网api"></a> Hexo官网API</h3><p><a href="https://hexo.io/zh-cn/api/">官网API</a><br /><a href="https://github.com/hexojs/hexo">官网仓库</a></p><h3 id="文章属性"><a class="markdownIt-Anchor" href="#文章属性"></a> 文章属性</h3><p><img src="https://image.yayan.xyz/20231203140130.png" alt="" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;hexo官网api&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hexo官网api&quot;&gt;&lt;/a&gt; Hexo官网API&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/api/&quot;&gt;官网API&lt;/a&gt;&lt;br /</summary>
      
    
    
    
    <category term="杂七杂八配置" scheme="https://gladdduck.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Hexo" scheme="https://gladdduck.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Few-shot Object Detection论文总结</title>
    <link href="https://gladdduck.github.io/2023/11/24/Few-shotDetection%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/"/>
    <id>https://gladdduck.github.io/2023/11/24/Few-shotDetection%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/</id>
    <published>2023-11-24T12:54:49.892Z</published>
    <updated>2023-12-10T05:42:15.594Z</updated>
    
    <content type="html"><![CDATA[<p class='katex-block katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 1: #̲ Few-shot Objec…'># Few-shot Object Detection## 综述### Few-Shot Object Detection: A Comprehensive Survey1. 问题定义:N-way K-shot表示使用K个样本来训练N个类别2. 和few-shot learning,semi-supervised learning,increamental learning的区别3. 使用到的技术:1)迁移学习2)度量学习3)元学习**Dual-Branch meta learning:**![](https://image.yayan.xyz/20231105141045.png)实现思路:一个Query Branch用来提取待检测图像的特征,然后通过RPN和一个RoI Align得到Query Feature,再和Support Feature提取出来的Support特征(K shot,K&gt;1取平均),进行Aggregation,然后送入RoI Head进行分类和回归.1. 聚合相关改进   - Variant For Aggregation:     - 缺点:在RPN之后进行聚合,需要RPN为新类别生成Proposal,但是RPN可能无法为新类别生成Proposal     - 改进:在RPN之前进行聚合(AttentionRPN),然后将增强的特征送入RPN,生成Proposal     - 改进:使用second-order pooling替换avg pooling,减少Support Feature的颜色,条纹,斑点带来的噪声   - Variant For Aggregation Operation     - 缺点:简单的channel-wise 乘法不能充分利用Query和Support的特征     - 改进:添加比例因子,使用卷积,利用更复杂的操作等   - Keep Spatial Information for Aggregation     - 缺点:average pooling会丢失空间信息,convolution会导致空间信息不对齐     - 改进:attention-based aggregation   - Attention-base Aggregation     - Dual-Awareness Attention for Few-Shot Object Detection:增强前景,抑制背景并使用Query Feature Map促进空间位置的对齐     - Object detection based on few-shot learning via instance-level feature correlation and aggregation:IFC module用于构造实例特征的相关性,ASA module增强查询和支持之间的特征灵敏度,减少冗余信息     - Few-shot object detection with affinity relation reasoning:设计了一个亲和关系推理模块（ARRM）来促进支持特征和感兴趣区域特征的交互     - One-Shot Object Detection with Co-Attention and Co-Excitation:使用非局部操作来探索每个查询-目标对中体现的共同注意,并且使用改进的SeNet分配候选区域的重要性     - Adaptive Image Transformer for One-Shot Object Detection:将支持和查询作为Transformer的输入,来充分融合信息   - Multi-Level Aggregation     - 缺点:只在特征抽取之后进行了一次聚合     - 改进:使用PVTv2(Pyramid Vision Transformer)在特征抽取的时候进行多次融合   - Aggregation of Several Support Images     - 缺点:多个Support Image的情况下,对特征图取平均,忽略了不同的信息     - 改进:1)使用可学习的权重 2)使用softmax分配权重2. Incorporate Relation between Caregories   - 缺点:基本类别可以帮助识别新的稀疏类   - 改进:1)融入语言特征 2)构建图关系(多类别关系增强特征,合并相似类别特征) 3)捕获类间相似性,增强泛化能力3. Increase Discriminative power   - 缺点:1)在聚合之后,通常使用交叉熵损失判别分类,更好的方法是使用度量学习 2)元学习学习去区分前景和背景,这导致有可能检测到不存在的物体   - 改进:-1)GenDet和Meta DETR通过相似度矩阵最小化类间差异,最大化不同的支持向量 2)MM-FSOD使用皮尔斯系数聚合支持向量和查询向量 3)CME擦除最具辨别力的像素  -1)AttentionRPN使用多关系检测器来判断是否存有物体 2)对比学习测量用来区分不同的类别 3)GenDet使用额外的检测器检测基类,增强骨干网络提取更具代表性的特征4. Improve representation capability   - 缺点:base categories被视为负类,导致识别新类的表达能力不足   - 改进:SPCN通过选择与基类不同的区域,并使用自监督的方式检测数据增强前后相同的非基类区域5. Proposal-free Detector   - 缺点:许多方法基于Faster RCNN,1)可能生成不准确的区域建议框,2)决定在区域建议框之前还是之后进行聚合   - 改进:1)无提议框的模型更容易实现 2)基于YOLO 3)基于DETR6. Keep the Performance on Base Categories   - 缺点:学习新的类别之后,模型可能会导致灾难性遗忘   - 改进:1)Meta Faster R-CNN使用一个额外的branch预测base categories,在训练期间固定 2)Sylph每个类别使用独立的分类器7. Increase the Variance of Novel Categories   - 缺点:直接应用数据增强效果不佳   - 改进:TIP使用additional transformed guidance consistency loss,使得变化前后的图像特征保持一致8. Incorporate Context Information   - 缺点:在RoI pool或者RoI Align之后,可能导致丢失信息   - 改进:DCNet使用三种不同分辨率执行并行池化9. Category-agnostic Bounding Box Regression**Single-Branch meta learning:**用的太少,且精确度不高**Transfer Learning**略...1. Modifications of the Region Proposal Network2. Modifications of the Feature Pyramid Network3. Increase the Variance of Novel Categories4. Transfer Knowledge Between Base and Novel Categories5. Keep the Performance on Base Categories6. Modify the Training Objective7. Use Attention8. Modify Architecture## 论文![](https://image.yayan.xyz/20231202142618.png)&lt;!-- 1. Meta-YOLO,FSRW2. Meta-RCNN3. Attention-RPN4. Meta-DETR5. Frustratingly Simple Few-Shot Object Detection6. Meta-Learning to Detect Rare Objects7. One-Shot Object Detection with Co-Attention and Co-Excitation --&gt;---&lt;!-- Meta-YOLO --&gt;### 1. (MetaYOLO,FSRW) Few-shot Object Detection via Feature Reweighting![](https://image.yayan.xyz/20231112172223.png)**思想**:1. 一个元特征抽取模块(meta feature extractor:YOLOv2中的Darknet19),用来提取查询图像的元特征2. 一个特征重加权模块(feature reweighting module),将支持图像抽取出全局特征(class-specific representation),用于调整元特征的贡献,获得(理解为抽取出支持图像的特征然后和查询图像的特征做一个channel-wise的乘法,来形成一个reweighting的特征(class-specific features)).   另一个理解:把支持图像的特征抽取成一个权重参数,用这个参数来动态调整查询图中的特征贡献,得到一个新的class-specific features3. 将class-specific features送入YOLOv2的检测器中进行检测4. 输入是一个图形和二进制掩码,掩码只支持一个目标**训练**:1. 基础训练阶段,正常目标检测训练,目的是让模型学会通过参考reweighting向量来检测感兴趣的预取2. 微调训练阶段,在基类和新类上训练模型,每个类K个support images, 模拟K-shot3. 损失函数中的分类损失,使用softmax之后的类别**补充**[ Deep Traffic 微信公众号:FSRW](https://mp.weixin.qq.com/s/NW07_x1jx7uSkMm98yUkOg)---&lt;!-- Meta-RCNN --&gt;### 2. (MetaRCNN) Meta R-CNN: Towards General Solver for Instance-Level Low-Shot Learning![](https://image.yayan.xyz/20231114212512.png)**思想**:1. 查询集图片经过特征提取网络和RPN网络（与Faster/Mask R-CNN中相同）得到感兴趣区域的特征图$z_i$。2. 支持集图像和对应的真实标签图经过预测器重建模网络（Predictor-head Remodeling Network）得到每个类别对应的类别注意力向量（class-attentive vectors），PRN网络的主体部分与Faster/Mask R-CNN的特征提取网络结构相同且权重共享，得到对应特征图后,通过逐元素Sigmoid函数得到对应的注意力向量$v_c$.3. 最后将RPN网络输出的感兴趣区域特征图$z_c$和PRN网络输出的注意力向量$v_c$通过逐通道相乘的方式进行融合,再利用Faster/Mask R-CNN中预测头得到对应个检测图或分割图.**符号说明**:| 含义              | 含义           | 含义                       | 含义           || ----------------- | -------------- | -------------------------- | -------------- || $C_{base}$      | 基类           | $C_{noval}$              | 新类           || $C_{meta}$      | 基类新类的混合 |                            |                || $D_{train}$     | 训练数据       | $D_{meta}$               | 测试数据       || $h(·,\theta )$ | 原始预测头     | $h(·,D_{meta},\theta )$ | 重建后的预测头 |**PRN**:PRN从$D_{meta}$中推断类别注意向量$\mathbf{v}^{m e t a}=f\left(D_{m e t a} ; \phi\right)$. 具体而言,PRN输入的$D_{meta}$是一系列物体的图像,共$C_{meta}$个类别,每类$K$个样本,每个物体由RGB图像和前景掩码标记四个通道表示,经过一层卷积之后,送入共享参数的backbone,最后经过通道软注意力生成目标注意力向量$\mathbf{v}$,经过平均池化得到类别注意向量$\mathbf{v}_{c}^{m e t a}=\frac{1}{K} \sum_{j=1}^{K} \mathbf{v}_{k}^{(c)}$,将其与 RoI 特征($\hat{\mathbf{Z}}_{i}$)进行通道层级的点乘，将$h(·,\theta )$转为$h(·,D_{meta},\theta )$$ h\left(\hat{\mathbf{z}}_{i, j}, D_{\text {meta }} ; \boldsymbol{\theta}^{\prime}\right) \\= h\left(\hat{\mathbf{z}}_{i, j} \otimes \mathbf{v}^{\text {meta }}, \boldsymbol{\theta}\right) \\=h\left(\hat{\mathbf{z}}_{i, j} \otimes f\left(D_{\text {meta }} ; \boldsymbol{\phi}\right), \boldsymbol{\theta}\right) $**关键点**:1. Mini-batch construction:   - 一个训练的mini-batch包含 m个类$C_{meta}$,K-shot m-class的meta-set $D_{meta}$ (测试数据), m个类的训练数据 $D_{train}$. $D_{train}$就是Faster RCNN的输入对象.2. Channel-wise soft-attention layer   - 执行空间池化来对齐图像特征,保持相同大小的Roi特征($\hat{z}_{i,j}$),特征经过逐元素的 sigmoid 以产生注意力向量3. Meta-loss   - 不同类对象的注意向量应该导致对Roi特征的不同选择,为此提出一个$Meta-loss$,使元学习中推断的对象注意力向量多样化。通过交叉熵损失实现的，鼓励对象注意力向量落在每个对象所属的类中4. Roi meta-learning   - 训练分为两部分,1. meta-train:只使用基类对象构建 2.meta-test:使用基类和新类对象构建5. inference   - 训练时的object attentive vectors将替换class-attentive vectors,用于在Roi特征上作用sotf-attention   - 在测试时,PRN接受K-shot来生成class-attentive vectors,然后用于Roi特征上的soft-attention.但是测试时,class-attentive vectors可以提取预处理,然后用于Roi特征上的soft-attention.**补充**[ Deep Traffic 微信公众号:Meta-RCNN](https://mp.weixin.qq.com/s/Jp378IF7tTUoz06wjPdmRA)**补充**---&lt;!-- Attention-RPN --&gt;### 3. (AttentionRPF) Few-Shot Object Detection with Attention-RPN and Multi-Relation Detector![](https://image.yayan.xyz/20231124163026.png)**思想**:1. Attention-RPN:通过注意力机制向 RPN 引入支持信息来指导 RPN 产生相关的候选框,抑制其他类别的候选框.将support feature变成$S×S×C$的向量(作者发现s=1效果最好,就是1×1的卷积核),然后在query feature上进行卷积,建立注意力map(这种卷积其本质是按通道的点积，可以视为求余弦相似度的过程),然后将这个注意力map经过一个卷积送到RPN中.2. Multi-Relation Detector:测量来自查询和支持对象的提议框之间的相似性,分类三个(全局关联，局部关联，以及patch关联);最终得到的是支持对象和候选框直接的匹配得分(matching score).3. 对比实验,提出相同类别的对象重要,不同类别的对象更重要.构建了一个三元组(查询对象类比,支持对象类别,支持对象其他类别),来增强模型对前景和背景的区分能力.**解决**:1. RPN对novel class的提议不好2. 现有的模型都需要fine-tune[ Deep Traffic 微信公众号:Attention-RPN](https://mp.weixin.qq.com/s/Iuqf4TtVeKF1zLtk1VuoXQ)&lt;!-- Meta-DETR --&gt;### 4. (MetaDETR) Meta-DETR: Image-Level Few-Shot Object Detection with Inter-Class Correlation Exploitation![](https://image.yayan.xyz/20231114212457.png)**问题**:1. 低质量的新类区域建议2. 单次推理只能检测一个类,忽略了不同类的类间相关性**思想**:1. 共享的特征抽取器把查询图像和支持图像提取到相同的特征空间中2. 通过相关聚合模块(CAM)执行查询和支持直接的匹配，CAM进一步把支持类映射到一组预定义的任务编码中,这些任务编码以类无关的方式区分支持类3. 最后,通过transformer架构(Deformable-DETR)预测对象位置和相应任务编码**关键点**:![](https://image.yayan.xyz/20231124210649.png)1. Feature Matching:通过稍微修改注意力机制实现特征匹配,旨在过滤掉与支持类无关的特征;   $\mathbf{A}=\operatorname{Attn}(\mathbf{Q}, \mathbf{S})=\operatorname{Softmax}\left(\frac{(\mathbf{Q W})(\mathbf{S W})^{\mathrm{T}}}{\sqrt{d}}\right),$   $\mathbf{Q}_{\mathbf{F}}=\mathbf{A} \sigma(\mathbf{S}) \odot \mathbf{Q}$2. Encoding Matching:为了实现相关元学习，给每个支持类的预定义任务编码，并将查询特征与其对应的任务编码进行匹配，以便可以对任务编码而不是特定类进行最终预测。   - 此处的任务编码就是Transformer中的正弦函数位置编码   - $Q_E=\mathbf{A}\mathbf{T}$3. Modeling Background for Open-Set Prediction,给背景一个支持占位和任务编码**训练**:1. 给定一个查询图像，随机抽取代表不同支持类的K张支持图像。只保留属于采样支持类的Ground Truth真实标注框作为检测目标。此外，每个对象的分类目标是真是标注类的任务编码，而不是真实标注类本身。   - 标注类转任务编码:$\chi\left(s_{i}\right)=i,  \quad i \in\{1,2, \cdots, C\}$,具体实现不重要....   - 最终的任务是:将目标类的标签映射到相应任务编码的标签**代码**:[Meta-DETR](https://github.com/ZhangGongjie/Meta-DETR)理解:1. 作者没有把CAM单独抽取出来一个模块(找不到命名为CAM的模块),而是继承DeformableDETR,整个模型就是一个DeformableDETR,CAM就是DeformableDETR的Encoder的第一个层,(就是 `DeformableTransformer`model中的第一个 `TransformerEncoderLayer`)2. CAM的实现核心代码:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CAM中</span></span><br><span class="line"><span class="comment"># Multi-Head Attention</span></span><br><span class="line">src2 = self.self_attn(self.with_pos_embed(src, pos), reference_points, src, spatial_shapes, level_start_index, padding_mask)</span><br><span class="line">src = src + self.dropout1(src2)</span><br><span class="line">src = self.norm1(src)</span><br><span class="line"><span class="comment"># Single-Head Attention</span></span><br><span class="line">src, tsp = self.siamese_attn(src, inverse_sigmoid(category_codes), category_codes, tsp)</span><br><span class="line"><span class="comment"># FFN</span></span><br><span class="line">src = self.forward_ffn(src + tsp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Single-Head Attention中</span></span><br><span class="line"><span class="comment"># q是query, k是Sigmoid(support), v是support</span></span><br><span class="line"><span class="comment"># output是QF,tsp是QE</span></span><br><span class="line"><span class="comment"># 这个地方感觉和论文中的公式不一样</span></span><br><span class="line"><span class="comment"># 这里A=Attn(Q,Sigmoid(S))</span></span><br><span class="line"><span class="comment"># 文章里A=Attn(Q,S)</span></span><br><span class="line">output, attn, log_attn = self.attention(q, k, v)</span><br><span class="line">tsp, _, _ = self.attention(q, k, tsp)</span><br><span class="line"></span><br></pre></td></tr></table></figure>---### 5. (TFA) Frustratingly Simple Few-Shot Object Detection![](https://image.yayan.xyz/20231112160553.png)**微调方法**:1. 使用Faster RCNN作为检测器,第一阶段正常训练2. 在新类上微调时,只微调分类器,前面的固定,并且分类器改为cosine similarity classifier   $s_{i, j}=\frac{\alpha \mathcal{F}(x)_{i}^{\top} w_{j}}{\left\|\mathcal{F}(x)_{i}\right\|\left\|w_{j}\right\|}$   $s_{i,j}$代表了第$i$个区域建议框和第$j$个类别的相似度---### 6. (MetaDet) Meta-Learning to Detect Rare Objects![](https://image.yayan.xyz/20231124170553.png)**思想**:1. 和5.Frustratingly Simple Few-Shot Object Detection 有共同的发现   - 根据CNN的研究,模型分为两部分,1)类别无关(CNN底层)　2)类别相关(CNN顶层)   - 类别无关的部分可以直接迁移到新类上(参数共享),类别相关的部分使用一个元参数预测类别相关部分的模型2. Weight Prediction Meta-Model   - 从大批量数据中学习到的参数为$w_{det}^{c,*}$,从k-shot样本中学习到的参数是$w_{det}^{c}$,mete-model T的任务是:   - $w_{det}^{c,*}=T\left(w_{det}^{c}, \theta_{T}\right)$,使用$L2$损失函数### 7. (CoAttention) One-Shot Object Detection with Co-Attention and Co-Excitation![](https://image.yayan.xyz/20231127212927.png)**思想**:1. 通过[非局部操作](https://zhuanlan.zhihu.com/p/33345791)(每个点的计算都考虑到全图其他点的相似度)来探索每个查询-目标对中体现的共同注意(为了丰富RPN对novel class的提议,与query image提供的类别参考具有外观相似性的RoIs),$ F(I)=\phi(I) \oplus \psi(I ; p) \in \mathbb{R}^{N \times W_{I} \times H_{I}} \quad  for target image, I $$F(p)=\phi(p) \oplus \psi(p ; I) \in \mathbb{R}^{N \times W_{p} \times H_{p}} \quad  for image patch,  p ,$$\phi(I)$表示抽取出的特征,$\psi(I ; p)$代表non-local操作2. 利用Squeeze and co-excitation(SCE模块)自适应地重新加权 N 个通道上的重要性分布来灵活地匹配候选提议(强调那些在评估相似性度量方面起着至关重要的作用的特征通道).首先对支持特征做全局平均池化,得到一个向量,用这个向量调整支持特征和查询特征的权重.3. 候选框排名,将RoI(RPN提供的128个候选框)与支持特征Concat,然后对每个候选框进行分类(分为前景和背景,标签根据与真实框的关系(IoU&gt;0.5)得到).为了与支持特征最相关的候选框排在前面.**关键点**:1. 增强RPN对novel class的提议2. 通道注意力### 8. (FSDetView) Few-Shot Object Detection and Viewpoint Estimation for Objects in the Wild.Viewpoint Estimation和少样本检测的结合,忽略Viewpoint Estimation,只看Few-Shot Object Detection![](https://image.yayan.xyz/20231127212854.png)**思想**:1. 一个稍微复杂点的聚合模块,其他和Meta R-CNN类似,Meta RCNN 和Meta Yolo中的聚合:$\mathcal{A}\left(\mathrm{f}^{\mathrm{qry}}, \mathrm{f}^{\mathrm{cls}}\right)=\mathrm{f}^{\mathrm{qry}} \odot \mathrm{f}^{\mathrm{cls}},$2. 本文提出的聚合:$\mathcal{A}\left(\mathrm{f}^{\mathrm{qry}}, \mathrm{f}^{\mathrm{cls}}\right)=\left[\mathrm{f}^{\mathrm{qry}} \odot \mathrm{f}^{\mathrm{cls}}, \mathrm{f}^{\mathrm{qry}}-\mathrm{f}^{\mathrm{cls}}, \mathrm{f}^{\mathrm{qry}}\right],$3. $\mathrm{f}^{\mathrm{qry}}-\mathrm{f}^{\mathrm{cls}}$,特征减法衡量图像特征之间的相似性,嵌入$\mathrm{f}^{\mathrm{qry}}$本身，没有任何重新加权，也包含相关信息.### 9. (MetaFasterRCNN) Meta Faster R-CNN: Towards Accurate Few-Shot Object Detection with Attentive Feature Alignment.![](https://image.yayan.xyz/20231127215321.png)**问题**:1. RPN对novel class的提议不好2. novel class的候选框和支持特征中的对象位置不对齐**思想**:1. 对Base Class训练一个单独的Faster RCNN用来检测2. 提出Meta-RPN module,用于增强RPN对novel class的提议![](https://image.yayan.xyz/20231127222207.png)首先对支持特征对查询特征进行卷积然后生成锚框,对支持特征进行spatial average pool得到和锚框大小一样的特征(多个查询图形取平均),然后送入Meta-RPN module,就是图三中左边上下两个特征图.$f_{q}^{c}=\left[\Phi_{\text {Mult }}\left(f_{q} \odot f_{\text {pool }}^{c}\right), \Phi_{\text {Sub }}\left(f_{q}-f_{\text {pool }}^{c}\right), \Phi_{\text {Cat }}\left[f_{q}, f_{\text {pool }}^{c}\right]\right]$Feature Fusion的公式,Based on 8.Few-Shot Object Detection and Viewpoint Estimation for Objects in the Wild.3. 使用高分辨率的支持特征来计算和候选框直接的相似度,但是候选框和支持特征中的对象位置不对齐,所以基于注意力的特征对齐方法来解决空间错位问题.4. (Spatial Alignment)首先通过计算亲和矩阵来建立两个输入特征之间的软对应关系(每个像素点之间的关系,矩阵大小为$HW×HW$),然后计算每个像素点之间的相似度:$A(i, j)^{\prime}=\frac{\exp (A(i, j))}{\sum_{k} \exp (A(i, k))}$然后每个空间位置i就通过聚合类原型中所有位置的嵌入来计算:$\bar{f}^{c}(i)=\sum_{j} A(i, j)^{\prime} \hat{f}^{c}(j)$5. (Foreground Attention Module)生成一个Attention mask来抑制背景,增强前景.候选框中的每个像素i与每个空间位置的相似度:$M(i)=\sigma\left(\sum_{j} A(i, j)\right)=\frac{1}{1+\exp \left(-\sum_{j} A(i, j)\right)}$其中 M 中的较高值表示候选框中的对应位置更类似于对齐原型类的位置，并且更有可能是相同的语义部分。背景区域很难在类原型中找到相似度较高的位置，导致M中的值较低,最后将M和$\bar{f}^{c}$相乘,再通过类似残差连接的一个可学习参数,得到最终的特征:6. (Non-linear Classifier Module)为了衡量最终的候选框和支持类之间的相似性,使用特征融合网络来聚合两个高分辨率的特征，$f=\left[\Psi_{M u l t}\left(\widetilde{f}^{c} \odot \widetilde{f}_{p}\right), \Psi_{S u b}\left(\widetilde{f}^{c}-\widetilde{f}_{p}\right), \Psi_{C a t}\left[\widetilde{f}^{c}, \widetilde{f}_{p}\right]\right]$然后将$f$送入预测类和框的层![](https://image.yayan.xyz/20231127222652.png)**训练**:1. 使用base class进行元学习,不需要微调就可以应用到novel class上2. 训练完之后,用novel class+base class的数据进行微调(这不作弊吗?)### 10. (FSCE) FSCE: Few-Shot Object Detection via Contrastive Proposal Encoding![](https://image.yayan.xyz/20231202155449.png)**问题**:1. transfer learning的方法通常精确度高2. 精确度的退化主要来自将新实例错误分类为易混淆的类,定位基本准确(现有模型并没有学习到一个好的类别特征嵌入)**思想**:1. 减小类内方差,增大类间方差,使用对比学习(To learn instance-level discriminative feature representations, contrastive learning has demonstrated its effectiveness in tasks including recognition, identification and the recent successful self-supervised models. )2. RPN推荐的novel class只有base class的四分之一   - 在NMS（非极大值抑制）之后保留的提议数量×2。这样的话，能够为后续提供更多可能包含前景的提议   - 将RoI头中用于计算损失的候选框减少一半,因为一半多的候选框都包含的是背景(提升前景框的比例)3. 对比提议编码（ Contrastive Proposal Encoding）   - RoI features因为有Relu激活,部分为0,所以用一个FC层来编码,获取到128维的对比特征   - 使用余弦相似度计算候选框之间的相似度,并优化对比目标使得类间方差大,类内方差小4. Contrastive Proposal Encoding (CPE) Loss$\mathcal{L}_{C P E}=\frac{1}{N} \sum_{i=1}^{N} f\left(u_{i}\right) \cdot L_{z_{i}} $$L_{z_{i}}=\frac{-1}{N_{y_{i}}-1} \sum_{j=1, j \neq i}^{N} \mathbb{I}\left\{y_{i}=y_{j}\right\} \cdot \log \frac{\exp \left(\tilde{z_{i}} \cdot \tilde{z_{j}} / \tau\right)}{\sum_{k=1}^{N} \mathbb{I}_{k \neq i} \cdot \exp \left(\tilde{z_{i}} \cdot \tilde{z_{k}} / \tau\right)}$$z_i$是对比特征,$y_i$是类别,$u_i$是与真实框的IoU分数,$N_y$是类别y的样本数量,$f\left(u_{i}\right)$作用是为质量不同的预测框赋予不同的权重,实验证明常量更好上述公式中衡量了特征$z_i$和$\tilde{z_{i}}$之间的余弦相似度。当两个RoI（$i$和$j$）为相同类别时，其相似度越高，该损失的值就越小，这将引导相同类别的特征嵌入在学习过程中变得更紧凑，而不同类别的特征嵌入将变得更分散，### 11. (AFDNet) AFD-Net: Adaptive Fully-Dual Network for Few-Shot Object Detection![](https://image.yayan.xyz/20231203114632.png)**问题**:1. 在目标检测中,分类和定位是完全不同的两个子任务,使用相同的特征进行这两个任务不好**思想**:1. 提出了Adaptive Fully-Dual Network(AFD-Net,自适应全双网络),将分类和定位解耦   - 查询图像使用双询问编码（Dual Query Encoder，DQE）输出用于分类和定位的查询他特征   - 支持图像使用双注意力生成（Dual Attention Generator，DAG）输出用于分类和定位的类被注意(支持)特征   - 用于分类和定位的查询特征和支持特征分别送入双聚合器（Dual Aggregator，DA）用于分类和定位2. Dual Attention Generator比Dual Query Encoder多了一个Max Pool来保证支持特征的大小和查询特征的大小一致![](https://image.yayan.xyz/20231203145704.png)分类分支使用卷积处理,回归任务使用全连接处理,最后各乘一个可学习的权重,concat在一起3. Dual Aggregator的聚合方式和8.(FSDetView) Few-Shot Object Detection and Viewpoint Estimation for Objects in the Wild.一样### 12. (DeFRCN) DeFRCN: Decoupled Faster R-CNN for Few-Shot Object Detection![](https://image.yayan.xyz/20231204214547.png)**问题**:1. multi-stage (RPN vs. RCNN)   - RPN应该是类无关的   - RCNN应该是类相关的   - 但是二者共用一个backbone,梯度会回流到backbone带来冲突   - 通过梯度调整三个模块(backbone,RPN,RCNN)之间的解耦程度来缓解整个模型不被其中一个支配2. multi-task (classification vs. localization).   - 分类任务需要平移不变性,而定位任务对位置敏感   - 在分类分支上使用一个有效的分数校准模块来实现解耦两个任务**思想**:1. 在RPN,RCNN和backbone之间引入GDL,使用一个decoupling coefficient $\lambda$来控制梯度的流动,从而减少不同模块之间的相互影响,$\mathbb{G}_{(\mathcal{A}, \lambda)}(x) =\mathcal{A}(x)$$\frac{\mathrm{d} \mathbb{G}_{(\mathcal{A}, \lambda)}}{\mathrm{d} x} =\lambda \nabla_{\mathcal{A}}$$\lambda$有三种可能,分开讨论2. PCB由一个预训练模型，一个ROIAlign层和一个分类器组成.首先从支持集中提取特征 ,然后使用RoIAlign与GroundTruth生成MK个实例,然后对k个实例的特征取平均,得到m个类别原型$p_c$. 然后给定$\hat{y}$(由检测器得到),利用预测出来的框,使用RoIAlign对齐,得到预测特征,计算预测特征$x_i$和类原型$p_c$之间的相似度分数$s_i^{cos}$,最后的预测类别得分为:$s_{i}^{\ddagger}=\alpha \cdot s_{i}+(1-\alpha) \cdot s_{i}^{\cos }$### 13. (FCT) Few-Shot Object Detection with Fully Cross-Transformer![](https://image.yayan.xyz/20231206190239.png)**问题**:1. 之前的工作,支持分支和查询分支的交互仅限于在检测头,剩余的几百个层的特征都是独立的,**思想**:1. backbone中的Cross-Transformer之前   - 在送入之前,把图像分成$4×4×3$大小的patches.然后展平扩展通道数为$C_1$   - 加上位置编码,和批次编码之后($X_{q}^{\prime}=X_{q}+\mathbf{E}_{q}^{p o s}+\mathbf{E}^{b r a}[0], X_{s}^{\prime}=X_{s}+\mathbf{E}_{s}^{p o s}+\mathbf{E}^{b r a}[1]$),再经过映射得到KVQ(为了减少计算量,使用了空间缩减)2. The Asymmetric-Batched Cross-Attention,非对称批处理交叉注意   - 支持图像通常大于1,且不固定,这个模块一次计算查询图像与同一类的所有支持图像之间的注意。![](https://image.yayan.xyz/20231206201930.png)   - 对支持图像进行平均池化,使得匹配查询分支的批量大小   - 对查询图像进行重复,使得匹配支持分支的批量大小   - 聚合之后做多头注意力+MLP3. The Cross-Transformer Detection Head用于在最终检测之前联合提取建议和支持图像的RoI特征   - 从支持分支提取出100个候选框取平均,只有一个   - 从查询分支提取出100个候选框   - 使用3.Few-Shot Object Detection with Attention-RPN and Multi-Relation Detector中的两两匹配方法进行预测### 14. (DeDETR) Decoupled DETR For Few-shot Object Detection![](https://image.yayan.xyz/20231205210339.png)**问题**:1. FasterRCNN存在定位准确,分类不准确的问题,DETR同样存在(因为极端样本不平衡导致参数优化中数据丰富的类的旧知识占主导地位，这意味着模型总是对数据丰富的类有一定的偏向。)2. 解码器只会使用编码器最后一层的输出作为输入,但是编码器到解码器是一个从浅到深再回到浅的过程,所以浅编码器可能会更好地匹配浅解码器3. 不仅解码器的最后一层能产生正确的预测结果，解码器中间层的输出有时也能产生更好的预测结果。**思想**:1. Decoupled prompts (DePrompt):   - 来自新类的少数样本很难将像 DETR 这样的大型模型推向合适的最优值,因此为新类和基类分配单独的权重集   - 分别为base class 和novel class构建独立的deformable selfattention modules,DePrompt的输出作为编码器的输入,DePrompt的输出由公式决定(w的三种设置)   $f_{\text {DePrompt }}(x)=w * f_{b_{p m t}}(x)+(1-w) * f_{n_{p m t}}(x)$2. 编码器和解码器之间的Skip connection,有两种方式   - 可学习的连接,每一层解码器的输入都有前面所有编码器层的输出乘可学习的权重矩阵得到   $Mem\_new^j=\sum_{i}^{i=6} A_{i j} * Men\_ori^i$   - 软连接,每一层解码器的输入都有前面对应的$6-j$层和最后一层编码器的输出得到   $Mem\_new^j=A * M e m \_o r i^{\{6\}}+(1-A) * M e m_{-} o r i^{\{i\}}$3. Adaptive decoder selection来解决5个中间层解码器的输出可能比最后一层获得更好的检测结果   - $Dec\_new =\sum_{j}^{j=6} B_{j} * Dec\_ori^j$   - 用可学习的参数动态调整每个层输出的权重### 15. (FSRC) Few-shot Object Detection with Refined Contrastive Learning![](https://image.yayan.xyz/20231207200929.png)**问题**:1. 各个类别的检测精度的标准差很大,表明模型对不同类别的检测能力差异很大**思想**:1.在RoiPool前都和FasterRCNN一样,不同的地方在于加上了RCL模块2. 使用细粒度的对比学习增强学习能力(和10.FSCE: Few-Shot Object Detection via Contrastive Proposal Encoding的区别在于FSCE把所有的类(前景和背景)都考虑进去进行对比),本文先把类间距小的类(相似类)挑出来,然后在这些Resemblance Group中使用对比学习3. 找到相似类对   - 需要IoU和真实框大于阈值,并且分类错误   - 当一个相似类对出现的次数超过某个阈值后,把这些相似类对中的类都记录下来,作为一个Resemblance Group   - 只有当预测的类别或者真实的类别属于Resemblance Group中的类时,才会进行对比学习   - 这个测量应该在训练过程中使用,因为在刚开始的时候,模型倾向于基类4. 损失函数$L_{R C L}=\frac{1}{N_{R C L}} \sum_{i=1}^{N_{R C L}} w\left(u_{i}\right) \cdot L_{z_{i}}$$N_{R C L} = N_{a l l}, I_{c}&lt;I_{m}$.$N_{R C L} = N_{G_{R}}, I_{c} \geqslant I_{m}$.$L_{z_{i}}=\frac{-1}{N_{y_{i}}-1} \sum_{j=1, j \neq i}^{N} I\left\{y_{i}=y_{j}\right\} \cdot \log \frac{e^{\tilde{z_{i}} \cdot \tilde{z_{j} / \tau}}}{\sum_{k=1}^{N} I_{k \neq i} \cdot e^{\tilde{z_{i}} \cdot \tilde{z_{k}} / \tau}}$### 16. (ECEA) ECEA: Extensible Co-Existing Attention for Few-Shot Object Detection![](http://image.yayan.xyz/20231208131820.png)**问题**:1. 很少考虑到局部到全局的定位(kshot样本可能只能提供novel class的一部分,比如只有狗头,但是要检测出狗身子)**Related Work值得借鉴****思想**:1. 提出了一个Extensible Co-Existing Attention(ECEA)模块，使模型能够根据局部部分推断全局对象。本质上，该模型在具有丰富样本的基本阶段不断学习可扩展的能力，并将其转移到新的阶段，可以帮助少镜头模型快速适应将局部区域扩展到共存区域。2. 使用ResNet101的后三层构建多尺度模块经过特征融合之后送到ECEA模块中3. 将特征图划分为一系列patch,表示为$x_q$,每个patch利用deformable cnn来获得N个extensible regions,...看不懂了$\operatorname{EA}\left(x_{q}\right)=\sum_{n=1}^{N} \frac{e^{x_{q} W^{q} \cdot\left(x_{q} W_{n}^{k}\right)^{T}}}{\sum_{n=1}^{N} e^{x_{q} W^{q} \cdot\left(x_{q} W_{n}^{k}\right)^{T}}} \cdot x_{q} W_{n}^{v},$(类似与:一个patch经过$W$得到$K,V,Q$,然后和其他patch计算相似度,然后和其他patch的$V$相乘,得到最终的特征)3. 补充3: Extensible Liner (应该是Deformable 实现)学习到N个可扩展区域的位置和形状,然后和当前的区域进行点积运算,得到相似度分数,然后在和另一个Extensible Liner学习到N个可扩展区域$V$相乘,得到最终的特征(也是$K,V,Q$的形式,但是$K,V$中包含了N个相关的扩展区域?)4. 构建了级联的多头多层的Extensible Module,扩展的区域更大,视野更大,更能获得对象的定位$\operatorname{MHEA}(x)=\sum_{m=1}^{M} W_{m} \operatorname{EA}(x)$### 17. (VFA) Few-Shot Object Detection via Variational Feature Aggregation![](https://image.yayan.xyz/20231209144136.png)**问题**:1. class-specific aggregation和class-agnostic aggregation的区别没看懂,没看出来带来什么影响2. 因为novel class的样本太少了,样本间的方差太大,预测结果和样本的质量关系很大**思想**:1. 使用class-agnostic aggregation聚合,即在训练时随机挑选一个支持类和查询的RoIfeature进行聚合得到聚合特征2. 使用Variational Feature Aggregation(VFA),先将支持特征转为分布,然后从分布中采样出特征.由于分布不特定于特定的示例,所以方差具有鲁棒性## 总结</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;katex-block katex-error&#39; title=&#39;ParseError: KaTeX parse error: Expected &amp;#039;EOF&amp;#039;, got &amp;#039;#&amp;#039; at position 1: #̲ Few-s</summary>
      
    
    
    
    <category term="论文记录" scheme="https://gladdduck.github.io/categories/%E8%AE%BA%E6%96%87%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Few-shotObjectDetection" scheme="https://gladdduck.github.io/tags/Few-shotObjectDetection/"/>
    
  </entry>
  
  <entry>
    <title>C#学习中的小知识点</title>
    <link href="https://gladdduck.github.io/2023/11/24/C#%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://gladdduck.github.io/2023/11/24/C#%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2023-11-24T12:54:49.890Z</published>
    <updated>2023-11-24T09:14:47.621Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符串前面的字符"><a class="markdownIt-Anchor" href="#字符串前面的字符"></a> 字符串前面的字符</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正常字符串  类似python中的&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">string</span> one = <span class="string">&quot;\\&quot;</span>;</span><br><span class="line"><span class="comment">//模板字符串 类似python中的f&#x27;&#x27;或者&#x27;&#x27;.format() 可以加入变量</span></span><br><span class="line"><span class="built_in">string</span> two = <span class="string">$&quot;\\&quot;</span>;</span><br><span class="line"><span class="comment">//逐字字符串 类似python中的r&#x27;&#x27;  每个字符是本身的意思,不转义</span></span><br><span class="line"><span class="built_in">string</span> three = <span class="string">@&quot;\&quot;</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;字符串前面的字符&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#字符串前面的字符&quot;&gt;&lt;/a&gt; 字符串前面的字符&lt;/h3&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="快捷命令" scheme="https://gladdduck.github.io/categories/%E5%BF%AB%E6%8D%B7%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="CSharp" scheme="https://gladdduck.github.io/tags/CSharp/"/>
    
  </entry>
  
  <entry>
    <title>C#使用PaddleOCRSharp</title>
    <link href="https://gladdduck.github.io/2023/11/24/C#%E4%BD%BF%E7%94%A8PaddleOCRSharp/"/>
    <id>https://gladdduck.github.io/2023/11/24/C#%E4%BD%BF%E7%94%A8PaddleOCRSharp/</id>
    <published>2023-11-24T12:54:49.886Z</published>
    <updated>2023-11-26T05:19:59.766Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-nuget安装"><a class="markdownIt-Anchor" href="#1-nuget安装"></a> 1. Nuget安装</h3><h3 id="2本地编译"><a class="markdownIt-Anchor" href="#2本地编译"></a> 2.本地编译</h3><h4 id="编译"><a class="markdownIt-Anchor" href="#编译"></a> 编译</h4><ol><li><a href="https://gitee.com/raoyutian/paddle-ocrsharp">gitee</a>上拉下来源码,github的版本比较老</li><li>VS2022打开项目,双击项目名称打开.csproj文件.在 <code>TargetFrameworks</code>中修改需要的版本,例如:</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TargetFrameworks</span>&gt;</span></span><br><span class="line">  net35;</span><br><span class="line">  net40;</span><br><span class="line">  net45;</span><br><span class="line">  net451;</span><br><span class="line">  net452;</span><br><span class="line">  net46;</span><br><span class="line">  net461;</span><br><span class="line">  net462;</span><br><span class="line">  net47;</span><br><span class="line">  net471;</span><br><span class="line">  net472;</span><br><span class="line">  net48;</span><br><span class="line">  net481;</span><br><span class="line">  netstandard2.0;netcoreapp3.1;</span><br><span class="line">  net5.0;net6.0;net7.0;net8.0</span><br><span class="line"><span class="tag">&lt;/<span class="name">TargetFrameworks</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>如果是 <code>.Net8.0</code>,会报错 <code>不存在ImageToBytes</code>, 因为在 <code>EngineBase.cs</code>中有 <code>if !NET8_0_OR_GREATER</code>,<code>ImageToBytes</code>只针对 <code>.Net8.0</code>以下版本,所以在 <code>#endif</code>后面加上:</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> NET8_0_OR_GREATER</span></span><br><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">protected</span> <span class="built_in">byte</span>[] <span class="title">ImageToBytes</span>(<span class="params">Image image</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">    &#123;</span><br><span class="line">        image.Save(ms, image.RawFormat); <span class="comment">// 保存图片到内存流</span></span><br><span class="line">        <span class="keyword">return</span> ms.ToArray(); <span class="comment">// 返回字节数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol start="4"><li>清理项目,重新生成,就可以在 <code>bin</code>文件夹下找到对应版本的dll文件了</li></ol><h4 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h4><ol><li>新建项目,在依赖项中,右键添加项目引用,找到生成的dll文件,添加引用<br /><img src="https://image.yayan.xyz/20231122160927.png" alt="" /></li><li>测试代码可以用下面的</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">OpenFileDialog ofd = <span class="keyword">new</span> OpenFileDialog();</span><br><span class="line"></span><br><span class="line">ofd.Filter = <span class="string">&quot;*.*|*.bmp;*.jpg;*.jpeg;*.tiff;*.tiff;*.png&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ofd.ShowDialog() != DialogResult.OK) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> imagebyte = File.ReadAllBytes(ofd.FileName);</span><br><span class="line"></span><br><span class="line">Bitmap bitmap = <span class="keyword">new</span> Bitmap(<span class="keyword">new</span> MemoryStream(imagebyte));</span><br><span class="line"></span><br><span class="line">OCRModelConfig config = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">OCRParameter oCRParameter = <span class="keyword">new</span> OCRParameter();</span><br><span class="line"></span><br><span class="line">OCRResult ocrResult = <span class="keyword">new</span> OCRResult();</span><br><span class="line"></span><br><span class="line"><span class="comment">//建议程序全局初始化一次即可，不必每次识别都初始化，容易报错。    </span></span><br><span class="line"></span><br><span class="line">PaddleOCREngine engine = <span class="keyword">new</span> PaddleOCREngine(config, oCRParameter);</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    ocrResult = engine.DetectText(bitmap);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ocrResult != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    label1.Text = ocrResult.Text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><p>如果不出意外的话,应该会报错,一个错误是 <code>无法加载文件或程序集System.Drawing.Common, Version=0.0.0.0, culture=....</code>这个是因为没有安装 <code>System.Drawing.Common</code>这个包,在这个项目中用Nuget安装就可以了</p></li><li><p>另一个错误是 <code>找不到xxxxx.dll</code>或 <code>什么dll文件不存在</code>或 <code>ch-xxxxxxx找不到,不存在</code>.解决方法:</p><ul><li>第一种,先显示全部文件,在bin/debug/对应的版本文件夹下,把PaddleOCRSharp项目中的 <code>PaddleOCRLib</code>文件下的内容全部复制到这个文件夹下<br /><img src="https://image.yayan.xyz/20231122161507.png" alt="" /></li><li>第二种,把 <code>PaddleOCRLib</code>文件夹下的所有文件复制到解决方案同目录,然后把每一个文件的属性都设置位 <code>始终复制</code>或者 <code>如果较新则复制</code>,但是这样文件结构就复杂了</li><li>第三种,把 <code>PaddleOCRLib</code>文件夹复制过来,</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-nuget安装&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-nuget安装&quot;&gt;&lt;/a&gt; 1. Nuget安装&lt;/h3&gt;
&lt;h3 id=&quot;2本地编译&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#2本</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="PaddleOCRSharp" scheme="https://gladdduck.github.io/tags/PaddleOCRSharp/"/>
    
  </entry>
  
  <entry>
    <title>VS2022快捷键</title>
    <link href="https://gladdduck.github.io/2023/11/24/VS2022%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://gladdduck.github.io/2023/11/24/VS2022%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2023-11-24T12:54:49.882Z</published>
    <updated>2023-11-24T09:14:47.861Z</updated>
    
    <content type="html"><![CDATA[<h4 id="复制一行"><a class="markdownIt-Anchor" href="#复制一行"></a> 复制一行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+D</span><br></pre></td></tr></table></figure><h4 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 注释:Ctrl+K 接上 Ctrl+C</span><br><span class="line">2. 取消注释:Ctrl+K 接上 Ctrl+U</span><br></pre></td></tr></table></figure><h4 id="代码折叠"><a class="markdownIt-Anchor" href="#代码折叠"></a> 代码折叠</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 折叠光标所在部分:Ctrl+M 接上 Ctrl+M</span><br><span class="line">2. 折叠全部函数:Ctrl+M 接上 Ctrl+O</span><br><span class="line">(打开同理)</span><br></pre></td></tr></table></figure><h4 id="代码格式化"><a class="markdownIt-Anchor" href="#代码格式化"></a> 代码格式化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+K 接上 Ctrl+D</span><br></pre></td></tr></table></figure><h4 id="f开头的快捷键"><a class="markdownIt-Anchor" href="#f开头的快捷键"></a> F开头的快捷键</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. F5:开始调试</span><br><span class="line">2. F7:页面跳转代码</span><br><span class="line">3. F9:设置断点</span><br><span class="line">4. F10:单步执行</span><br><span class="line">5. F11:单步进入</span><br><span class="line">6. F12:转到定义</span><br><span class="line">7. Shift+F12:查找变量所有引用</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;复制一行&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#复制一行&quot;&gt;&lt;/a&gt; 复制一行&lt;/h4&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp</summary>
      
    
    
    
    <category term="快捷命令" scheme="https://gladdduck.github.io/categories/%E5%BF%AB%E6%8D%B7%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="VS2022" scheme="https://gladdduck.github.io/tags/VS2022/"/>
    
  </entry>
  
  <entry>
    <title>VSCode登录Github账号同步</title>
    <link href="https://gladdduck.github.io/2023/11/20/VSCode%E7%99%BB%E5%BD%95Github/"/>
    <id>https://gladdduck.github.io/2023/11/20/VSCode%E7%99%BB%E5%BD%95Github/</id>
    <published>2023-11-20T04:44:58.504Z</published>
    <updated>2023-11-20T04:52:43.741Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h3><p><img src="https://image.yayan.xyz/20231120124637.png" alt="" /></p><ol><li>多个设备使用vscode,每次都要配置(快捷键,插件这些),很麻烦</li><li>登录GitHub账号(Microsoft账号也可以),提示:<strong>vscode 登录github 尚未完成授权此扩展使用 GitHub 的操作。是否要尝试其他方式? (本地服务器)</strong><br /><img src="https://image.yayan.xyz/20231120125224.png" alt="" /></li></ol><h3 id="方法"><a class="markdownIt-Anchor" href="#方法"></a> 方法</h3><ol><li>原因是本地电脑连不上github,需要一个全局代理(没有)</li><li>方法:在<code>C:\Windows\System32\drivers\etc</code>下找到<code>hosts</code>文件,添加</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">140.82.112.4 github.com</span><br><span class="line">185.199.108.153 vscode-auth.github.com</span><br><span class="line">185.199.109.153 vscode-auth.github.com</span><br><span class="line">185.199.110.153 vscode-auth.github.com</span><br><span class="line">185.199.111.153 vscode-auth.github.com</span><br></pre></td></tr></table></figure><ol start="3"><li>可以先把host文件复制到桌面,修改桌面的host,然后替换,这样就不存在权限问题了</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#问题&quot;&gt;&lt;/a&gt; 问题&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://image.yayan.xyz/20231120124637.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;</summary>
      
    
    
    
    <category term="杂七杂八配置" scheme="https://gladdduck.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="VSCode Github" scheme="https://gladdduck.github.io/tags/VSCode-Github/"/>
    
  </entry>
  
  <entry>
    <title>BingChat国内使用</title>
    <link href="https://gladdduck.github.io/2023/11/20/Bing%20Chat%E4%BD%BF%E7%94%A8/"/>
    <id>https://gladdduck.github.io/2023/11/20/Bing%20Chat%E4%BD%BF%E7%94%A8/</id>
    <published>2023-11-20T01:35:57.276Z</published>
    <updated>2023-11-26T05:19:19.444Z</updated>
    
    <content type="html"><![CDATA[<h4 id="好处"><a class="markdownIt-Anchor" href="#好处"></a> 好处</h4><ol><li>不需要申请,网络Ok都可以用</li><li>DALL·E 3 免费用</li><li>据说是ChatGPT 4.0,多模态,可以上传图片</li><li>后续可以增加插件</li></ol><h4 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h4><ol><li><a href="http://xn--bing-9z2h93o.com">打开bing.com</a>(<a href="http://xn--cn-gy2ck96a40cbvlg4f2xhp4ah8hnx0dhs4d.bing.com">这个地方如果打开的是cn.bing.com</a>,就不会出现Chat窗口),不需要登录</li><li>调整国家和地区,随便国家<br /><img src="http://image.yayan.xyz/20231120095230.png" alt="" /></li><li>左边标签页就有Chat了</li></ol><p><img src="http://image.yayan.xyz/20231120095459.png" alt="" /></p><h4 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h4><ol><li>每天好像只有30次查询机会,不登录只有5次(在Chrome上只有5次,在Edge上是30次)</li><li><a href="http://xn--bing-955fz0yuvfxjp15f1tdh76cvehk8f.com/create%E4%B8%8A%E7%94%9F%E6%88%90,%E9%9C%80%E8%A6%81%E7%99%BB%E5%BD%95">图片生成可以直接在bing.com/create上生成,需要登录</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;好处&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#好处&quot;&gt;&lt;/a&gt; 好处&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;不需要申请,网络Ok都可以用&lt;/li&gt;
&lt;li&gt;DALL·E 3 免费用&lt;/li&gt;
&lt;li&gt;据说是ChatGPT 4.0,多模态,可</summary>
      
    
    
    
    <category term="杂七杂八配置" scheme="https://gladdduck.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="BingChat" scheme="https://gladdduck.github.io/tags/BingChat/"/>
    
  </entry>
  
  <entry>
    <title>杂七杂八小知识</title>
    <link href="https://gladdduck.github.io/2023/11/19/%E6%9D%82%E8%AE%B0%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://gladdduck.github.io/2023/11/19/%E6%9D%82%E8%AE%B0%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2023-11-19T07:27:51.051Z</published>
    <updated>2023-11-26T05:18:31.885Z</updated>
    
    <content type="html"><![CDATA[<h4 id="cookie和token的区别是什么"><a class="markdownIt-Anchor" href="#cookie和token的区别是什么"></a> cookie和token的区别是什么</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;cookie和token的区别是什么&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#cookie和token的区别是什么&quot;&gt;&lt;/a&gt; cookie和token的区别是什么&lt;/h4&gt;
</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://gladdduck.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Zero-shot Detection论文总结</title>
    <link href="https://gladdduck.github.io/2023/11/14/Zero-shotDetection%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/"/>
    <id>https://gladdduck.github.io/2023/11/14/Zero-shotDetection%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/</id>
    <published>2023-11-14T12:57:15.167Z</published>
    <updated>2023-11-14T12:59:53.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zero-shot-object-detection"><a class="markdownIt-Anchor" href="#zero-shot-object-detection"></a> Zero-shot Object Detection</h1><p>缺点: 需要结合文本信息,没办法完全根据图片进行检测</p><h2 id="综述"><a class="markdownIt-Anchor" href="#综述"></a> 综述</h2><p><strong>A Survey of Vision-Language Pre-Trained Models</strong><br />视觉语言多模态综述<br />介绍了视觉语言多模态的1. 特征表示 2. 模态交互 3. 预训练任务 4. 下游任务 5. 方向<br />2022年之前的VL预训练模型和常用数据集</p><h2 id="网页"><a class="markdownIt-Anchor" href="#网页"></a> 网页</h2><p><strong><a href="https://www.width.ai/post/how-zero-shot-object-detection-changes-computer-vision-tasks-in-business">Zero-Shot Object Detection介绍</a></strong></p><p>介绍了Zero-Shot Object Detection的基本概念，以及如何使用Region-CLIP进行Zero-Shot Object Detection</p><p><strong><a href="https://www.pinecone.io/learn/series/image-search/zero-shot-object-detection-clip/">Zero-Shot Object Detection案例</a></strong></p><p>一个样例代码,使用CLIP进行检测</p><h2 id="论文"><a class="markdownIt-Anchor" href="#论文"></a> 论文</h2><h3 id="zero-shot-detection"><a class="markdownIt-Anchor" href="#zero-shot-detection"></a> Zero-Shot Detection</h3><p><img src="https://image.yayan.xyz/20231023204527.png" alt="" /><br /><img src="https://image.yayan.xyz/20231031170459.png" alt="" /></p><ol><li>利用BackBone抽出来图像的特征<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>F</mi></msub></mrow><annotation encoding="application/x-tex">T_F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>F</mi></msub></mrow><annotation encoding="application/x-tex">T_F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>上进行检测,得到目标的位置信息<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>L</mi></msub></mrow><annotation encoding="application/x-tex">T_L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>F</mi></msub></mrow><annotation encoding="application/x-tex">T_F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>上进行语义预测,得到目标的文本信息<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>S</mi></msub></mrow><annotation encoding="application/x-tex">T_S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>把<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>F</mi></msub><mo separator="true">,</mo><msub><mi>T</mi><mi>L</mi></msub><mo separator="true">,</mo><msub><mi>T</mi><mi>S</mi></msub></mrow><annotation encoding="application/x-tex">T_F,T_L,T_S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>拼接起来,进行置信度的预测,得到了最终的预测结果(x,y,w,h,cls)</li><li>损失函数由1)位置损失 2)语义损失 3)置信度损失组成</li><li>在验证过程中分为Test-Seen,Test-Unseen,Test-Mix三种情况</li></ol><p>解决问题:</p><ol><li>RPN可能无法提议出那么多没见过的物体</li><li>基于YOLOv2,性能强大</li><li>简单容易理解</li></ol><h3 id="zero-shot-object-detection-2"><a class="markdownIt-Anchor" href="#zero-shot-object-detection-2"></a> Zero-Shot Object Detection</h3><p>方法:</p><ol><li>两阶段检测器结构,对区域建议框内的物体抽取出图像特征</li><li>通过映射将图像特征映射到文本特征空间(通过wordEmbedding得到)</li><li>在公共空间计算图像特征和文本特征的相似度,得到未见物体的类别</li></ol><p>解决问题:</p><ol><li>将未见物体分为背景的解决<ul><li>使用固定的背景类:在嵌入空间中为背景添加一个固定的向量</li><li>将多个潜在的类分配给背景对象,不断的将背景框标记为对象反复训练</li></ul></li><li>密集采样嵌入空间:数据集中可见类太少了导致公共空间稀疏,未见类的语义和视觉之间无法对齐<ul><li>使用除了未见类之外的额外数据补充训练</li></ul></li></ol><h3 id="region-clip"><a class="markdownIt-Anchor" href="#region-clip"></a> Region-CLIP</h3><ol><li>利用RPN从图像中提取出region,抽取出特征</li><li>利用现有文本解析器,从文本中提取出concept,抽取出特征</li><li>利用CLIP计算region和concept的相似度,得到region-text的配对</li><li>利用三个损失函数训练模型</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;zero-shot-object-detection&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#zero-shot-object-detection&quot;&gt;&lt;/a&gt; Zero-shot Object Detection&lt;/h1&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="论文记录" scheme="https://gladdduck.github.io/categories/%E8%AE%BA%E6%96%87%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Zero-shot Detection" scheme="https://gladdduck.github.io/tags/Zero-shot-Detection/"/>
    
  </entry>
  
  <entry>
    <title>Blazor中的Localization</title>
    <link href="https://gladdduck.github.io/2023/10/09/Blazor%E4%B8%AD%E7%9A%84Localization/"/>
    <id>https://gladdduck.github.io/2023/10/09/Blazor%E4%B8%AD%E7%9A%84Localization/</id>
    <published>2023-10-09T11:38:30.993Z</published>
    <updated>2023-11-26T05:19:29.773Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://code-maze.com/localization-in-blazor-webassembly-applications/">参考连接</a></p><h3 id="1根据浏览器语言显示语言"><a class="markdownIt-Anchor" href="#1根据浏览器语言显示语言"></a> 1.根据浏览器语言显示语言</h3><ol><li><p>项目中新建Resources文件夹</p></li><li><p>新建Text.resx文件(这个不用加语言的后缀,会报错 <code>自定义工具 PublicResXFileCodeGenerator 未能对输入文件产生输出</code>)</p></li><li><p>新建其他语言的Text文件,比如Text.zh.resx</p></li><li><p>resx文件中访问修饰符需要设置 <code>public</code>,每个文件中的名称需要相同,值是各个语言<br /><img src="https://image.yayan.xyz/20231009202818.png" alt="" /></p></li><li><p>完成之后,类似下图<br /><img src="https://image.yayan.xyz/20231009202906.png" alt="" /></p></li><li><p>在 <code>Program.cs</code>中添加 <code>builder.Services.AddLocalization();</code></p></li><li><p>在 <code>_Imports.razor</code>中添加</p><ul><li><code>@using Microsoft.Extensions.Localization</code></li><li><code>@using 项目名.文件夹名称</code>,例如:<code>@using BlazorWasmLocalization.Shared.ResourceFiles</code></li></ul></li><li><p>在页面中添加代码,其中Text就是resx文件的名称</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@page &quot;/&quot;</span><br><span class="line">@inject IStringLocalizer&lt;Text&gt; localizer</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;@localizer[&quot;resx文件中的一个名称&quot;]&lt;/h1&gt;</span><br><span class="line">@localizer[&quot;resx文件中的一个名称&quot;]</span><br></pre></td></tr></table></figure><h3 id="2根据用户选择的语言显示语言"><a class="markdownIt-Anchor" href="#2根据用户选择的语言显示语言"></a> 2.根据用户选择的语言显示语言</h3><ol><li>可以新建一个组件也可以直接在页面中添加</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 下拉选框 --&gt;</span><br><span class="line">&lt;strong&gt;Culture:&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">&lt;select class=&quot;form-control&quot; @bind=&quot;Culture&quot; style=&quot;width:300px; margin-left:10px;&quot;&gt;</span><br><span class="line">    @foreach (var culture in cultures)</span><br><span class="line">    &#123;</span><br><span class="line">        &lt;option value=&quot;@culture&quot;&gt;@culture.DisplayName&lt;/option&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 组件代码 --&gt;</span><br><span class="line">public partial class CultureSelector</span><br><span class="line">&#123;</span><br><span class="line">    [Inject]</span><br><span class="line">    public NavigationManager NavManager &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    [Inject]</span><br><span class="line">    public IJSRuntime JSRuntime &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 语言列表,和resx文件对应 --&gt;</span><br><span class="line">    CultureInfo[] cultures = new[]</span><br><span class="line">    &#123;</span><br><span class="line">        new CultureInfo(&quot;en-US&quot;),</span><br><span class="line">        new CultureInfo(&quot;zh-CN&quot;)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    CultureInfo Culture</span><br><span class="line">    &#123;</span><br><span class="line">        get =&gt; CultureInfo.CurrentCulture;</span><br><span class="line">        set</span><br><span class="line">        &#123;</span><br><span class="line">            if (CultureInfo.CurrentCulture != value)</span><br><span class="line">            &#123;</span><br><span class="line">                var js = (IJSInProcessRuntime)JSRuntime;</span><br><span class="line">                js.InvokeVoid(&quot;blazorCulture.set&quot;, value.Name);</span><br><span class="line">                &lt;!-- 每次选择之后会刷新一下页面 --&gt;</span><br><span class="line">                NavManager.NavigateTo(NavManager.Uri, forceLoad: true);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在项目下新建一个 <code>Extensions</code>文件夹,新建一个 <code>WebAssemblyHostExtension.cs</code>文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static class WebAssemblyHostExtension</span><br><span class="line">&#123;</span><br><span class="line">    public async static Task SetDefaultCulture(this WebAssemblyHost host)</span><br><span class="line">    &#123;</span><br><span class="line">        var jsInterop = host.Services.GetRequiredService&lt;IJSRuntime&gt;();</span><br><span class="line">        var result = await jsInterop.InvokeAsync&lt;string&gt;(&quot;blazorCulture.get&quot;);</span><br><span class="line"></span><br><span class="line">        CultureInfo culture;</span><br><span class="line"></span><br><span class="line">        if (result != null)</span><br><span class="line">            culture = new CultureInfo(result);</span><br><span class="line">        else</span><br><span class="line">            culture = new CultureInfo(&quot;zh-CN&quot;);</span><br><span class="line"></span><br><span class="line">        CultureInfo.DefaultThreadCurrentCulture = culture;</span><br><span class="line">        CultureInfo.DefaultThreadCurrentUICulture = culture;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在 <code>Program.cs</code>中添加</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var host = builder.Build();</span><br><span class="line">await host.SetDefaultCulture();</span><br><span class="line">await host.RunAsync();</span><br></pre></td></tr></table></figure><ol start="4"><li>在 <code>wwwroot/index.html</code>中添加</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       blazorCulture = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">get</span>: <span class="function">() =&gt;</span> <span class="variable language_">localStorage</span>[<span class="string">&#x27;BlazorCulture&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">set</span>: <span class="function">(<span class="params">value</span>) =&gt;</span> <span class="variable language_">localStorage</span>[<span class="string">&#x27;BlazorCulture&#x27;</span>] = value</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>在csproj文件中添加</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">BlazorWebAssemblyLoadAllGlobalizationData</span>&gt;</span>true<span class="tag">&lt;/<span class="name">BlazorWebAssemblyLoadAllGlobalizationData</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>运行即可</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://code-maze.com/localization-in-blazor-webassembly-applications/&quot;&gt;参考连接&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1根据浏览器语言显示语言&quot;&gt;&lt;a class=&quot;markdownIt-</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="BlazorLocalization" scheme="https://gladdduck.github.io/tags/BlazorLocalization/"/>
    
  </entry>
  
  <entry>
    <title>Blazor学习笔记</title>
    <link href="https://gladdduck.github.io/2023/09/16/C#-Blazor%E7%AC%94%E8%AE%B0/"/>
    <id>https://gladdduck.github.io/2023/09/16/C#-Blazor%E7%AC%94%E8%AE%B0/</id>
    <published>2023-09-16T05:56:55.560Z</published>
    <updated>2023-11-26T05:19:32.110Z</updated>
    
    <content type="html"><![CDATA[<p>😍😍😍</p><h2 id="blazor"><a class="markdownIt-Anchor" href="#blazor"></a> Blazor</h2><p>用C#代替JavaScript创建丰富的UI</p><h2 id="页面组件"><a class="markdownIt-Anchor" href="#页面组件"></a> 页面组件</h2><h3 id="组件"><a class="markdownIt-Anchor" href="#组件"></a> 组件</h3><blockquote><ol><li>以razor结尾,文件名首字母大写,HTML和C#代码的组合.</li><li>类似vue,在组件中可以使用@来引用变量</li></ol></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;font-style:@_headingFontStyle&quot;</span>&gt;@_headingText&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _headingFontStyle = <span class="string">&quot;italic&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _headingText = <span class="string">&quot;你好,世界!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="组件参数"><a class="markdownIt-Anchor" href="#组件参数"></a> 组件参数</h3><blockquote><ol><li>定义一个带有[Parameter]的公共属性,在父类使用这个组件时,可以传参</li></ol></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件:Child</span></span><br><span class="line">&lt;h1&gt;@Title&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;Child Title=<span class="string">&quot;传递参数&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="组件多参数"><a class="markdownIt-Anchor" href="#组件多参数"></a> 组件多参数</h3><blockquote><ol><li>当子组件可携带多个参数时,不用每个参数都进行定义.</li><li>使用@attributes语法关联字段进行绑定</li></ol></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种方式,单独传参</span></span><br><span class="line">&lt;input title=<span class="string">&quot;@Title&quot;</span> <span class="keyword">value</span>=<span class="string">&quot;@Value&quot;</span>  /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式,attribute字典传参</span></span><br><span class="line">&lt;input @attributes=<span class="string">&quot;ButtonAttributes&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Value &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;10&quot;</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; ButtonAttributes &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;()</span><br><span class="line">&#123;</span><br><span class="line">        &#123; <span class="string">&quot;title&quot;</span>,<span class="string">&quot;Hello&quot;</span> &#125; ,</span><br><span class="line">        &#123; <span class="string">&quot;value&quot;</span>,<span class="string">&quot;10&quot;</span> &#125; ,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="组件生命周期"><a class="markdownIt-Anchor" href="#组件生命周期"></a> 组件生命周期</h2><hr /><h2 id="组件模板"><a class="markdownIt-Anchor" href="#组件模板"></a> 组件模板</h2><blockquote><ol><li>父组件在使用子组件时，可以向子组件中插入代码片段.类似vue中的插槽?</li></ol></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 子组件，构建一个RenderFragment模板</span></span><br><span class="line">@typeparam IData</span><br><span class="line">&lt;table&gt;</span><br><span class="line"></span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        @HeaderTemplate</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        @foreach (<span class="keyword">var</span> item <span class="keyword">in</span> Data)</span><br><span class="line">        &#123;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line"></span><br><span class="line">                &lt;td&gt;@RowTemplate(item)&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line"></span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> RenderFragment HeaderTemplate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> RenderFragment&lt;IData&gt; RowTemplate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> IReadOnlyList&lt;IData&gt; Data &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父组件使用时传递html标签</span></span><br><span class="line">&lt;TableTemplate Data=<span class="string">&quot;students&quot;</span>&gt;</span><br><span class="line">    &lt;HeaderTemplate&gt;</span><br><span class="line">        &lt;th&gt;Id&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;Name&lt;/th&gt;</span><br><span class="line">    &lt;/HeaderTemplate&gt;</span><br><span class="line"></span><br><span class="line">    &lt;RowTemplate&gt;</span><br><span class="line">        &lt;td&gt;@context.Id&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;@context.Name&lt;/td&gt;</span><br><span class="line">    &lt;/RowTemplate&gt;</span><br><span class="line">&lt;/TableTemplate&gt;</span><br><span class="line">@code&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Task <span class="title">OnInitializedAsync</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        students = <span class="keyword">new</span> List&lt;Student&gt;();</span><br><span class="line">        students.Add(<span class="keyword">new</span> Student() &#123; Id = <span class="number">1</span>, Name = <span class="string">&quot;John&quot;</span> &#125;);</span><br><span class="line">        students.Add(<span class="keyword">new</span> Student() &#123; Id = <span class="number">2</span>, Name = <span class="string">&quot;Mary&quot;</span> &#125;);</span><br><span class="line">        students.Add(<span class="keyword">new</span> Student() &#123; Id = <span class="number">3</span>, Name = <span class="string">&quot;Jane&quot;</span> &#125;);</span><br><span class="line">        students.Add(<span class="keyword">new</span> Student() &#123; Id = <span class="number">4</span>, Name = <span class="string">&quot;Peter&quot;</span> &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.OnInitializedAsync();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="组件方法"><a class="markdownIt-Anchor" href="#组件方法"></a> 组件方法</h2><blockquote><ol><li>子组件时间完成之后的一个回调,当子组件发生某个事件之后通知父组件，父组件的一个响应函数</li><li>下面的例子，当子组件发生点击事件之后，父组件可做出相应的反应</li></ol></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件：ChildCallBack</span></span><br><span class="line"></span><br><span class="line">&lt;button @onclick=<span class="string">&quot;OnClickChild&quot;</span>&gt;</span><br><span class="line">       Click</span><br><span class="line">&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> EventCallback&lt;MouseEventArgs&gt; OnClickCallback &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">OnClickChild</span>()</span>&#123;</span><br><span class="line">        <span class="comment">// do somethings</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ()传递参数</span></span><br><span class="line">        OnClickCallback.InvokeAsync(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;ChildCallBack OnClickCallback=<span class="string">&quot;ReceiveDataFromSideBar&quot;</span>&gt;&lt;/ChildCallBack&gt;</span><br><span class="line"></span><br><span class="line">@code&#123;</span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ReceiveDataFromSideBar</span>(<span class="params"><span class="built_in">int</span> number</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 可接受参数做处理</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="事件处理"><a class="markdownIt-Anchor" href="#事件处理"></a> 事件处理</h2><blockquote><ol><li>在标签中使用@绑定一个事件，一种使用lambda表达式直接处理，一种使用函数</li></ol></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1.lambda</span></span><br><span class="line">&lt;input @onchange=<span class="string">&quot;@(()=&gt;Console.WriteLine(&quot;</span>Hello<span class="string">&quot;))&quot;</span> /&gt;</span><br><span class="line">&lt;button @onclick=<span class="string">&quot;@(()=&gt;Console.WriteLine(&quot;</span>Hello<span class="string">&quot;))&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.@code中使用函数</span></span><br><span class="line"></span><br><span class="line">&lt;button @onclick=<span class="string">&quot;Show&quot;</span> /&gt;</span><br><span class="line">@code</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">//当按钮被点击, 将执行下面代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.携带事件参数，在默认的情况下, 我们如果只编写一个事件触发的方法, 并且明确它是否有参数, 在UI元素绑定方法上, 我们都无需传递参数</span></span><br><span class="line">&lt;button @onclick=<span class="string">&quot;Show&quot;</span> /&gt;</span><br><span class="line">@code&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Show</span>(<span class="params">MouseEventArgs  e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.可重载，带有事件或不带事件</span></span><br><span class="line">&lt;button @onclick=<span class="string">&quot;@(e=&gt;Show(e))&quot;</span> /&gt;  <span class="comment">//调用带事件参数的方法</span></span><br><span class="line">&lt;button @onclick=<span class="string">&quot;@(()=&gt;Show())&quot;</span> /&gt;  <span class="comment">//调用不带事件参数的方法</span></span><br><span class="line">@code</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//不带事件参数的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带事件参数的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>(<span class="params">MouseEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="数据绑定"><a class="markdownIt-Anchor" href="#数据绑定"></a> 数据绑定</h2><h3 id="绑定字段"><a class="markdownIt-Anchor" href="#绑定字段"></a> 绑定字段</h3><blockquote><ol><li>类似vue中的v-bind，可以绑定C#字段,双向绑定</li><li>@xxx和@bind的区别：value=“@xxx”: 只能做到属性呈现到UI元素当中, 元素发生变化并不会影响到属性变更。</li></ol></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input @bind=<span class="string">&quot;Name&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> Name&#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="绑定对象的属性"><a class="markdownIt-Anchor" href="#绑定对象的属性"></a> 绑定对象的属性</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;input @bind=<span class="string">&quot;Stu.Name&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">@code&#123;</span><br><span class="line">    <span class="keyword">public</span> Student Stu &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="keyword">new</span> Student()</span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">&quot;123&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="绑定数据格式化"><a class="markdownIt-Anchor" href="#绑定数据格式化"></a> 绑定数据格式化</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;input @bind=<span class="string">&quot;StartDate&quot;</span> @bind:format=<span class="string">&quot;yyyy-MM-dd&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> DateTime StartDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="keyword">new</span> DateTime(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="父组件参数绑定到子组件"><a class="markdownIt-Anchor" href="#父组件参数绑定到子组件"></a> 父组件参数绑定到子组件</h3><blockquote><ol><li>当父组件的参数改变时，子组件中的参数也会同时改变</li></ol></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ChildComponent </span></span><br><span class="line">&lt;p&gt;Year: @Year&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Year &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> EventCallback&lt;<span class="built_in">int</span>&gt; YearChanged &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;ChildComponent @bind-Year=<span class="string">&quot;ParentYear&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;input @bind=<span class="string">&quot;ParentYear&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">    [<span class="meta">Parameter</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> ParentYear &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="number">1978</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="路由和页面导航"><a class="markdownIt-Anchor" href="#路由和页面导航"></a> 路由和页面导航</h2><blockquote><ol><li>@page “/xxx” 组件的路由</li><li>@page “/xxx/{aaa}”  aaa是路由传参，在@code中添加一个公共字段aaa，</li><li>@page “/xxx/{aaa:int}”  指定参数类型</li><li>NavigationManager.NavigateTo(“/test/999”); 跳转页面(NavLink 也可以)</li></ol></blockquote><hr /><h2 id="blazor-server和blazor-webassembly"><a class="markdownIt-Anchor" href="#blazor-server和blazor-webassembly"></a> Blazor Server和Blazor WebAssembly</h2><p><a href="https://learn.microsoft.com/zh-cn/aspnet/core/blazor/hosting-models?view=aspnetcore-7.0">官网说明</a></p><blockquote><p>服务器把东西全部运行在浏览器的沙盒里,</p></blockquote><ul><li>Blazor WebAssembly的优点<ul><li>在浏览器中执行C#代码，不需要额外的插件</li><li>可以基于WebAssembly的性能优势和可在浏览器内执行的能力，获得更快页面处理速度</li><li>支持无服务器和离线场景</li></ul></li><li>Blazor WebAssembl的缺点<ul><li>需要加载太多资源，首次展现速度较慢</li><li>由于所有代码都在浏览器中执行，不能嵌入机密数据</li></ul></li></ul><blockquote><p>Blazor Server类似MVC,但是Server是长连接,在服务器端计算结果差异,浏览器拿到差异渲染(blazor.server.js)</p></blockquote><ul><li>Blazor Server的优点<ul><li>页面加载是轻量级的</li><li>服务器可以使用机密数据，例如访问数据库</li><li>它支持100%的浏览器，即使是那些没有WASM支持的浏览器，如Internet Explorer。</li></ul></li><li>Blazor Server的缺点<ul><li>需要一个<a href="http://ASP.NET">http://ASP.NET</a> Core服务器</li><li>不支持无服务器和离线场景</li><li>大量SignalR连接可能引发性能问题,保持连接</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;😍😍😍&lt;/p&gt;
&lt;h2 id=&quot;blazor&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#blazor&quot;&gt;&lt;/a&gt; Blazor&lt;/h2&gt;
&lt;p&gt;用C#代替JavaScript创建丰富的UI&lt;/p&gt;
&lt;h2 id=&quot;页面组件&quot;&gt;&lt;a cl</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Blazor" scheme="https://gladdduck.github.io/tags/Blazor/"/>
    
  </entry>
  
  <entry>
    <title>Git学习笔记</title>
    <link href="https://gladdduck.github.io/2023/09/09/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://gladdduck.github.io/2023/09/09/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2023-09-09T02:24:47.503Z</published>
    <updated>2023-11-26T05:22:17.136Z</updated>
    
    <content type="html"><![CDATA[<p>😍😍😍</p><h3 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h3><p><img src="https://image.yayan.xyz/1694228618814.png" alt="" /></p><ul><li>远程仓库(github)</li><li>本地仓库(本机)</li><li>缓冲区(防止误提交)</li><li>工作区(写代码的地方)</li></ul><blockquote><p>github用户名密码存储在用户管理中的管理Windows凭据.<br />git status 查看文件当前所处位置</p></blockquote><hr /><h3 id="gitignore-忽略文件"><a class="markdownIt-Anchor" href="#gitignore-忽略文件"></a> gitignore 忽略文件</h3><p><code>根目录创建  .gitignore</code></p><ol><li>每个配置项单独一行</li><li>可以有空行,方便阅读</li><li>可以是文明目录名,路径或者匹配模式</li><li>如果一个文件已经被提交过了,再ignore没有用</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">模式匹配</span><br><span class="line"><span class="comment"># 用于注释  \用于转义</span></span><br><span class="line"></span><br><span class="line">* 匹配任意字符任意次  ?匹配任意字符1次  但都不匹配/</span><br><span class="line"></span><br><span class="line">[] 用于匹配列表里面的一个字符</span><br><span class="line"></span><br><span class="line">**用于匹配多级目录</span><br><span class="line"></span><br><span class="line">/用户分隔目录</span><br><span class="line">    1)如果/在开头,则匹配根目录下的文件, 否则 所有子文件夹里的文件都会匹配</span><br><span class="line">    2)/ 在末尾时, 只匹配目录, 否则同名的文件和目录都会匹配</span><br><span class="line"></span><br><span class="line">! 用于重新包含某个文件, 如果这个文件的父级目录被排除了,那么它不回被包含了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">1) 忽略所哟内容   </span><br><span class="line">    *</span><br><span class="line">2) 忽略所有目录   </span><br><span class="line">    */</span><br><span class="line">3) 忽略public 目录下的某个文件   </span><br><span class="line">    public/*</span><br><span class="line">    !public/xxxxxxx</span><br><span class="line">4) 只保留public目录下的某个文件</span><br><span class="line">    /*</span><br><span class="line">    !/public/</span><br><span class="line">    /public/*</span><br><span class="line">    !/public/a?z.*</span><br><span class="line"></span><br><span class="line">如何检查自己写的ignore规则是否对</span><br><span class="line"></span><br><span class="line">git check-ignore [-v] &#123;文件或目录路径&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h3 id="分支操作"><a class="markdownIt-Anchor" href="#分支操作"></a> 分支操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git branch -a  查看所有分支</span><br><span class="line">git branch dev  创建分支</span><br><span class="line">git checkout dev 切换分支</span><br><span class="line">git branch -d dev 删除分支</span><br><span class="line">git branch -m 旧名称 新名称 重命名分支</span><br><span class="line">git checkout -b dev 创建并切换分支</span><br><span class="line">git merge dev 合并分支  切换到主分支上,然后再合并子分支,将dev合并到当前分支</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地分支推送到远程</span></span><br><span class="line">git push origin --all</span><br><span class="line">git push origin 分支名</span><br><span class="line">git push origin -d 分支名  删除远端分支</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>修改分支名称</code>:<a href="https://blog.jiabh.cn/2021/rename-branch-from-main-to-master/#:~:text=%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%EF%BC%9A-,%E5%9C%A8GitHub%E4%B8%8A%E5%B0%86%E9%BB%98%E8%AE%A4%E5%88%86%E6%94%AF%E4%BF%AE%E6%94%B9%E4%B8%BA%20master,%E4%BA%86%E9%BB%98%E8%AE%A4%E5%88%86%E6%94%AF%E7%9A%84%E4%BF%AE%E6%94%B9%E3%80%82">参考</a></p><hr /><h3 id="merge-合并"><a class="markdownIt-Anchor" href="#merge-合并"></a> Merge 合并</h3><p><code>修改之前尽量先pull一下</code></p><ul><li>远程仓库已更新,本地没pull,直接修改,之后push,会显示push失败,会提示git pull.</li><li>在git pull之后,</li><li><ol><li>可能会有自动合并,auto-merging, 修改同一文件不同位置</li></ol></li><li><ol start="2"><li>需要手动合并,此时解决冲突需要和冲突者商量,合并时会新建一个临时分支</li></ol></li><li>,修改之后重新提交,add commit push,修改同一文件同一位置</li><li><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;HEAD  冲突开始</code></li><li><code>=============== 不同的内容分隔符</code></li><li><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;冲突结束</code></li></ul><hr /><h3 id="版本回退"><a class="markdownIt-Anchor" href="#版本回退"></a> 版本回退</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 整个文件夹回退</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看历史记录,这个说明commit里面的说明一定要写详细,只会显示当前提交之前的版本</span></span><br><span class="line">git  <span class="built_in">log</span> --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回退到某一个版本,后面提交的就看不到了</span></span><br><span class="line">git reset --hard 输入版本号</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看从现在到最新的commit id</span></span><br><span class="line">git reflog </span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到最新的版本</span></span><br><span class="line">git reset --hard commit <span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单个文件回退,提交修正</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对错误文件修正,提交时漏交文件,提交信息修正,长开发中小提交过多</span></span><br><span class="line"><span class="comment"># 修正之后不会在log中显示</span></span><br><span class="line">git commit --amend -m <span class="string">&quot;提交说明&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h3 id="文件恢复"><a class="markdownIt-Anchor" href="#文件恢复"></a> 文件恢复</h3><ol><li><p>修改或删除之后,没有add</p><ul><li>git checkout 文件名</li><li>会还原成上一次add的文件</li></ul></li><li><p>修改或删除之后,add了,但没有commit</p><ul><li>git checkout commit_id 文件名</li></ul></li><li><p>修改或删除之后,已commit</p><ul><li>git checkout commit_id 文件名</li></ul></li></ol><p><img src="https://image.yayan.xyz/1695030753653.png" alt="" /></p><hr /><h3 id="查看日志"><a class="markdownIt-Anchor" href="#查看日志"></a> 查看日志</h3><p><code>普通日志</code><br /><img src="https://image.yayan.xyz/1695086367249.png" alt="" /></p><p><code>引用日志</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目的最后一根稻草</span></span><br><span class="line"><span class="comment"># 本地日志,不会上传到远端,会把文件回退修正的记录也列出来</span></span><br><span class="line">git reflog</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h3 id="标签管理"><a class="markdownIt-Anchor" href="#标签管理"></a> 标签管理</h3><p><img src="https://image.yayan.xyz/1695087977610.png" alt="" /></p><p>发行: 在github上create a new release</p><h3 id="fork"><a class="markdownIt-Anchor" href="#fork"></a> fork</h3><p>复制别人的仓库<br />然后克隆到本地<br />修改提交…<br />向原仓库发生和并请求,contribute,open a pull request<br />等待原始仓库同意合并</p><hr /><h3 id="本地库与远程库进行关联"><a class="markdownIt-Anchor" href="#本地库与远程库进行关联"></a> 本地库与远程库进行关联</h3><ol><li>github新建仓库</li><li>本地git init初始化</li><li>git remote add origin https://  关联远程</li><li>git push -u origin 分支名称</li><li>如果添加第二个远程仓库,修改origin为一个新的</li><li>*git remote 参数,设置远程仓库的信息  -h查看命令帮助</li><li>git remote -v 查看仓库</li><li>git push 远端库名称 分支名称</li></ol><hr /><h3 id="github仓库美化"><a class="markdownIt-Anchor" href="#github仓库美化"></a> github仓库美化</h3><p><img src="https://github-stats.ubrong.com/api?username=gladdduck&amp;show_icons=true&amp;theme=tokyonight" alt="GitHub账户信息统计" /></p><p><img src="https://github-stats.ubrong.com/api/top-langs/?username=gladdduck&amp;layout=compact&amp;theme=tokyonight" alt="GitHub账户最常用语言" /></p><p><img src="https://github-stats.ubrong.com/api/pin/?username=gladdduck&amp;repo=HotelManagement&amp;theme=dark" alt="GitHub仓库信息卡片" /></p><p><img src="https://profile-counter.glitch.me/%7Bgladdduck%7D/count.svg" alt="Visitor Count" /></p><p><img src="https://stats.justsong.cn/api/github?username=gladdduck&amp;theme=dark&amp;lang=zh-CN" alt="github统计" /></p><p><img src="https://stats.justsong.cn/api/csdn?id=weixin_44151595&amp;theme=dark&amp;lang=zh-CN" alt="CSDN统计" /></p><p><img src="https://stats.justsong.cn/api/bilibili/?id=384115063&amp;theme=dark&amp;lang=zh-CN" alt="B站统计" /></p><p><img src="https://badgen.net/badge/php/8.1/orange?icon=php" alt="tip" /></p><p><img src="https://badgen.net/badge/python/3.1.6/green?icon=packagephobia" alt="tip" /></p><p><a href="https://badgen.net/">图标修改</a></p><hr /><h3 id="流程-2"><a class="markdownIt-Anchor" href="#流程-2"></a> 流程</h3><p>git发布流程<br />分支合并发布流程：<br />git add .# 将所有新增、修改或删除的文件添加到暂存区<br />git commit -m “版本发布” # 将暂存区的文件发版<br />git status # 查看是否还有文件没有发布上去<br />git checkout test# 切换到要合并的分支<br />git pull# 在test 分支上拉取最新代码，避免冲突<br />git merge dev   # 在test 分支上合并 dev 分支上的代码<br />git push# 上传test分支代码</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;😍😍😍&lt;/p&gt;
&lt;h3 id=&quot;流程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#流程&quot;&gt;&lt;/a&gt; 流程&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://image.yayan.xyz/1694228618814.png&quot; alt=&quot;</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Git" scheme="https://gladdduck.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>AcWing算法基础课</title>
    <link href="https://gladdduck.github.io/2023/06/04/AcWing%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE,/"/>
    <id>https://gladdduck.github.io/2023/06/04/AcWing%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE,/</id>
    <published>2023-06-04T14:26:33.383Z</published>
    <updated>2023-06-09T06:10:38.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础算法"><a class="markdownIt-Anchor" href="#基础算法"></a> 基础算法</h2><h4 id="快速排序"><a class="markdownIt-Anchor" href="#快速排序"></a> 快速排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">lst,start,end</span>):</span><br><span class="line">    <span class="comment"># 边界条件</span></span><br><span class="line">    <span class="keyword">if</span> start&gt;=end:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 选择哨兵点</span></span><br><span class="line">    standby=lst[(start+end)&gt;&gt;<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 左右指针</span></span><br><span class="line">    left=start-<span class="number">1</span></span><br><span class="line">    right=end+<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left&lt;right:</span><br><span class="line">        left+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> lst[left]&lt;standby:</span><br><span class="line">            left+=<span class="number">1</span></span><br><span class="line">        right-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> lst[right]&gt;standby:</span><br><span class="line">            right-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> left&lt;right:</span><br><span class="line">            lst[left],lst[right]=lst[right],lst[left]</span><br><span class="line">    <span class="comment"># if j-l+1&gt;=m:</span></span><br><span class="line">    <span class="comment">#     return quick_sort(nums,l,j,m)</span></span><br><span class="line">    <span class="comment"># else:</span></span><br><span class="line">    <span class="comment">#     return quick_sort(nums,j+1,r,m-(j-l+1))</span></span><br><span class="line">    quick_sort(lst,start,right)</span><br><span class="line">    quick_sort(lst,right+<span class="number">1</span>,end)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">nums=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.read().split()))</span><br><span class="line">quick_sort(nums,<span class="number">0</span>,<span class="built_in">len</span>(nums)-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="built_in">print</span>(item,end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="选择排序"><a class="markdownIt-Anchor" href="#选择排序"></a> 选择排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">lst=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">a,b</span>):</span><br><span class="line">    lena=<span class="built_in">len</span>(a)</span><br><span class="line">    lenb=<span class="built_in">len</span>(b)</span><br><span class="line">    i=j=<span class="number">0</span></span><br><span class="line">    c=[]</span><br><span class="line">    <span class="keyword">while</span> i&lt;lena <span class="keyword">and</span> j&lt;lenb:</span><br><span class="line">        <span class="keyword">if</span> a[i]&lt;b[j]:</span><br><span class="line">            c.append(a[i])</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          <span class="comment"># ans+=len(l)-i</span></span><br><span class="line">            c.append(b[j])</span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i==lena:</span><br><span class="line">        c.extend(b[j:])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        c.extend(a[i:])</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sort</span>(<span class="params">nums</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums)&lt;=<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line">    mid=<span class="built_in">len</span>(nums)&gt;&gt;<span class="number">1</span></span><br><span class="line">    l=sort(nums[:mid])</span><br><span class="line">    r=sort(nums[mid:])</span><br><span class="line">    <span class="keyword">return</span> merge(l,r)</span><br><span class="line"></span><br><span class="line">ret=sort(lst)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ret:</span><br><span class="line">    <span class="built_in">print</span>(item,end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="二分"><a class="markdownIt-Anchor" href="#二分"></a> 二分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">lst=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    q=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    l=<span class="number">0</span></span><br><span class="line">    r=n-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> l&lt;r:</span><br><span class="line">        mid=(l+r)&gt;&gt;<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> lst[mid]&gt;=q:</span><br><span class="line">            r=mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l=mid+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> lst[l]!=q:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-1 -1&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(l,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        l=<span class="number">0</span></span><br><span class="line">        r=n-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;r:</span><br><span class="line">            mid=(r+l+<span class="number">1</span>)&gt;&gt;<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span>  lst[mid]&gt;q:</span><br><span class="line">                r=mid-<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l=mid</span><br><span class="line">        <span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># --------</span></span><br><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line">n,m=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">lst=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    q=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    l=bisect.bisect_left(lst,q)</span><br><span class="line">    r=bisect.bisect_right(lst,q)</span><br><span class="line">    <span class="keyword">if</span> l&gt;=n <span class="keyword">or</span> r&lt;=<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-1 -1&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> r!=<span class="number">0</span> <span class="keyword">and</span> lst[r-<span class="number">1</span>]!=q:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-1 -1&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r-=<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;l&#125;</span> <span class="subst">&#123;r&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="前缀和"><a class="markdownIt-Anchor" href="#前缀和"></a> 前缀和</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="差分"><a class="markdownIt-Anchor" href="#差分"></a> 差分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">nums=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">diff=[<span class="number">0</span>]*(n+<span class="number">1</span>)</span><br><span class="line">diff[<span class="number">0</span>]=nums[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">    diff[i]=nums[i]-nums[i-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a,b,c=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    diff[a-<span class="number">1</span>]+=c</span><br><span class="line">    diff[b]-=c</span><br><span class="line">temp=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    temp+=diff[i]</span><br><span class="line">    <span class="built_in">print</span>(temp,end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="双指针"><a class="markdownIt-Anchor" href="#双指针"></a> 双指针</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="位运算"><a class="markdownIt-Anchor" href="#位运算"></a> 位运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="离散化"><a class="markdownIt-Anchor" href="#离散化"></a> 离散化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">all</span>=<span class="built_in">set</span>()</span><br><span class="line">add=[]</span><br><span class="line">query=[]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    x,c=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    <span class="built_in">all</span>.add(x)</span><br><span class="line">    add.append((x,c))</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    l,r=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    <span class="built_in">all</span>.add(l)</span><br><span class="line">    <span class="built_in">all</span>.add(r)</span><br><span class="line">    query.append((l,r))</span><br><span class="line">  </span><br><span class="line"><span class="built_in">all</span>=<span class="built_in">sorted</span>(<span class="built_in">all</span>)</span><br><span class="line">nums=[<span class="number">0</span>]*<span class="built_in">len</span>(<span class="built_in">all</span>)</span><br><span class="line">nums2index=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i,x <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">all</span>):</span><br><span class="line">    nums2index[x]=i</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> add:</span><br><span class="line">    nums[nums2index[k]]+=v</span><br><span class="line"></span><br><span class="line">sums=[<span class="number">0</span>]*(<span class="built_in">len</span>(<span class="built_in">all</span>)+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">    sums[i+<span class="number">1</span>]=sums[i]+nums[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> l,r <span class="keyword">in</span> query:</span><br><span class="line">    indexl=nums2index[l]</span><br><span class="line">    indexr=nums2index[r]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(sums[indexr+<span class="number">1</span>]-sums[indexl])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="区间和并"><a class="markdownIt-Anchor" href="#区间和并"></a> 区间和并</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">nums=[]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a,b=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">    nums.append((a,b))</span><br><span class="line">nums=<span class="built_in">sorted</span>(nums)</span><br><span class="line">left,right=nums[<span class="number">0</span>][<span class="number">0</span>],nums[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">ans=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">    a,b=nums[i][<span class="number">0</span>],nums[i][<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> a&lt;=right:</span><br><span class="line">        right=<span class="built_in">max</span>(b,right)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ans+=<span class="number">1</span></span><br><span class="line">        left,right=a,b</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><h2 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h2><h4 id="单链表"><a class="markdownIt-Anchor" href="#单链表"></a> 单链表</h4><h4 id="双链表"><a class="markdownIt-Anchor" href="#双链表"></a> 双链表</h4><h4 id="栈"><a class="markdownIt-Anchor" href="#栈"></a> 栈</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">num_stack=[]</span><br><span class="line">op_stack=[]</span><br><span class="line">pro=&#123;<span class="string">&#x27;+&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;-&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;*&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;/&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eval</span>():</span><br><span class="line">    b=num_stack.pop()</span><br><span class="line">    a=num_stack.pop()</span><br><span class="line">    op=op_stack.pop()</span><br><span class="line">    <span class="keyword">if</span> op==<span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">        num_stack.append(a+b)</span><br><span class="line">    <span class="keyword">elif</span> op==<span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">        num_stack.append(a-b)</span><br><span class="line">    <span class="keyword">elif</span> op==<span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">        num_stack.append(a*b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        num_stack.append(<span class="built_in">int</span>(a/b))</span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="built_in">len</span>(s):</span><br><span class="line">    <span class="keyword">if</span> s[i].isdigit():</span><br><span class="line">        temp=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(s) <span class="keyword">and</span> s[i].isdigit():</span><br><span class="line">            temp=temp*<span class="number">10</span>+<span class="built_in">int</span>(s[i])</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        num_stack.append(temp)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> s[i]==<span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">        op_stack.append(<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> s[i]==<span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> op_stack[-<span class="number">1</span>]!=<span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            <span class="built_in">eval</span>()</span><br><span class="line">        op_stack.pop()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">while</span> op_stack <span class="keyword">and</span> op_stack[-<span class="number">1</span>]!=<span class="string">&#x27;(&#x27;</span> <span class="keyword">and</span> pro[s[i]]&lt;=pro[op_stack[-<span class="number">1</span>]]:</span><br><span class="line">            <span class="built_in">eval</span>()</span><br><span class="line">        op_stack.append(s[i])</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> op_stack:</span><br><span class="line">    <span class="built_in">eval</span>()</span><br><span class="line"><span class="built_in">print</span>(num_stack[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h4 id="队列"><a class="markdownIt-Anchor" href="#队列"></a> 队列</h4><h4 id="单调栈"><a class="markdownIt-Anchor" href="#单调栈"></a> 单调栈</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">lst=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stack=[lst[<span class="number">0</span>]]</span><br><span class="line">ans=[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(lst)):</span><br><span class="line">    <span class="keyword">while</span> stack <span class="keyword">and</span> stack[-<span class="number">1</span>]&gt;=lst[i]:</span><br><span class="line">        stack.pop()</span><br><span class="line">    ans.append(stack[-<span class="number">1</span>] <span class="keyword">if</span> stack <span class="keyword">else</span> -<span class="number">1</span>)</span><br><span class="line">    stack.append(lst[i])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="单调队列"><a class="markdownIt-Anchor" href="#单调队列"></a> 单调队列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">n,k=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">lst=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">ans=[]</span><br><span class="line">dq=deque()</span><br><span class="line">ans2=[]</span><br><span class="line">dq2=deque()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">while</span> (dq <span class="keyword">and</span> lst[dq[-<span class="number">1</span>]]&lt;lst[i]):</span><br><span class="line">        dq.pop()</span><br><span class="line">    <span class="keyword">while</span> dq <span class="keyword">and</span> i-dq[<span class="number">0</span>]&gt;=k:</span><br><span class="line">        dq.popleft()</span><br><span class="line">    dq.append(i)</span><br><span class="line">    ans.append(lst[dq[<span class="number">0</span>]])</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">while</span> (dq2 <span class="keyword">and</span> lst[dq2[-<span class="number">1</span>]]&gt;lst[i]):</span><br><span class="line">        dq2.pop()</span><br><span class="line">    <span class="keyword">while</span> dq2 <span class="keyword">and</span> i-dq2[<span class="number">0</span>]&gt;=k:</span><br><span class="line">        dq2.popleft()</span><br><span class="line">    dq2.append(i)</span><br><span class="line">    ans2.append(lst[dq2[<span class="number">0</span>]])</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ans2[k-<span class="number">1</span>:]:</span><br><span class="line">    <span class="built_in">print</span>(item ,end=<span class="string">&#x27; &#x27;</span>)   </span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ans[k-<span class="number">1</span>:]:</span><br><span class="line">    <span class="built_in">print</span>(item ,end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="tire"><a class="markdownIt-Anchor" href="#tire"></a> Tire</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">lst=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">tire=[[<span class="number">0</span>]*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3000000</span>)]</span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">x</span>):</span><br><span class="line">    p=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        t=(x&gt;&gt;i)&amp;<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tire[p][t]:</span><br><span class="line">            <span class="keyword">global</span> count</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">            tire[p][t]=count</span><br><span class="line">        p=tire[p][t]</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">x</span>):</span><br><span class="line">    p=<span class="number">0</span></span><br><span class="line">    res=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        t=(x&gt;&gt;i)&amp;<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> tire[p][<span class="keyword">not</span> t]:</span><br><span class="line">            res+=(<span class="number">1</span>&lt;&lt;i)</span><br><span class="line">            p=tire[p][<span class="keyword">not</span> t]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p=tire[p][t]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">ans=-<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">    insert(i)</span><br><span class="line">    ans=<span class="built_in">max</span>(ans,find(i))</span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="并查集"><a class="markdownIt-Anchor" href="#并查集"></a> 并查集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">size=[<span class="number">1</span>]*(n+<span class="number">1</span>)</span><br><span class="line">p=[i <span class="keyword">for</span> i  <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x!=p[x]:</span><br><span class="line">        p[x]=find(p[x])</span><br><span class="line">    <span class="keyword">return</span> p[x]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">a,b</span>):</span><br><span class="line">    fa=find(a)</span><br><span class="line">    fb=find(b)</span><br><span class="line">    p[fa]=fb</span><br><span class="line">    size[fb]+=size[fa]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    inp=<span class="built_in">input</span>().split()</span><br><span class="line">    q=inp[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> q==<span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">        a,b=<span class="built_in">int</span>(inp[<span class="number">1</span>]),<span class="built_in">int</span>(inp[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">if</span> find(a)!=find(b):</span><br><span class="line">            merge(a,b)</span><br><span class="line">    <span class="keyword">elif</span> q==<span class="string">&#x27;Q1&#x27;</span>:</span><br><span class="line">        a,b=<span class="built_in">int</span>(inp[<span class="number">1</span>]),<span class="built_in">int</span>(inp[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">if</span> find(a)==find(b):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Yes&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;No&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a=<span class="built_in">int</span>(inp[<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">print</span>(size[find(a)])</span><br></pre></td></tr></table></figure><h4 id="堆"><a class="markdownIt-Anchor" href="#堆"></a> 堆</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="哈希表"><a class="markdownIt-Anchor" href="#哈希表"></a> 哈希表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">N=<span class="number">100010</span></span><br><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">h=[<span class="number">0</span>]*N</span><br><span class="line">p=[<span class="number">0</span>]*N</span><br><span class="line">seed=<span class="number">131</span></span><br><span class="line">Q=<span class="number">1</span>&lt;&lt;<span class="number">64</span></span><br><span class="line">s=<span class="string">&#x27; &#x27;</span>+<span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">l,r</span>):</span><br><span class="line">    <span class="keyword">return</span> (h[r]-h[l-<span class="number">1</span>]*p[r-l+<span class="number">1</span>])%Q</span><br><span class="line">  </span><br><span class="line">p[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    p[i]=(p[i-<span class="number">1</span>]*seed)%Q</span><br><span class="line">    h[i]=(h[i-<span class="number">1</span>]*seed+<span class="built_in">ord</span>(s[i]))%Q</span><br><span class="line">  </span><br><span class="line"><span class="keyword">while</span> m:</span><br><span class="line">    m-=<span class="number">1</span></span><br><span class="line">    a,b,x,y=<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">    <span class="keyword">if</span> get(a,b)==get(x,y):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Yes&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="搜索与图论"><a class="markdownIt-Anchor" href="#搜索与图论"></a> 搜索与图论</h2><h4 id="深搜广搜"><a class="markdownIt-Anchor" href="#深搜广搜"></a> 深搜&amp;广搜</h4><h4 id="拓扑排序"><a class="markdownIt-Anchor" href="#拓扑排序"></a> 拓扑排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict,deque</span><br><span class="line">graph=defaultdict(<span class="built_in">list</span>)</span><br><span class="line">degr=[<span class="number">0</span>]*(n+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a,b=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    graph[a].append(b)</span><br><span class="line">    degr[b]+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">topsort</span>():</span><br><span class="line">    ans=[]</span><br><span class="line">    dq=deque()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> degr[i]==<span class="number">0</span>:</span><br><span class="line">            dq.append(i)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span> dq:</span><br><span class="line">        cur = dq.pop()</span><br><span class="line">        ans.append(cur)</span><br><span class="line">        <span class="keyword">for</span> neigh <span class="keyword">in</span> graph.get(cur,[]):</span><br><span class="line">            degr[neigh]-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> degr[neigh]==<span class="number">0</span>:</span><br><span class="line">                dq.append(neigh)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> ans <span class="keyword">if</span> <span class="built_in">len</span>(ans)==n <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">ans=topsort()</span><br><span class="line"><span class="keyword">if</span> ans:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        <span class="built_in">print</span>(i,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="dijkstra"><a class="markdownIt-Anchor" href="#dijkstra"></a> dijkstra</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line">n,m=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">graph=[[-<span class="number">1</span>]*(n+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a,b,c=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">    graph[a-<span class="number">1</span>][b-<span class="number">1</span>]=c <span class="keyword">if</span> graph[a-<span class="number">1</span>][b-<span class="number">1</span>]==-<span class="number">1</span> <span class="keyword">else</span> <span class="built_in">min</span>(graph[a-<span class="number">1</span>][b-<span class="number">1</span>],c)</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dijkstra</span>():</span><br><span class="line"></span><br><span class="line">    dis=[<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)]*(n)</span><br><span class="line">    dis[<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line">    visited=<span class="built_in">set</span>()</span><br><span class="line">    min_heap=[(<span class="number">0</span>,<span class="number">0</span>)]</span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 依次确定n个点的距离</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="comment"># 没有可达的点了</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(min_heap)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 未确定点最近的一个</span></span><br><span class="line">        _,min_index=heapq.heappop(min_heap)</span><br><span class="line">        visited.add(min_index)</span><br><span class="line">        <span class="comment"># 寻找邻居</span></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="comment"># 可达且未访问</span></span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> visited <span class="keyword">and</span> graph[min_index][v]&gt;<span class="number">0</span>:</span><br><span class="line">                new_dis=dis[min_index]+graph[min_index][v]</span><br><span class="line">                <span class="comment"># 更新</span></span><br><span class="line">                <span class="keyword">if</span> dis[v]&gt;new_dis:</span><br><span class="line">                    dis[v]=new_dis</span><br><span class="line">                    heapq.heappush(min_heap,(dis[v],v))</span><br><span class="line">    <span class="keyword">return</span> dis</span><br><span class="line">d=dijkstra()</span><br><span class="line"><span class="built_in">print</span>(d[n-<span class="number">1</span>] <span class="keyword">if</span> d[n-<span class="number">1</span>]!=<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">else</span> -<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">graph=defaultdict(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a,b,c=<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">    graph[a-<span class="number">1</span>].append((b-<span class="number">1</span>,c))</span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dijkstra</span>():</span><br><span class="line"></span><br><span class="line">    dis=[<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)]*n</span><br><span class="line">    dis[<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line">    visit=<span class="built_in">set</span>()</span><br><span class="line">  </span><br><span class="line">    min_heap=[(<span class="number">0</span>,<span class="number">0</span>)]</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(min_heap):</span><br><span class="line">        _,node=heapq.heappop(min_heap)</span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">in</span> visit:<span class="keyword">continue</span></span><br><span class="line">        visit.add(node)</span><br><span class="line">        <span class="keyword">for</span> v,d <span class="keyword">in</span> graph.get(node,[]):</span><br><span class="line">            new_dis=dis[node]+d</span><br><span class="line">            <span class="keyword">if</span> dis[v]&gt;new_dis:</span><br><span class="line">                dis[v]=new_dis</span><br><span class="line">                heapq.heappush(min_heap,(dis[v],v))</span><br><span class="line">    <span class="keyword">return</span> dis</span><br><span class="line">d=dijkstra()</span><br><span class="line"><span class="built_in">print</span>(d[n-<span class="number">1</span>] <span class="keyword">if</span> d[n-<span class="number">1</span>]!=<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">else</span> -<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="bellman-ford"><a class="markdownIt-Anchor" href="#bellman-ford"></a> bellman-ford</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">n,m,k=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">graph=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a,b,c=<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">    graph.append((a,b,c))</span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bellmen_ford</span>():</span><br><span class="line">    dis=[<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)]*(n+<span class="number">1</span>)</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span></span><br><span class="line">    backup=[]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        backup=dis.copy()</span><br><span class="line">        <span class="keyword">for</span> a,b,c <span class="keyword">in</span> graph:</span><br><span class="line">            dis[b]=<span class="built_in">min</span>(backup[a]+c,dis[b])</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">float</span>(dis[n])&gt;<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)/<span class="number">2</span> <span class="keyword">or</span> dis[n]==<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;impossible&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> dis[n]</span><br><span class="line">ans=bellmen_ford()</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><h4 id="spfa"><a class="markdownIt-Anchor" href="#spfa"></a> spfa</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict,deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">graph=defaultdict(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a,b,c=<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">    graph[a].append((b,c))</span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">spfa</span>():</span><br><span class="line">    dist = [<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * (n+<span class="number">1</span>)</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>  </span><br><span class="line">    visited = [<span class="number">0</span>] * (n+<span class="number">1</span>)</span><br><span class="line">    q=deque()</span><br><span class="line">    q.append(<span class="number">1</span>)</span><br><span class="line">    visited[<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        cur=q.popleft()</span><br><span class="line">        visited[cur]=<span class="number">0</span></span><br><span class="line">      </span><br><span class="line">        <span class="keyword">for</span> b,c <span class="keyword">in</span> graph.get(cur,[]):</span><br><span class="line">            <span class="keyword">if</span> dist[b]&gt;dist[cur]+c:</span><br><span class="line">                dist[b]=dist[cur]+c</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span>  visited[b]:</span><br><span class="line">                    visited[b]=<span class="number">1</span></span><br><span class="line">                    q.append(b)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dist[n] <span class="keyword">if</span> dist[n]!=<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">else</span> <span class="string">&#x27;impossible&#x27;</span></span><br><span class="line">ans=spfa()</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><h4 id="floyd"><a class="markdownIt-Anchor" href="#floyd"></a> floyd</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">n,m,k=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">dist = [[<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * (n+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a,b,c=<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">    dist[a][b]=<span class="built_in">min</span>(c,dist[a][b])</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>):</span><br><span class="line">    dist[i][i]=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">floyd</span>():</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">                dist[i][j]=<span class="built_in">min</span>(dist[i][j],dist[i][k]+dist[k][j])</span><br><span class="line"></span><br><span class="line">ans=floyd()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">    a,b=<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;impossible&#x27;</span> <span class="keyword">if</span> dist[a][b]==<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">else</span> dist[a][b])</span><br></pre></td></tr></table></figure><h4 id="prime"><a class="markdownIt-Anchor" href="#prime"></a> prime</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">INF=<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">graph = [[INF] * (n+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a,b,c=<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">    graph[b][a]=<span class="built_in">min</span>(c,graph[b][a])</span><br><span class="line">    graph[a][b]=graph[b][a]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>):</span><br><span class="line">    graph[i][i]=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prime</span>():</span><br><span class="line">    dist= [INF] * (n+<span class="number">1</span>)</span><br><span class="line">    visit= [<span class="literal">False</span>] * (n+<span class="number">1</span>)</span><br><span class="line">    res=<span class="number">0</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        t=-<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j  <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> visit[j] <span class="keyword">and</span> (t==-<span class="number">1</span> <span class="keyword">or</span> dist[t]&gt;dist[j] ):</span><br><span class="line">                t=j</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">and</span> dist[t]==INF:<span class="keyword">return</span> INF</span><br><span class="line">        <span class="keyword">if</span> i:res+=dist[t]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">            dist[j]=<span class="built_in">min</span>(dist[j],graph[t][j])</span><br><span class="line">      </span><br><span class="line">        visit[t]=<span class="literal">True</span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">ans=prime()</span><br><span class="line"><span class="built_in">print</span>(ans <span class="keyword">if</span> ans!=INF <span class="keyword">else</span> <span class="string">&#x27;impossible&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="kruskal"><a class="markdownIt-Anchor" href="#kruskal"></a> kruskal</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">INF=<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">graph = []</span><br><span class="line">p = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a,b,c=<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">    graph.append((c,a,b))</span><br><span class="line">    </span><br><span class="line">graph=<span class="built_in">sorted</span>(graph)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> p[x]!=x:</span><br><span class="line">        p[x]=find(p[x])</span><br><span class="line">    <span class="keyword">return</span> p[x]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">kruskal</span>():</span><br><span class="line">    res=<span class="number">0</span></span><br><span class="line">    cnt=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> w,a,b <span class="keyword">in</span> graph:</span><br><span class="line">        a=find(a)</span><br><span class="line">        b=find(b)</span><br><span class="line">        <span class="keyword">if</span> a!=b:</span><br><span class="line">            p[a]=b</span><br><span class="line">            cnt+=<span class="number">1</span></span><br><span class="line">            res+=w</span><br><span class="line">    <span class="keyword">return</span> INF <span class="keyword">if</span> cnt&lt;n-<span class="number">1</span> <span class="keyword">else</span> res</span><br><span class="line"></span><br><span class="line">ans=kruskal()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ans <span class="keyword">if</span> ans!=INF <span class="keyword">else</span> <span class="string">&#x27;impossible&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数学知识"><a class="markdownIt-Anchor" href="#数学知识"></a> 数学知识</h2><h4 id="筛质数"><a class="markdownIt-Anchor" href="#筛质数"></a> 筛质数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_prime</span>(<span class="params">n</span>):</span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line">    isprime=[<span class="number">1</span>]*(n+<span class="number">1</span>)</span><br><span class="line">    isprime[<span class="number">0</span>]=isprime[<span class="number">1</span>]=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> isprime[i]:</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> j*i&gt;n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            isprime[i*j]=<span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"><span class="comment"># 埃式筛法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_prime2</span>(<span class="params">n</span>):</span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line">    isprime=[<span class="number">1</span>]*(n+<span class="number">1</span>)</span><br><span class="line">    isprime[<span class="number">0</span>]=isprime[<span class="number">1</span>]=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> isprime[i]:</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> j*i&gt;n:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                isprime[i*j]=<span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"><span class="comment"># 线性筛法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_prime3</span>(<span class="params">n</span>):</span><br><span class="line"></span><br><span class="line">    nums=[<span class="number">1</span>]*(n+<span class="number">1</span>)</span><br><span class="line">    isprime=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> nums[i]:</span><br><span class="line">            isprime.append(i)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(isprime)):</span><br><span class="line">            <span class="keyword">if</span> i*isprime[j]&gt;n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            nums[i*isprime[j]]=<span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> i%isprime[j]==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(isprime)</span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(get_prime3(n))</span><br></pre></td></tr></table></figure><h4 id="约数"><a class="markdownIt-Anchor" href="#约数"></a> 约数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a <span class="keyword">if</span> b==<span class="number">0</span> <span class="keyword">else</span> gcd(b,a%b)</span><br></pre></td></tr></table></figure><p><code>约数定理</code></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mo>∏</mo><msubsup><mi>p</mi><mi>i</mi><msub><mi>a</mi><mi>i</mi></msub></msubsup><mo>=</mo><msubsup><mi>p</mi><mn>1</mn><msub><mi>a</mi><mn>1</mn></msub></msubsup><mo>∗</mo><msubsup><mi>p</mi><mn>2</mn><msub><mi>a</mi><mn>2</mn></msub></msubsup><mo>∗</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>∗</mo><msubsup><mi>p</mi><mi>k</mi><msub><mi>a</mi><mi>k</mi></msub></msubsup></mrow><annotation encoding="application/x-tex">n=\prod p_i^{a_i}= p_1^{a_1}* p_2^{a_2}*...*p_k^{a_k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.026864em;vertical-align:-0.276864em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0126em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0126em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0533599999999999em;vertical-align:-0.3013079999999999em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7520519999999999em;"><span style="top:-2.3986920000000005em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.1506600000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3013079999999999em;"><span></span></span></span></span></span></span></span></span></span></p><p>约数个数:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mo>∏</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>∗</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mi>k</mi></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)=\prod (a_i+1)= (a_1+1)*(a_2+1)*...*(a_k+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p>约数和:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">(</mo><msubsup><mi>p</mi><mn>1</mn><mn>0</mn></msubsup><mo>+</mo><msubsup><mi>p</mi><mn>1</mn><mn>1</mn></msubsup><mo>+</mo><msubsup><mi>p</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><mo>⋯</mo><msubsup><mi>p</mi><mn>1</mn><msub><mi>a</mi><mn>1</mn></msub></msubsup><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><msubsup><mi>p</mi><mn>2</mn><mn>0</mn></msubsup><mo>+</mo><msubsup><mi>p</mi><mn>2</mn><mn>1</mn></msubsup><mo>+</mo><msubsup><mi>p</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><mo>⋯</mo><msubsup><mi>p</mi><mn>2</mn><msub><mi>a</mi><mn>2</mn></msub></msubsup><mo fence="true">)</mo></mrow><mo>⋯</mo><mrow><mo fence="true">(</mo><msubsup><mi>p</mi><mi>k</mi><mn>0</mn></msubsup><mo>+</mo><msubsup><mi>p</mi><mi>k</mi><mn>1</mn></msubsup><mo>+</mo><msubsup><mi>p</mi><mi>k</mi><mn>2</mn></msubsup><mo>+</mo><mo>⋯</mo><msubsup><mi>p</mi><mi>k</mi><msub><mi>a</mi><mi>k</mi></msub></msubsup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\sigma(n)=\left(p_{1}^{0}+p_{1}^{1}+p_{1}^{2}+\cdots p_{1}^{a_{1}}\right)\left(p_{2}^{0}+p_{2}^{1}+p_{2}^{2}+\cdots p_{2}^{a_{2}}\right) \cdots\left(p_{k}^{0}+p_{k}^{1}+p_{k}^{2}+\cdots p_{k}^{a_{k}}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831079999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831079999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831079999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7520519999999999em;"><span style="top:-2.3986920000000005em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.1506600000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3013079999999999em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span></p><p>互质个数:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi><mo>×</mo><mfrac><mrow><msub><mi>p</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn></mrow><msub><mi>p</mi><mn>1</mn></msub></mfrac><mo>×</mo><mfrac><mrow><msub><mi>p</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn></mrow><msub><mi>p</mi><mn>2</mn></msub></mfrac><mo>×</mo><mo>…</mo><mo>×</mo><mfrac><mrow><msub><mi>p</mi><mi>k</mi></msub><mo>−</mo><mn>1</mn></mrow><msub><mi>p</mi><mi>k</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">\phi(n)=n \times \frac{p_{1}-1}{p_{1}} \times \frac{p_{2}-1}{p_{2}} \times \ldots \times \frac{p_{k}-1}{p_{k}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.378324em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.897216em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.378324em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.897216em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.378324em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.897216em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 约数个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 约数之和</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1~n中与n互质的数的个数(欧拉函数)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="欧拉函数"><a class="markdownIt-Anchor" href="#欧拉函数"></a> 欧拉函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 筛法求欧拉函数</span></span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">oula</span>():</span><br><span class="line">    nums=[<span class="number">1</span>]*(n+<span class="number">1</span>)</span><br><span class="line">    oula=[<span class="number">0</span>]*(n+<span class="number">1</span>)</span><br><span class="line">    oula[<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line">    prime=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> nums[i]:</span><br><span class="line">            prime.append(i)</span><br><span class="line">            oula[i]=i-<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(prime)):</span><br><span class="line">            <span class="keyword">if</span> i*prime[j]&gt;n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            nums[i*prime[j]]=<span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> i%prime[j]==<span class="number">0</span>:</span><br><span class="line">                oula[i*prime[j]]=oula[i]*prime[j]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            oula[i*prime[j]]=oula[i]*(prime[j]-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(oula)</span><br><span class="line"><span class="built_in">print</span>(oula())</span><br></pre></td></tr></table></figure><h4 id="快速幂"><a class="markdownIt-Anchor" href="#快速幂"></a> 快速幂</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a,b,c=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">    ans=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        <span class="keyword">if</span> b&amp;<span class="number">1</span>:</span><br><span class="line">            ans*=a</span><br><span class="line">            ans%=c</span><br><span class="line">        a*=a</span><br><span class="line">        a%=c</span><br><span class="line">        b//=<span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(ans))</span><br></pre></td></tr></table></figure><h4 id="求组合数"><a class="markdownIt-Anchor" href="#求组合数"></a> 求组合数</h4><table><thead><tr><th>数据量</th><th>数据范围</th><th>方法</th><th>复杂度</th></tr></thead><tbody><tr><td>十万</td><td>1&lt;=b&lt;=a&lt;=2000</td><td>递推</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">N^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></td></tr><tr><td>一万</td><td>1&lt;=b&lt;=a&lt;=<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></td><td>预处理打表</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">NlogN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></td></tr><tr><td>二十</td><td>1&lt;=b&lt;=a&lt;=<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>1</mn></msup><mn>8</mn></mrow><annotation encoding="application/x-tex">10^18</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mord">8</span></span></span></span></td><td>卢卡斯定理(Lucas)</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>p</mi></msub><mi>m</mi></mrow><annotation encoding="application/x-tex">Plog_pm</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathnormal">m</span></span></span></span></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1&lt;=b&lt;=a&lt;=2000</span></span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">MOD=<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span></span><br><span class="line">C=[[<span class="number">0</span>]*(<span class="number">2005</span>+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2005</span>+<span class="number">1</span>)]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2005</span>+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> j==<span class="number">0</span>:</span><br><span class="line">                C[i][j]=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                C[i][j]=(C[i-<span class="number">1</span>][j]+C[i-<span class="number">1</span>][j-<span class="number">1</span>])%MOD</span><br><span class="line">init()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a,b=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    <span class="built_in">print</span>(C[a][b])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1&lt;=b&lt;=a&lt;=$10^5$</span></span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">MOD=<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span></span><br><span class="line">N=<span class="number">100010</span></span><br><span class="line">fact=[<span class="number">0</span>]*(N)</span><br><span class="line">infact=[<span class="number">0</span>]*N</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qmi</span>(<span class="params">a,b,m</span>):</span><br><span class="line">    res=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> b :</span><br><span class="line">        <span class="keyword">if</span> b&amp;<span class="number">1</span>:</span><br><span class="line">            res=(res*a)%MOD</span><br><span class="line">        a=(a*a)%MOD</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    fact[<span class="number">0</span>]=infact[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,N):</span><br><span class="line">        fact[i]=(fact[i-<span class="number">1</span>]*i)%MOD</span><br><span class="line">        infact[i]=infact[i-<span class="number">1</span>]*qmi(i,MOD-<span class="number">2</span>,MOD)%MOD</span><br><span class="line"></span><br><span class="line">init()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a,b=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    <span class="built_in">print</span>(fact[a]*infact[a-b]%MOD*infact[b]%MOD)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1&lt;=b&lt;=a&lt;=$10^18$</span></span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">p=<span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qmi</span>(<span class="params">x,q</span>):</span><br><span class="line">    res=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        <span class="keyword">if</span> q&amp;<span class="number">1</span>:</span><br><span class="line">            res=res*x%p</span><br><span class="line">        x=(x*x)%p</span><br><span class="line">        q&gt;&gt;=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">C</span>(<span class="params">a,b</span>):</span><br><span class="line">    res=<span class="number">1</span></span><br><span class="line">    i=<span class="number">1</span></span><br><span class="line">    j=a</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,b+<span class="number">1</span>):</span><br><span class="line">        res=(res*j)%p</span><br><span class="line">        res=(res*qmi(i,p-<span class="number">2</span>))%p</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">        j-=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lucas</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">if</span> a&lt;p <span class="keyword">and</span> b&lt;p:</span><br><span class="line">        <span class="keyword">return</span> C(a,b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> C(a%p,b%p)*lucas(a//p,b//p)%p</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a,b,p=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    <span class="built_in">print</span>(lucas(a,b))</span><br></pre></td></tr></table></figure><h4 id="容斥原理"><a class="markdownIt-Anchor" href="#容斥原理"></a> 容斥原理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">lst=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">res=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1</span>&lt;&lt;m):</span><br><span class="line">    t=<span class="number">1</span></span><br><span class="line">    s=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">if</span> num&gt;&gt;i&amp;<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> t*lst[i]&gt;n:</span><br><span class="line">                t=-<span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            s+=<span class="number">1</span></span><br><span class="line">            t*=lst[i]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> t!=-<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> s&amp;<span class="number">1</span>:</span><br><span class="line">            res+=(n//t)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res-=(n//t)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h4 id="博弈论"><a class="markdownIt-Anchor" href="#博弈论"></a> 博弈论</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">count=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">m=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">store=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">memory=[-<span class="number">1</span>]*<span class="number">10005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sg</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> memory[x]!=-<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> memory[x]</span><br><span class="line">    mex=<span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> count:</span><br><span class="line">        <span class="keyword">if</span> x&gt;=i:</span><br><span class="line">            mex.add(sg(x-i))</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> mex:</span><br><span class="line">            memory[x]=i</span><br><span class="line">            <span class="keyword">return</span> memory[x]</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">res=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> store:</span><br><span class="line">    res^=sg(num)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Yes&#x27;</span> <span class="keyword">if</span> res <span class="keyword">else</span> <span class="string">&#x27;No&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a class="markdownIt-Anchor" href="#动态规划"></a> 动态规划</h2><h4 id="0-1背包"><a class="markdownIt-Anchor" href="#0-1背包"></a> 0-1背包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">weight=[<span class="number">0</span>]</span><br><span class="line">value=[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a,b=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    weight.append(a)</span><br><span class="line">    value.append(b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dp1</span>():</span><br><span class="line">    dp=[[<span class="number">0</span>]*<span class="number">1005</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1005</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">            dp[i][j]=dp[i-<span class="number">1</span>][j]</span><br><span class="line">            <span class="keyword">if</span> j&gt;=weight[i]:</span><br><span class="line">                dp[i][j]=<span class="built_in">max</span>(dp[i-<span class="number">1</span>][j],dp[i-<span class="number">1</span>][j-weight[i]]+value[i])</span><br><span class="line">    <span class="built_in">print</span>(dp[n][m])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dp2</span>():</span><br><span class="line">    dp=[<span class="number">0</span>]*<span class="number">1005</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> j&gt;=weight[i]:</span><br><span class="line">                dp[j]=<span class="built_in">max</span>(dp[j],dp[j-weight[i]]+value[i])</span><br><span class="line">    <span class="built_in">print</span>(dp[m])</span><br><span class="line">dp2()</span><br></pre></td></tr></table></figure><h4 id="完全背包"><a class="markdownIt-Anchor" href="#完全背包"></a> 完全背包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">weight=[<span class="number">0</span>]</span><br><span class="line">value=[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a,b=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    weight.append(a)</span><br><span class="line">    value.append(b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dp1</span>():</span><br><span class="line">    dp=[[<span class="number">0</span>]*<span class="number">1005</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1005</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">            dp[i][j]=dp[i-<span class="number">1</span>][j]</span><br><span class="line">            <span class="keyword">if</span> j&gt;=weight[i]:</span><br><span class="line">                <span class="comment"># dp[i][j]=max(dp[i-1][j],dp[i-1][j-weight[i]]+value[i],dp[i][j-weight[i]]+value[i])</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># dp[i][j]=max(dp[i-1][j],dp[i-1][j-weight]+value,dp[i-1][j-2*weight]+2*value,...)</span></span><br><span class="line">                <span class="comment"># dp[i][j-weight]=max(dp[i-1][j-weight],dp[i-1][j-2*weight]+value,dp[i-1][j-3*weight]+2*value,...)</span></span><br><span class="line">                <span class="comment"># dp[i][j]=max(dp[i-1][j],dp[i][j-weight]+value)</span></span><br><span class="line">                dp[i][j]=<span class="built_in">max</span>(dp[i-<span class="number">1</span>][j],dp[i][j-weight[i]]+value[i])</span><br><span class="line">    <span class="built_in">print</span>(dp[n][m])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dp2</span>():</span><br><span class="line">    dp=[<span class="number">0</span>]*<span class="number">1005</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> j&gt;=weight[i]:</span><br><span class="line">                dp[j]=<span class="built_in">max</span>(dp[j],dp[j-weight[i]]+value[i])</span><br><span class="line">    <span class="built_in">print</span>(dp[m])</span><br><span class="line">dp2()</span><br></pre></td></tr></table></figure><h4 id="多重背包"><a class="markdownIt-Anchor" href="#多重背包"></a> 多重背包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">weight=[<span class="number">0</span>]</span><br><span class="line">value=[<span class="number">0</span>]</span><br><span class="line">nums=[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a,b,c=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    weight.append(a)</span><br><span class="line">    value.append(b)</span><br><span class="line">    nums.append(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dp1</span>():</span><br><span class="line">    dp=[[<span class="number">0</span>]*<span class="number">1005</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1005</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">            dp[i][j]=dp[i-<span class="number">1</span>][j]</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(nums[i]+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> j&lt;k*weight[i]:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                dp[i][j]=<span class="built_in">max</span>(dp[i][j],dp[i-<span class="number">1</span>][j-k*weight[i]]+k*value[i])</span><br><span class="line"></span><br><span class="line">                <span class="comment"># dp[i][j]=max(dp[i-1][j],dp[i-1][j-weight]+value,dp[i-1][j-2*weight]+2*value,...)</span></span><br><span class="line">                <span class="comment"># dp[i][j-weight]=max(dp[i-1][j-weight],dp[i-1][j-2*weight]+value,dp[i-1][j-3*weight]+2*value,...)</span></span><br><span class="line">                <span class="comment"># dp[i][j]=max(dp[i-1][j],dp[i][j-weight]+value)</span></span><br><span class="line">                <span class="comment"># dp[i][j]=max(dp[i-1][j],dp[i][j-weight[i]]+value[i])</span></span><br><span class="line">    <span class="built_in">print</span>(dp[n][m])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dp2</span>():</span><br><span class="line">    dp=[<span class="number">0</span>]*<span class="number">1005</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(nums[i]+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> j&lt;k*weight[i]:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                dp[j]=<span class="built_in">max</span>(dp[j],dp[j-k*weight[i]]+k*value[i])</span><br><span class="line">    <span class="built_in">print</span>(dp[m])</span><br><span class="line">dp2()</span><br></pre></td></tr></table></figure><h4 id="分组背包"><a class="markdownIt-Anchor" href="#分组背包"></a> 分组背包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">weight=defaultdict(<span class="built_in">list</span>)</span><br><span class="line">value=defaultdict(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1</span>+n):</span><br><span class="line">    nums=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(nums):</span><br><span class="line">        a,b=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">        weight[i].append(a)</span><br><span class="line">        value[i].append(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dp1</span>():</span><br><span class="line">    dp=[[<span class="number">0</span>]*<span class="number">105</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10005</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1</span>+n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">            dp[i][j]=dp[i-<span class="number">1</span>][j]</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(weight[i])):</span><br><span class="line">                <span class="keyword">if</span> j&gt;=weight[i][k]:</span><br><span class="line"></span><br><span class="line">                    dp[i][j]=<span class="built_in">max</span>(dp[i][j],dp[i-<span class="number">1</span>][j-weight[i][k]]+value[i][k])</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(dp[n][m])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dp2</span>():</span><br><span class="line">    dp=[<span class="number">0</span>]*<span class="number">10005</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(weight[i])):</span><br><span class="line">                <span class="keyword">if</span> j&gt;=weight[i][k]:</span><br><span class="line">                    dp[j]=<span class="built_in">max</span>(dp[j],dp[j-weight[i][k]]+value[i][k])</span><br><span class="line">    <span class="built_in">print</span>(dp[m])</span><br><span class="line">dp2()</span><br></pre></td></tr></table></figure><h4 id="最长递增子序列"><a class="markdownIt-Anchor" href="#最长递增子序列"></a> 最长递增子序列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">nums=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">dp=[<span class="number">0</span>]*n</span><br><span class="line">ans=<span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    dp[i]=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">        <span class="keyword">if</span> nums[j]&lt;nums[i]:</span><br><span class="line">            dp[i]=<span class="built_in">max</span>(dp[i],dp[j]+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    ans=<span class="built_in">max</span>(ans,dp[i])</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"><span class="comment"># ----------</span></span><br><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">nums=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">INF=<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">length=[INF]*(n+<span class="number">1</span>)</span><br><span class="line">ans=<span class="number">1</span></span><br><span class="line">length[<span class="number">0</span>]=-INF</span><br><span class="line"><span class="keyword">for</span> index,num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">    i=bisect.bisect_left(length,num)</span><br><span class="line">    length[i]=num</span><br><span class="line">    ans=<span class="built_in">max</span>(ans,i)</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><h4 id="最长公共子序列"><a class="markdownIt-Anchor" href="#最长公共子序列"></a> 最长公共子序列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">s=<span class="string">&#x27; &#x27;</span>+<span class="built_in">input</span>()</span><br><span class="line">t=<span class="string">&quot; &quot;</span>+<span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">dp=[[<span class="number">0</span>]*(m+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,m+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> s[i]==t[j]:</span><br><span class="line">            dp[i][j]=dp[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dp[i][j]=<span class="built_in">max</span>(dp[i-<span class="number">1</span>][j],dp[i][j-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(dp[n][m]) </span><br></pre></td></tr></table></figure><h4 id="最短编辑距离"><a class="markdownIt-Anchor" href="#最短编辑距离"></a> 最短编辑距离</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">s=<span class="string">&#x27; &#x27;</span>+<span class="built_in">input</span>()</span><br><span class="line">m=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">t=<span class="string">&quot; &quot;</span>+<span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">dp=[[<span class="number">0</span>]*(m+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>):</span><br><span class="line">    dp[i][<span class="number">0</span>]=i</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">    dp[<span class="number">0</span>][j]=j</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,m+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> s[i]==t[j]:</span><br><span class="line">            dp[i][j]=<span class="built_in">min</span>(dp[i-<span class="number">1</span>][j-<span class="number">1</span>],dp[i-<span class="number">1</span>][j]+<span class="number">1</span>,dp[i][j-<span class="number">1</span>]+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dp[i][j]=<span class="built_in">min</span>(dp[i-<span class="number">1</span>][j-<span class="number">1</span>],dp[i-<span class="number">1</span>][j],dp[i][j-<span class="number">1</span>])+<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(dp[n][m])</span><br></pre></td></tr></table></figure><h2 id="贪心"><a class="markdownIt-Anchor" href="#贪心"></a> 贪心</h2><h4 id="区间覆盖"><a class="markdownIt-Anchor" href="#区间覆盖"></a> 区间覆盖</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">s,t=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">pair=[]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a,b=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    <span class="keyword">if</span> a&gt;t <span class="keyword">or</span> b&lt;s:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    pair.append([a,b])</span><br><span class="line"></span><br><span class="line">pair=<span class="built_in">sorted</span>(pair)</span><br><span class="line">start=s</span><br><span class="line">end=<span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line">count=<span class="number">1</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> end&lt;t <span class="keyword">and</span> i &lt;<span class="built_in">len</span>(pair):</span><br><span class="line">    a,b=pair[i]</span><br><span class="line">    <span class="keyword">if</span> a&lt;=start:</span><br><span class="line">        end=<span class="built_in">max</span>(end,b)</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> a&gt;start:</span><br><span class="line">        <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        start=end</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> end&gt;=t:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> a&gt;end:</span><br><span class="line">            end=<span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(count <span class="keyword">if</span> end&gt;=t <span class="keyword">else</span> -<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="区间分组"><a class="markdownIt-Anchor" href="#区间分组"></a> 区间分组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">pair=[]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    pair.append(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())))</span><br><span class="line">pair=<span class="built_in">sorted</span>(pair)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line">count=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pair)):</span><br><span class="line">    a,b=pair[i]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(count)==<span class="number">0</span> <span class="keyword">or</span> a&lt;=count[<span class="number">0</span>]:</span><br><span class="line">        heapq.heappush(count,b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        heapq.heappop(count)</span><br><span class="line">        heapq.heappush(count,b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(count))</span><br></pre></td></tr></table></figure><h4 id="最大不相交区间"><a class="markdownIt-Anchor" href="#最大不相交区间"></a> 最大不相交区间</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">pair=[]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line"></span><br><span class="line">    pair.append(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())))</span><br><span class="line"></span><br><span class="line">pair=<span class="built_in">sorted</span>(pair,key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">start=pair[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">end=pair[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">count=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(pair)):</span><br><span class="line">    a,b=pair[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> a&lt;=end <span class="keyword">and</span> b&gt;end:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> a&lt;=end <span class="keyword">and</span> b&lt;=end:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> a&gt;end:</span><br><span class="line">        start=a</span><br><span class="line">        end=b</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure><h4 id="区间选点"><a class="markdownIt-Anchor" href="#区间选点"></a> 区间选点</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">pair=[]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line"></span><br><span class="line">    pair.append(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())))</span><br><span class="line"></span><br><span class="line">pair=<span class="built_in">sorted</span>(pair)</span><br><span class="line"></span><br><span class="line">start=pair[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">end=pair[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">count=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(pair)):</span><br><span class="line">    a,b=pair[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> a&lt;=end <span class="keyword">and</span> b&gt;end:</span><br><span class="line">        start=a</span><br><span class="line">    <span class="keyword">elif</span> a&lt;=end <span class="keyword">and</span> b&lt;=end:</span><br><span class="line">        start=a</span><br><span class="line">        end=b</span><br><span class="line">    <span class="keyword">elif</span> a&gt;end:</span><br><span class="line">        start=a</span><br><span class="line">        end=b</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure><h4 id="哈夫曼树"><a class="markdownIt-Anchor" href="#哈夫曼树"></a> 哈夫曼树</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">nums=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line">heapq.heapify(nums)</span><br><span class="line"></span><br><span class="line">ans=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">    a=heapq.heappop(nums)</span><br><span class="line">    b=heapq.heappop(nums)</span><br><span class="line">    ans+=(a+b)</span><br><span class="line">    heapq.heappush(nums,a+b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><h4 id="耍杂技的牛"><a class="markdownIt-Anchor" href="#耍杂技的牛"></a> 耍杂技的牛</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">pair=[]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a,b=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">    pair.append((a,b))</span><br><span class="line">pair=<span class="built_in">sorted</span>(pair,key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>]+x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ans=<span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line">weight=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pair)):</span><br><span class="line">    temp=weight-pair[i][<span class="number">1</span>]</span><br><span class="line">    ans=<span class="built_in">max</span>(ans,temp)</span><br><span class="line">    weight+=pair[i][<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础算法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础算法&quot;&gt;&lt;/a&gt; 基础算法&lt;/h2&gt;
&lt;h4 id=&quot;快速排序&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#快速排序&quot;&gt;&lt;/a&gt; 快速排序&lt;/h4</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="算法刷题笔记" scheme="https://gladdduck.github.io/tags/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2023目标检测CCF-C会议</title>
    <link href="https://gladdduck.github.io/2023/06/03/%E5%9E%83%E5%9C%BE%E6%A3%80%E6%B5%8B%E4%BC%9A%E8%AE%AE/"/>
    <id>https://gladdduck.github.io/2023/06/03/%E5%9E%83%E5%9C%BE%E6%A3%80%E6%B5%8B%E4%BC%9A%E8%AE%AE/</id>
    <published>2023-06-03T07:02:51.042Z</published>
    <updated>2023-11-26T04:44:16.828Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://wikicfp.com/cfp/">call for paper</a></p><p>ASIG 2023 7.15<br />Asia Symposium on Image and Graphics</p><p>ICCPR 2023 7.05<br />International Conference on Computing and Pattern Recognition</p><p>ICGIP 2023  6.25<br />International Conference on Graphics and Image Processing</p><p>ISVC 2023  7.20<br />International Symposium on Visual Computing</p><p>ICMV 2023 7.05<br />International Conference on Machine Vision</p><p>ICTAI 2023 6.25  -CCFC<br />International Conference on Tools with Artificial Intelligence</p><p>ICVISP 2023 7.15<br />International Conference on Vision, Image and Signal Processing</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://wikicfp.com/cfp/&quot;&gt;call for paper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASIG 2023 7.15&lt;br /&gt;
Asia Symposium on Image and Graphics&lt;/p&gt;
&lt;p&gt;ICCPR 2023 7</summary>
      
    
    
    
    <category term="论文记录" scheme="https://gladdduck.github.io/categories/%E8%AE%BA%E6%96%87%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="目标检测会议" scheme="https://gladdduck.github.io/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E4%BC%9A%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>垃圾检测相关论文</title>
    <link href="https://gladdduck.github.io/2023/04/15/%E5%9E%83%E5%9C%BE%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/"/>
    <id>https://gladdduck.github.io/2023/04/15/%E5%9E%83%E5%9C%BE%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/</id>
    <published>2023-04-15T08:51:40.893Z</published>
    <updated>2023-11-13T07:05:38.024Z</updated>
    
    <content type="html"><![CDATA[<p><strong>数据增强、改进Backbone、改进FPN、改进检测头、改进loss、改进后处理</strong></p><h2 id="基础网络"><a class="markdownIt-Anchor" href="#基础网络"></a> 基础网络</h2><h3 id="r-cnn"><a class="markdownIt-Anchor" href="#r-cnn"></a> R-CNN</h3><p><a href="https://www.bilibili.com/video/BV1CZ4y1a7NP/?spm_id_from=333.999.0.0&amp;vd_source=602787b9249cd70cfca4def5e041f060">B 站论文</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 之前都是人工提取特征,用机器学习分类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把人工提取特征改成CNN提取特征</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 三个模块</span></span><br><span class="line"><span class="comment"># 1.候选区域生成(Selective search)(2000个)(统一大小)</span></span><br><span class="line"><span class="comment"># 2.特征抽取(扩展16个像素)(AlexNet)</span></span><br><span class="line"><span class="comment"># 3.分类,框回归</span></span><br></pre></td></tr></table></figure><h3 id="sppnet"><a class="markdownIt-Anchor" href="#sppnet"></a> SPPnet</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用CNN提取整个图的特征，把候选区域映射到特征图上</span></span><br><span class="line"><span class="comment"># 最后用空间金字塔(三个层)，一个动态池化层，对候选区域特征图得到固定大小的输出特征，拼接在一起</span></span><br><span class="line"><span class="comment"># 还是用svm分类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不能很好的更新cnn权重</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/W1995S/article/details/118028384">FPN,ASFF,PANet,NASFPN,BiFPN结构</a></p><h3 id="fpn"><a class="markdownIt-Anchor" href="#fpn"></a> FPN</h3><p><code>1612</code></p><p><img src="https://image.yayan.xyz/20230331104242.png" alt="" /></p><h3 id="panet"><a class="markdownIt-Anchor" href="#panet"></a> PANet</h3><p><code>1803:FPN是自上而下,首次提出了自下而上</code><br /><img src="https://image.yayan.xyz/20230331104133.png" alt="" /></p><h3 id="cspnet"><a class="markdownIt-Anchor" href="#cspnet"></a> CSPnet</h3><p><code>梯度分流,减少计算量和内存</code><br /><img src="https://image.yayan.xyz/20230425170230.png" alt="" /></p><h3 id="spp"><a class="markdownIt-Anchor" href="#spp"></a> SPP</h3><p><code>1406</code></p><p><img src="https://image.yayan.xyz/20230331103844.png" alt="" /></p><h3 id="sppf"><a class="markdownIt-Anchor" href="#sppf"></a> SPPF</h3><p><img src="https://image.yayan.xyz/20230331152040.png" alt="" /></p><h3 id="fast-r-cnn"><a class="markdownIt-Anchor" href="#fast-r-cnn"></a> Fast R-CNN</h3><p><a href="https://www.bilibili.com/video/BV1y94y1Q7QJ/?spm_id_from=333.999.0.0&amp;vd_source=602787b9249cd70cfca4def5e041f060">B 站论文</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 针对R-CNN和SPPnet</span></span><br><span class="line"><span class="comment"># 多阶段模型,不同的模块都要分别训练</span></span><br><span class="line"><span class="comment"># 要把提取到的特征存到磁盘里，再给分类器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单阶段，不用存特征</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用CNN得到整张图片的特征</span></span><br><span class="line"><span class="comment"># 根据候选区域在图片上的位置（输入坐标），利用ROI投影获得候选区域在特征图上的特征</span></span><br><span class="line"><span class="comment"># 用ROI池化层（空间金字塔特殊情况，一个层）把候选区域特征转为固定大小的特征图</span></span><br><span class="line"><span class="comment"># 两个并行全连接层，分类、预测坐标</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他验证性实验 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试阶段输入图像和候选区域坐标</span></span><br><span class="line"><span class="comment"># 候选区域建议是单独的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="faster-r-cnn"><a class="markdownIt-Anchor" href="#faster-r-cnn"></a> Faster R-CNN</h3><p><a href="https://www.bilibili.com/video/BV1y94y1Q7QJ/?spm_id_from=333.999.0.0&amp;vd_source=602787b9249cd70cfca4def5e041f060">B 站论文</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Fast R-CNN还是需要单独的模块生成候选区域投影</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决候选区域选择的问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RPNs和特征提取层 共享卷积层</span></span><br><span class="line"><span class="comment"># 用n*n的滑动窗口在特征图上提取，传给small network 判断是否能生成候选区域</span></span><br><span class="line"><span class="comment"># 使用三个尺度（128，256，512 1:1,1:2,2:1，九个框）生成k个anchor boxes，（根据数据集设置框的大小），非极大值抑制</span></span><br><span class="line"><span class="comment"># 与标注狂IOU值最大，与标注框IOU值大于0.7  分给正标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交替训练</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.yayan.xyz/20230315150418.png" alt="" /><br /><img src="https://image.yayan.xyz/20230315150330.png" alt="" /></p><h3 id="mask-r-cnn"><a class="markdownIt-Anchor" href="#mask-r-cnn"></a> Mask R-CNN</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Faster R-CNN的RoI Pooling 是直接取整,会导致实例偏移,对于像素级  不可取</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把候选区域的特征图转换为固定大小的ROI feature时 也会取整</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 两次误差</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 骨干网络换成ResNet-FPN</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mask R-CNN使用双线性插值解决缩放的问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加MASK 分支,三路并行,MASK head两种实现 1.ResNet  2.ResNet+FPN 变成K*M*M </span></span><br><span class="line"><span class="comment"># K*M*M 大小,K个类别</span></span><br><span class="line"><span class="comment"># 与FCN方法是不同，FCN是对每个像素进行多类别softmax分类，然后计算交叉熵损失，这种做法是会造成类间竞争的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="论文"><a class="markdownIt-Anchor" href="#论文"></a> 论文</h2><h3 id="analysis-of-object-detection-performance-based-on-faster-rcnn"><a class="markdownIt-Anchor" href="#analysis-of-object-detection-performance-based-on-faster-rcnn"></a> Analysis of Object Detection Performance Based on Faster RCNN</h3><p><code>基于Faster R-CNN的目标检测性能分析</code></p><p><code>介绍了R-CNN-&gt;Fast R-CNN-&gt; Faster R-CNN的变化过程</code><br /><code>Faster R-CNN的大概结构</code></p><p><code>对比三个模型在不同数据集上的效果</code></p><h3 id="end-to-end-object-detection-with-transformers"><a class="markdownIt-Anchor" href="#end-to-end-object-detection-with-transformers"></a> End-to-End Object Detection with Transformers</h3><p><code>里程碑:端到端的方法,不用非极大值抑制</code><br /><code>变成集合预测问题</code><br /><code>CNN抽取特征－＞送入Transformer学习全局特征-&gt;输出100个框-&gt;二分图loss匹配真实框-&gt;计算loss</code></p><p><code>问题:小目标,训练epoch长</code></p><h3 id="efficientdet-scalable-and-efficient-object-detection"><a class="markdownIt-Anchor" href="#efficientdet-scalable-and-efficient-object-detection"></a> EfficientDet: Scalable and Efficient Object Detection</h3><p><img src="https://image.yayan.xyz/20230317135128.png" alt="" /></p><p><code>新的结构,多层特征融合</code></p><h3 id="deformable-detr-deformable-transformers-for-end-to-end-object-detection"><a class="markdownIt-Anchor" href="#deformable-detr-deformable-transformers-for-end-to-end-object-detection"></a> Deformable DETR: Deformable Transformers for End-to-End Object Detection</h3><p><code>解决DETR的两个问题</code><br /><img src="http://image.yayan.xyz/20230316214546.png" alt="" /><br /><img src="http://image.yayan.xyz/20230316215004.png" alt="" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.不用TRansformer原有的自注意力,改为可变注意力(可变卷积变来的)</span><br><span class="line">一个像素向量z根据偏移量选择四个其他像素,然后一层Liner得到权重,和选出的像素进行运算更新</span><br><span class="line"></span><br><span class="line">2.多尺度的注意力机制(Mulit-Scale),不同尺度的特征图上做,多头可变注意力机制,然后相加</span><br></pre></td></tr></table></figure><h3 id="deep-learning-based-waste-detection-in-natural-and-urban-environments"><a class="markdownIt-Anchor" href="#deep-learning-based-waste-detection-in-natural-and-urban-environments"></a> ★Deep learning-based waste detection in natural and urban environments</h3><p><code>传统图像分类网络:ResNet,DenseNet,EfficientNet,EfficientNet-B2,EfficientNetv2</code></p><p><code>经典目标检测网络:R-CNN,Fast R-CNN ,Faster R-CNN,SSD,Yolo,DETR,Deformable DETR,EfficientDet</code></p><p><code>垃圾数据集</code></p><p><img src="https://image.yayan.xyz/20230316155331.png" alt="" /></p><p><code>对所有数据集进行处理</code></p><p><code>对比模型:Efficentdet, DETR和Mask RCNN，发现Efficentdet能产生最高的mAP</code></p><p><code>一个目标检测网络EfficientDet-D2,一个图像分类网络EfficientNet-B2</code></p><p><code>训练步骤:分开训练,先训练目标检测网络,再训练图像分类网络</code></p><p><code>问题:小目标,推理时间</code></p><h3 id="garbage-object-detection-method-based-on-improved-faster-r-cnn"><a class="markdownIt-Anchor" href="#garbage-object-detection-method-based-on-improved-faster-r-cnn"></a> Garbage object detection method based on improved Faster R-CNN</h3><p><code>对Faster R-CNN进行了两点改进:</code></p><p><code>1.基础网络从VGG16改成了ResNet50</code></p><p><code>2.增加了FPN特征金字塔</code></p><p><code>3.将原本的ROI改成ROI Align(Mask R-CNN)</code></p><p><code>4.修改了RPN结构参数</code></p><h3 id="基于改进-faster-rcnn-的垃圾检测与分类方法"><a class="markdownIt-Anchor" href="#基于改进-faster-rcnn-的垃圾检测与分类方法"></a> 基于改进 Faster R⁃CNN 的垃圾检测与分类方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把Faster R-CNN 的网络换成了ResNet50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把非极大值抑制（NMS）换成了Soft-NMS</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比实验把VGG16的7*7 5*5 换成了叠加的3*3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 五折交叉验证</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用FasterR-CNN相同的交替训练训练</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 73-&gt;81%</span></span><br></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mi>M</mi><mi>S</mi><mo>:</mo><mn>0</mn><mo separator="true">,</mo><mi>I</mi><mi>o</mi><mi>U</mi><mo stretchy="false">(</mo><mi>M</mi><mo separator="true">,</mo><msub><mi>b</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>≥</mo><msub><mi>N</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">NMS:0,IoU(M,b_i) \geq N_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>o</mi><mi>f</mi><mi>t</mi><mo>−</mo><mi>N</mi><mi>M</mi><mi>S</mi><mo>:</mo><msub><mi>s</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>I</mi><mi>o</mi><mi>U</mi><mo stretchy="false">(</mo><mi>M</mi><mo separator="true">,</mo><msub><mi>b</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>I</mi><mi>o</mi><mi>U</mi><mo stretchy="false">(</mo><mi>M</mi><mo separator="true">,</mo><msub><mi>b</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>≥</mo><msub><mi>N</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">Soft-NMS:s_i(1-IoU(M,b_i)),IoU(M,b_i) \geq N_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><h3 id="object-detection-for-autonomous-trash-and-litter-collection毕业论文"><a class="markdownIt-Anchor" href="#object-detection-for-autonomous-trash-and-litter-collection毕业论文"></a> Object detection for autonomous trash and litter collection(毕业论文)</h3><p><code>针对垃圾收集机器人,管道方法:从数据收集到预测出结果的一系列</code></p><ol><li>介绍:在机器人上部署最先进的目标检测模型</li><li>背景:深度学习(MLP,CNN,YOLO),目标检测,垃圾检测数据集</li><li>管道方法组成(收集,预处理,增强,训练,验证)</li><li>自己的管道定义与实现(tile数据增强方法,光强归一化,不同模型)</li><li>结果与分析</li><li>Future work</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 根据数据集中物体大小不同使用不同模型,参数</span><br><span class="line"><span class="number">2.</span> 专门为小目标设计一个检测器(Yolo-z)</span><br><span class="line"><span class="number">3.</span> 无监督学习,创建全功能检测器</span><br><span class="line"><span class="number">4.</span> 对图像的不同位置使用不同的检测器</span><br><span class="line"><span class="number">5.</span> 稍微扩大边界框,获取更多上下文信息</span><br><span class="line"><span class="number">6.</span> 利用GAN生成更多的类别均衡数据集</span><br><span class="line"><span class="number">7.</span> 开发减少假阳性数量的方法</span><br><span class="line"><span class="number">8.</span> 集成学习,使用多个较小的模型,加权盒融合</span><br><span class="line"><span class="number">9.</span> 更多的数据增广</span><br><span class="line"><span class="number">10.</span> 统一处理类别不可知的垃圾,避免对垃圾进行分类</span><br></pre></td></tr></table></figure><h3 id="tiny-object-detection-based-on-yolov5"><a class="markdownIt-Anchor" href="#tiny-object-detection-based-on-yolov5"></a> Tiny Object Detection based on YOLOv5</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 生成<span class="number">4</span>幅特征图像进行融合</span><br><span class="line"><span class="number">2.</span> 在Neck部分,使用FPN和PANet对特征进行融合</span><br><span class="line"><span class="number">3.</span> 使用GIoU损失函数替换IoU</span><br><span class="line"><span class="number">4.</span> 用SWISH激活函数替换ReLU</span><br><span class="line"><span class="number">5.</span> 马赛克数据增强和学习率余弦退火</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自己数据集上</span></span><br><span class="line"><span class="comment"># map@50: 45+  =&gt;  55+</span></span><br><span class="line"><span class="comment"># mAP@0.5:0.95 : 25+   =&gt;   30+</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># recall,precision,....</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="yolo-z-improving-small-object-detection-in-yolov5-for-autonomous-vehicles"><a class="markdownIt-Anchor" href="#yolo-z-improving-small-object-detection-in-yolov5-for-autonomous-vehicles"></a> YOLO-Z: Improving small object detection in YOLOv5 for autonomous vehicles</h3><p><code>在自动驾驶领域,对小物体检测和检测速度要求很高</code></p><p><code>很多模型没有修改模型的架构,修改的不痛不痒</code></p><p><img src="https://image.yayan.xyz/20230330170112.png" alt="" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">修改:</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> ResNet50与DenseNet作为主干网络的比较</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> PanNet换成FPN和BiFPN</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 对head部分的输入,将neck不同的特征图送入head(最有效)</span><br><span class="line"></span><br><span class="line">结果分析:</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>DenseNet效果比ResNet好,这可能是由于网络深度不够，无法获得ResNet主干的好处，而DenseNet在保存特征图的细节方面做得很好</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 在小模型上FPN比BiFPN效果好,因为较简单的模型受益于保持特征图相对不变，而其他比例需要额外的步骤来适应添加的特征图处理，并最终优于前者。但都优于传统模型.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 特征图的修改最有效果,因为在头部包含更高分辨率的特征图后，小对象最终会占用更多像素，因此具有更大的影响，而不是在主干的卷积阶段丢失。同样，删除原始较低分辨率的要素特征图会减少所需的处理量，并防止模型抵消较高分辨率贴图提供的细节级别。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 小模型anchor少比较好,大模型多了好,因为更复杂或更深入的模型确实可能受益于额外的锚，或者换句话说，可能更有能力利用额外锚提供的细节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>其他学习率,深度宽度影响,</span><br></pre></td></tr></table></figure><h3 id="accuracy-and-efficiency-comparison-of-object-detection-open-source-models"><a class="markdownIt-Anchor" href="#accuracy-and-efficiency-comparison-of-object-detection-open-source-models"></a> Accuracy and Efficiency Comparison of Object Detection Open-Source Models</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">自己构建的杂草检测数据集,使用多种数据增强方法</span><br><span class="line"></span><br><span class="line">使用EfficientDet,Faster R-CNN,YOLOv5,Detectron2 四个开源模型实验</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.yayan.xyz/20230414103141.png" alt="" /></p><h3 id="the-object-detection-of-underwater-garbage-with-an-improved-yolov5-algorithm"><a class="markdownIt-Anchor" href="#the-object-detection-of-underwater-garbage-with-an-improved-yolov5-algorithm"></a> The Object Detection of Underwater Garbage with an Improved YOLOv5 Algorithm</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用K-means对anchor进行聚类，产生九个新的框大小</span><br><span class="line"></span><br><span class="line">将IoU或者GIoU损失函数改为CIoU损失函数</span><br><span class="line"></span><br><span class="line">没有使用数据增强</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="an-irregularly-dropped-garbage-detection-method-based-on-improved-yolov5s"><a class="markdownIt-Anchor" href="#an-irregularly-dropped-garbage-detection-method-based-on-improved-yolov5s"></a> An Irregularly Dropped Garbage Detection Method Based on Improved YOLOv5s</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CBAM 注意力模块</span><br><span class="line">EIoU Loss</span><br><span class="line">DeepSort 过滤静态物品</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">只选取了小部分垃圾种类</span><br></pre></td></tr></table></figure><h3 id="towards-lightweight-neural-networks-for-garbage-object-detection"><a class="markdownIt-Anchor" href="#towards-lightweight-neural-networks-for-garbage-object-detection"></a> Towards Lightweight Neural Networks for Garbage Object Detection</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Yolov3</span><br><span class="line">用DarkNet53做分类器</span><br><span class="line"></span><br><span class="line">Yolov4的backbone是CSPDarkNet53</span><br><span class="line">对CSPResNet优化得到DCSPResNet</span><br><span class="line">对结构进行替换</span><br><span class="line"></span><br><span class="line">轻量型Yolov4 的1/10 的参数</span><br><span class="line">激活函数的修改 SiLU LReLU</span><br><span class="line">DCSPDarkNet+膨胀卷积/膨胀变形卷积</span><br><span class="line">使用膨胀变形卷积对CSPResNet结构进行了改进</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">没有考虑垃圾堆场景</span><br><span class="line">不能在价格较低、性能较低的CPU设备上实时运行</span><br><span class="line">对于目标遮挡和相对少见的目标识别，YOLOG的识别效果较差</span><br></pre></td></tr></table></figure><h3 id="real-time-garbage-object-detection-with-data-augmentation-and-feature-fusion-using-suav-low-altitude-remote-sensing-images"><a class="markdownIt-Anchor" href="#real-time-garbage-object-detection-with-data-augmentation-and-feature-fusion-using-suav-low-altitude-remote-sensing-images"></a> Real-Time Garbage Object Detection With Data Augmentation and Feature Fusion Using SUAV Low-Altitude Remote Sensing Images</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修改Yolov4</span><br><span class="line">使用不同结构</span><br><span class="line">FPN,ASFF,PANet,NASFPN,BiFPN</span><br><span class="line"></span><br><span class="line">加上数据增强</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="yolov5"><a class="markdownIt-Anchor" href="#yolov5"></a> Yolov5</h2><h3 id="yolox"><a class="markdownIt-Anchor" href="#yolox"></a> Yolox</h3><h3 id="yolov3"><a class="markdownIt-Anchor" href="#yolov3"></a> Yolov3</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">提出了Darknet53</span><br><span class="line"></span><br><span class="line">修修补补</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="yolov4"><a class="markdownIt-Anchor" href="#yolov4"></a> Yolov4</h3><p><a href="https://blog.csdn.net/WZZ18191171661/article/details/113765995">Yolov4分析</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">针对input,backbone,neck,head选择不同的结构</span><br><span class="line"></span><br><span class="line">Bag of freebies:在训练时的技巧不影响推测时间</span><br><span class="line">数据增广,损失函数,归一化</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Bag of special:应用到模型中的技巧</span><br><span class="line">特征聚合结构块,注意力机制,激活函数,NMS,骨干网络选择</span><br><span class="line"></span><br><span class="line">检测头继续用yolov3</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="yolov5-2"><a class="markdownIt-Anchor" href="#yolov5-2"></a> Yolov5</h3><p><a href="https://blog.csdn.net/WZZ18191171661/article/details/113789486">yolov5分析</a><br /><img src="https://image.yayan.xyz/20230330184730.png" alt="" /></p><p><img src="https://image.yayan.xyz/20230331152436.png" alt="" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># YOLOv5 v6.0 backbone</span><br><span class="line">backbone:</span><br><span class="line">  # [from, number, module, args]</span><br><span class="line">  [[-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2</span><br><span class="line">   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4</span><br><span class="line">   [-1, 3, C3, [128]],</span><br><span class="line">   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8</span><br><span class="line">   [-1, 6, C3, [256]],</span><br><span class="line">   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16</span><br><span class="line">   [-1, 9, C3, [512]],</span><br><span class="line">   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32</span><br><span class="line">   [-1, 3, C3, [1024]],</span><br><span class="line">   [-1, 1, SPPF, [1024, 5]],  # 9</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"># YOLOv5 v6.0 head</span><br><span class="line">head:</span><br><span class="line">  [[-1, 1, Conv, [512, 1, 1]],</span><br><span class="line">   [-1, 1, nn.Upsample, [None, 2, &#x27;nearest&#x27;]],</span><br><span class="line">   [[-1, 6], 1, Concat, [1]],  # cat backbone P4</span><br><span class="line">   [-1, 3, C3, [512, False]],  # 13</span><br><span class="line"></span><br><span class="line">   [-1, 1, Conv, [256, 1, 1]],</span><br><span class="line">   [-1, 1, nn.Upsample, [None, 2, &#x27;nearest&#x27;]],</span><br><span class="line">   [[-1, 4], 1, Concat, [1]],  # cat backbone P3</span><br><span class="line">   [-1, 3, C3, [256, False]],  # 17 (P3/8-small)</span><br><span class="line"></span><br><span class="line">   [-1, 1, Conv, [256, 3, 2]],</span><br><span class="line">   [[-1, 14], 1, Concat, [1]],  # cat head P4</span><br><span class="line">   [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)</span><br><span class="line"></span><br><span class="line">   [-1, 1, Conv, [512, 3, 2]],</span><br><span class="line">   [[-1, 10], 1, Concat, [1]],  # cat head P5</span><br><span class="line">   [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)</span><br><span class="line"></span><br><span class="line">   [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)</span><br><span class="line">  ]</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="开源复现"><a class="markdownIt-Anchor" href="#开源复现"></a> 开源复现</h2><h3 id="fasterr-cnn"><a class="markdownIt-Anchor" href="#fasterr-cnn"></a> FasterR-CNN</h3><p><a href="https://github.com/chenyuntc/simple-faster-rcnn-pytorch">模型链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 下载到Google Colab</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 安装依赖</span><br><span class="line">!pip install ipdb visdom torchnet fire</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 修改代码</span><br><span class="line">data\voc_dataset.py中的VOC_BBOX_LABEL_NAMES修改成自己类别</span><br><span class="line">utils\vis_tool.py 中的VOC_BBOX_LABEL_NAMES修改成自己类别</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 源代码直接运行会报错</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&#x27;need at least one array to stack&#x27;</span>)</span><br><span class="line">ValueError: need at least one array to stack</span><br><span class="line">因为只训练有物体的图片,</span><br><span class="line">在data\voc_dataset.py</span><br><span class="line"><span class="number">76</span>行替换如下</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">id_list_file = os.path.join(data_dir, &#x27;ImageSets/Main/&#123;0&#125;.txt&#x27;.format(split))</span></span><br><span class="line"><span class="string">id_list_read = [id_.strip() for id_ in open(id_list_file)]</span></span><br><span class="line"><span class="string">id_list = list()</span></span><br><span class="line"><span class="string">for i in id_list_read:</span></span><br><span class="line"><span class="string">  obj = ET.parse(os.path.join(data_dir, &#x27;Annotations&#x27;, i + &#x27;.xml&#x27;))</span></span><br><span class="line"><span class="string">  if obj.findall(&#x27;object&#x27;):</span></span><br><span class="line"><span class="string">    id_list.append(i)</span></span><br><span class="line"><span class="string">self.ids = id_list</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>在Google Colab运行不能可视化会报错</span><br><span class="line">! npm install -g localtunnel</span><br><span class="line">get_ipython().system_raw(<span class="string">&#x27;python3 -m pip install visdom&#x27;</span>)</span><br><span class="line">get_ipython().system_raw(<span class="string">&#x27;python3 -m visdom.server -port 8097 &gt;&gt; visdomlog.txt 2&gt;&amp;1 &amp;&#x27;</span>)</span><br><span class="line">get_ipython().system_raw(<span class="string">&#x27;lt --port 8097 &gt;&gt; url.txt 2&gt;&amp;1 &amp;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">在运行,打开url.txt 查看可视化的窗口</span><br><span class="line"></span><br><span class="line">code_root/</span><br><span class="line">└── data/</span><br><span class="line">    └── VOC2007/</span><br><span class="line">        ├── Annotations/</span><br><span class="line">        ├── JPEGImages/</span><br><span class="line">        └── ImageSets/</span><br><span class="line">        └── Main/</span><br><span class="line">              ├── test.txt</span><br><span class="line">                ├── train.txt</span><br><span class="line">                ├── val.txt</span><br><span class="line">                └── trainval.txt</span><br></pre></td></tr></table></figure><h3 id="efficientdet"><a class="markdownIt-Anchor" href="#efficientdet"></a> EfficientDet</h3><p><a href="https://github.com/rwightman/efficientdet-pytorch">模型链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行环境Google Colab</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>下载到工作区</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>安装依赖</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 代码:effdet\data\parsers\parser_voc.py 文件中的DEFAULT_CLASSES改成自己的类别名称</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>! python ..../efficientdet-pytorch-master/train.py /content --dataset VOC2007 --num-classes 自己的类别 </span><br><span class="line"></span><br><span class="line"><span class="comment"># JPEGImages:所有图片  Annotations:所有xml标注  txt:用作训练测试的文件名,不带后缀</span></span><br><span class="line">code_root/</span><br><span class="line">└── data/</span><br><span class="line">    └── VOC2007/</span><br><span class="line">        ├── Annotations/</span><br><span class="line">        ├── JPEGImages/</span><br><span class="line">        └── ImageSets/</span><br><span class="line">        └── Main/</span><br><span class="line">              ├── test.txt</span><br><span class="line">                ├── train.txt</span><br><span class="line">                ├── val.txt</span><br><span class="line">                └── trainval.txt</span><br></pre></td></tr></table></figure><h3 id="deformable-detr"><a class="markdownIt-Anchor" href="#deformable-detr"></a> Deformable-DETR</h3><p><a href="https://github.com/fundamentalvision/Deformable-DETR">模型链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行环境Google Colab</span></span><br><span class="line"><span class="number">1.</span>下载到工作区</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>安装相关依赖</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>!python ..(绝对路径..)/Deformable-DETR-main/models/ops/setup.py build install (用的jupyter)(可以用ops文件夹下的test.py测试环境是否正确)</span><br><span class="line"></span><br><span class="line"><span class="comment">#错误名称:找不到....h文件</span></span><br><span class="line">如果报错,添加 export CUDA_PATH=/usr/local/cuda-你的版本</span><br><span class="line"><span class="comment"># 错误名</span></span><br><span class="line">吧这一段修改到setup.py里面</span><br><span class="line">extra_compile_args[<span class="string">&quot;nvcc&quot;</span>] = [</span><br><span class="line">            <span class="string">&quot;-DCUDA_HAS_FP16=1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-D__CUDA_NO_HALF_OPERATORS__&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-D__CUDA_NO_HALF_CONVERSIONS__&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-D__CUDA_NO_HALF2_OPERATORS__&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-arch=sm_60&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-gencode=arch=compute_60,code=sm_60&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-gencode=arch=compute_61,code=sm_61&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-gencode=arch=compute_70,code=sm_70&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-gencode=arch=compute_75,code=sm_75&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>代码:...../Deformable-DETR-main/util/misc.py 里面的</span><br><span class="line"><span class="comment"># float(torchvision.__version__[:3]) &lt; 0.5/0.7 </span></span><br><span class="line">需要改动,因为对于<span class="number">0.10</span>.x版本的不适用,自己改成了</span><br><span class="line"><span class="comment"># float(torchvision.__version__[:4]) &lt; 0.05:</span></span><br><span class="line">否则报错cannot <span class="keyword">import</span> name <span class="string">&#x27;_NewEmptyTensorOp&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;torchvision.ops.misc&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>! python ...../Deformable-DETR-main/main.py --coco_path ..../coco </span><br><span class="line"></span><br><span class="line"><span class="comment"># train2017:训练图片  val2017:测试图片   annotations两个文件下面的标注图片</span></span><br><span class="line">code_root/</span><br><span class="line">└── data/</span><br><span class="line">    └── coco/</span><br><span class="line">        ├── train2017/</span><br><span class="line">        ├── val2017/</span><br><span class="line">        └── annotations/</span><br><span class="line">        ├── instances_train2017.json</span><br><span class="line">        └── instances_val2017.json</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="yolov5-3"><a class="markdownIt-Anchor" href="#yolov5-3"></a> YOLOv5</h3><p><a href="https://github.com/ultralytics/yolov5">模型链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行环境Google Colab</span></span><br><span class="line"><span class="number">1.</span>下载到工作区</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>安装相关依赖</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>指定数据路径 运行</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="yolov8"><a class="markdownIt-Anchor" href="#yolov8"></a> YOLOv8</h3><p><a href="https://github.com/ultralytics/ultralytics">模型链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行环境Google Colab</span></span><br><span class="line"><span class="number">1.</span>!pip install ultralytics==<span class="number">8.0</span><span class="number">.20</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>安装相关依赖</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>指定数据路径 运行</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;数据增强、改进Backbone、改进FPN、改进检测头、改进loss、改进后处理&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;基础网络&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础网络&quot;&gt;&lt;/a&gt; 基础网络&lt;/h2&gt;
&lt;h3 </summary>
      
    
    
    
    <category term="论文记录" scheme="https://gladdduck.github.io/categories/%E8%AE%BA%E6%96%87%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="垃圾检测" scheme="https://gladdduck.github.io/tags/%E5%9E%83%E5%9C%BE%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>Involution卷积理解</title>
    <link href="https://gladdduck.github.io/2023/04/11/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    <id>https://gladdduck.github.io/2023/04/11/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</id>
    <published>2023-04-11T12:46:41.871Z</published>
    <updated>2023-11-26T05:18:03.146Z</updated>
    
    <content type="html"><![CDATA[<p>一种介乎CNN和selfAttention之间的操作</p><p>将空间不变性(平移不变性)与通道变换性 交换了</p><h4 id="普通卷积"><a class="markdownIt-Anchor" href="#普通卷积"></a> 普通卷积</h4><p>好处<br />1.不同位置之间重用卷积核,减少参数<br />2.不同通道代表不同含义的信息</p><p>缺点<br />1.通道冗余</p><p>2.卷积的接受范围</p><p>3.不能根据输入自适应卷积核大小</p><h4 id="involution"><a class="markdownIt-Anchor" href="#involution"></a> Involution</h4><p>空间互异,通道不变</p><p>在通道之间共享卷积核,不同位置卷积核不同</p><p>Involution 卷积核大小<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo>×</mo><mi>W</mi><mo>×</mo><mi>K</mi><mo>×</mo><mi>K</mi><mo>×</mo><mi>G</mi></mrow><annotation encoding="application/x-tex">H×W×K×K×G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">G</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">G</span></span></span></span>是group<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>是邻域</p><p>表示:对于HW(核的HW是根据输出特征图大小计算得到)个像素点,每个像素点都有一个K*K大小的卷积核,把C个通道分成G组,组内的通道共享卷积核</p><p><img src="https://image.yayan.xyz/20230413170754.png" alt="" /></p><p>对于一个像素点<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn><mo>×</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">1×1×C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span> -(两层线性变换)&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn><mo>×</mo><msup><mi>K</mi><mn>2</mn></msup><mo>×</mo><mi>G</mi></mrow><annotation encoding="application/x-tex">1×1×K^2×G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">G</span></span></span></span> -(Reshape)&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn><mo>×</mo><mi>K</mi><mo>×</mo><mi>K</mi><mo>×</mo><mi>G</mi></mrow><annotation encoding="application/x-tex">1×1×K×K×G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">G</span></span></span></span> -(注意力机制)&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn><mo>×</mo><mi>K</mi><mo>×</mo><mi>K</mi><mo>×</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">1×1×K×K×C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span> -(聚合)&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn><mo>×</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">1×1×C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p><p><img src="https://image.yayan.xyz/20230413170813.png" alt="" /></p><h4 id="与自注意力的区别"><a class="markdownIt-Anchor" href="#与自注意力的区别"></a> 与自注意力的区别</h4><p>是一种更加简洁通用的自注意力机制</p><p>自注意力公式:<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><mo>=</mo><mi>X</mi><msup><mi>W</mi><mi>Q</mi></msup></mrow><annotation encoding="application/x-tex">Q=XW^Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">Q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">Q</span></span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi><mo>=</mo><mi>X</mi><msup><mi>W</mi><mi>K</mi></msup></mrow><annotation encoding="application/x-tex">K=XW^K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span></span></span></span></span></span></span></span></span></span></span> ,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo>=</mo><mi>X</mi><msup><mi>W</mi><mi>V</mi></msup></mrow><annotation encoding="application/x-tex">V=XW^V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span></span></span></span></span></span></span></span></span></span></span><br /><img src="https://image.yayan.xyz/20230414101940.png" alt="" /></p><p>Involution:<br />通用描述:<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><mi>X</mi><msup><mi>W</mi><mi>Q</mi></msup><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>X</mi><msup><mi>W</mi><mi>K</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H_{i,j}=(XW^Q)(XW^K)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">Q</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p><img src="https://image.yayan.xyz/20230414101953.png" alt="" /></p><p>多头注意力头数&lt;-&gt;通道组数</p><p>相似矩阵:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><mi>K</mi></mrow><annotation encoding="application/x-tex">QK</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">Q</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>&lt;-&gt;核:H</p><p>位置编码&lt;-&gt;生成的核有序的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一种介乎CNN和selfAttention之间的操作&lt;/p&gt;
&lt;p&gt;将空间不变性(平移不变性)与通道变换性 交换了&lt;/p&gt;
&lt;h4 id=&quot;普通卷积&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#普通卷积&quot;&gt;&lt;/a&gt; 普通卷积&lt;/h4&gt;
&lt;p&gt;好</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>AcWing每日一题</title>
    <link href="https://gladdduck.github.io/2023/04/06/AcWing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    <id>https://gladdduck.github.io/2023/04/06/AcWing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</id>
    <published>2023-04-06T11:15:17.545Z</published>
    <updated>2023-04-22T10:51:26.840Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前缀和"><a class="markdownIt-Anchor" href="#前缀和"></a> 前缀和</h3><p>将区间求和求差,改为两个值的运算</p><h3 id="差分"><a class="markdownIt-Anchor" href="#差分"></a> 差分</h3><p>前缀和的逆运算,可以在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>的时间内更新区间</p><h3 id="二分"><a class="markdownIt-Anchor" href="#二分"></a> 二分</h3><p>下标二分</p><p>答案二分</p><p>注意边界</p><h3 id="双指针"><a class="markdownIt-Anchor" href="#双指针"></a> 双指针</h3><p>区间问题,最大最小值,但是左指针是递增(单调性)</p><h3 id="递推"><a class="markdownIt-Anchor" href="#递推"></a> 递推</h3><p>根据规律或者推断,找解</p><h3 id="递归"><a class="markdownIt-Anchor" href="#递归"></a> 递归</h3><p>树的遍历</p><h3 id="并查集"><a class="markdownIt-Anchor" href="#并查集"></a> 并查集</h3><p>集合划分与合并</p><h3 id="哈希"><a class="markdownIt-Anchor" href="#哈希"></a> 哈希</h3><p>重复值或者出现的次数</p><h3 id="单调队列"><a class="markdownIt-Anchor" href="#单调队列"></a> 单调队列</h3><p>之前或者之后的最大最小值</p><h3 id="kmp"><a class="markdownIt-Anchor" href="#kmp"></a> KMP</h3><p>字符串匹配</p><h3 id="trie"><a class="markdownIt-Anchor" href="#trie"></a> Trie</h3><p>字典树,最大的异或对</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tire[<span class="number">3100005</span>][<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> index=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">31</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="type">int</span> temp=(num&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(tire[p][temp]==<span class="number">0</span>)&#123;</span><br><span class="line">            tire[p][temp]=index++;</span><br><span class="line">        &#125;</span><br><span class="line">        p=tire[p][temp];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">31</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="type">int</span> temp=(num&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(tire[p][!temp])&#123;</span><br><span class="line">            ans+=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">            p=tire[p][!temp];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p=tire[p][temp];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> t;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">        <span class="built_in">build</span>(t);</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(t));</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="bfs"><a class="markdownIt-Anchor" href="#bfs"></a> BFS</h3><h3 id="dfs"><a class="markdownIt-Anchor" href="#dfs"></a> DFS</h3><h3 id="拓扑排序"><a class="markdownIt-Anchor" href="#拓扑排序"></a> 拓扑排序</h3><h3 id="dijkstra"><a class="markdownIt-Anchor" href="#dijkstra"></a> Dijkstra</h3><p>Dijkstra算法是一种广泛使用的最短路径算法，可以求解从单个源节点到其他所有节点的最短路径。其基本思路是维护两个集合，一个集合存储已经确定最短路径的节点，另一个集合存储未确定路径的节点。初始时，只有源节点在已确定的路径集合中，其他节点在未确定路径的集合中。每次从未确定节点中选择距离源节点最近的节点加入到已确定路径的集合中，更新该节点到其他未确定节点的最短距离。重复此步骤直到已确定的路径集合中包含所有节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dijkstra</span>(<span class="params">graph</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(graph)</span><br><span class="line">    dist = [<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * (n)</span><br><span class="line">    dist[<span class="number">0</span>] = <span class="number">0</span>  </span><br><span class="line">    visited = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    min_heap = [(<span class="number">0</span>, <span class="number">0</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="comment"># 找到还没确定的里面距离最小的</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(min_heap)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        temp, min_index = heapq.heappop(min_heap)</span><br><span class="line">        <span class="comment"># 已经确定了</span></span><br><span class="line">        visited.add(min_index)</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> visited <span class="keyword">and</span> graph[min_index][v] &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># graph[min_index][v] &gt; 0 表示存在这个路径</span></span><br><span class="line">                new_dist = dist[min_index] + graph[min_index][v]</span><br><span class="line">                <span class="keyword">if</span> dist[v] &gt; new_dist:  <span class="comment"># 表示值得被更新</span></span><br><span class="line">                    dist[v] = new_dist</span><br><span class="line">                    heapq.heappush(min_heap, (dist[v], v))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n,m=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">graph = [[<span class="number">0</span>]*(n+<span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">2</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a,b=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">    graph[a-<span class="number">1</span>][b-<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line">    graph[b-<span class="number">1</span>][a-<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">ans=dijkstra(graph)   </span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ans[<span class="number">1</span>:n]:</span><br><span class="line"><span class="built_in">print</span>(item)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="质数问题"><a class="markdownIt-Anchor" href="#质数问题"></a> 质数问题</h3><p>筛质数</p><p>1.埃氏筛 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(NloglogN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span><br /><code>可优化</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">esieve</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;<span class="comment">//标记0~n的数字的质数状态,并统计质数个数</span></span><br><span class="line">vis[<span class="number">0</span>]=vis[<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//0，1属于非质数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;<span class="comment">//标记剩下的2~n的数字的状态</span></span><br><span class="line"><span class="keyword">if</span>(vis[i]==<span class="number">0</span>)&#123;<span class="comment">//判断i是不是质数 思考：为什么这样就能判断i是质数？</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>*i;j&lt;=n;j+=i)&#123;<span class="comment">//遍历范围内的i的倍数</span></span><br><span class="line">vis[j]=<span class="number">1</span>;<span class="comment">//将倍数标记为1（非质数）</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>优化后</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">esieve</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;<span class="comment">//标记0~n的数字的质数状态,并统计质数个数</span></span><br><span class="line">    vis[<span class="number">0</span>]=vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)&#123;<span class="comment">//标记剩下的2~n的数字的状态 优化：到根号n即可停止</span></span><br><span class="line"><span class="keyword">if</span>(vis[i]==<span class="number">0</span>)&#123;<span class="comment">//判断i是不是质数 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i*i;j&lt;=n;j+=i)&#123;<span class="comment">//遍历范围内的i的倍数 从i*i开始，减少重复筛选</span></span><br><span class="line">vis[j]=<span class="number">1</span>;<span class="comment">//将倍数标记为1（非质数）</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.欧拉筛 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>  线性筛</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e8</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">bool</span> vis[N];<span class="comment">//标记数组</span></span><br><span class="line"><span class="type">int</span> prime[N/<span class="number">10</span>];<span class="comment">//质数表，存放质数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">erla</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">vis[<span class="number">0</span>]=vis[<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//0.1不是质数</span></span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>;<span class="comment">//统计质数的个数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;<span class="comment">//判断i是不是质数</span></span><br><span class="line">prime[cnt++]=i;<span class="comment">//将质数存到质数表中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历质数表 新序列 prime[j]*i</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;prime[j]*i&lt;=n&amp;&amp;j&lt;cnt;j++)&#123;</span><br><span class="line">vis[prime[j]*i]=<span class="number">1</span>;<span class="comment">//标记组成的序列为非质数</span></span><br><span class="line"><span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;<span class="comment">//prime[j]是i的最小质因子 ，不能继续组合，避免重复</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;<span class="comment">//返回质数个数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.欧拉函数<br /><code>对正整数n欧拉函数是小于或等于n的正整数中与n互质的数的数目</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> vis[N];<span class="comment">//标记数组</span></span><br><span class="line"><span class="type">int</span> prime[N];<span class="comment">//质数表，存放质数</span></span><br><span class="line"><span class="type">int</span> phi[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">erla</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">vis[<span class="number">0</span>]=vis[<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//0.1不是质数</span></span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>;<span class="comment">//统计质数的个数</span></span><br><span class="line">phi[<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//1的欧拉函数值是1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;<span class="comment">//判断i是不是质数</span></span><br><span class="line">prime[cnt++]=i;<span class="comment">//将质数存到质数表中</span></span><br><span class="line">phi[i]=i<span class="number">-1</span>;<span class="comment">//性质1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历质数表 新序列 prime[j]*i</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;prime[j]*i&lt;=n&amp;&amp;j&lt;cnt;j++)&#123;</span><br><span class="line">vis[prime[j]*i]=<span class="number">1</span>;<span class="comment">//标记组成的序列为非质数</span></span><br><span class="line"><span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)&#123;</span><br><span class="line">phi[i*prime[j]]=prime[j]*phi[i];<span class="comment">//性质2</span></span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//prime[j]是i的最小质因子 ，不能继续组合，避免重复</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">phi[i*prime[j]]=(prime[j]<span class="number">-1</span>)*phi[i];<span class="comment">//性质3</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;<span class="comment">//返回质数个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大公约数"><a class="markdownIt-Anchor" href="#最大公约数"></a> 最大公约数</h3><h3 id="最近公共祖先"><a class="markdownIt-Anchor" href="#最近公共祖先"></a> 最近公共祖先</h3><h3 id="排列组合"><a class="markdownIt-Anchor" href="#排列组合"></a> 排列组合</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前缀和&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前缀和&quot;&gt;&lt;/a&gt; 前缀和&lt;/h3&gt;
&lt;p&gt;将区间求和求差,改为两个值的运算&lt;/p&gt;
&lt;h3 id=&quot;差分&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="算法刷题笔记" scheme="https://gladdduck.github.io/tags/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>算法刷题杂题</title>
    <link href="https://gladdduck.github.io/2023/04/03/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%9D%82%E9%A2%98/"/>
    <id>https://gladdduck.github.io/2023/04/03/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%9D%82%E9%A2%98/</id>
    <published>2023-04-03T09:24:36.314Z</published>
    <updated>2023-11-26T05:33:12.207Z</updated>
    
    <content type="html"><![CDATA[<h3 id="a"><a class="markdownIt-Anchor" href="#a"></a> A</h3><p><a href="https://ac.nowcoder.com/acm/contest/54569/A">题目连接</a></p><blockquote><p>n个人,从第一个开始传球,经过m次回到第一个人手里的方法数</p></blockquote><p>做题思路:笨比方法:1作为root,建了棵二叉树,每次分裂出两个节点,然后再dfs,搜索路径数量(叶节点是1),超内存了</p><p>正确思路:dp[i][j] 表示传了i次在j手里的可能,判断一下1和n的边界情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">input</span>().split()</span><br><span class="line">n=<span class="built_in">int</span>(n)</span><br><span class="line">m=<span class="built_in">int</span>(m)</span><br><span class="line">dp=[[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>)]</span><br><span class="line"><span class="comment"># dp[i][j] 穿了i次在j手里的可能</span></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,m+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> j==n-<span class="number">1</span>:</span><br><span class="line">            dp[i][j]=dp[i-<span class="number">1</span>][<span class="number">0</span>]+dp[i-<span class="number">1</span>][j-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> j==<span class="number">0</span>:</span><br><span class="line">            dp[i][j]=dp[i-<span class="number">1</span>][n-<span class="number">1</span>]+dp[i-<span class="number">1</span>][j+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dp[i][j]=dp[i-<span class="number">1</span>][j+<span class="number">1</span>]+dp[i-<span class="number">1</span>][j-<span class="number">1</span>]</span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(dp[m][<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h3 id="b"><a class="markdownIt-Anchor" href="#b"></a> B</h3><p><a href="https://ac.nowcoder.com/acm/contest/54569/B">题目连接</a></p><blockquote><p>n对果子,一堆堆合并,果子的数量是消耗的体力,求n堆合成一堆的最小体力</p></blockquote><p>思路:哈夫曼树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">nums=[]</span><br><span class="line">numstr=<span class="built_in">input</span>().split()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    heapq.heappush(nums,<span class="built_in">int</span>(numstr[i]))</span><br><span class="line">  </span><br><span class="line">ans=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(nums)!=<span class="number">1</span>:</span><br><span class="line">    a=heapq.heappop(nums)</span><br><span class="line">    b=heapq.heappop(nums)</span><br><span class="line">    temp=a+b</span><br><span class="line">    ans+=temp</span><br><span class="line">    heapq.heappush(nums,temp)</span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><h3 id="c"><a class="markdownIt-Anchor" href="#c"></a> C</h3><p><a href="https://ac.nowcoder.com/acm/contest/54569/C">题目链接</a></p><blockquote><p>一个矩阵,每个点有对应的值,从(0,0)走到(n,n),走两次,每次走过之后会把矩阵的值清零,问这两次能得到的最大值</p></blockquote><p>思路:笨比方法:以为两次BFS就行,每次都拿到最大的,这样有可能本来上三角一次,下三角一次最大,但是第一次走最大路径把这个打破了,会导致上下三角有的没拿到</p><p>正确思路:f[i][j][h][k];表示两条路同时走，第一条路径走到(i,j)时，第二条走到（h,k）时的最大数字和；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">m=[[<span class="number">0</span>]*(n+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n*n):</span><br><span class="line">    x,y,v=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">    <span class="keyword">if</span> v==<span class="number">0</span> <span class="keyword">and</span> x==<span class="number">0</span> <span class="keyword">and</span> y==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    m[x][y]=v</span><br><span class="line"></span><br><span class="line">dp=[[[[<span class="number">0</span>]*(n+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">                dp[i][j][h][k]=<span class="built_in">max</span>(</span><br><span class="line">                    dp[i-<span class="number">1</span>][j][h-<span class="number">1</span>][k],</span><br><span class="line">                    dp[i-<span class="number">1</span>][j][h][k-<span class="number">1</span>],</span><br><span class="line">                    dp[i][j-<span class="number">1</span>][h-<span class="number">1</span>][k],</span><br><span class="line">                    dp[i][j-<span class="number">1</span>][h][k-<span class="number">1</span>]</span><br><span class="line">                )+m[i][j]+m[h][k]</span><br><span class="line">                <span class="keyword">if</span> i==h <span class="keyword">and</span> j==k:</span><br><span class="line">                    dp[i][j][h][k]-=m[h][k]</span><br><span class="line">            </span><br><span class="line"><span class="built_in">print</span>(dp[n][n][n][n])</span><br></pre></td></tr></table></figure><h3 id="d"><a class="markdownIt-Anchor" href="#d"></a> D</h3><p><a href="https://ac.nowcoder.com/acm/contest/54569/D">题目链接</a></p><blockquote><p>一个数是两个质数的乘积,返回较大的质数</p></blockquote><p>80%思路:从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>0.5</mn></msup></mrow><annotation encoding="application/x-tex">n^{0.5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mord mtight">.</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span>遍历,余数为0就返回,80莫名其妙(答案错误),笨比,写的是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>0.5</mn></msup></mrow><annotation encoding="application/x-tex">n^{0.5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mord mtight">.</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>遍历了</p><p>正确思路:从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>0.5</mn></msup></mrow><annotation encoding="application/x-tex">n^{0.5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mord mtight">.</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span>,余数为0,返回商</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">right=<span class="built_in">int</span>(n**<span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,right+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> n%i==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(n//i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="e"><a class="markdownIt-Anchor" href="#e"></a> E</h3><p><a href="https://ac.nowcoder.com/acm/contest/54569/E">题目链接</a>\</p><p>难,略</p><h3 id="f"><a class="markdownIt-Anchor" href="#f"></a> F</h3><p><a href="https://ac.nowcoder.com/acm/contest/54569/F">题目链接</a></p><blockquote><p>n种不同面额的货币,但是有的面值能表示,有的面值不能表示,求最少只要几种货币,能和n种表示的面值一样</p></blockquote><p>80%思路:如果n里面有的数能够被其他数表示,这个就是多余的,可以去掉(???抄别人100的代码也是80),判断一个数能不能被其他的表示有点背包的感觉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">T=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="comment"># n=100</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">x,lst</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(lst)==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    dp=[<span class="literal">False</span>]*(x+<span class="number">1</span>)</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> lst:</span><br><span class="line">        <span class="keyword">for</span> index,item  <span class="keyword">in</span> <span class="built_in">enumerate</span>(dp):</span><br><span class="line">            <span class="keyword">if</span> index-num&gt;=<span class="number">0</span>:</span><br><span class="line">                dp[index]|=dp[index-num]</span><br><span class="line">        <span class="keyword">if</span> dp[x]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> dp[x]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(T):</span><br><span class="line">    n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    nums=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">    nums.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">    temp=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> index,item <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">        <span class="keyword">if</span> check(item,nums[index+<span class="number">1</span>:]):</span><br><span class="line">            temp+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(n-temp)</span><br></pre></td></tr></table></figure><h3 id="g"><a class="markdownIt-Anchor" href="#g"></a> G</h3><p><a href="https://ac.nowcoder.com/acm/contest/54569/G">题目链接</a></p><blockquote><p>n个囚犯,两个犯人中间有怨气值,把他们分成两个监狱,求一个监狱内怨气值最大的,如果监狱内的犯人之间没有怨气值,返回0</p></blockquote><p>思路:不会,随便想的,想到并查集了,但是感觉更像二分图匹配,没做出来,0蛋</p><p>正确思路:并查集,但是不是两个有怨气的犯人之间,如果A和B有怨气,B和C有怨气,那么应该把A和C归并,B单独,先按照怨气值从大到小排序,如果这两个人在一个集里面了,那就说明不可避免了,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">n,m=<span class="built_in">input</span>().split()</span><br><span class="line">n=<span class="built_in">int</span>(n)</span><br><span class="line">m=<span class="built_in">int</span>(m)</span><br><span class="line"></span><br><span class="line">parent=[-<span class="number">1</span>]*(n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findx</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> parent[x]!=-<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> findx(parent[x])</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">a,b</span>):</span><br><span class="line">    a_p=findx(a)</span><br><span class="line">    b_p=findx(b)</span><br><span class="line">    <span class="keyword">if</span> a_p!=b_p:</span><br><span class="line">        parent[a_p]=b_p</span><br><span class="line"></span><br><span class="line">values=[]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a,b,c=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">    values.append((a,b,c))</span><br><span class="line">  </span><br><span class="line">values=<span class="built_in">sorted</span>(values,key=<span class="keyword">lambda</span> x:x[<span class="number">2</span>],reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">disfriend=[<span class="number">0</span>]*(n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>():</span><br><span class="line">    <span class="keyword">for</span> a,b,c <span class="keyword">in</span> values:</span><br><span class="line">        <span class="keyword">if</span> findx(a)==findx(b):</span><br><span class="line">            <span class="built_in">print</span>(c)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> disfriend[a]==<span class="number">0</span>:</span><br><span class="line">            disfriend[a]=b</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            merge(disfriend[a],b)</span><br><span class="line">        <span class="keyword">if</span> disfriend[b]==<span class="number">0</span>:</span><br><span class="line">            disfriend[b]=a</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            merge(disfriend[b],a)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> solve():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="h"><a class="markdownIt-Anchor" href="#h"></a> H</h3><p><a href="https://ac.nowcoder.com/acm/contest/54569/H">题目链接</a></p><blockquote><p>在有向图G中，每条边的长度均为1，现给定起点和终点，请你在图中找一条从起点到终点的路径，该路径满足以下条件：<br />1．路径上的所有点的出边所指向的点都直接或间接与终点连通。<br />2．在满足条件1的情况下使路径最短。</p></blockquote><p>难,略</p><blockquote><p>建双向边，对于正边和反边我们标记一下即可。<br />那么建完边后我们先从终点bfs一遍，只跑反向边，对于每个遍历到的边进行标记，这样我们就可以找出不能直接或间接到达终点的点。<br />得到这些点后，我们再遍历这些点的反向边的出边，将与这些点相连的点进行标记。<br />标记完后我们剩下的没有被第二次标记的点就是可以走的点。这时我们再从起点bfs一遍，只跑正向边，且不走被第二次标记过的点，那么第一次到达终点的时候就是可到达的最短路。</p></blockquote><h2 id="背包问题"><a class="markdownIt-Anchor" href="#背包问题"></a> 背包问题</h2><p><a href="https://seramasumi.github.io/docs/Algorithms/mc-%E5%BE%AE%E8%AF%BE%E5%A0%82-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98.html">背包问题</a></p><p><strong>0-1背包</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= V; ++j) &#123;</span><br><span class="line">        backpack[i][j] = backpack[i - <span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">if</span> (j &gt;= cap[i]) &#123;</span><br><span class="line">            backpack[i][j] = Math.max(backpack[i][j], backpack[i - <span class="number">1</span>][j - cap[i]] + val[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>多重背包</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= V; ++j) &#123;</span><br><span class="line">        backpack[i][j] = backpack[i - <span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= num[i]; ++k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= k * cap[i]) &#123;</span><br><span class="line">                backpack[i][j] = Math.max(backpack[i][j], backpack[i - <span class="number">1</span>][j - k * cap[i]] + k * val[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>完全背包</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k * cap[i] &lt;= V; ++k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> V; j &gt;= cap[i]; --j) &#123;</span><br><span class="line">            f[j] = Math.max(f[j], f[j - cap[i]] + val[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>动态规划补充</strong></p><p>从集合的角度</p><p>有限集中的最优化</p><p>动态规划</p><p><code>01背包</code></p><p><code>完全背包</code></p><p>``</p><p><code>最长公共子序列</code></p><p><code>字符串编辑距离</code></p><p><a href="https://blog.csdn.net/qq_35644234/article/details/61614581">最短路径</a></p><p><a href="https://blog.csdn.net/ustbbsy/article/details/81984329">快速幂</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"># 矩阵相乘</span><br><span class="line">def mul(A, B):</span><br><span class="line">    # A:m*n, B:n*p  结果m*p</span><br><span class="line">    m = len(A)</span><br><span class="line">    n1 = len(A[0])</span><br><span class="line">    n2 = len(B)</span><br><span class="line">    p = len(B[0])</span><br><span class="line">    if n1 !=n2:</span><br><span class="line">        return</span><br><span class="line">    n = n1= n2</span><br><span class="line">    ans = []</span><br><span class="line">    # 初始化ans</span><br><span class="line">    for i in range(m):</span><br><span class="line">        ans.append([0]*p) # 都用同一个变量row = [0]*p，会同时修改，所以不用同一个变量</span><br><span class="line"> </span><br><span class="line">    for i in range(m):</span><br><span class="line">        for j in range(p):</span><br><span class="line">            temp = 0</span><br><span class="line">            for q in range(n):</span><br><span class="line">                temp += A[i][q]*B[q][j]</span><br><span class="line">                temp%=9999991</span><br><span class="line">            ans[i][j] = temp</span><br><span class="line"> </span><br><span class="line">    return ans</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def fib(n):</span><br><span class="line">    if n==0:</span><br><span class="line">        return 0</span><br><span class="line">    elif n==1 or n==2:</span><br><span class="line">        return 1</span><br><span class="line">    base = [[1,1],[1,0]]</span><br><span class="line"> </span><br><span class="line">    n = n-2</span><br><span class="line">    ans = [[1,0],[0,1]]</span><br><span class="line">    while n:</span><br><span class="line">        if n&amp;1:</span><br><span class="line">            ans = mul(base,ans)</span><br><span class="line">        base = mul(base,base)</span><br><span class="line">        n = n&gt;&gt;1</span><br><span class="line">    # temp=mul([[1,1]],ans)</span><br><span class="line">    # print(temp[0][0],ans[0][0] + ans[0][1])</span><br><span class="line">    return ans[0][0] + ans[0][1]</span><br><span class="line"> </span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    # 前20个斐波那契数列</span><br><span class="line">    # 0是第0个</span><br><span class="line">    # 2023040313301730</span><br><span class="line">    print(fib(2023040313301730)%9999991)</span><br><span class="line">    # for i in range(20230403%1330173):</span><br><span class="line">    #     print(fib(i),end=&#x27; &#x27;)</span><br></pre></td></tr></table></figure><p><a href="https://www.dotcpp.com/oj/lanqiao/?page=1">真题C语言网</a></p><p><a href="https://www.lanqiao.cn/problem-list/5/?sort=students_count">真题官网</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;a&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#a&quot;&gt;&lt;/a&gt; A&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/54569/A&quot;&gt;题目连接&lt;/a&gt;&lt;/p&gt;
&lt;blockqu</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="算法刷题笔记" scheme="https://gladdduck.github.io/tags/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
