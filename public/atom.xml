<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gladdduck</title>
  
  
  <link href="https://gladdduck.github.io/atom.xml" rel="self"/>
  
  <link href="https://gladdduck.github.io/"/>
  <updated>2023-03-22T07:41:16.706Z</updated>
  <id>https://gladdduck.github.io/</id>
  
  <author>
    <name>syxue</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>垃圾分类论文</title>
    <link href="https://gladdduck.github.io/2023/03/17/%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB/"/>
    <id>https://gladdduck.github.io/2023/03/17/%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB/</id>
    <published>2023-03-17T05:47:10.581Z</published>
    <updated>2023-03-22T07:41:16.706Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础网络"><a class="markdownIt-Anchor" href="#基础网络"></a> 基础网络</h2><h3 id="r-cnn"><a class="markdownIt-Anchor" href="#r-cnn"></a> R-CNN</h3><p><a href="https://www.bilibili.com/video/BV1CZ4y1a7NP/?spm_id_from=333.999.0.0&amp;vd_source=602787b9249cd70cfca4def5e041f060">B 站论文</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 之前都是人工提取特征,用机器学习分类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把人工提取特征改成CNN提取特征</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 三个模块</span></span><br><span class="line"><span class="comment"># 1.候选区域生成(Selective search)(2000个)(统一大小)</span></span><br><span class="line"><span class="comment"># 2.特征抽取(扩展16个像素)(AlexNet)</span></span><br><span class="line"><span class="comment"># 3.分类,框回归</span></span><br></pre></td></tr></table></figure><h3 id="sppnet"><a class="markdownIt-Anchor" href="#sppnet"></a> SPPnet</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用CNN提取整个图的特征，把候选区域映射到特征图上</span></span><br><span class="line"><span class="comment"># 最后用空间金字塔(三个层)，一个动态池化层，对候选区域特征图得到固定大小的输出特征，拼接在一起</span></span><br><span class="line"><span class="comment"># 还是用svm分类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不能很好的更新cnn权重</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="fast-r-cnn"><a class="markdownIt-Anchor" href="#fast-r-cnn"></a> Fast R-CNN</h3><p><a href="https://www.bilibili.com/video/BV1y94y1Q7QJ/?spm_id_from=333.999.0.0&amp;vd_source=602787b9249cd70cfca4def5e041f060">B 站论文</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 针对R-CNN和SPPnet</span></span><br><span class="line"><span class="comment"># 多阶段模型,不同的模块都要分别训练</span></span><br><span class="line"><span class="comment"># 要把提取到的特征存到磁盘里，再给分类器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单阶段，不用存特征</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用CNN得到整张图片的特征</span></span><br><span class="line"><span class="comment"># 根据候选区域在图片上的位置（输入坐标），利用ROI投影获得候选区域在特征图上的特征</span></span><br><span class="line"><span class="comment"># 用ROI池化层（空间金字塔特殊情况，一个层）把候选区域特征转为固定大小的特征图</span></span><br><span class="line"><span class="comment"># 两个并行全连接层，分类、预测坐标</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他验证性实验 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试阶段输入图像和候选区域坐标</span></span><br><span class="line"><span class="comment"># 候选区域建议是单独的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="faster-r-cnn"><a class="markdownIt-Anchor" href="#faster-r-cnn"></a> Faster R-CNN</h3><p><a href="https://www.bilibili.com/video/BV1y94y1Q7QJ/?spm_id_from=333.999.0.0&amp;vd_source=602787b9249cd70cfca4def5e041f060">B 站论文</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Fast R-CNN还是需要单独的模块生成候选区域投影</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决候选区域选择的问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RPNs和特征提取层 共享卷积层</span></span><br><span class="line"><span class="comment"># 用n*n的滑动窗口在特征图上提取，传给small network 判断是否能生成候选区域</span></span><br><span class="line"><span class="comment"># 使用三个尺度（128，256，512 1:1,1:2,2:1，九个框）生成k个anchor boxes，（根据数据集设置框的大小），非极大值抑制</span></span><br><span class="line"><span class="comment"># 与标注狂IOU值最大，与标注框IOU值大于0.7  分给正标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交替训练</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.yayan.xyz/20230315150418.png" alt="" /><br /><img src="https://image.yayan.xyz/20230315150330.png" alt="" /></p><h3 id="mask-r-cnn"><a class="markdownIt-Anchor" href="#mask-r-cnn"></a> Mask R-CNN</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Faster R-CNN的RoI Pooling 是直接取整,会导致实例偏移,对于像素级  不可取</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把候选区域的特征图转换为固定大小的ROI feature时 也会取整</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 两次误差</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 骨干网络换成ResNet-FPN</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mask R-CNN使用双线性插值解决缩放的问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加MASK 分支,三路并行,MASK head两种实现 1.ResNet  2.ResNet+FPN 变成K*M*M </span></span><br><span class="line"><span class="comment"># K*M*M 大小,K个类别</span></span><br><span class="line"><span class="comment"># 与FCN方法是不同，FCN是对每个像素进行多类别softmax分类，然后计算交叉熵损失，这种做法是会造成类间竞争的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="论文"><a class="markdownIt-Anchor" href="#论文"></a> 论文</h2><h3 id="基于改进-faster-rcnn-的垃圾检测与分类方法"><a class="markdownIt-Anchor" href="#基于改进-faster-rcnn-的垃圾检测与分类方法"></a> 基于改进 Faster R⁃CNN 的垃圾检测与分类方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把Faster R-CNN 的网络换成了ResNet50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把非极大值抑制（NMS）换成了Soft-NMS</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比实验把VGG16的7*7 5*5 换成了叠加的3*3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 五折交叉验证</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用FasterR-CNN相同的交替训练训练</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 73-&gt;81%</span></span><br></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mi>M</mi><mi>S</mi><mo>:</mo><mn>0</mn><mo separator="true">,</mo><mi>I</mi><mi>o</mi><mi>U</mi><mo stretchy="false">(</mo><mi>M</mi><mo separator="true">,</mo><msub><mi>b</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>≥</mo><msub><mi>N</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">NMS:0,IoU(M,b_i) \geq N_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>o</mi><mi>f</mi><mi>t</mi><mo>−</mo><mi>N</mi><mi>M</mi><mi>S</mi><mo>:</mo><msub><mi>s</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>I</mi><mi>o</mi><mi>U</mi><mo stretchy="false">(</mo><mi>M</mi><mo separator="true">,</mo><msub><mi>b</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>I</mi><mi>o</mi><mi>U</mi><mo stretchy="false">(</mo><mi>M</mi><mo separator="true">,</mo><msub><mi>b</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>≥</mo><msub><mi>N</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">Soft-NMS:s_i(1-IoU(M,b_i)),IoU(M,b_i) \geq N_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><h3 id="analysis-of-object-detection-performance-based-on-faster-rcnn"><a class="markdownIt-Anchor" href="#analysis-of-object-detection-performance-based-on-faster-rcnn"></a> Analysis of Object Detection Performance Based on Faster RCNN</h3><p><code>基于Faster R-CNN的目标检测性能分析</code></p><p><code>介绍了R-CNN-&gt;Fast R-CNN-&gt; Faster R-CNN的变化过程</code><br /><code>Faster R-CNN的大概结构</code></p><p><code>对比三个模型在不同数据集上的效果</code></p><h3 id="end-to-end-object-detection-with-transformers"><a class="markdownIt-Anchor" href="#end-to-end-object-detection-with-transformers"></a> End-to-End Object Detection with Transformers</h3><p><code>里程碑:端到端的方法,不用非极大值抑制</code><br /><code>变成集合预测问题</code><br /><code>CNN抽取特征－＞送入Transformer学习全局特征-&gt;输出100个框-&gt;二分图loss匹配真实框-&gt;计算loss</code></p><p><code>问题:小目标,训练epoch长</code></p><h3 id="efficientdet-scalable-and-efficient-object-detection"><a class="markdownIt-Anchor" href="#efficientdet-scalable-and-efficient-object-detection"></a> EfficientDet: Scalable and Efficient Object Detection</h3><p><img src="https://image.yayan.xyz/20230317135128.png" alt="" /></p><p><code>新的结构,多层特征融合</code></p><h3 id="deformable-detr-deformable-transformers-for-end-to-end-object-detection"><a class="markdownIt-Anchor" href="#deformable-detr-deformable-transformers-for-end-to-end-object-detection"></a> Deformable DETR: Deformable Transformers for End-to-End Object Detection</h3><p><code>解决DETR的两个问题</code><br /><img src="http://image.yayan.xyz/20230316214546.png" alt="" /><br /><img src="http://image.yayan.xyz/20230316215004.png" alt="" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.不用TRansformer原有的自注意力,改为可变注意力(可变卷积变来的)</span><br><span class="line">一个像素向量z根据偏移量选择四个其他像素,然后一层Liner得到权重,和选出的像素进行运算更新</span><br><span class="line"></span><br><span class="line">2.多尺度的注意力机制(Mulit-Scale),不同尺度的特征图上做,多头可变注意力机制,然后相加</span><br></pre></td></tr></table></figure><h3 id="deep-learning-based-waste-detection-in-natural-and-urban-environments"><a class="markdownIt-Anchor" href="#deep-learning-based-waste-detection-in-natural-and-urban-environments"></a> Deep learning-based waste detection in natural and urban environments</h3><p><code>传统图像分类网络:ResNet,DenseNet,EfficientNet,EfficientNet-B2,EfficientNetv2</code></p><p><code>经典目标检测网络:R-CNN,Fast R-CNN ,Faster R-CNN,SSD,Yolo,DETR,Deformable DETR,EfficientDet</code></p><p><code>垃圾数据集</code></p><p><img src="https://image.yayan.xyz/20230316155331.png" alt="" /></p><p><code>对所有数据集进行处理</code></p><p><code>一个目标检测网络EfficientDet-D2,一个图像分类网络EfficientNet-B2</code></p><p><code>训练步骤:分开训练,先训练目标检测网络,再训练图像分类网络</code></p><p><code>问题:小目标,推理时间</code></p><h2 id="开源复现"><a class="markdownIt-Anchor" href="#开源复现"></a> 开源复现</h2><h3 id="fasterr-cnn"><a class="markdownIt-Anchor" href="#fasterr-cnn"></a> FasterR-CNN</h3><p><a href="https://github.com/chenyuntc/simple-faster-rcnn-pytorch">模型链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 下载到Google Colab</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 安装依赖</span><br><span class="line">!pip install ipdb visdom torchnet fire</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 修改代码</span><br><span class="line">data\voc_dataset.py中的VOC_BBOX_LABEL_NAMES修改成自己类别</span><br><span class="line">utils\vis_tool.py 中的VOC_BBOX_LABEL_NAMES修改成自己类别</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 源代码直接运行会报错</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&#x27;need at least one array to stack&#x27;</span>)</span><br><span class="line">ValueError: need at least one array to stack</span><br><span class="line">因为只训练有物体的图片,</span><br><span class="line">在data\dataset.py</span><br><span class="line"><span class="number">76</span>行替换如下</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">id_list_file = os.path.join(data_dir, &#x27;ImageSets/Main/&#123;0&#125;.txt&#x27;.format(split))</span></span><br><span class="line"><span class="string">id_list_read = [id_.strip() for id_ in open(id_list_file)]</span></span><br><span class="line"><span class="string">id_list = list()</span></span><br><span class="line"><span class="string">for i in id_list_read:</span></span><br><span class="line"><span class="string">  obj = ET.parse(os.path.join(data_dir, &#x27;Annotations&#x27;, i + &#x27;.xml&#x27;))</span></span><br><span class="line"><span class="string">  if obj.findall(&#x27;object&#x27;):</span></span><br><span class="line"><span class="string">    id_list.append(i)</span></span><br><span class="line"><span class="string">self.ids = id_list</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>在Google Colab运行不能可视化会报错</span><br><span class="line">! npm install -g localtunnel</span><br><span class="line">get_ipython().system_raw(<span class="string">&#x27;python3 -m pip install visdom&#x27;</span>)</span><br><span class="line">get_ipython().system_raw(<span class="string">&#x27;python3 -m visdom.server -port 8097 &gt;&gt; visdomlog.txt 2&gt;&amp;1 &amp;&#x27;</span>)</span><br><span class="line">get_ipython().system_raw(<span class="string">&#x27;lt --port 8097 &gt;&gt; url.txt 2&gt;&amp;1 &amp;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">在运行,打开url.txt 查看可视化的窗口</span><br><span class="line"></span><br><span class="line">code_root/</span><br><span class="line">└── data/</span><br><span class="line">    └── VOC2007/</span><br><span class="line">        ├── Annotations/</span><br><span class="line">        ├── JPEGImages/</span><br><span class="line">        └── ImageSets/</span><br><span class="line">        └── Main/</span><br><span class="line">              ├── test.txt</span><br><span class="line">                ├── train.txt</span><br><span class="line">                ├── val.txt</span><br><span class="line">                └── trainval.txt</span><br></pre></td></tr></table></figure><h3 id="efficientdet"><a class="markdownIt-Anchor" href="#efficientdet"></a> EfficientDet</h3><p><a href="https://github.com/rwightman/efficientdet-pytorch">模型链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行环境Google Colab</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>下载到工作区</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>安装依赖</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 代码:effdet\data\parsers\parser_voc.py 文件中的DEFAULT_CLASSES改成自己的类别名称</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>! python ..../efficientdet-pytorch-master/train.py /content --dataset VOC2007 --num-classes 自己的类别 </span><br><span class="line"></span><br><span class="line"><span class="comment"># JPEGImages:所有图片  Annotations:所有xml标注  txt:用作训练测试的文件名,不带后缀</span></span><br><span class="line">code_root/</span><br><span class="line">└── data/</span><br><span class="line">    └── VOC2007/</span><br><span class="line">        ├── Annotations/</span><br><span class="line">        ├── JPEGImages/</span><br><span class="line">        └── ImageSets/</span><br><span class="line">        └── Main/</span><br><span class="line">              ├── test.txt</span><br><span class="line">                ├── train.txt</span><br><span class="line">                ├── val.txt</span><br><span class="line">                └── trainval.txt</span><br></pre></td></tr></table></figure><h3 id="deformable-detr"><a class="markdownIt-Anchor" href="#deformable-detr"></a> Deformable-DETR</h3><p><a href="https://github.com/fundamentalvision/Deformable-DETR">模型链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行环境Google Colab</span></span><br><span class="line"><span class="number">1.</span>下载到工作区</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>安装相关依赖</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>!python ..(绝对路径..)/Deformable-DETR-main/models/ops/setup.py build install (用的jupyter)(可以用ops文件夹下的test.py测试环境是否正确)</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>代码:...../Deformable-DETR-main/util/misc.py 里面的</span><br><span class="line"><span class="comment"># float(torchvision.__version__[:3]) &lt; 0.5/0.7 </span></span><br><span class="line">需要改动,因为对于<span class="number">0.10</span>.x版本的不适用,自己改成了</span><br><span class="line"><span class="comment"># float(torchvision.__version__[:4]) &lt; 0.05:</span></span><br><span class="line">否则报错cannot <span class="keyword">import</span> name <span class="string">&#x27;_NewEmptyTensorOp&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;torchvision.ops.misc&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>! python ...../Deformable-DETR-main/main.py --coco_path ..../coco </span><br><span class="line"></span><br><span class="line"><span class="comment"># train2017:训练图片  val2017:测试图片   annotations两个文件下面的标注图片</span></span><br><span class="line">code_root/</span><br><span class="line">└── data/</span><br><span class="line">    └── coco/</span><br><span class="line">        ├── train2017/</span><br><span class="line">        ├── val2017/</span><br><span class="line">        └── annotations/</span><br><span class="line">        ├── instances_train2017.json</span><br><span class="line">        └── instances_val2017.json</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="yolov5"><a class="markdownIt-Anchor" href="#yolov5"></a> YOLOv5</h3><p><a href="https://github.com/ultralytics/yolov5">模型链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行环境Google Colab</span></span><br><span class="line"><span class="number">1.</span>下载到工作区</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>安装相关依赖</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>指定数据路径 运行</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="yolov8"><a class="markdownIt-Anchor" href="#yolov8"></a> YOLOv8</h3><p><a href="https://github.com/ultralytics/ultralytics">模型链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行环境Google Colab</span></span><br><span class="line"><span class="number">1.</span>!pip install ultralytics==<span class="number">8.0</span><span class="number">.20</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>安装相关依赖</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>指定数据路径 运行</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础网络&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础网络&quot;&gt;&lt;/a&gt; 基础网络&lt;/h2&gt;
&lt;h3 id=&quot;r-cnn&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#r-cnn&quot;&gt;&lt;/a&gt; R-CNN&lt;</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="垃圾分类论文" scheme="https://gladdduck.github.io/tags/%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB%E8%AE%BA%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>LeecCode剑指offer1</title>
    <link href="https://gladdduck.github.io/2023/03/16/LeetCode%E5%89%91%E6%8C%87offer1/"/>
    <id>https://gladdduck.github.io/2023/03/16/LeetCode%E5%89%91%E6%8C%87offer1/</id>
    <published>2023-03-16T01:35:17.779Z</published>
    <updated>2023-03-22T04:55:31.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="leeccode剑指offer1刷题记录"><a class="markdownIt-Anchor" href="#leeccode剑指offer1刷题记录"></a> LeecCode剑指offer1刷题记录</h2><h3 id="第一天"><a class="markdownIt-Anchor" href="#第一天"></a> 第一天</h3><p><a href="https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 09. 用两个栈实现队列</a></p><p>思路:一个栈1用于进,一个栈2用于出,当2空了,就把1里面的元素全部放进2,如果此时1也空了,那就是都空了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CQueue</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.stack_in=[]</span><br><span class="line">        self.stack_out=[]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">appendTail</span>(<span class="params">self, value: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.stack_in.append(value)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteHead</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.stack_out):</span><br><span class="line">            <span class="keyword">return</span> self.stack_out.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(self.stack_in):</span><br><span class="line">                <span class="keyword">while</span> <span class="built_in">len</span>(self.stack_in):</span><br><span class="line">                    self.stack_out.append(self.stack_in.pop())</span><br><span class="line">                <span class="keyword">return</span> self.stack_out.pop()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 30. 包含min函数的栈</a></p><p>思路:一个单独的栈x存最小值,如果进栈的元素小于等于x最顶元素就进x,如果出栈元素等于x顶层元素,x出栈</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.stack=[]</span><br><span class="line">        self.minnums=[]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.stack.append(x)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">len</span>(self.minnums) <span class="keyword">or</span> x&lt;=self.minnums[-<span class="number">1</span>]:</span><br><span class="line">            self.minnums.append(x)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> self.stack[-<span class="number">1</span>]==self.minnums[-<span class="number">1</span>]:</span><br><span class="line">            self.stack.pop()</span><br><span class="line">            self.minnums.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.stack.pop()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">top</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> self.stack[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">min</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> self.minnums[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="第二天"><a class="markdownIt-Anchor" href="#第二天"></a> 第二天</h3><p><a href="https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 06. 从尾到头打印链表</a></p><p>思路:1.遍历一遍链表,用数组存每个元素,然后返回数组的逆序 2.递归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reversePrint</span>(<span class="params">self, head: ListNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        ans=[]</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            ans.append(head.val)</span><br><span class="line">            head=head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> ans[::-<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># return self.reversePrint(head.next) + [head.val] if head else []</span></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 24. 反转链表</a></p><p>思路:1.三个指针,模拟列表断开向后连接的情景,2.把链表元素都存在数组里,当作一个个单独的节点,反过来连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseList</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span><br><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="literal">None</span>:<span class="keyword">return</span> head</span><br><span class="line">        re=[]</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            re.append(head)</span><br><span class="line">            temp=head.<span class="built_in">next</span></span><br><span class="line">            head.<span class="built_in">next</span>=<span class="literal">None</span></span><br><span class="line">            head=temp</span><br><span class="line">        re.reverse()</span><br><span class="line">        <span class="built_in">print</span>(re)</span><br><span class="line">        ret=<span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(re)):</span><br><span class="line">            <span class="keyword">if</span> ret <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                ret=re[i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ret.<span class="built_in">next</span>=re[i]</span><br><span class="line">                ret=ret.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> re[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/fu-za-lian-biao-de-fu-zhi-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 35. 复杂链表的复制</a></p><p>错误思路:不能像普通链表一样遍历重新连接,因为random指针的节点可能还没遍历到</p><p>思路:1.递归  2.把A-B-C的链表  改造成A-A’-B-B’-C-C’,然后模仿原指针的下一个位置,主要各个边界条件的判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拼接+拆分</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">copyRandomList</span>(<span class="params">self, head: <span class="string">&#x27;Node&#x27;</span></span>) -&gt; <span class="string">&#x27;Node&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="literal">None</span> :<span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        temphead=head</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            temp=Node(head.val)</span><br><span class="line">            temp.<span class="built_in">next</span>=head.<span class="built_in">next</span></span><br><span class="line">            head.<span class="built_in">next</span>=temp</span><br><span class="line">            head=head.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        head=temphead</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            <span class="keyword">if</span> head.random:</span><br><span class="line">                head.<span class="built_in">next</span>.random=head.random.<span class="built_in">next</span></span><br><span class="line">            head=head.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        orighead=head=temphead.<span class="built_in">next</span></span><br><span class="line">        ans=head</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            <span class="keyword">if</span> head.<span class="built_in">next</span> <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            temp=orighead.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            head.<span class="built_in">next</span>=orighead.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            head=head.<span class="built_in">next</span></span><br><span class="line">            orighead=temp</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Hash表+递归</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;Node*, Node*&gt; cachedNode;</span><br><span class="line"></span><br><span class="line">    <span class="function">Node* <span class="title">copyRandomList</span><span class="params">(Node* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!cachedNode.<span class="built_in">count</span>(head)) &#123;</span><br><span class="line">            Node* headNew = <span class="keyword">new</span> <span class="built_in">Node</span>(head-&gt;val);</span><br><span class="line">            cachedNode[head] = headNew;</span><br><span class="line">            headNew-&gt;next = <span class="built_in">copyRandomList</span>(head-&gt;next);</span><br><span class="line">            headNew-&gt;random = <span class="built_in">copyRandomList</span>(head-&gt;random);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cachedNode[head];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="第三天"><a class="markdownIt-Anchor" href="#第三天"></a> 第三天</h3><p><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/description/">剑指 Offer 05. 替换空格</a></p><p>思路:先用数组比直接返回str.replace时间空间上都要快不少</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">replaceSpace</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> c == <span class="string">&#x27; &#x27;</span>: res.append(<span class="string">&quot;%20&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>: res.append(c)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(res)</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/description/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 58 - II. 左旋转字符串</a></p><p>思路:.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseLeftWords</span>(<span class="params">self, s: <span class="built_in">str</span>, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> s[n:]+s[:n]</span><br></pre></td></tr></table></figure><h3 id="第四天"><a class="markdownIt-Anchor" href="#第四天"></a> 第四天</h3><p><a href="https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 03. 数组中重复的数字</a></p><p>思路:1.字典存 2.排序 3.一直交换到已有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findRepeatNumber</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        m=<span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> m:</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">            m[i]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findRepeatNumber</span>(<span class="params">self, nums: [<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> nums[i] == i:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> nums[nums[i]] == nums[i]: <span class="keyword">return</span> nums[i]</span><br><span class="line">            nums[nums[i]], nums[i] = nums[i], nums[nums[i]]</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/description/">剑指 Offer 53 - I. 在排序数组中查找数字 I</a></p><p>思路:二分,然后下标加到不是这个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        index=bisect_left(nums,target)</span><br><span class="line">        length=<span class="built_in">len</span>(nums)</span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> index&lt;length <span class="keyword">and</span> nums[index]==target:</span><br><span class="line">            ans+=<span class="number">1</span></span><br><span class="line">            index+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/que-shi-de-shu-zi-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 53 - II. 0～n-1中缺失的数字</a></p><p>思路:1.直接遍历 2.hash 3.位运算 4.应该的和-实际的和=差的数字 5.二分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后面加n个数 一起异或,缺的数只会出现一次,相同的数异或两次为-</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">missingNumber</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># ans=0</span></span><br><span class="line">        <span class="comment"># for index,num in enumerate(nums):</span></span><br><span class="line">        <span class="comment">#     ans^=index</span></span><br><span class="line">        <span class="comment">#     ans^=num</span></span><br><span class="line">        <span class="comment"># return ans^len(nums)</span></span><br><span class="line">        left,right=<span class="number">0</span>,<span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left&lt;=right:</span><br><span class="line">            mid=(left+right)&gt;&gt;<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid]==mid:</span><br><span class="line">                left=mid+<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right=mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure><h3 id="第五天"><a class="markdownIt-Anchor" href="#第五天"></a> 第五天</h3><p><a href="https://leetcode.cn/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 11. 旋转数组的最小数字</a></p><p>思路:根据凹的性质一次遍历,如果找不到那么就是递增的,直接返回numbers[0]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minArray</span>(<span class="params">self, numbers: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(numbers)):</span><br><span class="line">            <span class="keyword">if</span> numbers[i]&lt;numbers[i-<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> numbers[i]</span><br><span class="line">        <span class="keyword">return</span> numbers[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 50. 第一个只出现一次的字符</a></p><p>思路:1.OrderedDict   2.Counter</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">firstUniqChar</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        m=OrderedDict()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            m[i]=m.get(i,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> m.items():</span><br><span class="line">            <span class="keyword">if</span> v==<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> k</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="comment"># frequency = collections.Counter(s)</span></span><br><span class="line">        <span class="comment"># for i, ch in enumerate(s):</span></span><br><span class="line">        <span class="comment">#     if frequency[ch] == 1:</span></span><br><span class="line">        <span class="comment">#         return ch</span></span><br><span class="line">        <span class="comment"># return &#x27; &#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 04. 二维数组中的查找</a></p><p>思路:1.对每一行二分<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo>∗</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N*log(N))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span> 2.把矩阵向左旋转90度就是一个搜索树,从底向上搜索,<br />每次可消去一行或者一列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo>+</mo><mi>M</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N+M)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mclose">)</span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findNumberIn2DArray</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(matrix)==<span class="number">0</span>:<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        m=<span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">        n=<span class="built_in">len</span>(matrix)</span><br><span class="line">        i,j=n-<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i&gt;=<span class="number">0</span> <span class="keyword">and</span> j&lt;m:</span><br><span class="line">            <span class="keyword">if</span> matrix[i][j]&gt;target:</span><br><span class="line">                i-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> matrix[i][j]&lt;target:</span><br><span class="line">                j+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="第六天"><a class="markdownIt-Anchor" href="#第六天"></a> 第六天</h3><p><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 32 - I. 从上到下打印二叉树</a></p><p>思路:广搜</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">levelOrder</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:<span class="keyword">return</span> []</span><br><span class="line">        stack=collections.deque([root])</span><br><span class="line">        ans=[]</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(stack):</span><br><span class="line">            cur=stack.popleft()</span><br><span class="line">            ans.append(cur.val)</span><br><span class="line">            <span class="keyword">if</span> cur.left:</span><br><span class="line">                stack.append(cur.left)</span><br><span class="line">            <span class="keyword">if</span> cur.right:</span><br><span class="line">                stack.append(cur.right)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 32 - II. 从上到下打印二叉树 II</a></p><p>思路:1.广搜存节点的时候新增一个layer表示在第几层 2.每一次遍历完队列中的所有节点 3.记录每一层的最后一个节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">levelOrder</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:<span class="keyword">return</span> []</span><br><span class="line">        stack=collections.deque([(root,<span class="number">1</span>)])</span><br><span class="line">        ans=[]</span><br><span class="line">        temp=[root.val]</span><br><span class="line">        lastlayer=-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(stack):</span><br><span class="line">            (cur,layer)=stack.popleft()</span><br><span class="line">            <span class="keyword">if</span> layer!=lastlayer:</span><br><span class="line">                ans.append(temp)</span><br><span class="line">                temp=[]</span><br><span class="line">            <span class="keyword">if</span> cur.left:</span><br><span class="line">                stack.append((cur.left,layer+<span class="number">1</span>))</span><br><span class="line">                temp.append(cur.left.val)</span><br><span class="line">            <span class="keyword">if</span> cur.right:</span><br><span class="line">                stack.append((cur.right,layer+<span class="number">1</span>))</span><br><span class="line">                temp.append(cur.right.val)</span><br><span class="line">            lastlayer=layer</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">levelOrder</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> []</span><br><span class="line">        res, queue = [], collections.deque()</span><br><span class="line">        queue.append(root)</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            tmp = []</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(queue)):</span><br><span class="line">                node = queue.popleft()</span><br><span class="line">                tmp.append(node.val)</span><br><span class="line">                <span class="keyword">if</span> node.left: queue.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right: queue.append(node.right)</span><br><span class="line">            res.append(tmp)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 32 - III. 从上到下打印二叉树 III</a></p><p>思路:在上面一题的基础上,在新增每一层的时候,用一个标志,奇数正加,偶数反加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">levelOrder</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:<span class="keyword">return</span> []</span><br><span class="line">        stack=collections.deque([(root,<span class="number">1</span>)])</span><br><span class="line">        ans=[]</span><br><span class="line">        temp=[root.val]</span><br><span class="line">        lastlayer=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(stack):</span><br><span class="line">            (cur,layer)=stack.popleft()</span><br><span class="line">            <span class="keyword">if</span> layer!=lastlayer:</span><br><span class="line">                <span class="keyword">if</span> layer&amp;<span class="number">1</span>:</span><br><span class="line">                    ans.append(temp)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    ans.append(temp[::-<span class="number">1</span>])</span><br><span class="line">                temp=[]</span><br><span class="line">            <span class="keyword">if</span> cur.left:</span><br><span class="line">                stack.append((cur.left,layer+<span class="number">1</span>))</span><br><span class="line">                temp.append(cur.left.val)</span><br><span class="line">            <span class="keyword">if</span> cur.right:</span><br><span class="line">                stack.append((cur.right,layer+<span class="number">1</span>))</span><br><span class="line">                temp.append(cur.right.val)</span><br><span class="line">            lastlayer=layer</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="第七天"><a class="markdownIt-Anchor" href="#第七天"></a> 第七天</h3><p><a href="https://leetcode.cn/problems/shu-de-zi-jie-gou-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 26. 树的子结构</a></p><p>思路:1. 先找到子树的根节点,然后对比剩下的部分是否一样,判断条件比较多  2.三种情况,一个是从当前节点比,一个是左子树的子树,一个是右子树的子树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isSubStructure</span>(<span class="params">self, A: TreeNode, B: TreeNode</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">recur</span>(<span class="params">A, B</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> B: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> A <span class="keyword">or</span> A.val != B.val: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> recur(A.left, B.left) <span class="keyword">and</span> recur(A.right, B.right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bool</span>(A <span class="keyword">and</span> B) <span class="keyword">and</span> (recur(A, B) <span class="keyword">or</span> self.isSubStructure(A.left, B) <span class="keyword">or</span> self.isSubStructure(A.right, B))</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/er-cha-shu-de-jing-xiang-lcof/description/">剑指 Offer 27. 二叉树的镜像</a></p><p>思路:递归交换左右子树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mirrorTree</span>(<span class="params">self, root: TreeNode</span>) -&gt; TreeNode:</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:<span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        l,r=<span class="literal">None</span>,<span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> root.left:</span><br><span class="line">            r=self.mirrorTree(root.left)</span><br><span class="line">        <span class="keyword">if</span> root.right:</span><br><span class="line">            l=self.mirrorTree(root.right)</span><br><span class="line">        root.right,root.left=r,l</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/dui-cheng-de-er-cha-shu-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 28. 对称的二叉树</a></p><p>错误思路:只比较了左右子树,没有从全局对比</p><p>题解:1.两个指针,反过来比(一个从左往右走,一个从右往左走)  2.交换左右子树再递归查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isSymmetric</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">a,b</span>):</span><br><span class="line">            <span class="keyword">if</span> a <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> b <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> a <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> b :</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> b <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> a:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> a.val != b.val:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> check(a.left,b.right) <span class="keyword">and</span> check(a.right,b.left)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> check(root,root)</span><br></pre></td></tr></table></figure><h3 id="第八天"><a class="markdownIt-Anchor" href="#第八天"></a> 第八天</h3><p><a href="https://leetcode.cn/problems/fei-bo-na-qi-shu-lie-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 10- I. 斐波那契数列</a><br /><a href="https://leetcode.cn/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 10- II. 青蛙跳台阶问题</a></p><p>思路:1.递归  2.记忆递归 3.动态规划 4.空间优化的动态规划</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">0</span>:<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        a=<span class="number">0</span></span><br><span class="line">        b=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">            a,b=b,a+b</span><br><span class="line">            a%=<span class="number">1e9</span>+<span class="number">7</span></span><br><span class="line">            b%=<span class="number">1e9</span>+<span class="number">7</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(b)</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/gu-piao-de-zui-da-li-run-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 63. 股票的最大利润</a></p><p>思路:保存最小的价格 一次遍历,比较答案和今天减去最小价格,更新最小价格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProfit</span>(<span class="params">self, prices: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># if len(prices)==0:</span></span><br><span class="line">        <span class="comment">#     return 0</span></span><br><span class="line">        <span class="comment"># ans=0</span></span><br><span class="line">        <span class="comment"># leftprofit=0</span></span><br><span class="line">        <span class="comment"># buyprice=prices[0]</span></span><br><span class="line">        <span class="comment"># for index in range(1,len(prices)):</span></span><br><span class="line">        <span class="comment">#     if prices[index]-prices[index-1]+leftprofit&gt;=0:</span></span><br><span class="line">        <span class="comment">#         leftprofit=prices[index]-prices[index-1]+leftprofit</span></span><br><span class="line">        <span class="comment">#         ans=max(ans,leftprofit)</span></span><br><span class="line">        <span class="comment">#     else:</span></span><br><span class="line">        <span class="comment">#         buyprice=prices[index]</span></span><br><span class="line">        <span class="comment">#         leftprofit=0</span></span><br><span class="line">        <span class="comment"># return ans</span></span><br><span class="line">        inf = <span class="built_in">int</span>(<span class="number">1e9</span>)</span><br><span class="line">        minprice = inf</span><br><span class="line">        maxprofit = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> price <span class="keyword">in</span> prices:</span><br><span class="line">            maxprofit = <span class="built_in">max</span>(price - minprice, maxprofit)</span><br><span class="line">            minprice = <span class="built_in">min</span>(price, minprice)</span><br><span class="line">        <span class="keyword">return</span> maxprofit</span><br></pre></td></tr></table></figure><h3 id="第九天"><a class="markdownIt-Anchor" href="#第九天"></a> 第九天</h3><p><a href="https://leetcode.cn/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 42. 连续子数组的最大和</a></p><p>思路:如果之前的加上当前的是负数,那就把当前的当作开始</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxSubArray</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># for i in range(1, len(nums)):</span></span><br><span class="line">        <span class="comment">#     nums[i] += max(nums[i - 1], 0)</span></span><br><span class="line">        <span class="comment"># return max(nums)</span></span><br><span class="line">        pre = <span class="number">0</span></span><br><span class="line">        maxAns = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> nums:</span><br><span class="line">            pre = <span class="built_in">max</span>(pre + x, x)</span><br><span class="line">            maxAns = <span class="built_in">max</span>(maxAns, pre)</span><br><span class="line">        <span class="keyword">return</span> maxAns</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/li-wu-de-zui-da-jie-zhi-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 47. 礼物的最大价值</a></p><p>思路:二维DP基础</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxValue</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># n=len(grid)</span></span><br><span class="line">        <span class="comment"># m=len(grid[0])</span></span><br><span class="line">        <span class="comment"># dp=[[0]*m for _ in range(n)]</span></span><br><span class="line">        <span class="comment"># dp[0][0]=grid[0][0]</span></span><br><span class="line">        <span class="comment"># for i in range(1,n):</span></span><br><span class="line">        <span class="comment">#     dp[i][0]=dp[i-1][0]+grid[i][0]</span></span><br><span class="line">        <span class="comment"># for i in range(1,m):</span></span><br><span class="line">        <span class="comment">#     dp[0][i]=dp[0][i-1]+grid[0][i]</span></span><br><span class="line">        <span class="comment"># for i in range(1,n):</span></span><br><span class="line">        <span class="comment">#     for j in range(1,m):</span></span><br><span class="line">        <span class="comment">#         dp[i][j]=max(dp[i-1][j],dp[i][j-1])+grid[i][j]</span></span><br><span class="line">        <span class="comment"># return dp[n-1][m-1]</span></span><br><span class="line">        m, n = <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n): <span class="comment"># 初始化第一行</span></span><br><span class="line">            grid[<span class="number">0</span>][j] += grid[<span class="number">0</span>][j - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m): <span class="comment"># 初始化第一列</span></span><br><span class="line">            grid[i][<span class="number">0</span>] += grid[i - <span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">                grid[i][j] += <span class="built_in">max</span>(grid[i][j - <span class="number">1</span>], grid[i - <span class="number">1</span>][j])</span><br><span class="line">        <span class="keyword">return</span> grid[-<span class="number">1</span>][-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="第十天"><a class="markdownIt-Anchor" href="#第十天"></a> 第十天</h3><p><a href="https://leetcode.cn/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 46. 把数字翻译成字符串</a></p><p>思路:如果和当前的数和前面的数组合小于26,当前的情况就可以由前一个数的情况加上前两个数的情况得到,如果大于25,那就只是能前面的情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">translateNum</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        num=<span class="built_in">str</span>(num)</span><br><span class="line">        length=<span class="built_in">len</span>(num)</span><br><span class="line">        <span class="keyword">if</span> length==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        a=<span class="number">1</span></span><br><span class="line">        b=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(num[<span class="number">0</span>])*<span class="number">10</span>+<span class="built_in">int</span>(num[<span class="number">1</span>])&lt;=<span class="number">25</span> <span class="keyword">and</span> <span class="built_in">int</span>(num[<span class="number">0</span>])*<span class="number">10</span>!=<span class="number">0</span>:</span><br><span class="line">            b=<span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            b=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> index,item <span class="keyword">in</span> <span class="built_in">enumerate</span>(num[<span class="number">2</span>:],<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span>(num[index-<span class="number">1</span>])*<span class="number">10</span>+<span class="built_in">int</span>(num[index])&lt;=<span class="number">25</span>  <span class="keyword">and</span> <span class="built_in">int</span>(num[index-<span class="number">1</span>])*<span class="number">10</span>!=<span class="number">0</span>:</span><br><span class="line">                b,a=a+b,b</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                b,a=b,b</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        s = str(num)</span></span><br><span class="line"><span class="string">        a = b = 1</span></span><br><span class="line"><span class="string">        for i in range(2, len(s) + 1):</span></span><br><span class="line"><span class="string">            tmp = s[i - 2:i]</span></span><br><span class="line"><span class="string">            c = a + b if &quot;10&quot; &lt;= tmp &lt;= &quot;25&quot; else a</span></span><br><span class="line"><span class="string">            b = a</span></span><br><span class="line"><span class="string">            a = c</span></span><br><span class="line"><span class="string">        return a</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 48. 最长不含重复字符的子字符串</a></p><p>思路:双指针维护当前不含重复字符的区间,用字典存区间里的字符,如果当前区间新增了一个不重复的,就更新答案,如果加了一个重复的,左指针一直移到不重复的点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lengthOfLongestSubstring</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left,right=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        length=<span class="built_in">len</span>(s)</span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line">        count=<span class="built_in">dict</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> right&lt;length:</span><br><span class="line">            <span class="keyword">if</span> count.get(s[right],-<span class="number">1</span>)==-<span class="number">1</span>:</span><br><span class="line">                count[s[right]]=<span class="number">1</span></span><br><span class="line">                right+=<span class="number">1</span></span><br><span class="line">                ans=<span class="built_in">max</span>(ans,right-left)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                count[s[left]]=-<span class="number">1</span></span><br><span class="line">                left+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans </span><br></pre></td></tr></table></figure><h3 id="第十一天"><a class="markdownIt-Anchor" href="#第十一天"></a> 第十一天</h3><p><a href="https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 22. 链表中倒数第k个节点</a></p><p>思路:遍历一遍得到长度,然后找到length-k的节点</p><p><a href="https://leetcode.cn/problems/shan-chu-lian-biao-de-jie-dian-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 18. 删除链表的节点</a></p><p>思路:存好前一个节点</p><h3 id="第十二天"><a class="markdownIt-Anchor" href="#第十二天"></a> 第十二天</h3><p><a href="https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 25. 合并两个排序的链表</a></p><p>思路:归并排序的合并</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeTwoLists</span>(<span class="params">self, l1: ListNode, l2: ListNode</span>) -&gt; ListNode:</span><br><span class="line">        ans=ListNode(-<span class="number">1</span>)</span><br><span class="line">        pre=ans</span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            <span class="keyword">if</span> l1.val&lt;l2.val:</span><br><span class="line">                pre.<span class="built_in">next</span>=l1</span><br><span class="line">                l1=l1.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pre.<span class="built_in">next</span>=l2</span><br><span class="line">                l2=l2.<span class="built_in">next</span></span><br><span class="line">            pre=pre.<span class="built_in">next</span></span><br><span class="line">        pre.<span class="built_in">next</span>=l1 <span class="keyword">if</span> l1 <span class="keyword">else</span> l2</span><br><span class="line">        <span class="keyword">return</span> ans.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 52. 两个链表的第一个公共节点</a></p><p>思路:A链表一个指针A,B链表一个指针B,如果A指针遍历完A了,就指向B链表,B同理,这两相当于把两个链表拼接了,AB-BA,这样解决了长度不一致的问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getIntersectionNode</span>(<span class="params">self, headA: ListNode, headB: ListNode</span>) -&gt; ListNode:</span><br><span class="line">        pA,pB=headA,headB</span><br><span class="line">        <span class="keyword">while</span> pA <span class="keyword">or</span> pB:</span><br><span class="line">            <span class="keyword">if</span> pA==pB:</span><br><span class="line">                <span class="keyword">return</span> pA</span><br><span class="line">            <span class="keyword">if</span> pA:</span><br><span class="line">                pA=pA.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pA=headB</span><br><span class="line">            <span class="keyword">if</span> pB:</span><br><span class="line">                pB=pB.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pB=headA</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="第十三天"><a class="markdownIt-Anchor" href="#第十三天"></a> 第十三天</h3><p><a href="https://leetcode.cn/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 21. 调整数组顺序使奇数位于偶数前面</a></p><p>思路:双指针,类似快排</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exchange</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        length=<span class="built_in">len</span>(nums)</span><br><span class="line">        left,right=<span class="number">0</span>,length-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left&lt;right:</span><br><span class="line">            flag=<span class="literal">False</span></span><br><span class="line">            <span class="keyword">while</span>  left&lt;length <span class="keyword">and</span>  nums[left]&amp;<span class="number">1</span>:</span><br><span class="line">                left+=<span class="number">1</span></span><br><span class="line">                flag=<span class="literal">True</span></span><br><span class="line">            <span class="keyword">while</span> right&gt;=<span class="number">0</span> <span class="keyword">and</span>  nums[right]&amp;<span class="number">1</span>==<span class="number">0</span>:</span><br><span class="line">                right-=<span class="number">1</span></span><br><span class="line">                flag=<span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> left&gt;right:</span><br><span class="line">                <span class="keyword">return</span> nums</span><br><span class="line">            nums[left],nums[right]=nums[right],nums[left]</span><br><span class="line">            left+=<span class="number">1</span></span><br><span class="line">            right-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/he-wei-sde-liang-ge-shu-zi-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 57. 和为s的两个数字</a></p><p>思路:双指针,一个从左一个从右,根据当前和的大小,移动指针</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        length=<span class="built_in">len</span>(nums)</span><br><span class="line">        left,right=<span class="number">0</span>,length-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left&lt;right:</span><br><span class="line">            <span class="keyword">if</span> nums[left]+nums[right]&gt;target:</span><br><span class="line">                right-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[left]+nums[right]&lt;target:</span><br><span class="line">                left+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> [nums[left],nums[right]]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/fan-zhuan-dan-ci-shun-xu-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7https://leetcode.cn/problems/fan-zhuan-dan-ci-shun-xu-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 58 - I. 翻转单词顺序</a></p><p>思路:分词转置,用队列手动实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseWords</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        word=s.split()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot; &quot;</span>.join(word[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h3 id="十四天"><a class="markdownIt-Anchor" href="#十四天"></a> 十四天</h3><p><a href="https://leetcode.cn/problems/ju-zhen-zhong-de-lu-jing-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 12. 矩阵中的路径</a></p><p>思路:从每一个格子dfs搜索</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exist</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]], word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        length=<span class="built_in">len</span>(word)</span><br><span class="line">        n=<span class="built_in">len</span>(board)</span><br><span class="line">        m=<span class="built_in">len</span>(board[<span class="number">0</span>])</span><br><span class="line">        visited=[[<span class="number">0</span>]*m <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">cur,x,y</span>):</span><br><span class="line">            <span class="keyword">if</span> board[x][y]!=word[cur]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> cur==length-<span class="number">1</span>:</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">for</span> i,j <span class="keyword">in</span> [(<span class="number">1</span>,<span class="number">0</span>),(-<span class="number">1</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">0</span>,-<span class="number">1</span>)]:</span><br><span class="line">                x_,y_=x+i,y+j</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span>&lt;=x_&lt;n <span class="keyword">and</span> <span class="number">0</span>&lt;=y_&lt;m <span class="keyword">and</span> <span class="keyword">not</span> visited[x_][y_]:</span><br><span class="line">                    visited[x_][y_]=<span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> dfs(cur+<span class="number">1</span>,x_,y_):</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                    visited[x_][y_]=<span class="number">0</span></span><br><span class="line">        </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                <span class="keyword">if</span> board[i][j]==word[<span class="number">0</span>]:</span><br><span class="line">                    visited[i][j]=<span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> dfs(<span class="number">0</span>,i,j):</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                    visited[i][j]=<span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">面试题13. 机器人的运动范围</a></p><p>思路:1.dfs搜索  2.两个for循环遍历,用字典存已访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">movingCount</span>(<span class="params">self, m: <span class="built_in">int</span>, n: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">a,b</span>):</span><br><span class="line">            t=<span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> num <span class="keyword">in</span> chain(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b)):</span><br><span class="line">                t+=<span class="built_in">int</span>(num)</span><br><span class="line">            <span class="keyword">if</span> t&lt;=k:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># visited=&#123;&#125;</span></span><br><span class="line">        <span class="comment"># ans=0</span></span><br><span class="line">        <span class="comment"># def dfs(x,y):</span></span><br><span class="line">        <span class="comment">#     for i,j in [(1,0),(-1,0),(0,1),(0,-1)]:</span></span><br><span class="line">        <span class="comment">#         x_,y_=x+i,y+j</span></span><br><span class="line">        <span class="comment">#         if 0&lt;=x_&lt;n and 0&lt;=y_&lt;m and (x_,y_) not in visited:</span></span><br><span class="line">        <span class="comment">#             visited[(x_,y_)]=1</span></span><br><span class="line">        <span class="comment">#             if check(x_,y_):</span></span><br><span class="line">        <span class="comment">#                 nonlocal ans</span></span><br><span class="line">        <span class="comment">#                 ans+=1</span></span><br><span class="line">        <span class="comment">#                 dfs(x_,y_)</span></span><br><span class="line">        <span class="comment"># if k&gt;=0:</span></span><br><span class="line">        <span class="comment">#     ans+=1</span></span><br><span class="line">        <span class="comment">#     visited[(0,0)]=1</span></span><br><span class="line">        <span class="comment">#     dfs(0,0)</span></span><br><span class="line">        <span class="comment"># return ans</span></span><br><span class="line">        visited=&#123;&#125;</span><br><span class="line">        visited[(<span class="number">0</span>,<span class="number">0</span>)]=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                <span class="keyword">if</span> ((i-<span class="number">1</span>,j) <span class="keyword">in</span> visited <span class="keyword">or</span> (i,j-<span class="number">1</span>) <span class="keyword">in</span> visited) :</span><br><span class="line">                    <span class="keyword">if</span> check(i,j):</span><br><span class="line">                        visited[(i,j)]=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(visited)</span><br></pre></td></tr></table></figure><h3 id="第十五天"><a class="markdownIt-Anchor" href="#第十五天"></a> 第十五天</h3><p><a href="https://leetcode.cn/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 34. 二叉树中和为某一值的路径</a></p><p>思路:dfs搜索并存储路径</p><p>题解:广搜,存节点的父节点,找到和之后反着找路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pathSum</span>(<span class="params">self, root: TreeNode, target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:<span class="keyword">return</span> []</span><br><span class="line">        ans=[]</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">curnode,cursum,path</span>):  <span class="comment"># s起点，e终点</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> curnode.left <span class="keyword">and</span> <span class="keyword">not</span> curnode.right:</span><br><span class="line">                <span class="keyword">if</span> cursum == target:</span><br><span class="line">                    <span class="keyword">nonlocal</span> ans</span><br><span class="line">                    ans.append(path[:])</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            <span class="keyword">if</span> curnode.left:</span><br><span class="line">                path.append(curnode.left.val)</span><br><span class="line">                dfs(curnode.left,cursum+curnode.left.val,path)</span><br><span class="line">                path.pop()</span><br><span class="line">            <span class="keyword">if</span> curnode.right:</span><br><span class="line">                path.append(curnode.right.val)</span><br><span class="line">                dfs(curnode.right,cursum+curnode.right.val,path)</span><br><span class="line">                path.pop()</span><br><span class="line">        dfs(root,root.val,[root.val])</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 36. 二叉搜索树与双向链表</a></p><p>思路:类似线索二叉树的构造,一个指针存上一个节点,注意的是第一个节点和最后一个节点的处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">treeToDoublyList</span>(<span class="params">self, root: <span class="string">&#x27;Node&#x27;</span></span>) -&gt; <span class="string">&#x27;Node&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:<span class="keyword">return</span> root</span><br><span class="line">        self.pre=<span class="literal">None</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">cur</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cur: <span class="keyword">return</span></span><br><span class="line">            dfs(cur.left)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.pre:</span><br><span class="line">                self.head=cur</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.pre.right,cur.left=cur,self.pre</span><br><span class="line">            self.pre=cur</span><br><span class="line">            dfs(cur.right)</span><br><span class="line">        dfs(root)</span><br><span class="line">        self.head.left=self.pre</span><br><span class="line">        self.pre.right=self.head</span><br><span class="line">        <span class="keyword">return</span> self.head</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 54. 二叉搜索树的第k大节点</a></p><p>思路:1.中序遍历,输出数组的k大节点  2.在遍历二叉树的时候,先搜右子树,再搜左子树,记录当前节点是第几大</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">kthLargest</span>(<span class="params">self, root: TreeNode, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        cnt=<span class="number">0</span></span><br><span class="line">        ans=-<span class="number">1</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">curnode</span>):  <span class="comment"># s起点，e终点</span></span><br><span class="line">            <span class="keyword">nonlocal</span> cnt</span><br><span class="line">            <span class="keyword">if</span> cnt&gt;k:<span class="keyword">return</span> </span><br><span class="line">            <span class="keyword">if</span> curnode.right:</span><br><span class="line">                dfs(curnode.right)</span><br><span class="line">            <span class="keyword">if</span> cnt+<span class="number">1</span>==k:</span><br><span class="line">                <span class="keyword">nonlocal</span> ans</span><br><span class="line">                ans=curnode.val</span><br><span class="line">            cnt+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cnt&gt;k:<span class="keyword">return</span> </span><br><span class="line">            <span class="keyword">if</span> curnode.left:</span><br><span class="line">                dfs(curnode.left)</span><br><span class="line">        dfs(root)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="第十六天"><a class="markdownIt-Anchor" href="#第十六天"></a> 第十六天</h3><p><a href="https://leetcode.cn/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">面试题45. 把数组排成最小的数</a></p><p>思路:根据数字排序,具体的,A,B两个数, 转为字符串拼接成AB和BA,逐个比较两个的大小,小的放前面,为什么转为AB,不同的数字不影响,比如123,124,主要防止这种情况1230和123,或者123和1234 ,这两个数字应该是在答案中挨在一起的,组合成AB,BA就是答案需要的最小数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minNumber</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">cmp</span>(<span class="params">a,b</span>):</span><br><span class="line">            a=<span class="built_in">str</span>(a)</span><br><span class="line">            b=<span class="built_in">str</span>(b)</span><br><span class="line">            tempa=a</span><br><span class="line">            a+=b</span><br><span class="line">            b+=tempa</span><br><span class="line">            <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(a,b):</span><br><span class="line">                <span class="keyword">if</span> i&lt;j:</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i&gt;j:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        nums.sort(key=functools.cmp_to_key(cmp))</span><br><span class="line">        <span class="built_in">print</span>(nums)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,nums))</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/bu-ke-pai-zhong-de-shun-zi-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">面试题61. 扑克牌中的顺子</a></p><p>思路：没读懂题目</p><p>题解: 就是判断五个数是不是连着的,但是大小王可以当作任何数. 判断不能有重复且最大值-最小值+大小王的数量应该小于5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isStraight</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        repeat = <span class="built_in">set</span>()</span><br><span class="line">        ma, mi = <span class="number">0</span>, <span class="number">14</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> num == <span class="number">0</span>: <span class="keyword">continue</span> <span class="comment"># 跳过大小王</span></span><br><span class="line">            ma = <span class="built_in">max</span>(ma, num) <span class="comment"># 最大牌</span></span><br><span class="line">            mi = <span class="built_in">min</span>(mi, num) <span class="comment"># 最小牌</span></span><br><span class="line">            <span class="keyword">if</span> num <span class="keyword">in</span> repeat: <span class="keyword">return</span> <span class="literal">False</span> <span class="comment"># 若有重复，提前返回 false</span></span><br><span class="line">            repeat.add(num) <span class="comment"># 添加牌至 Set</span></span><br><span class="line">        <span class="keyword">return</span> ma - mi &lt; <span class="number">5</span> <span class="comment"># 最大牌 - 最小牌 &lt; 5 则可构成顺子 </span></span><br></pre></td></tr></table></figure><h3 id="第十七天"><a class="markdownIt-Anchor" href="#第十七天"></a> 第十七天</h3><p><a href="https://leetcode.cn/problems/zui-xiao-de-kge-shu-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 40. 最小的k个数</a></p><p>思路:1.排序  2.堆排序  3.快速排序:如果当前作为基数的这个值下标正好是k,那么他左边的就是前k小的数,否则分开排序左右两边</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getLeastNumbers</span>(<span class="params">self, arr: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="comment"># if k==0:return []</span></span><br><span class="line">        <span class="comment"># a=[-arr[i] for i in range(k)]</span></span><br><span class="line">        <span class="comment"># heapq.heapify(a)</span></span><br><span class="line">        <span class="comment"># for item in arr[k:]:</span></span><br><span class="line">        <span class="comment">#     if -item &gt; a[0]:</span></span><br><span class="line">        <span class="comment">#         heapq.heappushpop(a,-item)</span></span><br><span class="line">        <span class="comment"># return list(map(lambda x:-x,a))</span></span><br><span class="line">        <span class="keyword">if</span> k==<span class="number">0</span>:<span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">if</span> k&gt;=<span class="built_in">len</span>(arr):<span class="keyword">return</span> arr</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">l,r</span>):</span><br><span class="line">            i,j=l,r</span><br><span class="line">            <span class="keyword">while</span> i&lt;j:</span><br><span class="line">                <span class="keyword">while</span> i&lt;j <span class="keyword">and</span> arr[j]&gt;=arr[l]:j-=<span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> i&lt;j <span class="keyword">and</span> arr[i]&lt;=arr[l]:i+=<span class="number">1</span></span><br><span class="line">                </span><br><span class="line">                arr[i],arr[j]=arr[j],arr[i]</span><br><span class="line">            arr[i],arr[l]=arr[l],arr[i]</span><br><span class="line">            <span class="keyword">if</span> k&lt;i:<span class="keyword">return</span> quick_sort(l,i-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> k&gt;i:<span class="keyword">return</span> quick_sort(i+<span class="number">1</span>,r)</span><br><span class="line">            <span class="keyword">return</span> arr[:k]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> quick_sort(<span class="number">0</span>,<span class="built_in">len</span>(arr)-<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/shu-ju-liu-zhong-de-zhong-wei-shu-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 41. 数据流中的中位数</a></p><p>思路:1.二分查找插入位置,保持数组有序  2.两个优先队列,一个存左半部分一个存右半部分,固定一个是奇数,或者两个都是偶数,这样取值的时候固定取一个一个队列或者两个一起取,存值的时候,也要注意奇偶数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MedianFinder</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># self.list=[]</span></span><br><span class="line">        <span class="comment"># self.length=0</span></span><br><span class="line">        <span class="comment"># 存小  /大项堆</span></span><br><span class="line">        self.A=[]</span><br><span class="line">        <span class="comment"># 存大   /小项堆</span></span><br><span class="line">        self.B=[]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addNum</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># if self.length==0:</span></span><br><span class="line">        <span class="comment">#     self.list.append(num)</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment">#     index=bisect.bisect_left(self.list,num)</span></span><br><span class="line">        <span class="comment">#     self.list.insert(index,num)</span></span><br><span class="line">        <span class="comment"># self.length+=1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(self.A)+<span class="built_in">len</span>(self.B))&amp;<span class="number">1</span>:</span><br><span class="line">            heappush(self.A,-heappushpop(self.B,num))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            heappush(self.B,-heappushpop(self.A,-num))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findMedian</span>(<span class="params">self</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">        <span class="comment"># if self.length&amp;1:</span></span><br><span class="line">        <span class="comment">#     return self.list[self.length//2]</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment">#     return (self.list[self.length//2-1]+self.list[self.length//2])/2</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(self.A)+<span class="built_in">len</span>(self.B))&amp;<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> self.B[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> (self.B[<span class="number">0</span>]-self.A[<span class="number">0</span>])/<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="第十八天"><a class="markdownIt-Anchor" href="#第十八天"></a> 第十八天</h3><p><a href="https://leetcode.cn/problems/er-cha-shu-de-shen-du-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 55 - I. 二叉树的深度</a></p><p>思路:广搜的层次遍历,深搜也行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxDepth</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line">        que=deque()</span><br><span class="line">        que.append(root)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> que:</span><br><span class="line">            length=<span class="built_in">len</span>(que)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">                cur=que.popleft()</span><br><span class="line">                <span class="keyword">if</span> cur.left:</span><br><span class="line">                    que.append(cur.left)</span><br><span class="line">                <span class="keyword">if</span> cur.right:</span><br><span class="line">                    que.append(cur.right)</span><br><span class="line">            ans+=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/ping-heng-er-cha-shu-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 55 - II. 平衡二叉树</a></p><p>思路:和上面一题同理,都是计算树的深度,这题递归求比较方便</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    ans=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isBalanced</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">aaa</span>(<span class="params">cur</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cur:<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cur.left <span class="keyword">and</span> <span class="keyword">not</span> cur.right:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            left=self.isBalanced(cur.left)</span><br><span class="line">            right=self.isBalanced(cur.right)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(left-right)&gt;<span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(left,right)</span><br><span class="line">                self.ans=<span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(left,right)+<span class="number">1</span></span><br><span class="line">        aaa(root)</span><br><span class="line">        <span class="keyword">return</span> self.ans</span><br></pre></td></tr></table></figure><h3 id="第十九天"><a class="markdownIt-Anchor" href="#第十九天"></a> 第十九天</h3><p><a href="https://leetcode.cn/problems/qiu-12n-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 64. 求1+2+…+n</a></p><p>思路:无,</p><p>题解:利用逻辑运算的短路性质当作if判断,n&gt;1的时候 执行递归,否则就是直接短路了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sumNums</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n &gt; <span class="number">1</span> <span class="keyword">and</span> self.sumNums(n - <span class="number">1</span>)</span><br><span class="line">        self.res += n</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 68 - I. 二叉搜索树的最近公共祖先</a></p><p>思路:如果两个值都小于当前节点,则递归搜索左子树,如果都大于当前节点,递归搜索右子树,否则当前节点就是公共祖先</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.ans=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lowestCommonAncestor</span>(<span class="params">self, root: <span class="string">&#x27;TreeNode&#x27;</span>, p: <span class="string">&#x27;TreeNode&#x27;</span>, q: <span class="string">&#x27;TreeNode&#x27;</span></span>) -&gt; <span class="string">&#x27;TreeNode&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:<span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">do</span>(<span class="params">cur</span>):</span><br><span class="line">            <span class="keyword">if</span> p.val&lt;cur.val <span class="keyword">and</span> q.val&lt;cur.val:</span><br><span class="line">                do(cur.left)</span><br><span class="line">            <span class="keyword">elif</span> p.val&gt;cur.val <span class="keyword">and</span> q.val &gt; cur.val:</span><br><span class="line">                do(cur.right)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.ans=cur</span><br><span class="line">        do(root)</span><br><span class="line">        <span class="keyword">return</span> self.ans</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 68 - II. 二叉树的最近公共祖先</a></p><p>思路:1.dfs搜索一遍存父节点 然后用字典存一个节点的父节点,搜另一个节点时,如果父节点存在就是祖先  2.在深搜的时候,分条件,如果 节点分别在左右子树  或者 一个节点在子树,另一个节点就是当前节点,那么就是答案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    ans=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lowestCommonAncestor</span>(<span class="params">self, root: TreeNode, p: TreeNode, q: TreeNode</span>) -&gt; TreeNode:</span><br><span class="line">        <span class="comment"># def dfs(cur):</span></span><br><span class="line">        <span class="comment">#     if not cur :return False</span></span><br><span class="line">        <span class="comment">#     left=dfs(cur.left)</span></span><br><span class="line">        <span class="comment">#     right=dfs(cur.right)</span></span><br><span class="line">        <span class="comment">#     if (left and right) or ((left or right) and (cur==p or cur == q)):</span></span><br><span class="line">        <span class="comment">#         self.ans=cur</span></span><br><span class="line">        <span class="comment">#     return left or right or cur==p or cur == q</span></span><br><span class="line">        <span class="comment"># dfs(root)</span></span><br><span class="line">        <span class="comment"># return self.ans</span></span><br><span class="line">        fa=&#123;&#125;</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">cur</span>):</span><br><span class="line">            <span class="keyword">if</span> cur.left:</span><br><span class="line">                fa[cur.left.val]=cur</span><br><span class="line">                dfs(cur.left)</span><br><span class="line">            <span class="keyword">if</span> cur.right:</span><br><span class="line">                fa[cur.right.val]=cur</span><br><span class="line">                dfs(cur.right)</span><br><span class="line">        fa[root.val]=<span class="literal">None</span></span><br><span class="line">        dfs(root)</span><br><span class="line">        vis=&#123;&#125;</span><br><span class="line">        <span class="keyword">while</span> p:</span><br><span class="line">            vis[p]=<span class="number">1</span></span><br><span class="line">            p=fa[p.val]</span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            <span class="keyword">if</span> q <span class="keyword">in</span> vis:</span><br><span class="line">                <span class="keyword">return</span> q</span><br><span class="line">            q=fa[q.val]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="第二十天"><a class="markdownIt-Anchor" href="#第二十天"></a> 第二十天</h3><p><a href="https://leetcode.cn/problems/zhong-jian-er-cha-shu-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 07. 重建二叉树</a><br />思路:根据两个遍历顺序,画图分析一下,递归的建树就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">buildTree</span>(<span class="params">self, preorder: <span class="type">List</span>[<span class="built_in">int</span>], inorder: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; TreeNode:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">pre,ino</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(pre)==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            root=TreeNode(pre[<span class="number">0</span>])</span><br><span class="line">            root_index=ino.index(pre[<span class="number">0</span>])</span><br><span class="line">            root.left=build(pre[<span class="number">1</span>:<span class="number">1</span>+root_index],ino[:root_index])</span><br><span class="line">            root.right=build(pre[<span class="number">1</span>+root_index:],ino[root_index+<span class="number">1</span>:])</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">return</span> build(preorder,inorder)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 33. 二叉搜索树的后序遍历序列</a><br />思路:二叉搜索树,中序遍历是顺序的,有了后序遍历,排序一下就得到了中序遍历,看看这两个序列能不能建成一个树,能建成就是正确的后续遍历,否则就不是,用了一下上一题的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verifyPostorder</span>(<span class="params">self, postorder: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        inorder=<span class="built_in">sorted</span>(postorder)</span><br><span class="line">        flag=<span class="literal">True</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">pre,ino</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(pre)==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            root=TreeNode(pre[-<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                root_index=ino.index(pre[-<span class="number">1</span>])</span><br><span class="line">                root.left=build(pre[:root_index],ino[:root_index])</span><br><span class="line">                root.right=build(pre[root_index:-<span class="number">1</span>],ino[root_index+<span class="number">1</span>:])</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">nonlocal</span> flag</span><br><span class="line">                flag=<span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        a=build(postorder,inorder)</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">        <span class="keyword">return</span> flag</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 16. 数值的整数次方</a><br />思路:快速幂,但是要注意的是n的正负数,奇数就单独乘一次x,偶数就乘x的平方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myPow</span>(<span class="params">self, x: <span class="built_in">float</span>, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">        res = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> n &amp; <span class="number">1</span>:  </span><br><span class="line">                    res *= x</span><br><span class="line">                x *= x</span><br><span class="line">                n &gt;&gt;= <span class="number">1</span>  </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n=<span class="built_in">abs</span>(n)</span><br><span class="line">            <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> n &amp; <span class="number">1</span>:  </span><br><span class="line">                    res /= x</span><br><span class="line">                x *= x</span><br><span class="line">                n &gt;&gt;= <span class="number">1</span>  </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="第二十一天"><a class="markdownIt-Anchor" href="#第二十一天"></a> 第二十一天</h3><p><a href="https://leetcode.cn/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 15. 二进制中1的个数</a><br />思路:位移与1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hammingWeight</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> n:</span><br><span class="line">            <span class="keyword">if</span> n&amp;<span class="number">1</span>:</span><br><span class="line">                ans+=<span class="number">1</span></span><br><span class="line">            n&gt;&gt;=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans </span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/bu-yong-jia-jian-cheng-chu-zuo-jia-fa-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 65. 不用加减乘除做加法</a><br />思路:位运算,我选择不做</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">MASK1 = <span class="number">4294967296</span>  <span class="comment"># 2^32</span></span><br><span class="line">MASK2 = <span class="number">2147483648</span>  <span class="comment"># 2^31</span></span><br><span class="line">MASK3 = <span class="number">2147483647</span>  <span class="comment"># 2^31-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        a %= MASK1</span><br><span class="line">        b %= MASK1</span><br><span class="line">        <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">            carry = ((a &amp; b) &lt;&lt; <span class="number">1</span>) % MASK1</span><br><span class="line">            a = (a ^ b) % MASK1</span><br><span class="line">            b = carry</span><br><span class="line">        <span class="keyword">if</span> a &amp; MASK2:  <span class="comment"># 负数</span></span><br><span class="line">            <span class="keyword">return</span> ~((a ^ MASK2) ^ MASK3)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 正数</span></span><br><span class="line">            <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><h3 id="第二十二天"><a class="markdownIt-Anchor" href="#第二十二天"></a> 第二十二天</h3><p><a href="https://leetcode.cn/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 56 - I. 数组中数字出现的次数</a><br />思路:两个相同的数异或为0,但是数据里面有两个只出现一次的数,把数据全部异或一遍之后,结果就是这两个数异或的结果,从后往前遍历这个结果,遇见的第一个1,就是这两个数不同的位置,然后根据这个位置把数组分成两份,这两份里面的数字异或完就剩下只出现一次的数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">singleNumbers</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        n,x,y,m=<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> nums:</span><br><span class="line">            n^=item</span><br><span class="line">        <span class="keyword">while</span> n&amp;m==<span class="number">0</span>:</span><br><span class="line">            m&lt;&lt;=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> item&amp;m:</span><br><span class="line">                x^=item</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                y^=item</span><br><span class="line">        <span class="keyword">return</span> [x,y]</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 56 - II. 数组中数字出现的次数 II</a></p><p>思路:统计每一位上1出现的次数,然后对3取余,剩下位置上的1组成的数字就是只出现一次的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">singleNumber</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        counts = [<span class="number">0</span>] * <span class="number">32</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">                counts[j] += num &amp; <span class="number">1</span></span><br><span class="line">                num &gt;&gt;= <span class="number">1</span></span><br><span class="line">        counts=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x%<span class="number">3</span>,counts))</span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            <span class="keyword">if</span> counts[j]:</span><br><span class="line">                temp=<span class="number">1</span>&lt;&lt;j</span><br><span class="line">                ans^=temp</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="第二十三天"><a class="markdownIt-Anchor" href="#第二十三天"></a> 第二十三天</h3><p><a href="https://leetcode.cn/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 39. 数组中出现次数超过一半的数字</a></p><p>思路:1.常规排序或者计数  2.使用投票,随机选取一个数字,如果后面的数字等于他,票数加1,否则票数-1,如果票数为0,就重新换一个数字选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">majorityElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        votes = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> votes == <span class="number">0</span>: x = num</span><br><span class="line">            votes += <span class="number">1</span> <span class="keyword">if</span> num == x <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line">        <span class="comment"># 验证 x 是否为众数</span></span><br><span class="line">        <span class="comment"># for num in nums:</span></span><br><span class="line">        <span class="comment">#     if num == x: count += 1</span></span><br><span class="line">        <span class="comment"># return x if count &gt; len(nums) // 2 else 0 # 当无众数时返回 0</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/gou-jian-cheng-ji-shu-zu-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 66. 构建乘积数组</a></p><p>思路:正过来乘一遍,乘上之前的数,反过来乘一遍,乘上之后的数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">constructArr</span>(<span class="params">self, a: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        length=<span class="built_in">len</span>(a)</span><br><span class="line">        ans=[]</span><br><span class="line">        temp=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> index,item <span class="keyword">in</span> <span class="built_in">enumerate</span>(a):</span><br><span class="line">            ans.append(temp)</span><br><span class="line">            temp*=item</span><br><span class="line">        temp=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(length-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            ans[index]*=temp</span><br><span class="line">            temp*=a[index]</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="第二十四天"><a class="markdownIt-Anchor" href="#第二十四天"></a> 第二十四天</h3><p><a href="https://leetcode.cn/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 57 - II. 和为s的连续正数序列</a></p><p>思路:双指针维护一个区间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findContinuousSequence</span>(<span class="params">self, target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        ans=[]</span><br><span class="line">        cursum=<span class="number">0</span></span><br><span class="line">        left,right=<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left&lt;target:</span><br><span class="line">            <span class="keyword">if</span> cursum&gt;target:</span><br><span class="line">                cursum-=left</span><br><span class="line">                left+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> cursum&lt;target:</span><br><span class="line">                cursum+=right</span><br><span class="line">                right+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ans.append(<span class="built_in">list</span>(<span class="built_in">range</span>(left,right)))</span><br><span class="line">                cursum-=left</span><br><span class="line">                left+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/jian-sheng-zi-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 14- I. 剪绳子</a></p><p>思路:dp,当前的数字,可以由比他小的任意两个数的乘积得到,这两个数同样可以由比他们小的乘积得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cuttingRope</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">2</span>:<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">3</span>:<span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        dp=[<span class="number">0</span>]*(n+<span class="number">1</span>)</span><br><span class="line">        dp[<span class="number">2</span>]=<span class="number">2</span></span><br><span class="line">        dp[<span class="number">3</span>]=<span class="number">3</span></span><br><span class="line">        dp[<span class="number">4</span>]=<span class="number">4</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,i):</span><br><span class="line">                dp[i]=<span class="built_in">max</span>(dp[i],dp[i-j]*dp[j])</span><br><span class="line">        <span class="keyword">return</span> dp[n]</span><br><span class="line">        <span class="comment"># 只考虑2,3就行,证明略</span></span><br><span class="line">        <span class="comment">#  dp[i] = max(2 * (i - 2), 2 * dp[i - 2], 3 * (i - 3), 3 * dp[i - 3])</span></span><br><span class="line">        <span class="comment"># 只考虑分成2,3</span></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 62. 圆圈中最后剩下的数字</a></p><p>思路:模拟会超时,每次删除一个数字,就相当于把后面的数字挪到前面了,根据这个性质,逆着推,在前面加上m个数,然后对当前的数据量取余,就得到了这个数字的原始位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lastRemaining</span>(<span class="params">self, n: <span class="built_in">int</span>, m: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># nums=list(range(n))</span></span><br><span class="line">        <span class="comment"># start=0</span></span><br><span class="line">        <span class="comment"># while len(nums)!=1:</span></span><br><span class="line">        <span class="comment">#     length=len(nums)</span></span><br><span class="line">        <span class="comment">#     num=nums[(start+m-1)%length]</span></span><br><span class="line">        <span class="comment">#     nums.remove(num)</span></span><br><span class="line">        <span class="comment">#     start=(start+m-1)%length</span></span><br><span class="line">        <span class="comment"># return nums[0]</span></span><br><span class="line">        x=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">            x=(x+m)%i</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h3 id="第二十五天"><a class="markdownIt-Anchor" href="#第二十五天"></a> 第二十五天</h3><p><a href="https://leetcode.cn/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/description/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 29. 顺时针打印矩阵</a></p><p>思路:一圈圈的模拟,从左往右,从上往下,从右往左,从下往上,坐标在左上角和右下角,每次走完一行都修改边界</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">spiralOrder</span>(<span class="params">self, matrix:[[<span class="built_in">int</span>]]</span>) -&gt; [<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix: <span class="keyword">return</span> []</span><br><span class="line">        l, r, t, b, res = <span class="number">0</span>, <span class="built_in">len</span>(matrix[<span class="number">0</span>]) - <span class="number">1</span>, <span class="number">0</span>, <span class="built_in">len</span>(matrix) - <span class="number">1</span>, []</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l, r + <span class="number">1</span>): res.append(matrix[t][i]) <span class="comment"># left to right</span></span><br><span class="line">            t += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> t &gt; b: <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t, b + <span class="number">1</span>): res.append(matrix[i][r]) <span class="comment"># top to bottom</span></span><br><span class="line">            r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> l &gt; r: <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r, l - <span class="number">1</span>, -<span class="number">1</span>): res.append(matrix[b][i]) <span class="comment"># right to left</span></span><br><span class="line">            b -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> t &gt; b: <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(b, t - <span class="number">1</span>, -<span class="number">1</span>): res.append(matrix[i][l]) <span class="comment"># bottom to top</span></span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> l &gt; r: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/description/?envType=study-plan&amp;id=lcof&amp;plan=lcof&amp;plan_progress=fa86zc7">剑指 Offer 31. 栈的压入、弹出序列</a></p><p>思路:如果是正确的顺序,那么一进一出,肯定是正好的,两个队列一起操作,遇到出栈顺序的数字就出栈,模拟,不正确的顺序栈内最后会剩下元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validateStackSequences</span>(<span class="params">self, pushed: <span class="type">List</span>[<span class="built_in">int</span>], popped: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        st, j = [], <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> pushed:</span><br><span class="line">            st.append(x)</span><br><span class="line">            <span class="keyword">while</span> st <span class="keyword">and</span> st[-<span class="number">1</span>] == popped[j]:</span><br><span class="line">                st.pop()</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(st) == <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="第二十六天"><a class="markdownIt-Anchor" href="#第二十六天"></a> 第二十六天</h3><p><a href=""></a></p><p>思路:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href=""></a></p><p>思路:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href=""></a></p><p>思路:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href=""></a></p><p>思路:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href=""></a></p><p>思路:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href=""></a></p><p>思路:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href=""></a></p><p>思路:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href=""></a></p><p>思路:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href=""></a></p><p>思路:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;leeccode剑指offer1刷题记录&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leeccode剑指offer1刷题记录&quot;&gt;&lt;/a&gt; LeecCode剑指offer1刷题记录&lt;/h2&gt;
&lt;h3 id=&quot;第一天&quot;&gt;&lt;a class</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="算法刷题笔记" scheme="https://gladdduck.github.io/tags/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://gladdduck.github.io/2023/03/09/python3lib/"/>
    <id>https://gladdduck.github.io/2023/03/09/python3lib/</id>
    <published>2023-03-09T15:01:28.592Z</published>
    <updated>2023-03-09T15:01:28.593Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># help()函数查看</span></span><br><span class="line"><span class="comment"># https://learnku.com/docs/pymotw/date-and-time/3380</span></span><br></pre></td></tr></table></figure><h2 id="文本处理"><a class="markdownIt-Anchor" href="#文本处理"></a> 文本处理</h2><h3 id="string"><a class="markdownIt-Anchor" href="#string"></a> string</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="comment"># 文本常量,格式化,模板</span></span><br><span class="line"><span class="built_in">print</span>(string.ascii_letters)</span><br><span class="line"><span class="built_in">print</span>(string.printable )</span><br><span class="line"><span class="built_in">print</span>(string.hexdigits)</span><br><span class="line"><span class="built_in">print</span>(string.octdigits)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:&lt;30&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;left aligned&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:0&gt;30&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;right aligned&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:^30&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;centered&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:*^30&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;centered&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;<span class="string">&quot;centered&quot;</span>:*^<span class="number">30</span>&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;int: &#123;0:d&#125;;  hex: &#123;0:x&#125;;  oct: &#123;0:o&#125;;  bin: &#123;0:b&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">42</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;int: &#123;0:d&#125;;  hex: &#123;0:#x&#125;;  oct: &#123;0:#o&#125;;  bin: &#123;0:#b&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">42</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;int: <span class="subst">&#123;<span class="number">42</span>:d&#125;</span>;  hex: <span class="subst">&#123;<span class="number">42</span>:#x&#125;</span>;  oct: <span class="subst">&#123;<span class="number">42</span>:#o&#125;</span>;  bin: <span class="subst">&#123;<span class="number">42</span>:#b&#125;</span>&quot;</span>)</span><br><span class="line"> <span class="comment"># 总是显示它符号</span></span><br><span class="line">formatstr = <span class="string">&#x27;&#123;:+f&#125;; &#123;:+f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">3.14</span>, -<span class="number">3.14</span>) </span><br><span class="line"><span class="built_in">print</span>(formatstr)   </span><br><span class="line"><span class="comment"># 正数前显示空格</span></span><br><span class="line">formatstr = <span class="string">&#x27;&#123;: f&#125;; &#123;: f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">3.14</span>, -<span class="number">3.14</span>)  </span><br><span class="line"><span class="built_in">print</span>(formatstr)   </span><br><span class="line"><span class="comment"># 只显示负号 同 &#x27;&#123;:f&#125;; &#123;:f&#125;&#x27;</span></span><br><span class="line">formatstr = <span class="string">&#x27;&#123;:-f&#125;; &#123;:-f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">3.14</span>, -<span class="number">3.14</span>)  </span><br><span class="line"><span class="built_in">print</span>(formatstr)   </span><br></pre></td></tr></table></figure><pre><code>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!&quot;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~ 0123456789abcdefABCDEF01234567left aligned                  00000000000000000right aligned           centered           ***********centered**********************centered***********int: 42;  hex: 2a;  oct: 52;  bin: 101010int: 42;  hex: 0x2a;  oct: 0o52;  bin: 0b101010int: 42;  hex: 0x2a;  oct: 0o52;  bin: 0b101010+3.140000; -3.140000 3.140000; -3.1400003.140000; -3.140000</code></pre><h3 id="textwrap"><a class="markdownIt-Anchor" href="#textwrap"></a> textwrap</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line"><span class="comment"># 多行文本处理,格式化文本段落(缩进)</span></span><br><span class="line">sample_text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    The textwrap module can be used to format text for output in</span></span><br><span class="line"><span class="string">    situations where pretty-printing is desired.  It offers</span></span><br><span class="line"><span class="string">    programmatic functionality similar to the paragraph wrapping</span></span><br><span class="line"><span class="string">    or filling features found in many text editors.</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">dedented_text = textwrap.dedent(sample_text).strip()</span><br><span class="line"><span class="built_in">print</span>(dedented_text)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">for</span> width <span class="keyword">in</span> [<span class="number">45</span>, <span class="number">60</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; Columns:\n&#x27;</span>.<span class="built_in">format</span>(width))</span><br><span class="line">    <span class="built_in">print</span>(textwrap.fill(dedented_text, width=width))</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dedented_text = textwrap.dedent(sample_text).strip()</span><br><span class="line"><span class="built_in">print</span>(textwrap.fill(dedented_text,</span><br><span class="line">                    initial_indent=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    subsequent_indent=<span class="string">&#x27; &#x27;</span> * <span class="number">4</span>,</span><br><span class="line">                    width=<span class="number">50</span>,</span><br><span class="line">                    ))</span><br></pre></td></tr></table></figure><pre><code>The textwrap module can be used to format text for output insituations where pretty-printing is desired.  It offersprogrammatic functionality similar to the paragraph wrappingor filling features found in many text editors.45 Columns:The textwrap module can be used to formattext for output in situations where pretty-printing is desired.  It offers programmaticfunctionality similar to the paragraphwrapping or filling features found in manytext editors.60 Columns:The textwrap module can be used to format text for output insituations where pretty-printing is desired.  It offersprogrammatic functionality similar to the paragraph wrappingor filling features found in many text editors.The textwrap module can be used to format text for    output in situations where pretty-printing is    desired.  It offers programmatic functionality    similar to the paragraph wrapping or filling    features found in many text editors.</code></pre><h3 id="re"><a class="markdownIt-Anchor" href="#re"></a> re</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># **正则表达式**</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.直接用re模块的函数搜索</span></span><br><span class="line"><span class="comment"># 2.先用compile编译，然后用编译过的搜索</span></span><br><span class="line"><span class="comment"># 匹配</span></span><br><span class="line">pattern = <span class="string">&#x27;this&#x27;</span></span><br><span class="line">text = <span class="string">&#x27;Does this text match the pattern?&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> = re.search(pattern, text)</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">match</span>.start()</span><br><span class="line">e = <span class="keyword">match</span>.end()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Found &quot;&#123;&#125;&quot;\nin &quot;&#123;&#125;&quot;\nfrom &#123;&#125; to &#123;&#125; (&quot;&#123;&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">    <span class="keyword">match</span>.re.pattern, <span class="keyword">match</span>.string, s, e, text[s:e]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询所有</span></span><br><span class="line">text = <span class="string">&#x27;abbaaabbbbaaaaa&#x27;</span></span><br><span class="line"></span><br><span class="line">pattern = <span class="string">&#x27;ab&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> re.findall(pattern, text):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Found &#123;!r&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="keyword">match</span>))</span><br><span class="line">    </span><br><span class="line">text = <span class="string">&#x27;This is some text -- with punctuation.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(text)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment"># 组匹配</span></span><br><span class="line">patterns = [</span><br><span class="line">    (<span class="string">r&#x27;^(\w+)&#x27;</span>, <span class="string">&#x27;word at start of string&#x27;</span>),</span><br><span class="line">    (<span class="string">r&#x27;(\w+)\S*$&#x27;</span>, <span class="string">&#x27;word at end, with optional punctuation&#x27;</span>),</span><br><span class="line">    (<span class="string">r&#x27;(\bt\w+)\W+(\w+)&#x27;</span>, <span class="string">&#x27;word starting with t, another word&#x27;</span>),</span><br><span class="line">    (<span class="string">r&#x27;(\w+t)\b&#x27;</span>, <span class="string">&#x27;word ending with t&#x27;</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pattern, desc <span class="keyword">in</span> patterns:</span><br><span class="line">    regex = re.<span class="built_in">compile</span>(pattern)</span><br><span class="line">    <span class="keyword">match</span> = regex.search(text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#x27;&#123;&#125;&#x27; (&#123;&#125;)\n&quot;</span>.<span class="built_in">format</span>(pattern, desc))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;  &#x27;</span>, <span class="keyword">match</span>.groups())</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line">re.sub()</span><br><span class="line"><span class="comment"># 拆分</span></span><br><span class="line">re.split()</span><br></pre></td></tr></table></figure><pre><code>Found &quot;this&quot;in &quot;Does this text match the pattern?&quot;from 5 to 9 (&quot;this&quot;)Found 'ab'Found 'ab'This is some text -- with punctuation.'^(\w+)' (word at start of string)   ('This',)'(\w+)\S*$' (word at end, with optional punctuation)   ('punctuation',)'(\bt\w+)\W+(\w+)' (word starting with t, another word)   ('text', 'with')'(\w+t)\b' (word ending with t)   ('text',)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">*:0次或多次</span></span><br><span class="line"><span class="string">+:一次或多次</span></span><br><span class="line"><span class="string">?:零次或一次</span></span><br><span class="line"><span class="string">&#123;a,b&#125;:指定出现次数</span></span><br><span class="line"><span class="string">?:在重复指令后面,取消贪心模式</span></span><br><span class="line"><span class="string">[ab]:匹配a或b</span></span><br><span class="line"><span class="string">[^ab]:不匹配a和b</span></span><br><span class="line"><span class="string">.:任意单个字符</span></span><br><span class="line"><span class="string">\d:数字</span></span><br><span class="line"><span class="string">\D:非数字</span></span><br><span class="line"><span class="string">\s:空白符(制表符,空格,换行)</span></span><br><span class="line"><span class="string">\S:非空白符</span></span><br><span class="line"><span class="string">\w:字母数字</span></span><br><span class="line"><span class="string">\W:非字母数字</span></span><br><span class="line"><span class="string">(?&lt;=pattern):匹配pattern开头的 (?&lt;=exp2)exp1:查找 exp2 后面的 exp1。</span></span><br><span class="line"><span class="string">(?&lt;!pattern):不匹配pattern开头的 (?&lt;!exp2)exp1:查找前面不是 exp2 的 exp1。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="difflib"><a class="markdownIt-Anchor" href="#difflib"></a> difflib</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> difflib</span><br><span class="line"><span class="comment"># 字符串比较序列</span></span><br><span class="line">text1 = <span class="string">&quot;&quot;&quot;Lorem ipsum dolor sit amet, consectetuer adipiscing</span></span><br><span class="line"><span class="string">elit. Integer eu lacus accumsan arcu fermentum euismod. Donec</span></span><br><span class="line"><span class="string">pulvinar porttitor tellus. Aliquam venenatis. Donec facilisis</span></span><br><span class="line"><span class="string">pharetra tortor.  In nec mauris eget magna consequat</span></span><br><span class="line"><span class="string">convalis. Nam sed sem vitae odio pellentesque interdum. Sed</span></span><br><span class="line"><span class="string">consequat viverra nisl. Suspendisse arcu metus, blandit quis,</span></span><br><span class="line"><span class="string">rhoncus ac, pharetra eget, velit. Mauris urna. Morbi nonummy</span></span><br><span class="line"><span class="string">molestie orci. Praesent nisi elit, fringilla ac, suscipit non,</span></span><br><span class="line"><span class="string">tristique vel, mauris. Curabitur vel lorem id nisl porta</span></span><br><span class="line"><span class="string">adipiscing. Suspendisse eu lectus. In nunc. Duis vulputate</span></span><br><span class="line"><span class="string">tristique enim. Donec quis lectus a justo imperdiet tempus.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">text1_lines = text1.splitlines()</span><br><span class="line"></span><br><span class="line">text2 = <span class="string">&quot;&quot;&quot;Lorem ipsum dolor sit amet, consectetuer adipiscing</span></span><br><span class="line"><span class="string">elit. Integer eu lacus accumsan arcu fermentum euismod. Donec</span></span><br><span class="line"><span class="string">pulvinar, porttitor tellus. Aliquam venenatis. Donec facilisis</span></span><br><span class="line"><span class="string">pharetra tortor. In nec mauris eget magna consequat</span></span><br><span class="line"><span class="string">convalis. Nam cras vitae mi vitae odio pellentesque interdum. Sed</span></span><br><span class="line"><span class="string">consequat viverra nisl. Suspendisse arcu metus, blandit quis,</span></span><br><span class="line"><span class="string">rhoncus ac, pharetra eget, velit. Mauris urna. Morbi nonummy</span></span><br><span class="line"><span class="string">molestie orci. Praesent nisi elit, fringilla ac, suscipit non,</span></span><br><span class="line"><span class="string">tristique vel, mauris. Curabitur vel lorem id nisl porta</span></span><br><span class="line"><span class="string">adipiscing. Duis vulputate tristique enim. Donec quis lectus a</span></span><br><span class="line"><span class="string">justo imperdiet tempus.  Suspendisse eu lectus. In nunc.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">text2_lines = text2.splitlines()</span><br><span class="line">d = difflib.Differ()</span><br><span class="line">diff = d.compare(text1_lines, text2_lines)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>.join(diff))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">- 只在第一个文件有</span></span><br><span class="line"><span class="string">+ 只在第二个文件有</span></span><br><span class="line"><span class="string">  两个文件中都有</span></span><br><span class="line"><span class="string">? 没有出现在两个文件中</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><pre><code>  Lorem ipsum dolor sit amet, consectetuer adipiscing  elit. Integer eu lacus accumsan arcu fermentum euismod. Donec- pulvinar porttitor tellus. Aliquam venenatis. Donec facilisis+ pulvinar, porttitor tellus. Aliquam venenatis. Donec facilisis?         +- pharetra tortor.  In nec mauris eget magna consequat?                 -+ pharetra tortor. In nec mauris eget magna consequat- convalis. Nam sed sem vitae odio pellentesque interdum. Sed?                 - --+ convalis. Nam cras vitae mi vitae odio pellentesque interdum. Sed?               +++ +++++   +  consequat viverra nisl. Suspendisse arcu metus, blandit quis,  rhoncus ac, pharetra eget, velit. Mauris urna. Morbi nonummy  molestie orci. Praesent nisi elit, fringilla ac, suscipit non,  tristique vel, mauris. Curabitur vel lorem id nisl porta- adipiscing. Suspendisse eu lectus. In nunc. Duis vulputate- tristique enim. Donec quis lectus a justo imperdiet tempus.+ adipiscing. Duis vulputate tristique enim. Donec quis lectus a+ justo imperdiet tempus.  Suspendisse eu lectus. In nunc.</code></pre><h2 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h2><h3 id="enum"><a class="markdownIt-Anchor" href="#enum"></a> enum</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> enum</span><br><span class="line"><span class="comment"># IntEnum支持大小比较</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BugStatus</span>(enum.Enum):</span><br><span class="line"></span><br><span class="line">    new = <span class="number">7</span></span><br><span class="line">    incomplete = <span class="number">6</span></span><br><span class="line">    invalid = <span class="number">5</span></span><br><span class="line">    wont_fix = <span class="number">4</span></span><br><span class="line">    in_progress = <span class="number">3</span></span><br><span class="line">    fix_committed = <span class="number">2</span></span><br><span class="line">    fix_released = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    by_design = <span class="number">4</span></span><br><span class="line">    closed = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个东西都有一个name一个value</span></span><br><span class="line"><span class="keyword">for</span> status <span class="keyword">in</span> BugStatus:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:15&#125; = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(status.name, status.value))</span><br><span class="line"><span class="comment"># 如果存在多个值，下面出现的就是别名，不想出现多个值，使用@unique</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nSame: by_design is wont_fix: &#x27;</span>,</span><br><span class="line">      BugStatus.by_design <span class="keyword">is</span> BugStatus.wont_fix)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Same: closed is fix_released: &#x27;</span>,</span><br><span class="line">      BugStatus.closed <span class="keyword">is</span> BugStatus.fix_released)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 空格分开，从1开始，也可以使用元组列表</span></span><br><span class="line">BugStatus = enum.Enum(</span><br><span class="line">    value=<span class="string">&#x27;BugStatus&#x27;</span>,</span><br><span class="line">    names=(<span class="string">&#x27;fix_released fix_committed in_progress &#x27;</span></span><br><span class="line">           <span class="string">&#x27;wont_fix invalid incomplete new&#x27;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Member: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(BugStatus.new))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nAll members:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> status <span class="keyword">in</span> BugStatus:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:15&#125; = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(status.name, status.value))</span><br></pre></td></tr></table></figure><pre><code>new             = 7incomplete      = 6invalid         = 5wont_fix        = 4in_progress     = 3fix_committed   = 2fix_released    = 1Same: by_design is wont_fix:  TrueSame: closed is fix_released:  True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用元组作为值</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BugStatus</span>(enum.Enum):</span><br><span class="line">    new = (<span class="number">7</span>, [<span class="string">&#x27;incomplete&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;invalid&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;wont_fix&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;in_progress&#x27;</span>])</span><br><span class="line">    incomplete = (<span class="number">6</span>, [<span class="string">&#x27;new&#x27;</span>, <span class="string">&#x27;wont_fix&#x27;</span>])</span><br><span class="line">    invalid = (<span class="number">5</span>, [<span class="string">&#x27;new&#x27;</span>])</span><br><span class="line">    wont_fix = (<span class="number">4</span>, [<span class="string">&#x27;new&#x27;</span>])</span><br><span class="line">    in_progress = (<span class="number">3</span>, [<span class="string">&#x27;new&#x27;</span>, <span class="string">&#x27;fix_committed&#x27;</span>])</span><br><span class="line">    fix_committed = (<span class="number">2</span>, [<span class="string">&#x27;in_progress&#x27;</span>, <span class="string">&#x27;fix_released&#x27;</span>])</span><br><span class="line">    fix_released = (<span class="number">1</span>, [<span class="string">&#x27;new&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num, transitions</span>):</span><br><span class="line">        self.num = num</span><br><span class="line">        self.transitions = transitions</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">can_transition</span>(<span class="params">self, new_state</span>):</span><br><span class="line">        <span class="keyword">return</span> new_state.name <span class="keyword">in</span> self.transitions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Name:&#x27;</span>, BugStatus.in_progress)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Value:&#x27;</span>, BugStatus.in_progress.value)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Custom attribute:&#x27;</span>, BugStatus.in_progress.transitions)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Using attribute:&#x27;</span>,</span><br><span class="line">      BugStatus.in_progress.can_transition(BugStatus.new))</span><br></pre></td></tr></table></figure><pre><code>Name: BugStatus.in_progressValue: (3, ['new', 'fix_committed'])Custom attribute: ['new', 'fix_committed']Using attribute: True</code></pre><h3 id="collection"><a class="markdownIt-Anchor" href="#collection"></a> collection</h3><h4 id="chainmap"><a class="markdownIt-Anchor" href="#chainmap"></a> ChainMap</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ChainMap</span></span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于把几个字典装入一个列表，会按照进入列表的顺序覆盖相同值</span></span><br><span class="line"><span class="comment"># 修改任一个，会修改到原来的数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;C&#x27;</span>&#125;</span><br><span class="line">b = &#123;<span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;D&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 合并多个字典</span></span><br><span class="line">m = collections.ChainMap(a, b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(m.maps)</span><br><span class="line"><span class="comment">#当多个字典中有相同的key值是，默认取第一个key对应的value</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Before: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(m[<span class="string">&#x27;c&#x27;</span>]))</span><br><span class="line">a[<span class="string">&#x27;c&#x27;</span>] = <span class="string">&#x27;E&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;After : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(m[<span class="string">&#x27;c&#x27;</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a:&#x27;</span>, a)</span><br><span class="line"><span class="comment"># reverse the list</span></span><br><span class="line">m.maps = <span class="built_in">list</span>(<span class="built_in">reversed</span>(m.maps))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(m.maps)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(m[<span class="string">&#x27;c&#x27;</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>[&#123;'a': 'A', 'c': 'C'&#125;, &#123;'b': 'B', 'c': 'D'&#125;]Before: CAfter : Ea: &#123;'a': 'A', 'c': 'E'&#125;[&#123;'b': 'B', 'c': 'D'&#125;, &#123;'a': 'A', 'c': 'E'&#125;]c = D</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索查询底层映射，直到一个键被找到。不同的是，写，更新和删除只操作第一个映射。</span></span><br><span class="line">dict1= &#123;<span class="string">&quot;a&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;b&quot;</span>:<span class="string">&quot;lisi&quot;</span>&#125;</span><br><span class="line">dict2= &#123;<span class="string">&quot;c&quot;</span>:<span class="string">&quot;wangwu&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">new_dict = collections.ChainMap(dict1,dict2)</span><br><span class="line"><span class="built_in">print</span>(new_dict)</span><br><span class="line"></span><br><span class="line">new_dict1 = new_dict.new_child()</span><br><span class="line"><span class="built_in">print</span>(new_dict1)</span><br><span class="line">new_dict1[<span class="string">&quot;x&quot;</span>]=<span class="number">0</span></span><br><span class="line">new_dict1[<span class="string">&quot;y&quot;</span>] = <span class="number">100.0</span></span><br><span class="line">new_dict1[<span class="string">&quot;a&quot;</span>] = <span class="number">666</span></span><br><span class="line"><span class="built_in">print</span>(new_dict1)</span><br></pre></td></tr></table></figure><pre><code>ChainMap(&#123;'a': 'zhangsan', 'b': 'lisi'&#125;, &#123;'c': 'wangwu'&#125;)ChainMap(&#123;&#125;, &#123;'a': 'zhangsan', 'b': 'lisi'&#125;, &#123;'c': 'wangwu'&#125;)ChainMap(&#123;'x': 0, 'y': 100.0, 'a': 666&#125;, &#123;'a': 'zhangsan', 'b': 'lisi'&#125;, &#123;'c': 'wangwu'&#125;)</code></pre><h4 id="counter"><a class="markdownIt-Anchor" href="#counter"></a> Counter</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三种构建方式1.一个元素序列，一个键值字典，关键字传参import collections</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(collections.Counter([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="built_in">print</span>(collections.Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">1</span>&#125;))</span><br><span class="line"><span class="built_in">print</span>(collections.Counter(a=<span class="number">2</span>, b=<span class="number">3</span>, c=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计数只会根据新数据增加，替换数据不会改变计数</span></span><br><span class="line"></span><br><span class="line">c = collections.Counter()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Initial :&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line">c.update(<span class="string">&#x27;abcdaab&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Sequence:&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line">c.update(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">5</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Dict    :&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以用字典API获取值,如果没有返回0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c[<span class="string">&#x27;a&#x27;</span>],c[<span class="string">&#x27;666&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># elements返回所有元素,most_common()返回前n个最多的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 算数操作</span></span><br><span class="line">c1 = collections.Counter([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>])</span><br><span class="line">c2 = collections.Counter(<span class="string">&#x27;alphabet&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;C1:&#x27;</span>, c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;C2:&#x27;</span>, c2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计数相加</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nCombined counts:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c1 + c2)</span><br><span class="line"><span class="comment"># 计数相减,小于0自动删除</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nSubtraction:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c1 - c2)</span><br><span class="line"><span class="comment"># 取最小值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nIntersection (taking positive minimums):&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c1 &amp; c2)</span><br><span class="line"><span class="comment"># 取最大值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nUnion (taking maximums):&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c1 | c2)</span><br></pre></td></tr></table></figure><pre><code>Counter(&#123;'b': 3, 'a': 2, 'c': 1&#125;)Counter(&#123;'b': 3, 'a': 2, 'c': 1&#125;)Counter(&#123;'b': 3, 'a': 2, 'c': 1&#125;)Initial : Counter()Sequence: Counter(&#123;'a': 3, 'b': 2, 'c': 1, 'd': 1&#125;)Dict    : Counter(&#123;'d': 6, 'a': 4, 'b': 2, 'c': 1&#125;)4 0C1: Counter(&#123;'b': 3, 'a': 2, 'c': 1&#125;)C2: Counter(&#123;'a': 2, 'l': 1, 'p': 1, 'h': 1, 'b': 1, 'e': 1, 't': 1&#125;)Combined counts:Counter(&#123;'a': 4, 'b': 4, 'c': 1, 'l': 1, 'p': 1, 'h': 1, 'e': 1, 't': 1&#125;)Subtraction:Counter(&#123;'b': 2, 'c': 1&#125;)Intersection (taking positive minimums):Counter(&#123;'a': 2, 'b': 1&#125;)Union (taking maximums):Counter(&#123;'b': 3, 'a': 2, 'c': 1, 'l': 1, 'p': 1, 'h': 1, 'e': 1, 't': 1&#125;)</code></pre><h4 id="defaultdict"><a class="markdownIt-Anchor" href="#defaultdict"></a> defaultdict</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 没有键时,返回函数默认值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">default_factory</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;default value&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = collections.defaultdict(default_factory, foo=<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;d:&#x27;</span>, d)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;foo =&gt;&#x27;</span>, d[<span class="string">&#x27;foo&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;bar =&gt;&#x27;</span>, d[<span class="string">&#x27;bar&#x27;</span>])</span><br></pre></td></tr></table></figure><pre><code>d: defaultdict(&lt;function default_factory at 0x000001AA941D3DC0&gt;, &#123;'foo': 'bar'&#125;)foo =&gt; barbar =&gt; default value</code></pre><h4 id="deque"><a class="markdownIt-Anchor" href="#deque"></a> deque</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 双端队列</span></span><br><span class="line"><span class="comment"># list常用函数+线程安全</span></span><br><span class="line"><span class="comment"># append(),appendleft(),pop(),popleft()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以设置最大长度,队列达到指定长度时会删除之前(队头)的元素</span></span><br><span class="line">d1 = collections.deque(maxlen=<span class="number">3</span>)</span><br><span class="line">d2 = collections.deque(maxlen=<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    n = random.randint(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>, n)</span><br><span class="line">    d1.append(n)</span><br><span class="line">    d2.appendleft(n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;D1:&#x27;</span>, d1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;D2:&#x27;</span>, d2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 旋转</span></span><br><span class="line">d = collections.deque(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Normal        :&#x27;</span>, d)</span><br><span class="line"></span><br><span class="line">d = collections.deque(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">d.rotate(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Right rotation:&#x27;</span>, d)</span><br><span class="line"></span><br><span class="line">d = collections.deque(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">d.rotate(-<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Left rotation :&#x27;</span>, d)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>n = 7D1: deque([7], maxlen=3)D2: deque([7], maxlen=3)n = 73D1: deque([7, 73], maxlen=3)D2: deque([73, 7], maxlen=3)n = 34D1: deque([7, 73, 34], maxlen=3)D2: deque([34, 73, 7], maxlen=3)n = 56D1: deque([73, 34, 56], maxlen=3)D2: deque([56, 34, 73], maxlen=3)n = 79D1: deque([34, 56, 79], maxlen=3)D2: deque([79, 56, 34], maxlen=3)Normal        : deque([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])Right rotation: deque([8, 9, 0, 1, 2, 3, 4, 5, 6, 7])Left rotation : deque([2, 3, 4, 5, 6, 7, 8, 9, 0, 1])</code></pre><h4 id="namedtuple"><a class="markdownIt-Anchor" href="#namedtuple"></a> namedtuple</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带有名字的元组,会返回一个有指定属性的类</span></span><br><span class="line"><span class="comment"># 属性名字不能是关键字,属性不能修改</span></span><br><span class="line">Person = collections.namedtuple(<span class="string">&#x27;Person&#x27;</span>, <span class="string">&#x27;name age&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bob = Person(name=<span class="string">&#x27;Bob&#x27;</span>, age=<span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Representation:&#x27;</span>, bob)</span><br><span class="line"><span class="comment"># 转为OrderedDict</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;As Dictionary:&#x27;</span>, bob._asdict())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nBefore:&#x27;</span>, bob)</span><br><span class="line">bob2 = bob._replace(name=<span class="string">&#x27;Robert&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;After:&#x27;</span>, bob2)</span><br><span class="line"><span class="comment"># 不是同一个实例</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Same?:&#x27;</span>, bob <span class="keyword">is</span> bob2)</span><br></pre></td></tr></table></figure><pre><code>Representation: Person(name='Bob', age=30)As Dictionary: &#123;'name': 'Bob', 'age': 30&#125;Before: Person(name='Bob', age=30)After: Person(name='Robert', age=30)Same?: False</code></pre><h4 id="ordereddict"><a class="markdownIt-Anchor" href="#ordereddict"></a> OrderedDict</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="comment"># 会记住往字典里添加的顺序import collections</span></span><br><span class="line"><span class="comment"># 进行比较时,不仅比较值是否相同,也比较加入顺序</span></span><br><span class="line">d = collections.OrderedDict(</span><br><span class="line">    [(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;A&#x27;</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;B&#x27;</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;C&#x27;</span>)]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Before:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br><span class="line"></span><br><span class="line">d.move_to_end(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nmove_to_end():&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br><span class="line"></span><br><span class="line">d.move_to_end(<span class="string">&#x27;b&#x27;</span>, last=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nmove_to_end(last=False):&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br></pre></td></tr></table></figure><pre><code>Before:a Ab Bc Cmove_to_end():a Ac Cb Bmove_to_end(last=False):b Ba Ac C</code></pre><h4 id="collectionsabc"><a class="markdownIt-Anchor" href="#collectionsabc"></a> collections.abc</h4><h3 id="array数组"><a class="markdownIt-Anchor" href="#array数组"></a> array数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="comment"># 返回二进制数据 data 的十六进制表示形式。 data 的每个字节都被转换为相应的2位十六进制表示形式。</span></span><br><span class="line"></span><br><span class="line">a = array.array(<span class="string">&#x27;i&#x27;</span>, <span class="built_in">range</span>(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Initial :&#x27;</span>, a)</span><br><span class="line"></span><br><span class="line">s = <span class="string">b&#x27;This is the array.&#x27;</span></span><br><span class="line">a = array.array(<span class="string">&#x27;b&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;As byte string:&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;As array      :&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;As hex        :&#x27;</span>, binascii.hexlify(a))</span><br><span class="line"><span class="comment"># 与序列类似的函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(a[<span class="number">0</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>Initial : array('i', [0, 1, 2])As byte string: b'This is the array.'As array      : array('b', [84, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 97, 114, 114, 97, 121, 46])As hex        : b'54686973206973207468652061727261792e'T</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二进制转换</span></span><br><span class="line"><span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">a = array.array(<span class="string">&#x27;i&#x27;</span>, <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A1:&#x27;</span>, a)</span><br><span class="line"></span><br><span class="line">as_bytes = a.tobytes()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Byets: <span class="subst">&#123;as_bytes&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Bytes:&#x27;</span>, binascii.hexlify(as_bytes))</span><br><span class="line"></span><br><span class="line">a2 = array.array(<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">a2.frombytes(as_bytes)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A2:&#x27;</span>, a2)</span><br></pre></td></tr></table></figure><pre><code>A1: array('i', [0, 1, 2, 3, 4])Byets: b'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00'Bytes: b'0000000001000000020000000300000004000000'A2: array('i', [0, 1, 2, 3, 4])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># array文件转换</span></span><br><span class="line"><span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"></span><br><span class="line">a = array.array(<span class="string">&#x27;i&#x27;</span>, <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A1:&#x27;</span>, a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Write the array of numbers to a temporary file</span></span><br><span class="line">output = tempfile.NamedTemporaryFile()</span><br><span class="line">a.tofile(output.file)  <span class="comment"># must pass an *actual* file</span></span><br><span class="line">output.flush()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read the raw data</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(output.name, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> <span class="built_in">input</span>:</span><br><span class="line">    raw_data = <span class="built_in">input</span>.read()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Raw Contents:&#x27;</span>, binascii.hexlify(raw_data))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Read the data into an array</span></span><br><span class="line">    <span class="built_in">input</span>.seek(<span class="number">0</span>)</span><br><span class="line">    a2 = array.array(<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">    a2.fromfile(<span class="built_in">input</span>, <span class="built_in">len</span>(a))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;A2:&#x27;</span>, a2)</span><br></pre></td></tr></table></figure><h3 id="heapq"><a class="markdownIt-Anchor" href="#heapq"></a> heapq</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="comment"># 堆排序,只有小项堆</span></span><br><span class="line"><span class="comment"># 用数组的形式表示堆,N的子元素位于2*N+1和2*N+2</span></span><br><span class="line">data=[<span class="number">19</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">11</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;original data: <span class="subst">&#123;data&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># 把原数组转为堆结构数组</span></span><br><span class="line"><span class="comment"># 可以之间转换堆,也可以一个个往里面添加元素heappush</span></span><br><span class="line">heapq.heapify(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;heapify data: <span class="subst">&#123;data&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># heapreplace 删除最小元素并加入一个</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">13</span>]:</span><br><span class="line">    smallest = heapq.heapreplace(data, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;replace &#123;:&gt;2&#125; with &#123;:&gt;2&#125;:&#x27;</span>.<span class="built_in">format</span>(smallest, n))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;replaced data: <span class="subst">&#123;data&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># nlargest nsmallest返回前几个大/小的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># heapq.merge()合并几个有序列表</span></span><br></pre></td></tr></table></figure><pre><code>original data: [19, 9, 4, 10, 11]heapify data: [4, 9, 19, 10, 11]replace  4 with  0:replace  0 with 13:replaced data: [9, 10, 19, 13, 11]</code></pre><h3 id="bisect"><a class="markdownIt-Anchor" href="#bisect"></a> bisect</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"></span><br><span class="line">values = [<span class="number">14</span>, <span class="number">85</span>, <span class="number">77</span>, <span class="number">26</span>, <span class="number">50</span>, <span class="number">45</span>, <span class="number">66</span>, <span class="number">79</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">84</span>, <span class="number">77</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---  ---  --------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> values:</span><br><span class="line">    <span class="comment"># 默认右插</span></span><br><span class="line">    position = bisect.bisect(l, i)</span><br><span class="line">    bisect.insort(l, i)    </span><br><span class="line">    <span class="comment"># position = bisect.bisect_left(l, i)</span></span><br><span class="line">    <span class="comment"># bisect.insort_left(l, i)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:3&#125;  &#123;:3&#125;&#x27;</span>.<span class="built_in">format</span>(i, position), l)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>---  ---  -------- 14    0 [14] 85    1 [14, 85] 77    1 [14, 77, 85] 26    1 [14, 26, 77, 85] 50    2 [14, 26, 50, 77, 85] 45    2 [14, 26, 45, 50, 77, 85] 66    4 [14, 26, 45, 50, 66, 77, 85] 79    6 [14, 26, 45, 50, 66, 77, 79, 85] 10    0 [10, 14, 26, 45, 50, 66, 77, 79, 85]  3    0 [3, 10, 14, 26, 45, 50, 66, 77, 79, 85] 84    9 [3, 10, 14, 26, 45, 50, 66, 77, 79, 84, 85] 77    8 [3, 10, 14, 26, 45, 50, 66, 77, 77, 79, 84, 85]  1    0 [1, 3, 10, 14, 26, 45, 50, 66, 77, 77, 79, 84, 85]</code></pre><h3 id="queue"><a class="markdownIt-Anchor" href="#queue"></a> queue</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="comment"># 线程安全的队列</span></span><br><span class="line"><span class="comment"># maxsize 是个整数，用于设置可以放入队列中的项目数的上限。</span></span><br><span class="line"><span class="comment"># 当达到这个大小的时候，插入操作将阻塞至队列中的项目被消费掉</span></span><br><span class="line"><span class="comment"># FIFO队列,普通队列</span></span><br><span class="line">queue.Queue()</span><br><span class="line"><span class="comment"># LIFO栈</span></span><br><span class="line">queue.LifoQueue()</span><br><span class="line"><span class="comment"># 优先队列</span></span><br><span class="line">queue.PriorityQueue()</span><br><span class="line"></span><br><span class="line">q = queue.PriorityQueue()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 队列的变体，按优先级顺序（最低优先）检索打开的条目。</span></span><br><span class="line"><span class="comment"># 条目通常是以下格式的元组：</span></span><br><span class="line"><span class="comment"># 插入格式：q.put((priority number, data))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义类,实现比较方法,__eq__,__lt__</span></span><br><span class="line">q=queue.PriorityQueue()</span><br><span class="line">q.put((<span class="number">2</span>, <span class="string">&quot;Lisa&quot;</span>))</span><br><span class="line">q.put((<span class="number">1</span>, <span class="string">&quot;Lucy&quot;</span>))</span><br><span class="line">q.put((<span class="number">0</span>, <span class="string">&quot;Tom&quot;</span>))</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">    <span class="built_in">print</span>(q.get())</span><br></pre></td></tr></table></figure><pre><code>(0, 'Tom')(1, 'Lucy')(2, 'Lisa')</code></pre><h3 id="struct二进制数据结构"><a class="markdownIt-Anchor" href="#struct二进制数据结构"></a> struct:二进制数据结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="comment"># 将字节串解读为打包的二进制数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># struct的pack函数把任意数据类型变成bytes</span></span><br><span class="line">p=struct.pack(<span class="string">&#x27;&gt;I&#x27;</span>, <span class="number">66666</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;type-&gt;bytes:<span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># unpack把bytes变成相应的数据类型</span></span><br><span class="line">p=struct.unpack(<span class="string">&quot;&gt;I&quot;</span>, <span class="string">b&quot;\x00\x01\x04j&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;bytes-&gt;type:<span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>type-&gt;bytes:b'\x00\x01\x04j'bytes-&gt;type:(66666,)</code></pre><h3 id="weakref对象的非永久引用"><a class="markdownIt-Anchor" href="#weakref对象的非永久引用"></a> weakref:对象的非永久引用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> weakref</span><br><span class="line"><span class="comment"># 弱引用不会增加对象的引用数量。因此，弱引用不会妨碍所指对象被当作垃圾回收。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExpensiveObject</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;(Deleting &#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(self))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&#x27;ExpensiveObject&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback</span>(<span class="params">reference</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Invoked when referenced object is deleted&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;callback(&#123;!r&#125;)&#x27;</span>.<span class="built_in">format</span>(reference))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = ExpensiveObject()</span><br><span class="line">r = weakref.ref(obj, callback)</span><br><span class="line"><span class="comment"># 会在finalize中提供一个对象的引用,永远不会被回收</span></span><br><span class="line"><span class="comment"># f = weakref.finalize(obj, on_finalize, obj)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;obj:&#x27;</span>, obj)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ref:&#x27;</span>, r)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;r():&#x27;</span>, r())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;deleting obj&#x27;</span>)</span><br><span class="line"><span class="keyword">del</span> obj</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;r():&#x27;</span>, r())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># WeakValueDictionary： 实现的是一种可变映射，里面的值是对象的弱引用。</span></span><br><span class="line"><span class="comment"># 被引用的对象在程序中的其他地方被当作垃圾回收后，对应的键会自动从 WeakValueDictionary 中删除。因此，WeakValueDictionary 经常用于缓存。</span></span><br><span class="line"><span class="comment"># WeakValueDictionary 示例：</span></span><br><span class="line"><span class="comment"># WeakValueDictionary 示例：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cheese</span>:</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, kind</span>):</span><br><span class="line">        self.kind = kind</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Cheese(%r)&#x27;</span> % self.kind</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 执行：</span></span><br><span class="line"> </span><br><span class="line">stock = weakref.WeakValueDictionary()  <span class="comment"># 创建弱引用字典实例。</span></span><br><span class="line"> </span><br><span class="line">catalog = [Cheese(<span class="string">&#x27;Read Leicester&#x27;</span>), Cheese(<span class="string">&#x27;Tilsit&#x27;</span>),Cheese(<span class="string">&#x27;Brie&#x27;</span>), Cheese(<span class="string">&#x27;Parmesan&#x27;</span>)]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> cheese <span class="keyword">in</span> catalog:</span><br><span class="line">   stock[cheese.kind] = cheese  <span class="comment"># 名称映射到实例. [弱引用]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(stock.keys()))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">del</span> catalog</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(stock.keys()) ) <span class="comment"># 为什么还剩一个？ 因为临时变量。</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">del</span> cheese</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(stock.keys()) ) <span class="comment"># 临时变量删除后，为空.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> weakref</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:                            <span class="comment"># 这里新建一个类，因为WeakValueDictionary()</span></span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):      <span class="comment"># 要求value是一个obj</span></span><br><span class="line">             self.value = value</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_weak_value_dict</span>():</span><br><span class="line">     d= weakref.WeakValueDictionary() <span class="comment">#如果d是普通字典,那么还是会print(test1)</span></span><br><span class="line">     k1 = <span class="string">&#x27;test1&#x27;</span>                    </span><br><span class="line">     v1 = C(<span class="number">1</span>)                       <span class="comment"># 这时候C(1)是有一个强引用的：v1</span></span><br><span class="line">     d[k1] = v1                      <span class="comment"># 这个语句也就是字典赋值，但是由于我们用的</span></span><br><span class="line">     <span class="built_in">print</span>(d[k1])                    <span class="comment"># WeakValueDictionary()，所以字典里的是弱引用</span></span><br><span class="line">     <span class="keyword">del</span> v1                          <span class="comment"># 这时候删除了C(1)唯一的强引用 v1，因此</span></span><br><span class="line">     <span class="built_in">print</span>(d[k1])                   <span class="comment"># 会报错</span></span><br></pre></td></tr></table></figure><pre><code>instance ExpensiveObjectobj: ExpensiveObjectref: &lt;weakref at 0x000001AA94201360; to 'ExpensiveObject' at 0x000001AA94117AF0&gt;r(): ExpensiveObjectdeleting objr(): ExpensiveObject['Brie', 'Parmesan', 'Read Leicester', 'Tilsit']['Parmesan'][]</code></pre><h3 id="copy"><a class="markdownIt-Anchor" href="#copy"></a> copy</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 浅拷贝深拷贝</span></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当重载比较运算符时，可以只实现其中一两种，其他的会自动生成</span></span><br><span class="line"><span class="meta">@functools.total_ordering</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name == other.name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__gt__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name &gt; other.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = MyClass(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">my_list = [a]</span><br><span class="line">dup = copy.copy(my_list)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;             my_list:&#x27;</span>, my_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;                 dup:&#x27;</span>, dup)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;      dup is my_list:&#x27;</span>, (dup <span class="keyword">is</span> my_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;      dup == my_list:&#x27;</span>, (dup == my_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dup[0] is my_list[0]:&#x27;</span>, (dup[<span class="number">0</span>] <span class="keyword">is</span> my_list[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dup[0] == my_list[0]:&#x27;</span>, (dup[<span class="number">0</span>] == my_list[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = MyClass(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">my_list = [a]</span><br><span class="line">dup = copy.deepcopy(my_list)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;             my_list:&#x27;</span>, my_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;                 dup:&#x27;</span>, dup)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;      dup is my_list:&#x27;</span>, (dup <span class="keyword">is</span> my_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;      dup == my_list:&#x27;</span>, (dup == my_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dup[0] is my_list[0]:&#x27;</span>, (dup[<span class="number">0</span>] <span class="keyword">is</span> my_list[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dup[0] == my_list[0]:&#x27;</span>, (dup[<span class="number">0</span>] == my_list[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类实现,控制建立副本</span></span><br><span class="line"><span class="comment"># __copy()__</span></span><br><span class="line"><span class="comment"># __deepcopy()__</span></span><br></pre></td></tr></table></figure><pre><code>             my_list: [&lt;__main__.MyClass object at 0x000001AA940FF340&gt;]                 dup: [&lt;__main__.MyClass object at 0x000001AA940FF340&gt;]      dup is my_list: False      dup == my_list: Truedup[0] is my_list[0]: Truedup[0] == my_list[0]: True             my_list: [&lt;__main__.MyClass object at 0x000001AA94208A90&gt;]                 dup: [&lt;__main__.MyClass object at 0x000001AA941FFFD0&gt;]      dup is my_list: False      dup == my_list: Truedup[0] is my_list[0]: Falsedup[0] == my_list[0]: True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, connections</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.connections = connections</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_connection</span>(<span class="params">self, other</span>):</span><br><span class="line">        self.connections.append(other)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Graph(name=&#123;&#125;, id=&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            self.name, <span class="built_in">id</span>(self))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__deepcopy__</span>(<span class="params">self, memo</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\nCalling __deepcopy__ for &#123;!r&#125;&#x27;</span>.<span class="built_in">format</span>(self))</span><br><span class="line">        <span class="keyword">if</span> self <span class="keyword">in</span> memo:</span><br><span class="line">            existing = memo.get(self)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;  Already copied to &#123;!r&#125;&#x27;</span>.<span class="built_in">format</span>(existing))</span><br><span class="line">            <span class="keyword">return</span> existing</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;  Memo dictionary:&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> memo:</span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> memo.items():</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;    &#123;&#125;: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(k, v))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;    (empty)&#x27;</span>)</span><br><span class="line">        dup = Graph(copy.deepcopy(self.name, memo), [])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;  Copying to new object &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(dup))</span><br><span class="line">        memo[self] = dup</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> self.connections:</span><br><span class="line">            dup.add_connection(copy.deepcopy(c, memo))</span><br><span class="line">        <span class="keyword">return</span> dup</span><br><span class="line"></span><br><span class="line"><span class="comment"># memo字典跟踪已复制的对象避免递归</span></span><br><span class="line">root = Graph(<span class="string">&#x27;root&#x27;</span>, [])</span><br><span class="line">a = Graph(<span class="string">&#x27;a&#x27;</span>, [root])</span><br><span class="line">b = Graph(<span class="string">&#x27;b&#x27;</span>, [a, root])</span><br><span class="line">root.add_connection(a)</span><br><span class="line">root.add_connection(b)</span><br><span class="line"></span><br><span class="line">dup = copy.deepcopy(root)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="pprint"><a class="markdownIt-Anchor" href="#pprint"></a> pprint</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"><span class="comment"># 美观打印</span></span><br><span class="line">data = [</span><br><span class="line">    (<span class="number">1</span>, &#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;d&#x27;</span>: <span class="string">&#x27;D&#x27;</span>&#125;),</span><br><span class="line">    (<span class="number">2</span>, &#123;<span class="string">&#x27;e&#x27;</span>: <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;g&#x27;</span>: <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;h&#x27;</span>: <span class="string">&#x27;H&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;i&#x27;</span>: <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;j&#x27;</span>: <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;k&#x27;</span>: <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;l&#x27;</span>: <span class="string">&#x27;L&#x27;</span>&#125;),</span><br><span class="line">    (<span class="number">3</span>, [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>]),</span><br><span class="line">    (<span class="number">4</span>, [<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>]),</span><br><span class="line">    (<span class="number">5</span>, [<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span><span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment"># depth可以控制打印深度,width控制打印宽度,compact会尝试更加紧凑</span></span><br><span class="line">pprint.pprint(data,compact=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><pre><code>[(1, &#123;'a': 'A', 'b': 'B', 'c': 'C', 'd': 'D'&#125;), (2, &#123;'e': 'E', 'f': 'F', 'g': 'G', 'h': 'H', 'i': 'I', 'j': 'J', 'k': 'K', 'l': 'L'&#125;), (3, ['m', 'n']), (4, ['o', 'p', 'q']), (5, ['r', 's', 'tu', 'v', 'x', 'y', 'z'])][(1, &#123;'a': 'A', 'b': 'B', 'c': 'C', 'd': 'D'&#125;), (2,  &#123;'e': 'E',   'f': 'F',   'g': 'G',   'h': 'H',   'i': 'I',   'j': 'J',   'k': 'K',   'l': 'L'&#125;), (3, ['m', 'n']), (4, ['o', 'p', 'q']), (5, ['r', 's', 'tu', 'v', 'x', 'y', 'z'])]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pformat</span><br><span class="line"></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    level=logging.DEBUG,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&#x27;%(levelname)-8s %(message)s&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">&#x27;Logging pformatted data&#x27;</span>)</span><br><span class="line"><span class="comment"># 格式化转成字符串</span></span><br><span class="line">formatted = pformat(data)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> formatted.splitlines():</span><br><span class="line">    logging.debug(line.rstrip())</span><br><span class="line">    <span class="comment"># print(line.rstrip())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归打印</span></span><br><span class="line">local_data = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">local_data.append(local_data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;id(local_data) =&gt;&#x27;</span>, <span class="built_in">id</span>(local_data))</span><br><span class="line">pprint.pprint(local_data)</span><br><span class="line"><span class="built_in">print</span>(local_data)</span><br></pre></td></tr></table></figure><pre><code>DEBUG    Logging pformatted dataDEBUG    [(1, &#123;'a': 'A', 'b': 'B', 'c': 'C', 'd': 'D'&#125;),DEBUG     (2,DEBUG      &#123;'e': 'E',DEBUG       'f': 'F',DEBUG       'g': 'G',DEBUG       'h': 'H',DEBUG       'i': 'I',DEBUG       'j': 'J',DEBUG       'k': 'K',DEBUG       'l': 'L'&#125;),DEBUG     (3, ['m', 'n']),DEBUG     (4, ['o', 'p', 'q']),DEBUG     (5, ['r', 's', 'tu', 'v', 'x', 'y', 'z'])]id(local_data) =&gt; 1832127417216['a', 'b', 1, 2, &lt;Recursion on list with id=1832127417216&gt;]['a', 'b', 1, 2, [...]]</code></pre><h2 id="算法"><a class="markdownIt-Anchor" href="#算法"></a> 算法</h2><h3 id="functools管理函数的工具"><a class="markdownIt-Anchor" href="#functools管理函数的工具"></a> functools:管理函数的工具</h3><h4 id="partial"><a class="markdownIt-Anchor" href="#partial"></a> partial</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="comment"># 将一个函数的部分参数预先绑定为某些值，从而得到一个新的具有较少可变参数的函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b,*args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;a:<span class="subst">&#123;a&#125;</span>,  b:<span class="subst">&#123;b&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="comment"># 打印位置参数</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 打印关键字参数</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;%s:%s&#x27;</span> % (k, v))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通调用</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, v1=<span class="number">10</span>, v2=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># partial的参数会先占用函数前面的参数,后面传的会依次当作后面的形参</span></span><br><span class="line">add_partial = partial(add, <span class="number">10</span>, k1=<span class="number">10</span>, k2=<span class="number">20</span>)</span><br><span class="line">add_partial(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, k3=<span class="number">20</span>)</span><br><span class="line">add_partial(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, k1=<span class="number">20</span>)</span><br></pre></td></tr></table></figure><pre><code>a:1,  b:23--------------------v1:10v2:20--------------------a:10,  b:123--------------------k1:10k2:20k3:20--------------------a:10,  b:123--------------------k1:20k2:20--------------------</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># partialmethod和partial实现相同的功能，只是 partial在类方法中使用会报错，而此函数用在类方法中；</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partialmethod</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cell</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self._alive = <span class="literal">False</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">alive</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._alive</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_state</span>(<span class="params">self, state</span>):</span><br><span class="line">        self._alive = <span class="built_in">bool</span>(state)</span><br><span class="line">    set_alive = partialmethod(set_state, <span class="literal">True</span>)</span><br><span class="line">    set_dead = partialmethod(set_state, <span class="literal">False</span>)</span><br><span class="line"> </span><br><span class="line">c = Cell()</span><br><span class="line">c.alive <span class="comment"># 结果为:False</span></span><br><span class="line"> </span><br><span class="line">c.set_alive()</span><br><span class="line">c.alive <span class="comment"># 结果为:True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">standalone</span>(<span class="params">self, a=<span class="number">1</span>, b=<span class="number">2</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;  called standalone with:&#x27;</span>, (self, a, b))</span><br><span class="line">    <span class="keyword">if</span> self <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;  self.attr =&#x27;</span>, self.attr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.attr = <span class="string">&#x27;instance attribute&#x27;</span></span><br><span class="line"></span><br><span class="line">    method1 = partialmethod(standalone)</span><br><span class="line">    method2 = partial(standalone)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">o = MyClass()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;standalone&#x27;</span>)</span><br><span class="line">standalone(<span class="literal">None</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment"># 可以把对象传进去</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;method1 as partialmethod&#x27;</span>)</span><br><span class="line">o.method1()</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment"># 穿不进去对象</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;method2 as partial&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    o.method2()</span><br><span class="line"><span class="keyword">except</span> TypeError <span class="keyword">as</span> err:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ERROR: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(err))</span><br></pre></td></tr></table></figure><pre><code>standalone  called standalone with: (None, 1, 2)method1 as partialmethod  called standalone with: (&lt;__main__.MyClass object at 0x0000021B97BA8B80&gt;, 1, 2)  self.attr = instance attributemethod2 as partialERROR: standalone() missing 1 required positional argument: 'self'</code></pre><h4 id="富比较"><a class="markdownIt-Anchor" href="#富比较"></a> 富比较</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">大于 &gt;  __gt__()</span></span><br><span class="line"><span class="string">大于等于 &gt;=  __ge__()</span></span><br><span class="line"><span class="string">等于 ==  __eq__()</span></span><br><span class="line"><span class="string">小于 &lt;  __lt__()</span></span><br><span class="line"><span class="string">小于等于 &lt;=  __le__()</span></span><br><span class="line"><span class="string">不等于 != __ne()__</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@functools.total_ordering</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyObject</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val</span>):</span><br><span class="line">        self.val = val</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;  testing __eq__(&#123;&#125;, &#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            self.val, other.val))</span><br><span class="line">        <span class="keyword">return</span> self.val == other.val</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__gt__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;  testing __gt__(&#123;&#125;, &#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            self.val, other.val))</span><br><span class="line">        <span class="keyword">return</span> self.val &gt; other.val</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Methods:\n&#x27;</span>)</span><br><span class="line">pprint(inspect.getmembers(MyObject, inspect.isfunction))</span><br><span class="line"></span><br><span class="line">a = MyObject(<span class="number">1</span>)</span><br><span class="line">b = MyObject(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nComparisons:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> expr <span class="keyword">in</span> [<span class="string">&#x27;a &lt; b&#x27;</span>, <span class="string">&#x27;a &lt;= b&#x27;</span>, <span class="string">&#x27;a == b&#x27;</span>, <span class="string">&#x27;a &gt;= b&#x27;</span>, <span class="string">&#x27;a &gt; b&#x27;</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#123;:&lt;6&#125;:&#x27;</span>.<span class="built_in">format</span>(expr))</span><br><span class="line">    result = <span class="built_in">eval</span>(expr)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;  result of &#123;&#125;: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(expr, result))</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>Methods:[('__eq__', &lt;function MyObject.__eq__ at 0x0000021B998A7940&gt;), ('__ge__', &lt;function _ge_from_gt at 0x0000021B932024C0&gt;), ('__gt__', &lt;function MyObject.__gt__ at 0x0000021B998A70D0&gt;), ('__init__', &lt;function MyObject.__init__ at 0x0000021B998A79D0&gt;), ('__le__', &lt;function _le_from_gt at 0x0000021B93202550&gt;), ('__lt__', &lt;function _lt_from_gt at 0x0000021B93202430&gt;)]Comparisons:a &lt; b :  testing __gt__(1, 2)  testing __eq__(1, 2)  result of a &lt; b: Truea &lt;= b:  testing __gt__(1, 2)  result of a &lt;= b: Truea == b:  testing __eq__(1, 2)  result of a == b: Falsea &gt;= b:  testing __gt__(1, 2)  testing __eq__(1, 2)  result of a &gt;= b: Falsea &gt; b :  testing __gt__(1, 2)  result of a &gt; b: False</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cmp_to_key将 Python 2 程序转换至新版的转换工具，以保持对比较函数的兼容。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">key 参数：Python 3 支持，接受的函数（入参为每个元素）返回值（对这个元素的计算），表示此元素的权值，sorted 将按照权值大小进行排序</span></span><br><span class="line"><span class="string">cmp 参数：Python 2 支持，接受的函数是元素中的所有需要对比的两个元素，这个函数定义大于（一般返回1）、小于（-1）、等于逻辑（1），最后根据这些比较逻辑排序</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> cmp_to_key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mycmp</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="comment"># 提取字符中的数字</span></span><br><span class="line">    a = <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i.isdigit()]))</span><br><span class="line">    b = <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([i <span class="keyword">for</span> i <span class="keyword">in</span> b <span class="keyword">if</span> i.isdigit()]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> a &gt; b:</span><br><span class="line">        <span class="built_in">print</span>(a, <span class="string">&quot;vs&quot;</span>, b, <span class="string">&#x27;=&#x27;</span> , <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> a &lt; b:</span><br><span class="line">        <span class="built_in">print</span>(a, <span class="string">&quot;vs&quot;</span>, b, <span class="string">&#x27;=&#x27;</span> , -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(a, <span class="string">&quot;vs&quot;</span>, b, <span class="string">&#x27;=&#x27;</span> , <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>([<span class="string">&#x27;b29s&#x27;</span>, <span class="string">&#x27;c2s20&#x27;</span>, <span class="string">&#x27;a1-1&#x27;</span>, <span class="string">&#x27;88d&#x27;</span>], key=cmp_to_key(mycmp)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>([<span class="string">&#x27;b29s&#x27;</span>, <span class="string">&#x27;c2s20&#x27;</span>, <span class="string">&#x27;a1-1&#x27;</span>, <span class="string">&#x27;88d&#x27;</span>], key=<span class="keyword">lambda</span> x: <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([i <span class="keyword">for</span> i <span class="keyword">in</span> x <span class="keyword">if</span> i.isdigit()]))))</span><br></pre></td></tr></table></figure><pre><code>220 vs 29 = 111 vs 220 = -111 vs 220 = -111 vs 29 = -188 vs 29 = 188 vs 220 = -1['a1-1', 'b29s', '88d', 'c2s20']['a1-1', 'b29s', '88d', 'c2s20']</code></pre><h4 id="缓存"><a class="markdownIt-Anchor" href="#缓存"></a> 缓存</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="comment"># maxsize 设置最大缓存量</span></span><br><span class="line"><span class="comment"># 最近最少使用</span></span><br><span class="line"><span class="meta">@functools.lru_cache()</span></span><br><span class="line"><span class="comment"># @functools.cache()</span></span><br><span class="line"><span class="comment"># cache不需要移出旧值，缓存大小没有限制</span></span><br><span class="line"><span class="comment"># return lru_cache(maxsize=None)(user_function)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">expensive</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="comment"># 参数必须是可散列的</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;expensive(&#123;&#125;, &#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(a, b))</span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"></span><br><span class="line">MAX = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;First set of calls:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(MAX):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(MAX):</span><br><span class="line">        expensive(i, j)</span><br><span class="line"><span class="built_in">print</span>(expensive.cache_info())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nSecond set of calls:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(MAX + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(MAX + <span class="number">1</span>):</span><br><span class="line">        expensive(i, j)</span><br><span class="line"><span class="built_in">print</span>(expensive.cache_info())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nClearing cache:&#x27;</span>)</span><br><span class="line">expensive.cache_clear()</span><br><span class="line"><span class="built_in">print</span>(expensive.cache_info())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nThird set of calls:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(MAX):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(MAX):</span><br><span class="line">        expensive(i, j)</span><br><span class="line"><span class="built_in">print</span>(expensive.cache_info())</span><br></pre></td></tr></table></figure><pre><code>First set of calls:expensive(0, 0)expensive(0, 1)expensive(1, 0)expensive(1, 1)CacheInfo(hits=0, misses=4, maxsize=128, currsize=4)Second set of calls:expensive(0, 2)expensive(1, 2)expensive(2, 0)expensive(2, 1)expensive(2, 2)CacheInfo(hits=4, misses=9, maxsize=128, currsize=9)Clearing cache:CacheInfo(hits=0, misses=0, maxsize=128, currsize=0)Third set of calls:expensive(0, 0)expensive(0, 1)expensive(1, 0)expensive(1, 1)CacheInfo(hits=0, misses=4, maxsize=128, currsize=4)</code></pre><h4 id="缩减"><a class="markdownIt-Anchor" href="#缩减"></a> 缩减</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="comment"># def reduce(function, iterable, initializer=None):</span></span><br><span class="line"><span class="comment">#     it = iter(iterable)</span></span><br><span class="line"><span class="comment">#     if initializer is None:</span></span><br><span class="line"><span class="comment">#         value = next(it)</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         value = initializer</span></span><br><span class="line"><span class="comment">#     for element in it:</span></span><br><span class="line"><span class="comment">#         value = function(value, element)</span></span><br><span class="line"><span class="comment">#     return value</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是计算 ((((1+2)+3)+4)+5) 的值,前缀和</span></span><br><span class="line"><span class="built_in">print</span>(reduce(<span class="keyword">lambda</span> x, y: x+y, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认参数放第一个initializer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_reduce</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;do_reduce(&#123;&#125;, &#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(a, b))</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">result = functools.reduce(do_reduce, data, <span class="number">999</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;result: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(result))</span><br></pre></td></tr></table></figure><pre><code>15range(1, 5)do_reduce(999, 1)do_reduce(1000, 2)do_reduce(1002, 3)do_reduce(1005, 4)result: 1009</code></pre><h4 id="泛型函数"><a class="markdownIt-Anchor" href="#泛型函数"></a> 泛型函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="comment"># 不同的类型进不同的函数,根据参数的第一个参数切换函数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@functools.singledispatch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;default myfunc(&#123;!r&#125;)&#x27;</span>.<span class="built_in">format</span>(arg))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@myfunc.register(<span class="params"><span class="built_in">int</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc_int</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;myfunc_int(&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(arg))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@myfunc.register(<span class="params"><span class="built_in">list</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc_list</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;myfunc_list()&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> arg:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;  &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(item))</span><br><span class="line"></span><br><span class="line"><span class="meta">@myfunc.register</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc_list</span>(<span class="params">arg: <span class="built_in">float</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;myfunc_float(&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(arg))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找不到匹配的类型会计算继承顺序,匹配最近的父类</span></span><br><span class="line">myfunc(<span class="string">&#x27;string argument&#x27;</span>)</span><br><span class="line">myfunc(<span class="number">1</span>)</span><br><span class="line">myfunc(<span class="number">2.3</span>)</span><br><span class="line">myfunc([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br></pre></td></tr></table></figure><pre><code>default myfunc('string argument')myfunc_int(1)myfunc_float(2.3)myfunc_list()  a  b  c</code></pre><h3 id="itertools迭代器函数"><a class="markdownIt-Anchor" href="#itertools迭代器函数"></a> itertools:迭代器函数</h3><h4 id="chain"><a class="markdownIt-Anchor" href="#chain"></a> chain</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在消费数据之前不从迭代器生成数据</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> chain([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_iterables_to_chain</span>():</span><br><span class="line">    <span class="keyword">yield</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="keyword">yield</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> chain.from_iterable(make_iterables_to_chain()):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><pre><code>1 2 3 a b c 1 2 3 a b c </code></pre><h4 id="zip_longest"><a class="markdownIt-Anchor" href="#zip_longest"></a> zip_longest</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> zip_longest</span><br><span class="line"></span><br><span class="line">r1 = <span class="built_in">range</span>(<span class="number">3</span>)</span><br><span class="line">r2 = <span class="built_in">range</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;zip stops early:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">zip</span>(r1, r2)))</span><br><span class="line"></span><br><span class="line">r1 = <span class="built_in">range</span>(<span class="number">3</span>)</span><br><span class="line">r2 = <span class="built_in">range</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nzip_longest processes all of the values:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(zip_longest(r1, r2)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(zip_longest(r1, r2,fillvalue=<span class="number">6666</span>)))</span><br></pre></td></tr></table></figure><pre><code>zip stops early:[(0, 0), (1, 1)]zip_longest processes all of the values:[(0, 0), (1, 1), (2, None)][(0, 0), (1, 1), (2, 6666)]</code></pre><h4 id="islice"><a class="markdownIt-Anchor" href="#islice"></a> islice</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> islice</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Stop at 5:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> islice(<span class="built_in">range</span>(<span class="number">100</span>), <span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Start at 5, Stop at 10:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> islice(<span class="built_in">range</span>(<span class="number">100</span>), <span class="number">5</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;By tens to 100:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> islice(<span class="built_in">range</span>(<span class="number">100</span>), <span class="number">0</span>, <span class="number">100</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>Stop at 5:0 1 2 3 4 Start at 5, Stop at 10:5 6 7 8 9 By tens to 100:0 10 20 30 40 50 60 70 80 90 </code></pre><h4 id="tee"><a class="markdownIt-Anchor" href="#tee"></a> tee</h4><h4 id="mapstarmap"><a class="markdownIt-Anchor" href="#mapstarmap"></a> map,starmap</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">times_two</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> (x, y, x * y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Doubles:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">map</span>(times_two, <span class="built_in">range</span>(<span class="number">5</span>)):</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nMultiples:&#x27;</span>)</span><br><span class="line">r1 = <span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line">r2 = <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">map</span>(multiply, r1, r2):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:d&#125; * &#123;:d&#125; = &#123;:d&#125;&#x27;</span>.<span class="built_in">format</span>(*i))</span><br><span class="line"><span class="comment"># 只运行完最短的</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nStopping:&#x27;</span>)</span><br><span class="line">r1 = <span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line">r2 = <span class="built_in">range</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">map</span>(multiply, r1, r2):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> starmap</span><br><span class="line"><span class="comment"># map 传入的函数为f(x,y) starmap传入的函数为f(*x)</span></span><br><span class="line">values = [(<span class="number">0</span>, <span class="number">5</span>), (<span class="number">1</span>, <span class="number">6</span>), (<span class="number">2</span>, <span class="number">7</span>), (<span class="number">3</span>, <span class="number">8</span>), (<span class="number">4</span>, <span class="number">9</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> starmap(<span class="keyword">lambda</span> x,y: (x*y,x,y), values):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; * &#123;&#125; = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(*i))</span><br></pre></td></tr></table></figure><pre><code>Doubles:0 2 4 6 8 Multiples:0 * 5 = 01 * 6 = 62 * 7 = 143 * 8 = 244 * 9 = 36Stopping:(0, 0, 0)(1, 1, 1)0 * 0 = 56 * 1 = 614 * 2 = 724 * 3 = 836 * 4 = 9</code></pre><h4 id="countcyclerepear"><a class="markdownIt-Anchor" href="#countcyclerepear"></a> count,cycle,repear</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> count,repeat,cycle</span><br><span class="line"></span><br><span class="line"><span class="comment"># count无限产生值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">zip</span>(count(start=<span class="number">1</span>, step=<span class="number">10</span>), [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(*i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># cycle无限重复值 </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="number">7</span>), cycle([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># repear重复n次值,不提供就是无限 </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> repeat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], <span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 组合</span></span><br><span class="line"><span class="keyword">for</span> i, s <span class="keyword">in</span> <span class="built_in">zip</span>(count(), repeat(<span class="string">&#x27;over-and-over&#x27;</span>, <span class="number">5</span>)):</span><br><span class="line">    <span class="built_in">print</span>(i, s)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">map</span>(<span class="keyword">lambda</span> x, y: (x, y, x * y), repeat(<span class="number">2</span>), <span class="built_in">range</span>(<span class="number">5</span>)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:d&#125; * &#123;:d&#125; = &#123;:d&#125;&#x27;</span>.<span class="built_in">format</span>(*i))</span><br></pre></td></tr></table></figure><pre><code>1: a11: b21: c(0, 'a')(1, 'b')(2, 'c')(3, 'a')(4, 'b')(5, 'c')(6, 'a')[1, 2, 3, 4][1, 2, 3, 4][1, 2, 3, 4][1, 2, 3, 4][1, 2, 3, 4]0 over-and-over1 over-and-over2 over-and-over3 over-and-over4 over-and-over2 * 0 = 02 * 1 = 22 * 2 = 42 * 3 = 62 * 4 = 8</code></pre><h4 id="dropwhiletakewhilefilterfilterfalsecompress"><a class="markdownIt-Anchor" href="#dropwhiletakewhilefilterfilterfalsecompress"></a> dropwhile,takewhile,filter,filterfalse,compress</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> dropwhile,takewhile,filterfalse,compress</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_drop</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Testing:&#x27;</span>, x)</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">1</span></span><br><span class="line"><span class="comment"># 第一次为false之后的元素都会返回</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dropwhile(should_drop, [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, -<span class="number">2</span>]):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Yielding:&#x27;</span>, i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_take</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Testing:&#x27;</span>, x)</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">2</span></span><br><span class="line"><span class="comment"># 第一次为false之前的元素都会返回,遇见false就不返回了</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> takewhile(should_take, [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, -<span class="number">2</span>]):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Yielding:&#x27;</span>, i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只返回true的元素,每一个都会计算</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_item</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Testing:&#x27;</span>, x)</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">filter</span>(check_item, [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, -<span class="number">2</span>]):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Yielding:&#x27;</span>, i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相反</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_item</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Testing:&#x27;</span>, x)</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> filterfalse(check_item, [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, -<span class="number">2</span>]):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Yielding:&#x27;</span>, i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据true和false选择数据</span></span><br><span class="line">every_third = cycle([<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>])</span><br><span class="line">data = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> compress(data, every_third):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>Testing: -1Testing: 0Testing: 1Yielding: 1Yielding: 2Yielding: -2------------------------Testing: -1Yielding: -1Testing: 0Yielding: 0Testing: 1Yielding: 1Testing: 2------------------------Testing: -1Yielding: -1Testing: 0Yielding: 0Testing: 1Testing: 2Testing: -2Yielding: -2------------------------Testing: -1Testing: 0Testing: 1Yielding: 1Testing: 2Yielding: 2Testing: -2------------------------3 6 9 </code></pre><h4 id="groupby"><a class="markdownIt-Anchor" href="#groupby"></a> groupby</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> groupby</span><br><span class="line"></span><br><span class="line">d = <span class="built_in">dict</span>(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">1</span>, d=<span class="number">2</span>, e=<span class="number">1</span>, f=<span class="number">2</span>, g=<span class="number">3</span>)</span><br><span class="line">d = [(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">4</span>),(<span class="number">4</span>,<span class="number">2</span>)]</span><br><span class="line">di = <span class="built_in">sorted</span>(d, key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> k, g <span class="keyword">in</span> groupby(di, key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>]):</span><br><span class="line">    <span class="built_in">print</span>(k, <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x[<span class="number">1</span>], g)))</span><br></pre></td></tr></table></figure><pre><code>2 [2, 2]3 [3]4 [4]</code></pre><h4 id="accumulate"><a class="markdownIt-Anchor" href="#accumulate"></a> accumulate</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> accumulate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算累计和</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(accumulate(<span class="built_in">range</span>(<span class="number">5</span>))))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(accumulate(<span class="string">&#x27;abcde&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b)</span><br><span class="line">    <span class="keyword">return</span> b + a + b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(accumulate(<span class="string">&#x27;abcde&#x27;</span>, f)))</span><br></pre></td></tr></table></figure><pre><code>[0, 1, 3, 6, 10]['a', 'ab', 'abc', 'abcd', 'abcde']a bbab ccbabc ddcbabcd e['a', 'bab', 'cbabc', 'dcbabcd', 'edcbabcde']</code></pre><h4 id="product"><a class="markdownIt-Anchor" href="#product"></a> product</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="comment"># 笛卡尔积</span></span><br><span class="line"></span><br><span class="line">FACE_CARDS = (<span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">SUITS = (<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;S&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 顺序由输入顺序决定</span></span><br><span class="line">DECK = <span class="built_in">list</span>(</span><br><span class="line">    product(</span><br><span class="line">        chain(<span class="built_in">range</span>(<span class="number">2</span>, <span class="number">11</span>), FACE_CARDS),</span><br><span class="line">        SUITS,</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> card <span class="keyword">in</span> DECK:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:&gt;2&#125;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(*card), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> card[<span class="number">1</span>] == SUITS[-<span class="number">1</span>]:</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment"># repear控制几个自身</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">iterable</span>):</span><br><span class="line">    <span class="keyword">for</span> i, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(iterable, <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(item, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span>) == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Repeat 2:\n&#x27;</span>)</span><br><span class="line">show(<span class="built_in">list</span>(product(<span class="built_in">range</span>(<span class="number">3</span>), repeat=<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Repeat 3:\n&#x27;</span>)</span><br><span class="line">show(<span class="built_in">list</span>(product(<span class="built_in">range</span>(<span class="number">3</span>), repeat=<span class="number">3</span>)))</span><br></pre></td></tr></table></figure><pre><code> 2H  2D  2C  2S  3H  3D  3C  3S  4H  4D  4C  4S  5H  5D  5C  5S  6H  6D  6C  6S  7H  7D  7C  7S  8H  8D  8C  8S  9H  9D  9C  9S 10H 10D 10C 10S  JH  JD  JC  JS  QH  QD  QC  QS  KH  KD  KC  KS  AH  AD  AC  AS Repeat 2:(0, 0) (0, 1) (0, 2) (1, 0) (1, 1) (1, 2) (2, 0) (2, 1) (2, 2) Repeat 3:(0, 0, 0) (0, 0, 1) (0, 0, 2) (0, 1, 0) (0, 1, 1) (0, 1, 2) (0, 2, 0) (0, 2, 1) (0, 2, 2) (1, 0, 0) (1, 0, 1) (1, 0, 2) (1, 1, 0) (1, 1, 1) (1, 1, 2) (1, 2, 0) (1, 2, 1) (1, 2, 2) (2, 0, 0) (2, 0, 1) (2, 0, 2) (2, 1, 0) (2, 1, 1) (2, 1, 2) (2, 2, 0) (2, 2, 1) (2, 2, 2) </code></pre><h4 id="permutationscombinations"><a class="markdownIt-Anchor" href="#permutationscombinations"></a> permutations,combinations</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations,combinations,combinations_with_replacement</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">iterable</span>):</span><br><span class="line">    first = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> i, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(iterable, <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> first != item[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">if</span> first <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>()</span><br><span class="line">            first = item[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(item), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排列</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;All permutations:\n&#x27;</span>)</span><br><span class="line">show(permutations(<span class="string">&#x27;abcd&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nPairs:\n&#x27;</span>)</span><br><span class="line">show(permutations(<span class="string">&#x27;abcd&#x27;</span>, r=<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组合</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nUnique pairs:\n&#x27;</span>)</span><br><span class="line">show(combinations(<span class="string">&#x27;abcd&#x27;</span>, r=<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 包含自身</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nUnique pairs:\n&#x27;</span>)</span><br><span class="line">show(combinations_with_replacement(<span class="string">&#x27;abcd&#x27;</span>, r=<span class="number">2</span>))</span><br></pre></td></tr></table></figure><pre><code>All permutations:abcd abdc acbd acdb adbc adcb bacd badc bcad bcda bdac bdca cabd cadb cbad cbda cdab cdba dabc dacb dbac dbca dcab dcba Pairs:ab ac ad ba bc bd ca cb cd da db dc Unique pairs:ab ac ad bc bd cd Unique pairs:aa ab ac ad bb bc bd cc cd dd </code></pre><h3 id="operator内置操作符的函数结构"><a class="markdownIt-Anchor" href="#operator内置操作符的函数结构"></a> operator:内置操作符的函数结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键字的函数实现</span></span><br><span class="line"></span><br><span class="line">a = -<span class="number">1</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b =&#x27;</span>, b)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;not_(a)     :&#x27;</span>, not_(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;truth(a)    :&#x27;</span>, truth(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;is_(a, b)   :&#x27;</span>, is_(a, b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;is_not(a, b):&#x27;</span>, is_not(a, b))</span><br><span class="line"><span class="keyword">for</span> func <span class="keyword">in</span> (lt, le, eq, ne, ge, gt):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;(a, b): &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(func.__name__, func(a, b)))</span><br></pre></td></tr></table></figure><pre><code>a = -1b = 5not_(a)     : Falsetruth(a)    : Trueis_(a, b)   : Falseis_not(a, b): Truelt(a, b): Truele(a, b): Trueeq(a, b): Falsene(a, b): Truege(a, b): Falsegt(a, b): False</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyObj</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;example class for attrgetter&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, arg</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.arg = arg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;MyObj(&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(self.arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l = [MyObj(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;objects   :&#x27;</span>, l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extract the &#x27;arg&#x27; value from each object</span></span><br><span class="line">g = attrgetter(<span class="string">&#x27;arg&#x27;</span>)</span><br><span class="line">vals = [g(i) <span class="keyword">for</span> i <span class="keyword">in</span> l]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;arg values:&#x27;</span>, vals)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sort using arg</span></span><br><span class="line">l.reverse()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;reversed  :&#x27;</span>, l)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;sorted    :&#x27;</span>, <span class="built_in">sorted</span>(l, key=g))</span><br></pre></td></tr></table></figure><pre><code>objects   : [MyObj(0), MyObj(1), MyObj(2), MyObj(3), MyObj(4)]arg values: [0, 1, 2, 3, 4]reversed  : [MyObj(4), MyObj(3), MyObj(2), MyObj(1), MyObj(0)]sorted    : [MyObj(0), MyObj(1), MyObj(2), MyObj(3), MyObj(4)]</code></pre><h3 id="contextlib上下文管理器工具"><a class="markdownIt-Anchor" href="#contextlib上下文管理器工具"></a> contextlib:上下文管理器工具</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WithinContext</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, context</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;WithinContext.__init__(&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(context))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_something</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;WithinContext.do_something()&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;WithinContext.__del__&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, handle_error</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__init__(&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(handle_error))</span><br><span class="line">        self.handle_error = handle_error</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Context.__enter__()&#x27;</span>)</span><br><span class="line">        <span class="comment"># 此处返回作为as使用</span></span><br><span class="line">        <span class="keyword">return</span> WithinContext(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__exit__()&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;  exc_type =&#x27;</span>, exc_type)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;  exc_val  =&#x27;</span>, exc_val)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;  exc_tb   =&#x27;</span>, exc_tb)</span><br><span class="line">        <span class="comment"># 返回true就不继续传递,返回false继续传递</span></span><br><span class="line">        <span class="keyword">return</span> self.handle_error</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Context(<span class="literal">False</span>) <span class="keyword">as</span> c:</span><br><span class="line">    c.do_something()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------------&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> Context(<span class="literal">True</span>):</span><br><span class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;error message handled&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>__init__(False)Context.__enter__()WithinContext.__init__(&lt;__main__.Context object at 0x0000021B997DA3D0&gt;)WithinContext.__del__WithinContext.do_something()__exit__()  exc_type = None  exc_val  = None  exc_tb   = None---------------__init__(True)Context.__enter__()WithinContext.__init__(&lt;__main__.Context object at 0x0000021B997DA3D0&gt;)WithinContext.__del____exit__()  exc_type = &lt;class 'RuntimeError'&gt;  exc_val  = error message handled  exc_tb   = &lt;traceback object at 0x0000021B998C7D80&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timethis</span>(<span class="params">label</span>):</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="comment"># yield 之前的代码会在上下文管理器中作为 __enter__() 方法执行</span></span><br><span class="line">    <span class="comment"># 所有在 yield 之后的代码会作为 __exit__() 方法执行</span></span><br><span class="line">    <span class="comment"># 如果出现了异常，异常会在yield语句那里抛出。</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(label, end - start))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example use</span></span><br><span class="line"><span class="keyword">with</span> timethis(<span class="string">&#x27;counting&#x27;</span>):</span><br><span class="line">    n = <span class="number">10000000</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n -= <span class="number">1</span></span><br></pre></td></tr></table></figure><pre><code>counting: 0.678372859954834</code></pre><h2 id="日期和时间"><a class="markdownIt-Anchor" href="#日期和时间"></a> 日期和时间</h2><h3 id="time"><a class="markdownIt-Anchor" href="#time"></a> time</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 报告系统挂钟时间,返回某一时刻的秒数</span></span><br><span class="line"><span class="built_in">print</span>(time.time())</span><br><span class="line"></span><br><span class="line"><span class="comment"># monotonic()递增函数,time可能因为系统时间后退</span></span><br><span class="line"><span class="comment"># monotonic的起始时间无意义,主要是差值</span></span><br><span class="line"><span class="built_in">print</span>(time.monotonic())</span><br><span class="line"></span><br><span class="line"><span class="comment"># perf_counter高分辨率时钟</span></span><br><span class="line"><span class="built_in">print</span>(time.perf_counter())</span><br><span class="line"></span><br><span class="line"><span class="comment"># process_time处理器处理时间</span></span><br><span class="line"><span class="built_in">print</span>(time.process_time())</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctime 返回人能看懂的时间字符串,默认返回当前时间</span></span><br><span class="line"><span class="built_in">print</span>(time.ctime())</span><br><span class="line"><span class="built_in">print</span>(time.ctime(time.time()+<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前时间的结构化时间</span></span><br><span class="line"><span class="built_in">print</span>(time.localtime())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回UTC时区的结构化时间</span></span><br><span class="line"><span class="built_in">print</span>(time.gmtime())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把结构化时间转化为浮点秒数</span></span><br><span class="line"><span class="built_in">print</span>(time.mktime(time.localtime()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理时区问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串时间转为结构化时间</span></span><br><span class="line"><span class="built_in">print</span>(time.strptime(time.ctime()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结构化时间转化为指定格式</span></span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">r&quot;%Y-%m-%d %H:%M:%S&quot;</span>,time.localtime()))</span><br></pre></td></tr></table></figure><pre><code>1678199761.7579758951660.75644.11602483.59375Tue Mar  7 22:36:01 2023Tue Mar  7 22:36:21 2023time.struct_time(tm_year=2023, tm_mon=3, tm_mday=7, tm_hour=22, tm_min=36, tm_sec=1, tm_wday=1, tm_yday=66, tm_isdst=0)time.struct_time(tm_year=2023, tm_mon=3, tm_mday=7, tm_hour=14, tm_min=36, tm_sec=1, tm_wday=1, tm_yday=66, tm_isdst=0)1678199761.0time.struct_time(tm_year=2023, tm_mon=3, tm_mday=7, tm_hour=22, tm_min=36, tm_sec=1, tm_wday=1, tm_yday=66, tm_isdst=-1)2023-03-07 22:36:01</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">available_clocks = [</span><br><span class="line">    (<span class="string">&#x27;monotonic&#x27;</span>, time.monotonic),</span><br><span class="line">    (<span class="string">&#x27;perf_counter&#x27;</span>, time.perf_counter),</span><br><span class="line">    (<span class="string">&#x27;process_time&#x27;</span>, time.process_time),</span><br><span class="line">    (<span class="string">&#x27;time&#x27;</span>, time.time),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> clock_name, func <span class="keyword">in</span> available_clocks:</span><br><span class="line">    <span class="built_in">print</span>(textwrap.dedent(<span class="string">&#x27;&#x27;&#x27;\</span></span><br><span class="line"><span class="string">    &#123;name&#125;:</span></span><br><span class="line"><span class="string">        adjustable    : &#123;info.adjustable&#125;</span></span><br><span class="line"><span class="string">        implementation: &#123;info.implementation&#125;</span></span><br><span class="line"><span class="string">        monotonic     : &#123;info.monotonic&#125;</span></span><br><span class="line"><span class="string">        resolution    : &#123;info.resolution&#125;</span></span><br><span class="line"><span class="string">        current       : &#123;current&#125;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>).<span class="built_in">format</span>(</span><br><span class="line">        name=clock_name,</span><br><span class="line">        info=time.get_clock_info(clock_name),</span><br><span class="line">        current=func())</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><pre><code>monotonic:    adjustable    : False    implementation: GetTickCount64()    monotonic     : True    resolution    : 0.015625    current       : 951073.281perf_counter:    adjustable    : False    implementation: QueryPerformanceCounter()    monotonic     : True    resolution    : 1e-07    current       : 56.6460748process_time:    adjustable    : False    implementation: GetProcessTimes()    monotonic     : True    resolution    : 1e-07    current       : 2.59375time:    adjustable    : True    implementation: GetSystemTimeAsFileTime()    monotonic     : False    resolution    : 0.015625    current       : 1678199174.288961</code></pre><h3 id="datetime"><a class="markdownIt-Anchor" href="#datetime"></a> datetime</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment"># 获取年月日等</span></span><br><span class="line">today = datetime.date.today()</span><br><span class="line"><span class="built_in">print</span>(today)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ctime  :&#x27;</span>, today.ctime())</span><br><span class="line">tt = today.timetuple()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;tuple  : tm_year  =&#x27;</span>, tt.tm_year)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;         tm_mon   =&#x27;</span>, tt.tm_mon)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;         tm_mday  =&#x27;</span>, tt.tm_mday)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;         tm_hour  =&#x27;</span>, tt.tm_hour)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;         tm_min   =&#x27;</span>, tt.tm_min)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;         tm_sec   =&#x27;</span>, tt.tm_sec)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;         tm_wday  =&#x27;</span>, tt.tm_wday)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;         tm_yday  =&#x27;</span>, tt.tm_yday)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;         tm_isdst =&#x27;</span>, tt.tm_isdst)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ordinal:&#x27;</span>, today.toordinal())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Year   :&#x27;</span>, today.year)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Mon    :&#x27;</span>, today.month)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Day    :&#x27;</span>, today.day)</span><br></pre></td></tr></table></figure><pre><code>2023-03-07ctime  : Tue Mar  7 00:00:00 2023tuple  : tm_year  = 2023         tm_mon   = 3         tm_mday  = 7         tm_hour  = 0         tm_min   = 0         tm_sec   = 0         tm_wday  = 1         tm_yday  = 66         tm_isdst = -1ordinal: 738586Year   : 2023Mon    : 3Day    : 7</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 根据天数返回日期</span></span><br><span class="line">o = <span class="number">733114</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;o               :&#x27;</span>, o)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;fromordinal(o)  :&#x27;</span>, datetime.date.fromordinal(o))</span><br><span class="line"></span><br><span class="line">t = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;t               :&#x27;</span>, t)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;fromtimestamp(t):&#x27;</span>, datetime.date.fromtimestamp(t))</span><br></pre></td></tr></table></figure><pre><code>o               : 733114fromordinal(o)  : 2008-03-13t               : 1678199846.9677696fromtimestamp(t): 2023-03-07</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取时间对应秒数</span></span><br><span class="line"><span class="keyword">for</span> delta <span class="keyword">in</span> [datetime.timedelta(microseconds=<span class="number">1</span>),</span><br><span class="line">              datetime.timedelta(milliseconds=<span class="number">1</span>),</span><br><span class="line">              datetime.timedelta(seconds=<span class="number">1</span>),</span><br><span class="line">              datetime.timedelta(minutes=<span class="number">1</span>),</span><br><span class="line">              datetime.timedelta(hours=<span class="number">1</span>),</span><br><span class="line">              datetime.timedelta(days=<span class="number">1</span>),</span><br><span class="line">              datetime.timedelta(weeks=<span class="number">1</span>),</span><br><span class="line">              ]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:15&#125; = &#123;:8&#125; seconds&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        <span class="built_in">str</span>(delta), delta.total_seconds())</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><pre><code>0:00:00.000001  =    1e-06 seconds0:00:00.001000  =    0.001 seconds0:00:01         =      1.0 seconds0:01:00         =     60.0 seconds1:00:00         =   3600.0 seconds1 day, 0:00:00  =  86400.0 seconds7 days, 0:00:00 = 604800.0 seconds</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment"># 时间的计算</span></span><br><span class="line">today = datetime.date.today()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Today    :&#x27;</span>, today)</span><br><span class="line"></span><br><span class="line">one_day = datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;One day  :&#x27;</span>, one_day)</span><br><span class="line"></span><br><span class="line">yesterday = today - one_day</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Yesterday:&#x27;</span>, yesterday)</span><br><span class="line"></span><br><span class="line">tomorrow = today + one_day</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Tomorrow :&#x27;</span>, tomorrow)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;tomorrow - yesterday:&#x27;</span>, tomorrow - yesterday)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;yesterday - tomorrow:&#x27;</span>, yesterday - tomorrow)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 时间比较</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Times:&#x27;</span>)</span><br><span class="line">t1 = datetime.time(<span class="number">12</span>, <span class="number">55</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  t1:&#x27;</span>, t1)</span><br><span class="line">t2 = datetime.time(<span class="number">13</span>, <span class="number">5</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  t2:&#x27;</span>, t2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  t1 &lt; t2:&#x27;</span>, t1 &lt; t2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Dates:&#x27;</span>)</span><br><span class="line">d1 = datetime.date.today()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  d1:&#x27;</span>, d1)</span><br><span class="line">d2 = datetime.date.today() + datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  d2:&#x27;</span>, d2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  d1 &gt; d2:&#x27;</span>, d1 &gt; d2)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment"># 时间和日期组合在一起</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Now    :&#x27;</span>, datetime.datetime.now())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Today  :&#x27;</span>, datetime.datetime.today())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;UTC Now:&#x27;</span>, datetime.datetime.utcnow())</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">FIELDS = [</span><br><span class="line">    <span class="string">&#x27;year&#x27;</span>, <span class="string">&#x27;month&#x27;</span>, <span class="string">&#x27;day&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;hour&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>, <span class="string">&#x27;second&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;microsecond&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">d = datetime.datetime.now()</span><br><span class="line"><span class="keyword">for</span> attr <span class="keyword">in</span> FIELDS:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:15&#125;: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(attr, <span class="built_in">getattr</span>(d, attr)))</span><br></pre></td></tr></table></figure><pre><code>Now    : 2023-03-07 22:41:14.718075Today  : 2023-03-07 22:41:14.718076UTC Now: 2023-03-07 14:41:14.718075year           : 2023month          : 3day            : 7hour           : 22minute         : 41second         : 14microsecond    : 719073</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment"># 日期格式化</span></span><br><span class="line"><span class="built_in">format</span> = <span class="string">&quot;%a %b %d %H:%M:%S %Y&quot;</span></span><br><span class="line"></span><br><span class="line">today = datetime.datetime.today()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ISO     :&#x27;</span>, today)</span><br><span class="line"></span><br><span class="line">s = today.strftime(<span class="built_in">format</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;strftime:&#x27;</span>, s)</span><br><span class="line"></span><br><span class="line">d = datetime.datetime.strptime(s, <span class="built_in">format</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;strptime:&#x27;</span>, d.strftime(<span class="built_in">format</span>))</span><br></pre></td></tr></table></figure><pre><code>ISO     : 2023-03-07 22:40:31.254463strftime: Tue Mar 07 22:40:31 2023strptime: Tue Mar 07 22:40:31 2023</code></pre><h3 id="日期操作"><a class="markdownIt-Anchor" href="#日期操作"></a> 日期操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"><span class="comment"># 设置星期一是第一天还是星期天是第一天</span></span><br><span class="line">c = calendar.TextCalendar(calendar.MONDAY)</span><br><span class="line">c.prmonth(<span class="number">2023</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>     March 2023Mo Tu We Th Fr Sa Su       1  2  3  4  5 6  7  8  9 10 11 1213 14 15 16 17 18 1920 21 22 23 24 25 2627 28 29 30 31</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">pprint.pprint(calendar.monthcalendar(<span class="number">2023</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>[[0, 0, 1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26], [27, 28, 29, 30, 31, 0, 0]]</code></pre><h2 id="数学模块"><a class="markdownIt-Anchor" href="#数学模块"></a> 数学模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python100天31-40</title>
    <link href="https://gladdduck.github.io/2023/03/07/python100%E5%A4%A931-40/"/>
    <id>https://gladdduck.github.io/2023/03/07/python100%E5%A4%A931-40/</id>
    <published>2023-03-07T10:33:08.243Z</published>
    <updated>2023-03-11T05:47:36.422Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 01-15python基础</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 16-20python进阶</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 21-30前端概述</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 31-35Linux</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 36-40MySQL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 41-55Django</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 56-60FaskAPI</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 61-65爬虫与并发编程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 66-80numpy&amp;pandas</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 81-90机器学习&amp;pytorch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 91-100项目</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="python100天学习31-35"><a class="markdownIt-Anchor" href="#python100天学习31-35"></a> Python100天学习31-35</h2><p><code>Linux</code></p><p><a href="https://github.com/jackfrued/Python-100-Days">资料连接</a></p><h2 id="python100天学习36-40"><a class="markdownIt-Anchor" href="#python100天学习36-40"></a> Python100天学习36-40</h2><p><code>MySQL</code></p><p><a href="https://github.com/jackfrued/Python-100-Days">资料连接</a></p><h3 id="关系数据库产品"><a class="markdownIt-Anchor" href="#关系数据库产品"></a> 关系数据库产品</h3><ul><li><a href="https://www.oracle.com/index.html">Oracle</a> - 目前世界上使用最为广泛的数据库管理系统，作为一个通用的数据库系统，它具有完整的数据管理功能；作为一个关系数据库，它是一个完备关系的产品；作为分布式数据库，它实现了分布式处理的功能。在 Oracle 最新的 12c 版本中，还引入了多承租方架构，使用该架构可轻松部署和管理数据库云。</li><li><a href="https://www.ibm.com/analytics/us/en/db2/">DB2</a> - IBM 公司开发的、主要运行于 Unix（包括 IBM 自家的 <a href="https://zh.wikipedia.org/wiki/AIX">AIX</a>）、Linux、以及 Windows 服务器版等系统的关系数据库产品。DB2 历史悠久且被认为是最早使用 SQL 的数据库产品，它拥有较为强大的商业智能功能。</li><li><a href="https://www.microsoft.com/en-us/sql-server/">SQL Server</a> - 由 Microsoft 开发和推广的关系型数据库产品，最初适用于中小企业的数据管理，但是近年来它的应用范围有所扩展，部分大企业甚至是跨国公司也开始基于它来构建自己的数据管理系统。</li><li><a href="https://www.mysql.com/">MySQL</a> - MySQL 是开放源代码的，任何人都可以在 GPL（General Public License）的许可下下载并根据个性化的需要对其进行修改。MySQL 因为其速度、可靠性和适应性而备受关注。</li><li><a href="">PostgreSQL</a> - 在 BSD 许可证下发行的开放源代码的关系数据库产品。</li></ul><h3 id="安装教程"><a class="markdownIt-Anchor" href="#安装教程"></a> 安装教程</h3><p>windows</p><p>linux</p><p>macos</p><h3 id="mysql基本命令"><a class="markdownIt-Anchor" href="#mysql基本命令"></a> MySQL基本命令</h3><p><strong>查看命令</strong></p><ol><li>查看所有数据库</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><ol start="2"><li>查看所有字符集</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="type">character</span> <span class="keyword">set</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>查看所有的排序规则</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">collation</span>;</span><br></pre></td></tr></table></figure><ol start="4"><li>查看所有的引擎</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> engines;</span><br></pre></td></tr></table></figure><ol start="5"><li>查看所有日志文件</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="type">binary</span> logs;</span><br></pre></td></tr></table></figure><ol start="6"><li>查看数据库下所有表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><p><strong>获取帮助</strong></p><p>在 MySQL 命令行工具中，可以使用 <code>help</code>命令或 <code>?</code>来获取帮助，如下所示。</p><ol><li><p>查看 <code>show</code>命令的帮助。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? show</span><br></pre></td></tr></table></figure></li><li><p>查看有哪些帮助内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? contents</span><br></pre></td></tr></table></figure></li><li><p>获取函数的帮助。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? functions</span><br></pre></td></tr></table></figure></li><li><p>获取数据类型的帮助。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? data types</span><br></pre></td></tr></table></figure></li></ol><h3 id="sql语句"><a class="markdownIt-Anchor" href="#sql语句"></a> SQL语句</h3><h4 id="数据库的基本操作"><a class="markdownIt-Anchor" href="#数据库的基本操作"></a> 数据库的基本操作</h4><p><code>SQL 包含以下 4 部分：</code></p><ol><li>数据定义语言（Data Definition Language，DDL）<br />用来创建或删除数据库以及表等对象，主要包含以下几种命令：</li></ol><ul><li>DROP：删除数据库和表等对象</li><li>CREATE：创建数据库和表等对象</li><li>ALTER：修改数据库和表等对象的结构</li></ul><ol start="2"><li>数据操作语言（Data Manipulation Language，DML）<br />用来变更表中的记录，主要包含以下几种命令：</li></ol><ul><li>SELECT：查询表中的数据</li><li>INSERT：向表中插入新数据</li><li>UPDATE：更新表中的数据</li><li>DELETE：删除表中的数据</li></ul><ol start="3"><li>数据查询语言（Data Query Language，DQL）<br />用来查询表中的记录，主要包含 SELECT 命令，来查询表中的数据。</li><li>数据控制语言（Data Control Language，DCL）<br />用来确认或者取消对数据库中的数据进行的变更。除此之外，还可以对数据库中的用户设定权限。主要包含以下几种命令：</li></ol><ul><li>GRANT：赋予用户操作权限</li><li>REVOKE：取消用户的操作权限</li><li>COMMIT：确认对数据库中的数据进行的变更</li><li>ROLLBACK：取消对数据库中的数据进行的变更</li></ul><p><code>基本语法</code></p><ol><li>SQL 语句不区分大小写</li><li>SQL 语句中含有字符串的时候，需要像 ‘abc’ 这样，使用英文单引号’将字符串括起来，用来标识这是一个字符串。</li><li>SQL 语句中含有日期的时候，同样需要使用英文单引号将其括起来。日期的格式有很多种（‘26 Jan 2010’ 或者’10/01/26’ 等），统一使用 ‘2020-01-26’ 这种’年-月-日’的格式。</li><li>在 SQL 语句中书写数字的时候，不需要使用任何符号标识，直接写成 1000 这样的数字即可。</li><li>SQL 语句要以分号;结尾.在 RDBMS （关系型数据库）当中，SQL 语句是逐条执行的，一条 SQL 语句代表着数据库的一个操作。</li></ol><h3 id="c语言中文网sql教程"><a class="markdownIt-Anchor" href="#c语言中文网sql教程"></a> C语言中文网SQL教程</h3><p>基本操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看数据库 ,LIKE可选,不写就是查看全部  </span></span><br><span class="line"><span class="keyword">SHOW</span> DATABASES [<span class="keyword">LIKE</span> <span class="string">&#x27;数据库名&#x27;</span>];</span><br><span class="line"><span class="comment">-- 安装 MySQL 时系统自动创建的6个数据库，其各自功能如下：</span></span><br><span class="line"><span class="comment">-- information_schema：主要存储了系统中的一些数据库对象信息，比如用户表信息、列信息、权限信息、字符集信息和分区信息等。</span></span><br><span class="line"><span class="comment">-- mysql：MySQL 的核心数据库，类似于 SQL Server 中的 master 表，主要负责存储数据库用户、用户访问权限等 MySQL 自己需要使用的控制和管理信息。常用的比如在 mysql 数据库的 user 表中修改 root 用户密码。</span></span><br><span class="line"><span class="comment">-- performance_schema：主要用于收集数据库服务器性能参数。</span></span><br><span class="line"><span class="comment">-- sakila：MySQL 提供的样例数据库，该数据库共有 16 张表，这些数据表都是比较常见的，在设计数据库时，可以参照这些样例数据表来快速完成所需的数据表。</span></span><br><span class="line"><span class="comment">-- sys：MySQL 5.7 安装完成后会多一个 sys 数据库。sys 数据库主要提供了一些视图，数据都来自于 performation_schema，主要是让开发者和使用者更方便地查看性能问题。</span></span><br><span class="line"><span class="comment">-- world：world 数据库是 MySQL 自动创建的数据库，该数据库中只包括 3 张数据表，分别保存城市，国家和国家使用的语言等内容。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="comment">-- 字符集是用来定义 MySQL 存储字符串的方式，校对规则定义了比较字符串的方式。</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] <span class="operator">&lt;</span>数据库名<span class="operator">&gt;</span></span><br><span class="line">[[<span class="keyword">DEFAULT</span>] <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">&lt;</span>字符集名<span class="operator">&gt;</span>] </span><br><span class="line">[[<span class="keyword">DEFAULT</span>] <span class="keyword">COLLATE</span> <span class="operator">&lt;</span>校对规则名<span class="operator">&gt;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看数据库的定义声明</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE test_db;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 ALTER DATABASE 来修改已经被创建或者存在的数据库的相关参数</span></span><br><span class="line"><span class="keyword">ALTER</span> DATABASE [数据库名] &#123; </span><br><span class="line">[ <span class="keyword">DEFAULT</span> ] <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">&lt;</span>字符集名<span class="operator">&gt;</span> <span class="operator">|</span></span><br><span class="line">[ <span class="keyword">DEFAULT</span> ] <span class="keyword">COLLATE</span> <span class="operator">&lt;</span>校对规则名<span class="operator">&gt;</span>&#125;</span><br><span class="line"><span class="comment">-- ALTER DATABASE 用于更改数据库的全局特性。</span></span><br><span class="line"><span class="comment">-- 使用 ALTER DATABASE 需要获得数据库 ALTER 权限。</span></span><br><span class="line"><span class="comment">-- 数据库名称可以忽略，此时语句对应于默认数据库。</span></span><br><span class="line"><span class="comment">-- CHARACTER SET 子句用于更改默认的数据库字符集。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除数据库</span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE [ IF <span class="keyword">EXISTS</span> ] <span class="operator">&lt;</span>数据库名<span class="operator">&gt;</span></span><br><span class="line"><span class="comment">-- MySQL 安装后，系统会自动创建名为 information_schema 和 mysql 的两个系统数据库，系统数据库存放一些和数据库相关的信息，如果删除了这两个数据库，MySQL 将不能正常工作。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- USE 语句用来完成一个数据库到另一个数据库的跳转</span></span><br><span class="line"><span class="comment">-- 创建数据库之后，该数据库不会自动成为当前数据库</span></span><br><span class="line">USE <span class="operator">&lt;</span>数据库名<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 单行注释</span></span><br><span class="line"># 单行注释</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看帮助命令,查询内容是关键字,可以用LIKE</span></span><br><span class="line">HELP <span class="string">&#x27;查询内容&#x27;</span></span><br></pre></td></tr></table></figure><p><code>SQL语句的大小写规则</code><br />MySQL 用服务器主机的底层文件系统所包含的目录和文件来表示数据库和表。因此，数据库名和表名的默认大小写取决于服务器主机的操作系统在命名方面的规定。<br /><img src="https://image.yayan.xyz/20230303141301.png" alt="MySQL大小写规则" /></p><h5 id="常见错误"><a class="markdownIt-Anchor" href="#常见错误"></a> 常见错误</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 开头 服务器错误</span><br><span class="line"><span class="number">2</span> 开头 客户端错误</span><br></pre></td></tr></table></figure><p><img src="https://image.yayan.xyz/20230311114517.png" alt="" /><br /><img src="https://image.yayan.xyz/20230311114532.png" alt="" /><br /><img src="https://image.yayan.xyz/20230311114459.png" alt="" /></p><h5 id="数据库设计"><a class="markdownIt-Anchor" href="#数据库设计"></a> 数据库设计</h5><p><code>数据库设计三个范式</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>第一范式： 要求任何一张表必须有主键，每一个字段原子性不可再分。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>第二范式： 建立在第一范式的基础之上，要求所有非主键字段完全依赖主键，不要产生部分依赖。</span><br><span class="line">(学术编号<span class="operator">+</span>教师编号,学生姓名,教师姓名)<span class="operator">-</span><span class="operator">&gt;</span>(学生编号,教师编号)(学生编号,学生姓名)(教师编号,教师姓名)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>第三范式： 建立在第二范式的基础之上，要求所有非主键字段直接依赖主键，不要产生传递依赖。</span><br><span class="line">(学生编号,学生姓名,班级编号,班级名称)<span class="operator">-</span><span class="operator">&gt;</span>(学生编号,学生姓名,班级编号)(班级编号,班级名称)</span><br></pre></td></tr></table></figure><h5 id="mysql数据类型"><a class="markdownIt-Anchor" href="#mysql数据类型"></a> MySQL数据类型</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">整型:TINYINT(<span class="number">1</span>字节,<span class="number">255</span>) <span class="type">SMALLINT</span>(<span class="number">2</span>字节,<span class="number">65535</span>)  MEDIUMINT(<span class="number">3</span>字节,<span class="number">16777214</span>) <span class="type">INT</span>(<span class="number">4</span>字节,<span class="number">4294967295</span>) <span class="type">BIGINT</span>(<span class="number">8</span>字节,)</span><br><span class="line"></span><br><span class="line">浮点型:<span class="type">FLOAT</span>(<span class="number">4</span>字节) <span class="keyword">DOUBLE</span>(<span class="number">8</span>字符) <span class="type">DECIMAL</span>(M<span class="operator">+</span><span class="number">2</span>字节,指定精度)</span><br><span class="line"></span><br><span class="line">日期型:<span class="keyword">YEAR</span>(yyyy,<span class="number">1</span>字节)  <span class="type">TIME</span>(HH:MM:SS,<span class="number">3</span>字节) <span class="type">DATE</span>(YYYY<span class="operator">-</span>MM<span class="operator">-</span>DD,三字节) DATETIME(YYYY<span class="operator">-</span>MM<span class="operator">-</span>DD HH:MM:SS,<span class="number">8</span>字节)</span><br><span class="line"></span><br><span class="line">字符串类型:<span class="type">CHAR</span>(M字节,定长) <span class="type">VARCHAR</span>(L<span class="operator">+</span><span class="number">1</span>字节,L实际长度)　TINYTEXT(L字节,<span class="number">2</span><span class="operator">*</span><span class="operator">*</span><span class="number">8</span>) TEXT(L<span class="operator">+</span><span class="number">2</span>字节,<span class="number">2</span><span class="operator">*</span><span class="operator">*</span><span class="number">16</span>) MEDIUMTEXT(L<span class="operator">+</span><span class="number">3</span>字节,<span class="number">2</span><span class="operator">*</span><span class="operator">*</span><span class="number">24</span>) LONGTEXT(L<span class="operator">+</span><span class="number">3</span>字节,<span class="number">2</span><span class="operator">*</span><span class="operator">*</span><span class="number">32</span>) ENUM() <span class="keyword">SET</span>()</span><br><span class="line"></span><br><span class="line">二进制类型:BIT()  <span class="type">BINARY</span>() <span class="type">VARBINARY</span>() <span class="type">BLOB</span>()</span><br><span class="line"></span><br><span class="line">转义符: 用\</span><br></pre></td></tr></table></figure><p><code>系统变量</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL 中的系统变量以两个“@”开头。</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> VARIABLES; </span><br><span class="line"><span class="keyword">SHOW</span> SESSION VARIABLES;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置</span></span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@global</span>.innodb_file_per_table<span class="operator">=</span><span class="keyword">default</span>;</span><br></pre></td></tr></table></figure><h5 id="mysql存储引擎"><a class="markdownIt-Anchor" href="#mysql存储引擎"></a> MySQL存储引擎</h5><p><code>存储引擎就是指表的类型。数据库的存储引擎决定了表在计算机中的存储方式。</code></p><p><img src="https://image.yayan.xyz/20230311122012.png" alt="" /></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> ENGINES;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> default_storage_engine<span class="operator">=</span><span class="operator">&lt;</span> 存储引擎名 <span class="operator">&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>InnoDB</code></p><blockquote><p>1.支持事务,实现了4个隔离级别<br />2.灾难恢复性好,commit rollback crash-recovery<br />3.行级锁<br />4.缓存处理<br />5.支持外键</p></blockquote><p>使用InnoDB时，MySQL会在数据目录(Data )下创建一个名为ibdata1的10MB大小的自动扩展数据文件，以及两个名为ib_logfile0和ib_logfile1的5MB大小的日志文件。<br />InnoDB存储引擎和MyISAM不太一样，虽然也有.frm文件来存放表结构定义相关的元数据，但是表数据和索引数据是存放在一起的.至于是每个表单独存放还是所有表存放在一起，用户可以自己设置。</p><p><strong>物理存储结构</strong></p><ol><li>数据文件(表数据和索引数据)<br />数据文件用来存放数据表中的数据和所有的索引数据，包括主键和其他普通索引。<br />InnoDB存储的数据采用表空间(Tablepace)进行存放设计。表空间是用来存放MySQL系统相关信息的一个特殊共享表空间。<br />InnoDB的表空间分为以下两种形式∶<br />共享表空间，表数据和索引都存放在同一个表空间。默认的表空间文件就是上面所提到的MySQL初始化路径下的 ibdata1文件。<br />独立表空间，每个表的数据和索引被存放在一个单独的.ibd文件中。</li><li>日志文件<br />默认情况下，InnoDB存储引擎的数据目录下会有两个名为ib_logfile0和ib_Jogfile1的文件。在MySQL官方手册中将其称为InnoDB存储引擎的重做日志文件( redo log file )。<br />重做日志文件对InnoDB存储擎至关重要。InnoDB可以通过重做日志将数据库宕机时已经完成但还没有来得及将数据写入磁盘的事务恢复，也能将所有部分完成并已经写入磁盘的末完成事务回滚，并且将数据还原，以此来保证数据的完整性。<br />每个InnoDB存储引擎至少有1个重做日志文件组 ( group )，每个文件组下至少有2个重做日志文件，如默认的ib_Jogfile0和ib_logfile1。</li></ol><p><code>MyISAM</code><br /><code>优</code></p><blockquote><p>占用空间小<br />访问速度快，对事务完整性没有要求或以SELECT、INSERT为主的应用基本上都可以使用这个<br />引擎来创建表可以配合锁，实现操作系统下的复制备份<br />支持全文检索(InnoDB在MySQL 5.6版本以后也支持全文检索)数据紧凑存储，因此可获得更<br />小的索引和更快的全表扫描性能。<br />MyISAM对整张表加锁，而不是针对行。读取时会对需要读到的所有表加共享锁，写入时对表加排他锁。但是在表有读取查询的同时也可以往表中插入新的记录（这被称为并发插入)。<br />三种索引:B-Tree,R-Tree,Full-Text<br /><code>缺</code><br />不支持事务的完整性和并发性<br />不支持行级锁，使用表级锁，并发性差<br />主机宕机后，MyISAM表易损坏，灾难恢复性不佳数据库崩溃后无法安全恢复<br />只缓存索引，数据的缓存是利用操作系统缓冲区来实现的，可能会引发过多的系统调用，且效率不佳</p></blockquote><p><strong>物理存储</strong></p><p>MyISAM存储引擎的表在数据库中被存储成3个物理文件，文件名与表名相同。扩展名为frm、MYD和MYI。其中:</p><p>frm为扩展名的文件存储表的结构;<br />MYD为扩展名的文件存储数据，其是MYData的缩写;<br />MYI为扩展名的文件存储索引，其是MYIndex的缩写。不管表有多少索引，都是存放在同一个.MYT文件中.</p><p><code>不同存储引擎存储的方式</code><br />MySQL中的每一个数据表在磁盘上至少被表示为一个文件，即存放着该数据表结构定义的.frm 文件。不同的存储引擎还有其它用来存放数据和索引信息的文件。</p><p>从MySQL 8.0版本开始，frm 表结构定义文件被取消，MySQL把表结构信息都写到了系统表空间。</p><p><img src="https://image.yayan.xyz/20230311134621.png" alt="" /></p><h5 id="数据表的基本操作"><a class="markdownIt-Anchor" href="#数据表的基本操作"></a> 数据表的基本操作</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Python学习笔记" scheme="https://gladdduck.github.io/tags/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python3标准库</title>
    <link href="https://gladdduck.github.io/2023/02/28/Python%EF%BC%93%E6%A0%87%E5%87%86%E5%BA%93/"/>
    <id>https://gladdduck.github.io/2023/02/28/Python%EF%BC%93%E6%A0%87%E5%87%86%E5%BA%93/</id>
    <published>2023-02-28T03:49:43.091Z</published>
    <updated>2023-02-28T01:12:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python3标准库"><a class="markdownIt-Anchor" href="#python3标准库"></a> Python3标准库</h2><h3 id="第一章文本"><a class="markdownIt-Anchor" href="#第一章文本"></a> 第一章:文本</h3><h4 id="11-string文本常量和模板"><a class="markdownIt-Anchor" href="#11-string文本常量和模板"></a> 1.1 string文本常量和模板</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;python3标准库&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#python3标准库&quot;&gt;&lt;/a&gt; Python3标准库&lt;/h2&gt;
&lt;h3 id=&quot;第一章文本&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Python学习笔记" scheme="https://gladdduck.github.io/tags/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>python100天1-15</title>
    <link href="https://gladdduck.github.io/2023/02/28/python100%E5%A4%A91-15/"/>
    <id>https://gladdduck.github.io/2023/02/28/python100%E5%A4%A91-15/</id>
    <published>2023-02-28T03:49:42.199Z</published>
    <updated>2023-02-27T09:08:35.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 01-15python基础</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 16-20python进阶</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 21-30前端概述</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 31-35Linux</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 36-40MySQL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 41-55Django</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 56-60FaskAPI</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 61-65爬虫与并发编程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 66-80numpy&amp;pandas</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 81-90机器学习&amp;pytorch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 91-100项目</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="python100天学习1-15"><a class="markdownIt-Anchor" href="#python100天学习1-15"></a> Python100天学习1-15</h2><p><a href="https://github.com/jackfrued/Python-100-Days">资料连接</a></p><h3 id="第一天-初识python"><a class="markdownIt-Anchor" href="#第一天-初识python"></a> 第一天-初识python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. python历史</span></span><br><span class="line"><span class="comment"># 2. python优缺点</span></span><br><span class="line"><span class="comment"># 3. python安装</span></span><br><span class="line"><span class="comment"># 4. print的简单使用</span></span><br><span class="line"><span class="comment"># print函数可以输出多个值，多个值之间可以用 , 进行分隔，输出的内容之间默认以空格分开。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;你好&#x27;</span>, <span class="string">&#x27;世界&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, sep=<span class="string">&#x27;, &#x27;</span>, end=<span class="string">&#x27;!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;goodbye, world&#x27;</span>, end=<span class="string">&#x27;!\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.turtle画国旗和佩奇</span></span><br></pre></td></tr></table></figure><h3 id="第二天-语言元素"><a class="markdownIt-Anchor" href="#第二天-语言元素"></a> 第二天-语言元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 程序,变量和类型</span></span><br><span class="line"><span class="comment"># 2. 变量命名原则</span></span><br><span class="line"><span class="comment"># 3. 类型转换</span></span><br><span class="line"></span><br><span class="line">- <span class="built_in">chr</span>()：将整数转换成该编码对应的字符串（一个字符）。</span><br><span class="line">- <span class="built_in">ord</span>()：将字符串（一个字符）转换成对应的编码（整数）。</span><br><span class="line">- <span class="built_in">int</span>(): 将字符串表示的n进制数字转换为十进制表示</span><br><span class="line">- <span class="built_in">bin</span>(), <span class="built_in">oct</span>(), <span class="built_in">hex</span>(): 将十进制数字转为<span class="number">2</span>/<span class="number">8</span>/<span class="number">16</span>进制字符串表示</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 运算符及其优先级</span></span><br></pre></td></tr></table></figure><p><code># 3. 类型转换</code></p><img src="https://image.yayan.xyz/20230212101043.png" width = "300" height = "300" alt="类型转换" align="center" /><p><code># 4. 运算符及其优先级</code></p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>[]</code> <code>[:]</code></td><td>下标，切片</td></tr><tr><td><code>**</code></td><td>指数</td></tr><tr><td><code>~</code> <code>+</code> <code>-</code></td><td>按位取反, 正负号</td></tr><tr><td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td>乘，除，模，整除</td></tr><tr><td><code>+</code> <code>-</code></td><td>加，减</td></tr><tr><td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td><td>右移，左移</td></tr><tr><td><code>&amp;</code></td><td>按位与</td></tr><tr><td><code>^</code> <code>|</code></td><td>按位异或，按位或</td></tr><tr><td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td><td>小于等于，小于，大于，大于等于</td></tr><tr><td><code>==</code> <code>!=</code></td><td>等于，不等于</td></tr><tr><td><code>is</code>  <code>is not</code></td><td>身份运算符</td></tr><tr><td><code>in</code> <code>not in</code></td><td>成员运算符</td></tr><tr><td><code>not</code> <code>or</code> <code>and</code></td><td>逻辑运算符</td></tr><tr><td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code> <code>&amp;=</code> `</td><td>=^=&gt;&gt;=&lt;&lt;=`</td></tr></tbody></table><blockquote><p><strong>说明：</strong> 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。</p></blockquote><h3 id="第三天-分支结构"><a class="markdownIt-Anchor" href="#第三天-分支结构"></a> 第三天-分支结构</h3><p>–</p><h3 id="第四天-循环结构"><a class="markdownIt-Anchor" href="#第四天-循环结构"></a> 第四天-循环结构</h3><p>–</p><h3 id="第五天-构造程序逻辑"><a class="markdownIt-Anchor" href="#第五天-构造程序逻辑"></a> 第五天-构造程序逻辑</h3><p>–</p><h3 id="第六天-函数和模块的使用"><a class="markdownIt-Anchor" href="#第六天-函数和模块的使用"></a> 第六天-函数和模块的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.可变参数</span></span><br><span class="line">可变参数允许传入<span class="number">0</span>个或任意个参数，这些可变参数在函数调用时自动组装为一个<span class="built_in">tuple</span>。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.关键字参数</span></span><br><span class="line">关键字参数允许传入<span class="number">0</span>个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个<span class="built_in">dict</span>。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.导入模块</span></span><br><span class="line">如果导入的模块除了定义函数之外还有可以执行代码，那么Python解释器在导入这个模块时就会执行这些代码</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.变量作用域</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 这里声明的变量属于全局作用域</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">b</span>():</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 这里修改全局变量需要声明global</span></span><br><span class="line">        <span class="comment"># 这里修改a函数里面的变量需要声明nonlocal</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 仅仅使用不需要声明</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果没有全局变量但是声明了,会新建一个全局变量</span></span><br><span class="line">        <span class="comment"># 如果没有nonlocal但是声明了，会报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第七天-字符串和常用数据结构"><a class="markdownIt-Anchor" href="#第七天-字符串和常用数据结构"></a> 第七天-字符串和常用数据结构</h3><p><code>字符串函数</code></p><p><strong>可以使用*复制字符串</strong></p><blockquote><p>因此a=[[0] * 3]*5  a里面的list都是同一个地址,修改一个就会修改全部<br />但是[0] * 3 数字是直接存的对象  修改这个就是直接换了个对象 不糊修改对象的内容</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;hello, world!&#x27;</span></span><br><span class="line"><span class="comment"># 通过内置函数len计算字符串的长度</span></span><br><span class="line"><span class="comment"># len()  复杂度为O(1)  调用__len__</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(str1)) <span class="comment"># 13</span></span><br><span class="line"><span class="comment"># 获得字符串首字母大写的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str1.capitalize()) <span class="comment"># Hello, world!</span></span><br><span class="line"><span class="comment"># 获得字符串每个单词首字母大写的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str1.title()) <span class="comment"># Hello, World!</span></span><br><span class="line"><span class="comment"># 获得字符串变大写后的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str1.upper()) <span class="comment"># HELLO, WORLD!</span></span><br><span class="line"><span class="comment"># 从字符串中查找子串所在位置,rfind 最后一次出现的位置</span></span><br><span class="line"><span class="built_in">print</span>(str1.find(<span class="string">&#x27;or&#x27;</span>)) <span class="comment"># 8</span></span><br><span class="line"><span class="built_in">print</span>(str1.find(<span class="string">&#x27;shit&#x27;</span>)) <span class="comment"># -1</span></span><br><span class="line"><span class="comment"># 与find类似但找不到子串时会引发异常 rindex最后一次出现的位置</span></span><br><span class="line"><span class="comment"># print(str1.index(&#x27;or&#x27;))</span></span><br><span class="line"><span class="comment"># print(str1.index(&#x27;shit&#x27;))</span></span><br><span class="line"><span class="comment"># 检查字符串是否以指定的字符串开头</span></span><br><span class="line"><span class="built_in">print</span>(str1.startswith(<span class="string">&#x27;He&#x27;</span>)) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(str1.startswith(<span class="string">&#x27;hel&#x27;</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 检查字符串是否以指定的字符串结尾</span></span><br><span class="line"><span class="built_in">print</span>(str1.endswith(<span class="string">&#x27;!&#x27;</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 将字符串以指定的宽度居中并在两侧填充指定的字符</span></span><br><span class="line"><span class="built_in">print</span>(str1.center(<span class="number">50</span>, <span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"><span class="comment"># 将字符串以指定的宽度靠右(左:ljust)放置左侧填充指定的字符</span></span><br><span class="line"><span class="built_in">print</span>(str1.rjust(<span class="number">50</span>, <span class="string">&#x27; &#x27;</span>))</span><br><span class="line">str2 = <span class="string">&#x27;abc123456&#x27;</span></span><br><span class="line"><span class="comment"># 检查字符串是否由数字构成</span></span><br><span class="line"><span class="built_in">print</span>(str2.isdigit())  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(str2.isdecimal())  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(str2.isnumeric())  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写。</span></span><br><span class="line"><span class="built_in">print</span>(str2.istitle())</span><br><span class="line"><span class="comment"># 检测字符串是否只由空格组成。</span></span><br><span class="line"><span class="built_in">print</span>(str2.isspace())</span><br><span class="line"><span class="comment"># 检查字符串是否以字母构成</span></span><br><span class="line"><span class="built_in">print</span>(str2.isalpha())  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 检查字符串是否以数字和字母构成</span></span><br><span class="line"><span class="built_in">print</span>(str2.isalnum())  <span class="comment"># True</span></span><br><span class="line">str3 = <span class="string">&#x27;  jackfrued@126.com &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str3)</span><br><span class="line"><span class="comment"># 获得字符串修剪左右(lstrip,rstrip)两侧空格之后的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str3.strip())</span><br><span class="line"><span class="comment"># 根据指定的分隔符将字符串进行分割。</span></span><br><span class="line"><span class="comment"># 如果字符串包含指定的分隔符，则返回一个3元的元组，第一个为分隔符左边的子串，第二个为分隔符本身，第三个为分隔符右边的子串。 rpartition 最右边一个</span></span><br><span class="line"><span class="built_in">print</span>(str3.partition(<span class="string">&#x27;@&#x27;</span>)) <span class="comment">#(&#x27;  jackfrued&#x27;, &#x27;@&#x27;, &#x27;126.com &#x27;)</span></span><br><span class="line"><span class="comment"># 大小写字符的转换</span></span><br><span class="line"><span class="built_in">print</span>(str3.swapcase())</span><br></pre></td></tr></table></figure><p><code>字符串格式化</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.</span></span><br><span class="line">a, b = <span class="number">5</span>, <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d * %d = %d&#x27;</span> % (a, b, a * b))</span><br><span class="line"><span class="comment"># 2.</span></span><br><span class="line">a, b = <span class="number">5</span>, <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; * &#123;&#125; = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(a, b, a * b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(a, b, a * b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;aaa&#125; * &#123;bbb&#125; = &#123;ccc&#125;&#x27;</span>.<span class="built_in">format</span>(aaa=a, bbb=b, ccc=a * b))</span><br><span class="line"><span class="comment"># 3.</span></span><br><span class="line">a, b = <span class="number">5</span>, <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;a&#125;</span> * <span class="subst">&#123;b&#125;</span> = <span class="subst">&#123;a * b&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>列表</code></p><p><strong>列表容器中并没有保存真正的对象，它保存的仅仅是对象的引用(堆中的地址)。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">100</span>]</span><br><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line">list1.append(<span class="number">200</span>)</span><br><span class="line">list1.insert(<span class="number">1</span>, <span class="number">400</span>)</span><br><span class="line"><span class="comment"># 合并两个列表</span></span><br><span class="line">list1.extend([<span class="number">1000</span>, <span class="number">2000</span>])</span><br><span class="line">list1 += [<span class="number">1000</span>, <span class="number">2000</span>]</span><br><span class="line"><span class="comment"># 根据值删除元素 删除第一个</span></span><br><span class="line">list1.remove(<span class="number">1234</span>)</span><br><span class="line"><span class="comment"># 根据下标删除元素</span></span><br><span class="line">list1.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片返回的是拷贝，修改新数组，原数组不动</span></span><br><span class="line"><span class="comment"># https://pythontutor.com/python-debugger.html#mode=edit</span></span><br><span class="line">fruits = [ [<span class="number">66666</span>,<span class="number">77777777</span>], <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;strawberry&#x27;</span>, <span class="string">&#x27;waxberry&#x27;</span>]</span><br><span class="line">fruits3 = fruits[:<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(fruits3) </span><br><span class="line"><span class="comment"># 数组里面存的是列表的地址，拷贝的也是列表的地址，修改还是到列表的地址去修改，所以会变</span></span><br><span class="line">fruits3[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">000</span></span><br><span class="line">fruits3[<span class="number">2</span>]=<span class="string">&#x27;aaaaaaaaa&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(fruits3)</span><br><span class="line"><span class="built_in">print</span>(fruits)</span><br><span class="line"><span class="comment"># [[66666, 77777777], &#x27;apple&#x27;, &#x27;strawberry&#x27;, &#x27;waxberry&#x27;]</span></span><br><span class="line"><span class="comment"># [[0, 77777777], &#x27;apple&#x27;, &#x27;aaaaaaaaa&#x27;, &#x27;waxberry&#x27;]</span></span><br><span class="line"><span class="comment"># [[0, 77777777], &#x27;apple&#x27;, &#x27;strawberry&#x27;, &#x27;waxberry&#x27;]</span></span><br></pre></td></tr></table></figure><p><code>什么时候不用数组</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># array 类似C的数组</span></span><br><span class="line"><span class="comment"># 必须指定类型</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>生成器</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># 用列表的生成表达式语法创建列表容器</span></span><br><span class="line"><span class="comment"># 用这种语法创建列表之后元素已经准备就绪所以需要耗费较多的内存空间</span></span><br><span class="line">f = [x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>)]</span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(f))  <span class="comment"># 查看对象占用内存的字节数</span></span><br><span class="line"><span class="comment"># 请注意下面的代码创建的不是一个列表而是一个生成器对象</span></span><br><span class="line"><span class="comment"># 通过生成器可以获取到数据但它不占用额外的空间存储数据</span></span><br><span class="line"><span class="comment"># 每次需要数据的时候就通过内部的运算得到数据(需要花费额外的时间)</span></span><br><span class="line">f = (x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>))</span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(f))  <span class="comment"># 相比生成式生成器不占用存储数据的空间</span></span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">yield</span>：生成函数</span><br></pre></td></tr></table></figure><p><code>元组</code></p><blockquote><p>元组在创建时间和占用的空间上面都优于列表</p></blockquote><p><code>集合</code></p><p><code>字典</code></p><p><code>序列的抽象基类</code></p><p><code>MutavleSequence:可变序列抽象基类(setitem,delitem)</code><br /><code>Sequence:不可变序列抽象基类</code></p><p><strong>+,+=,extend区别</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># +=实际上是调用了extend方法</span></span><br><span class="line"><span class="comment"># +=返回的本身,在原地址上修改</span></span><br><span class="line"><span class="comment"># a=a+ 会返回一个新对象</span></span><br><span class="line"><span class="comment"># append会把参数当成一个对象加进去</span></span><br><span class="line"><span class="comment"># extend参数必须是可迭代对象,一个个加进去</span></span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"></span><br><span class="line">a.extend((<span class="number">777</span>,))</span><br><span class="line">a+=[<span class="number">666</span>]</span><br><span class="line"><span class="comment"># 报错</span></span><br><span class="line"><span class="comment"># a+=(777)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"></span><br><span class="line">a=a+[<span class="number">666</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"></span><br><span class="line">a.append([<span class="number">666</span>,<span class="number">777</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"><span class="comment"># 2358526812672</span></span><br><span class="line"><span class="comment"># 2358526812672</span></span><br><span class="line"><span class="comment"># 2358526332032</span></span><br><span class="line"><span class="comment"># 2358526332032</span></span><br></pre></td></tr></table></figure><p><code>可切片对象</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">alist[<span class="built_in">len</span>(alist):]=[<span class="number">9</span>]</span><br><span class="line"><span class="comment"># 末尾追加元素</span></span><br><span class="line">alist[:<span class="number">0</span>]=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 开头追加元素</span></span><br><span class="line">alist[<span class="number">3</span>:<span class="number">3</span>]=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 索引位置追加元素</span></span><br><span class="line"><span class="comment"># 结束位置大于长度会返回长度</span></span><br><span class="line"><span class="comment"># 开始位置大于长度会返回空列表</span></span><br><span class="line"><span class="comment"># 切片赋值长度必须相等</span></span><br></pre></td></tr></table></figure><h3 id="第八天-面向对象编程基础"><a class="markdownIt-Anchor" href="#第八天-面向对象编程基础"></a> 第八天-面向对象编程基础</h3><p><a href="https://blog.csdn.net/jackfrued/article/details/79521404">python三个知识点:is和==,嵌套列表,类的私有属性</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.类的私有属性可以在属性名前面加两个下划线</span></span><br><span class="line"><span class="comment"># __len__不是私有成员,因为后面也有__</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, foo</span>):</span><br><span class="line">        self.__foo = foo</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__bar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.__foo)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    test = Test(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    <span class="comment"># AttributeError: &#x27;Test&#x27; object has no attribute &#x27;__bar&#x27;</span></span><br><span class="line">    test.__bar()</span><br><span class="line">    <span class="comment"># AttributeError: &#x27;Test&#x27; object has no attribute &#x27;__foo&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(test.__foo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    test = Test(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    test._Test__bar()</span><br><span class="line">    <span class="built_in">print</span>(test._Test__foo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.Python并没有从语法上严格保证私有属性或方法的私密性，它只是给私有的属性和方法换了一个名字来妨碍对它们的访问,更换名字的规则仍然可以访问到它们</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第九天-面向对象进阶"><a class="markdownIt-Anchor" href="#第九天-面向对象进阶"></a> 第九天-面向对象进阶</h3><blockquote><p>class用于声明一个类,用type创建类<br />object是所有类的父类，所有类是type的实例</p></blockquote><p><code>类的属性</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.@property装饰器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line">    <span class="comment"># 访问器 - getter方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line">    <span class="comment"># 访问器 - getter方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line">    <span class="comment"># 修改器 - setter方法</span></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self, age</span>):</span><br><span class="line">        self._age = age</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 属性名字和@property修饰的方法名字不能一样,不然会死循环</span></span><br><span class="line"><span class="comment"># 把一个getter方法变成属性，只需要加上@property就可以了</span></span><br><span class="line"><span class="comment"># @property本身又创建了另一个装饰器@score.setter，负责把一个setter方法变成属性赋值</span></span><br><span class="line"><span class="comment"># 上面name是只读属性,age是读写属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.__slots__魔法 ,只有slots内的属性才能被添加,对子类没有用,如果子类有,就是父类和子类的并集</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment"># 限定Person对象只能绑定_name, _age和_gender属性</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;_name&#x27;</span>, <span class="string">&#x27;_age&#x27;</span>, <span class="string">&#x27;_gender&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line">        <span class="comment"># 会报错</span></span><br><span class="line">        <span class="comment"># self.hhhh=666</span></span><br><span class="line">Person._gender = <span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="comment"># 这样能绑定?</span></span><br><span class="line">Person.sex = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">person = Person(<span class="string">&#x27;王大锤&#x27;</span>, <span class="number">22</span>)</span><br><span class="line"><span class="comment"># 这样会报错,但是加上Person._sex = &#x27;?&#x27; 就变成了只读,不能修改</span></span><br><span class="line">person.sex=<span class="number">66</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>类的方法</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.静态方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @staticmethod修饰,不用self,和C++类似</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.类方法</span></span><br><span class="line"><span class="comment"># @classmethod修饰,默认传递了cls参数,调用类本身,</span></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">now</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="built_in">print</span>(cls)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.实例方法</span></span><br><span class="line"><span class="comment"># self 就是实例本身</span></span><br></pre></td></tr></table></figure><p><code>继承和多态</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，这个动作称之为方法重写（override）。通过方法重写我们可以让父类的同一个行为在子类中拥有不同的实现版本，当我们调用这个经过子类重写的方法时，不同的子类对象会表现出不同的行为，这个就是多态</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象类</span></span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pet</span>(<span class="built_in">object</span>, metaclass=ABCMeta):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nickname</span>):</span><br><span class="line">        self._nickname = nickname</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_voice</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>定制类-魔法函数(不是继承,python自带)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __str__打印输出变成自定义字符串</span></span><br><span class="line"><span class="comment"># __repr__ 直接调用类时打印(jupyter)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;6666&#x27;</span></span><br><span class="line">__repr__ = __str__</span><br><span class="line"><span class="comment"># __iter__可用for循环迭代</span></span><br><span class="line"><span class="comment"># __next__去下一个对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fib</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a, self.b = <span class="number">0</span>, <span class="number">1</span> <span class="comment"># 初始化两个计数器a，b</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self <span class="comment"># 实例本身就是迭代对象，故返回自己</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a, self.b = self.b, self.a + self.b <span class="comment"># 计算下一个值</span></span><br><span class="line">        <span class="keyword">if</span> self.a &gt; <span class="number">100000</span>: <span class="comment"># 退出循环的条件</span></span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br><span class="line">        <span class="keyword">return</span> self.a <span class="comment"># 返回下一个值</span></span><br><span class="line"><span class="comment"># __getitem__像列表一样取值  也可以改成字典形式 也可以用for循环</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(n, <span class="built_in">int</span>): <span class="comment"># n是索引</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(n, <span class="built_in">slice</span>): <span class="comment"># n是切片</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果这个对象被for时，会首先调用__iter__方法返回一个iterator,然后再对这个iterator循环调用__next__方法，直到碰到StopIteration时则停止退出。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果for的对象没有__iter__方法，则无法获得一个迭代器，那么就会报错，但是，如果这个类实现了__getitem__方法，会从0开始依次读取相应的下标，直到发生IndexError为止</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># __iter__是优先读取的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># __getattr__获取类的属性,已经定义的属性不会调用,使用没有定义的属性才会调用</span></span><br><span class="line"><span class="comment"># __call__ 可以直接对实例进行调用</span></span><br><span class="line"><span class="comment"># __bases__查看父类</span></span><br><span class="line"><span class="comment"># __enter__ with进入</span></span><br><span class="line"><span class="comment"># __exit__with退出</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sample</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>( <span class="string">&quot;enter&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type,exc_val,exc_tb</span>):</span><br><span class="line">        <span class="built_in">print</span> ( <span class="string">&quot;exit&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_something</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> ( <span class="string">&quot;doing something&quot;</span> )</span><br><span class="line"><span class="keyword">with</span> Sample() <span class="keyword">as</span> sample:</span><br><span class="line">    sample.do_something()</span><br><span class="line"><span class="comment"># @contextlib.contextmanger </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># __dict__与dir()的区别：</span></span><br><span class="line"><span class="comment"># dir()是一个函数，返回的是list；</span></span><br><span class="line"><span class="comment"># __dict__是一个字典，键为属性名，值为属性值(类和实例不一样,可以通过修改这个增加属性)；</span></span><br><span class="line"><span class="comment"># dir()用来寻找一个对象的所有属性，包括__dict__中的属性，__dict__是dir()的子集；</span></span><br></pre></td></tr></table></figure><p><code>如果要获得一个对象的所有属性和方法，可以使用dir()函数</code></p><p><code>dir('abc')</code></p><h3 id="第十天-图形用户界面和游戏开发"><a class="markdownIt-Anchor" href="#第十天-图形用户界面和游戏开发"></a> 第十天-图形用户界面和游戏开发</h3><p>–</p><h3 id="第十一天-文件和异常"><a class="markdownIt-Anchor" href="#第十一天-文件和异常"></a> 第十一天-文件和异常</h3><p>–</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.json</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 字符串处理</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> : <span class="string">&#x27;ACME&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;shares&#x27;</span> : <span class="number">100</span>,</span><br><span class="line">    <span class="string">&#x27;price&#x27;</span> : <span class="number">542.23</span></span><br><span class="line">&#125;</span><br><span class="line">json_str = json.dumps(data)</span><br><span class="line">data = json.loads(json_str)</span><br><span class="line"><span class="comment"># 文件处理</span></span><br><span class="line"><span class="comment">#  Writing JSON data</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(data, f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reading data back</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.异常</span></span><br><span class="line"><span class="comment"># 1.except语句不是必须的，finally语句也不是必须的，但是二者必须要有一个，否则就没有try的意义了。</span></span><br><span class="line"><span class="comment"># 2.except语句可以有多个，Python会按except语句的顺序依次匹配你指定的异常，如果异常已经处理就不会再进入后面的except语句。</span></span><br><span class="line"><span class="comment"># 3.except语句可以以元组形式同时指定多个异常，参见实例代码。</span></span><br><span class="line"><span class="comment"># 4.except语句后面如果不指定异常类型，则默认捕获所有异常，你可以通过logging或者sys模块获取当前异常。</span></span><br><span class="line"><span class="comment"># 5.如果要捕获异常后要重复抛出，请使用raise，后面不要带任何参数或信息。</span></span><br><span class="line"><span class="comment"># 6.不建议捕获并抛出同一个异常，请考虑重构你的代码。</span></span><br><span class="line"><span class="comment"># 7.不建议在不清楚逻辑的情况下捕获所有异常，有可能你隐藏了很严重的问题。</span></span><br><span class="line"><span class="comment"># 8.尽量使用内置的异常处理语句来替换try/except语句，比如with语句，getattr()方法。</span></span><br></pre></td></tr></table></figure><h3 id="第十二天-字符串和正则表达式"><a class="markdownIt-Anchor" href="#第十二天-字符串和正则表达式"></a> 第十二天-字符串和正则表达式</h3><p><a href="https://regexlearn.com/zh-cn/learn/regex101">正则表达式练习</a><br /><a href="https://www.runoob.com/regexp/regexp-syntax.html">正则表达式规则</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># re模块处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pattern:r&#x27;自己写的表达式&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># str:待匹配字符串</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>compile(pattern, flags=0)</td><td>编译正则表达式返回正则表达式对象</td></tr><tr><td>match(pattern, string, flags=0)</td><td>用正则表达式匹配字符串 成功返回匹配对象 否则返回None</td></tr><tr><td>search(pattern, string, flags=0)</td><td>搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None</td></tr><tr><td>split(pattern, string, maxsplit=0, flags=0)</td><td>用正则表达式指定的模式分隔符拆分字符串 返回列表</td></tr><tr><td>sub(pattern, repl, string, count=0, flags=0)</td><td>用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数</td></tr><tr><td>fullmatch(pattern, string, flags=0)</td><td>match函数的完全匹配（从字符串开头到结尾）版本</td></tr><tr><td>findall(pattern, string, flags=0)</td><td>查找字符串所有与正则表达式匹配的模式 返回字符串的列表</td></tr><tr><td>finditer(pattern, string, flags=0)</td><td>查找字符串所有与正则表达式匹配的模式 返回一个迭代器</td></tr><tr><td>purge()</td><td>清除隐式编译的正则表达式的缓存</td></tr><tr><td>re.I / re.IGNORECASE</td><td>忽略大小写匹配标记</td></tr><tr><td>re.M / re.MULTILINE</td><td>多行匹配标记</td></tr></tbody></table><h3 id="第十三天-进程和线程"><a class="markdownIt-Anchor" href="#第十三天-进程和线程"></a> 第十三天-进程和线程</h3><blockquote><p>进程线程知识参考操作系统</p></blockquote><p><code>多进程</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Unix和Linux操作系统上提供了 `fork()`系统调用来创建进程，调用 `fork()`函数的是父进程，创建出的是子进程</span></span><br><span class="line"><span class="comment"># Windows没有fork调用</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> getpid</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_task</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;启动下载进程，进程号[%d].&#x27;</span> % getpid())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;开始下载%s...&#x27;</span> % filename)</span><br><span class="line">    time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    sleep(time_to_download)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s下载完成! 耗费了%d秒&#x27;</span> % (filename, time_to_download))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    start = time()</span><br><span class="line">    p1 = Process(target=download_task, args=(<span class="string">&#x27;Python从入门到住院.pdf&#x27;</span>, ))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2 = Process(target=download_task, args=(<span class="string">&#x27;Peking Hot.avi&#x27;</span>, ))</span><br><span class="line">    p2.start()</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    end = time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;总共耗费了%.2f秒.&#x27;</span> % (end - start))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进程池</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    start = time()</span><br><span class="line">    p = Pool(<span class="number">4</span>)</span><br><span class="line">    <span class="comment"># 这里进程池有四个进程但是用了五个任务</span></span><br><span class="line">    <span class="comment"># task 0，1，2，3是立刻执行的，而task 4要等待前面某个task完成后才执行</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        p.apply_async(download_task, args=(i,))</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;总共耗费了%.2f秒.&#x27;</span> % (end - start))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进程通信</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"><span class="comment"># 写数据进程执行的代码:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Process to write: %s&#x27;</span> % os.getpid())</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Put %s to queue...&#x27;</span> % value)</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"><span class="comment"># 读数据进程执行的代码:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Process to read: %s&#x27;</span> % os.getpid())</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        value = q.get(<span class="literal">True</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Get %s from queue.&#x27;</span> % value)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 父进程创建Queue，并传给各个子进程：</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target=write, args=(q,))</span><br><span class="line">    pr = Process(target=read, args=(q,))</span><br><span class="line">    <span class="comment"># 启动子进程pw，写入:</span></span><br><span class="line">    pw.start()</span><br><span class="line">    <span class="comment"># 启动子进程pr，读取:</span></span><br><span class="line">    pr.start()</span><br><span class="line">    <span class="comment"># 等待pw结束:</span></span><br><span class="line">    pw.join()</span><br><span class="line">    <span class="comment"># pr进程里是死循环，无法等待其结束，只能强行终止:</span></span><br><span class="line">    pr.terminate()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Process to write: 50563</span></span><br><span class="line"><span class="string">Put A to queue...</span></span><br><span class="line"><span class="string">Process to read: 50564</span></span><br><span class="line"><span class="string">Get A from queue.</span></span><br><span class="line"><span class="string">Put B to queue...</span></span><br><span class="line"><span class="string">Get B from queue.</span></span><br><span class="line"><span class="string">Put C to queue...</span></span><br><span class="line"><span class="string">Get C from queue.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><code>多线程</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="comment"># 在Python早期的版本中就引入了thread模块（现在名为_thread）来实现多线程编程，然而该模块过于底层，而且很多功能都没有提供</span></span><br><span class="line"><span class="comment"># 因此目前的多线程开发我们推荐使用threading模块，该模块对多线程编程提供了更好的面向对象的封装。</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;开始下载%s...&#x27;</span> % filename)</span><br><span class="line">    time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    sleep(time_to_download)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s下载完成! 耗费了%d秒&#x27;</span> % (filename, time_to_download))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    start = time()</span><br><span class="line">    t1 = Thread(target=download, args=(<span class="string">&#x27;Python从入门到住院.pdf&#x27;</span>,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2 = Thread(target=download, args=(<span class="string">&#x27;Peking Hot.avi&#x27;</span>,))</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    end = time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;总共耗费了%.3f秒&#x27;</span> % (end - start))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承 `Thread`类的方式来创建自定义的线程类</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DownloadTask</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filename</span>):</span><br><span class="line">        <span class="comment"># 可以穿name给线程命名</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self._filename = filename</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;开始下载%s...&#x27;</span> % self._filename)</span><br><span class="line">        time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">        sleep(time_to_download)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s下载完成! 耗费了%d秒&#x27;</span> % (self._filename, time_to_download))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    start = time()</span><br><span class="line">    t1 = DownloadTask(<span class="string">&#x27;Python从入门到住院.pdf&#x27;</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2 = DownloadTask(<span class="string">&#x27;Peking Hot.avi&#x27;</span>)</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    end = time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;总共耗费了%.2f秒.&#x27;</span> % (end - start))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程上锁</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"><span class="comment"># RLock 可重用锁,同一线程中可以多次调用acquire,但是release要调用一样的次数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self._balance = <span class="number">0</span></span><br><span class="line">        self._lock = Lock()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deposit</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="comment"># 先获取锁才能执行后续的代码</span></span><br><span class="line">        self._lock.acquire()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            new_balance = self._balance + money</span><br><span class="line">            sleep(<span class="number">0.01</span>)</span><br><span class="line">            self._balance = new_balance</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 在finally中执行释放锁的操作保证正常异常锁都能释放</span></span><br><span class="line">            self._lock.release()</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">balance</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._balance</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AddMoneyThread</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, account, money</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self._account = account</span><br><span class="line">        self._money = money</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        self._account.deposit(self._money)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    account = Account()</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        t = AddMoneyThread(account, <span class="number">1</span>)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;账户余额为: ￥%d元&#x27;</span> % account.balance)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程通信</span></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="comment"># queue.Queue：这是一个线程安全的队列，可以被用来在线程之间传递数据。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># queue.LifoQueue：这是一个线程安全的栈，可以被用来在线程之间传递数据。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># queue.PriorityQueue：这是一个线程安全的优先队列，可以被用来在线程之间传递数据。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># collections.deque：这是一个线程安全的双端队列，可以被用来在线程之间传递数据。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># multiprocessing.Queue：这是一个线程安全的队列，可以被用来在进程之间传递数据。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第十四天-网络编程入门和网络应用开发"><a class="markdownIt-Anchor" href="#第十四天-网络编程入门和网络应用开发"></a> 第十四天-网络编程入门和网络应用开发</h3><blockquote><p>计算机网络基础知识补充</p></blockquote><p><code>发邮件</code></p><p><code>发短信</code></p><p><code>网络服务</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多线程网络服务</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器端</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket, SOCK_STREAM, AF_INET</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> dumps</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 自定义线程类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">FileTransferHandler</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, cclient</span>):</span><br><span class="line">            <span class="built_in">super</span>().__init__()</span><br><span class="line">            self.cclient = cclient</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">            my_dict = &#123;&#125;</span><br><span class="line">            my_dict[<span class="string">&#x27;filename&#x27;</span>] = <span class="string">&#x27;guido.jpg&#x27;</span></span><br><span class="line">            <span class="comment"># JSON是纯文本不能携带二进制数据</span></span><br><span class="line">            <span class="comment"># 所以图片的二进制数据要处理成base64编码</span></span><br><span class="line">            my_dict[<span class="string">&#x27;filedata&#x27;</span>] = data</span><br><span class="line">            <span class="comment"># 通过dumps函数将字典处理成JSON字符串</span></span><br><span class="line">            json_str = dumps(my_dict)</span><br><span class="line">            <span class="comment"># 发送JSON字符串</span></span><br><span class="line">            self.cclient.send(json_str.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">            self.cclient.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.创建套接字对象并指定使用哪种传输服务</span></span><br><span class="line">    server = socket()</span><br><span class="line">    <span class="comment"># 2.绑定IP地址和端口(区分不同的服务)</span></span><br><span class="line">    server.bind((<span class="string">&#x27;192.168.1.2&#x27;</span>, <span class="number">5566</span>))</span><br><span class="line">    <span class="comment"># 3.开启监听 - 监听客户端连接到服务器</span></span><br><span class="line">    server.listen(<span class="number">512</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;服务器启动开始监听...&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;guido.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 将二进制数据处理成base64再解码成字符串</span></span><br><span class="line">        data = b64encode(f.read()).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        client, addr = server.accept()</span><br><span class="line">        <span class="comment"># 启动一个线程来处理客户端的请求</span></span><br><span class="line">        FileTransferHandler(client).start()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> loads</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    client = socket()</span><br><span class="line">    client.connect((<span class="string">&#x27;192.168.1.2&#x27;</span>, <span class="number">5566</span>))</span><br><span class="line">    <span class="comment"># 定义一个保存二进制数据的对象</span></span><br><span class="line">    in_data = <span class="built_in">bytes</span>()</span><br><span class="line">    <span class="comment"># 由于不知道服务器发送的数据有多大每次接收1024字节</span></span><br><span class="line">    data = client.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">while</span> data:</span><br><span class="line">        <span class="comment"># 将收到的数据拼接起来</span></span><br><span class="line">        in_data += data</span><br><span class="line">        data = client.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># 将收到的二进制数据解码成JSON字符串并转换成字典</span></span><br><span class="line">    <span class="comment"># loads函数的作用就是将JSON字符串转成字典对象</span></span><br><span class="line">    my_dict = loads(in_data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    filename = my_dict[<span class="string">&#x27;filename&#x27;</span>]</span><br><span class="line">    filedata = my_dict[<span class="string">&#x27;filedata&#x27;</span>].encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/Users/Hao/&#x27;</span> + filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 将base64格式的数据解码成二进制数据并写入文件</span></span><br><span class="line">        f.write(b64decode(filedata))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;图片已保存.&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="第十五天-图像和办公文档处理"><a class="markdownIt-Anchor" href="#第十五天-图像和办公文档处理"></a> 第十五天-图像和办公文档处理</h3><p><code>图像</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>image = Image.<span class="built_in">open</span>(<span class="string">&#x27;./res/guido.jpg&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>image.<span class="built_in">format</span>, image.size, image.mode</span><br><span class="line">(<span class="string">&#x27;JPEG&#x27;</span>, (<span class="number">500</span>, <span class="number">750</span>), <span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>image.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 裁剪图像</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>image = Image.<span class="built_in">open</span>(<span class="string">&#x27;./res/guido.jpg&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rect = <span class="number">80</span>, <span class="number">20</span>, <span class="number">310</span>, <span class="number">360</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>image.crop(rect).show()</span><br><span class="line"><span class="comment"># 略缩图</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>image = Image.<span class="built_in">open</span>(<span class="string">&#x27;./res/guido.jpg&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>size = <span class="number">128</span>, <span class="number">128</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>image.thumbnail(size)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>image.show()</span><br><span class="line"><span class="comment"># 缩放粘贴图像</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>image1 = Image.<span class="built_in">open</span>(<span class="string">&#x27;./res/luohao.png&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>image2 = Image.<span class="built_in">open</span>(<span class="string">&#x27;./res/guido.jpg&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rect = <span class="number">80</span>, <span class="number">20</span>, <span class="number">310</span>, <span class="number">360</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>guido_head = image2.crop(rect)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>width, height = guido_head.size</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>image1.paste(guido_head.resize((<span class="built_in">int</span>(width / <span class="number">1.5</span>), <span class="built_in">int</span>(height / <span class="number">1.5</span>))), (<span class="number">172</span>, <span class="number">40</span>))</span><br><span class="line"><span class="comment"># 旋转和反转</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>image = Image.<span class="built_in">open</span>(<span class="string">&#x27;./res/guido.png&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>image.rotate(<span class="number">180</span>).show()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>image.transpose(Image.FLIP_LEFT_RIGHT).show()</span><br><span class="line"><span class="comment"># 操作像素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>image = Image.<span class="built_in">open</span>(<span class="string">&#x27;./res/guido.jpg&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">80</span>, <span class="number">310</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>, <span class="number">360</span>):</span><br><span class="line"><span class="meta">... </span>        image.putpixel((x, y), (<span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>image.show()</span><br><span class="line"><span class="comment"># 滤镜</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageFilter</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>image = Image.<span class="built_in">open</span>(<span class="string">&#x27;./res/guido.jpg&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>image.<span class="built_in">filter</span>(ImageFilter.CONTOUR).show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Excel</code></p><p><code>Word</code></p><h3 id="b站视频总结"><a class="markdownIt-Anchor" href="#b站视频总结"></a> B站视频总结</h3><p><code>元类编程</code><br /><strong>元类:创建类的类</strong></p><h4 id="1动态属性"><a class="markdownIt-Anchor" href="#1动态属性"></a> 1.动态属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#get</span></span><br><span class="line"><span class="meta">@property修饰</span></span><br><span class="line"><span class="comment">#set</span></span><br><span class="line"><span class="meta">@aaa.setter</span></span><br><span class="line"><span class="comment">#查找不到进入</span></span><br><span class="line">__getattr__</span><br><span class="line"><span class="comment">#先进入这个</span></span><br><span class="line">__getattribute__</span><br><span class="line"></span><br><span class="line"><span class="built_in">getattr</span>(类,属性)==类.属性</span><br></pre></td></tr></table></figure><h4 id="2属性描述符"><a class="markdownIt-Anchor" href="#2属性描述符"></a> 2.属性描述符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据描述符</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IntField</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params"> self, instance，owner</span>):</span><br><span class="line">        <span class="keyword">return</span> self.value</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, numbers.Integral):</span><br><span class="line">            <span class="keyword">raise</span> ValueError( <span class="string">&quot;int value need&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError( <span class="string">&quot;positive value need&quot;</span>)</span><br><span class="line">        self.value = value</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delete__</span>(<span class="params">self, instance</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="comment"># 自定义类型检测</span></span><br><span class="line">    age = IntField()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3类属性取值过程"><a class="markdownIt-Anchor" href="#3类属性取值过程"></a> 3.类属性取值过程</h4><blockquote><p>如果user是某个类的实例，那么user.age（以及等价的getattr(user, ‘age’))首先调用__getattribute__。如果类定义了_getattr_方法，<br />那么在_getattribute__抛出 AttributeError的时候就会调用到_getattr_,而对于描述符(<strong>get</strong>)的调用，则是发生在__getattribute__内部的。</p></blockquote><p>user = User()，那么user.age顺序如下:</p><p>(1) 如果&quot;age”是出现在user或其基类的__dict__中，且age是data descriptor，那么调用其__get__方法 ,否则</p><p>(2) 如果&quot;age&quot;出现在obj的__dict__中，那么直接返回 obj.<strong>dict</strong>[ ‘age’]，否则</p><p>(3) 如果&quot;age&quot;出现在User或其基类的__dict__中</p><p>(3.1) 如果age是non-data descriptor，那么调用其__get__方法，否则<br />(3.2) 返回__dict__[ ‘age’]</p><p>(4) 如果User有__getattr__方法，调用__getattr__方法，否则</p><p>(5) 抛出AttributeError</p><h4 id="4__new__和__init__区别"><a class="markdownIt-Anchor" href="#4__new__和__init__区别"></a> 4.__new__和__init__区别</h4><p>new传的类本身</p><p>init传的对象实例</p><p>先进new后进init</p><p>new不返回对象,不会进init</p><h4 id="5type动态创建类"><a class="markdownIt-Anchor" href="#5type动态创建类"></a> 5.type动态创建类</h4><p>type(“类名”,(父类),{属性,函数})</p><p><strong>控制类的创建过程</strong><br />class user(metaclass=自定义元类)</p><p><strong>元类编程-&gt;封装</strong></p><h4 id="6可迭代迭代器生成器"><a class="markdownIt-Anchor" href="#6可迭代迭代器生成器"></a> 6.可迭代,迭代器,生成器</h4><p>迭代器和迭代序列分离</p><p><strong>iter</strong> 可迭代</p><p><strong>next</strong> 迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">company</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_init_</span>(<span class="params">self, employee_list</span>):</span><br><span class="line">        self.employee = employee_list</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_iter_</span>(<span class="params"> self</span>):</span><br><span class="line">        <span class="keyword">return</span> MyIterator( self.employee)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyIterator</span>(<span class="title class_ inherited__">Iterator</span> ) :</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_init_</span>(<span class="params">self, employee_list</span>):</span><br><span class="line">        self.iter_list = employee_listself.index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span>  <span class="title function_">inext_</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">#真正返回迭代值的逻辑</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            word = self.iter_list[ self.index]</span><br><span class="line">        <span class="keyword">except</span> IndexError:</span><br><span class="line">            <span class="keyword">raise</span> stopIteration</span><br><span class="line">        self.index +=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> word</span><br></pre></td></tr></table></figure><p><code>生成器</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gen_fib</span>(<span class="params">index</span>):</span><br><span class="line">    n,a,b = <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n&lt;index:</span><br><span class="line">        yie1d b</span><br><span class="line">        a,b = b,a+b</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> gen_fib(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span> (data)</span><br><span class="line">I</span><br><span class="line">PyGenObject</span><br><span class="line">gi_frame</span><br><span class="line">gi_code</span><br><span class="line">会保存上一次执行的位置和代码</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>大文件读取</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myreadlines</span>(<span class="params">f, newline</span>) :buf = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">while</span> newline <span class="keyword">in</span> buf:</span><br><span class="line">        pos = buf.index( newline)</span><br><span class="line">        <span class="keyword">yield</span> buf[:pos]</span><br><span class="line">        buf = buf[pos + <span class="built_in">len</span>(newline) : ]</span><br><span class="line">    chunk = f.read(<span class="number">4096</span>*<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> chunk :</span><br><span class="line">        <span class="comment"># 文件结尾</span></span><br><span class="line">        <span class="keyword">yield</span> buf</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    buf += chunk</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span> ) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> myreadlines(f，<span class="string">&quot;&#123;&quot;</span>):</span><br><span class="line">        <span class="built_in">print</span> (line)</span><br></pre></td></tr></table></figure><h4 id="7socket编程"><a class="markdownIt-Anchor" href="#7socket编程"></a> 7.socket编程</h4><p>见网络编程</p><h4 id="8多线程"><a class="markdownIt-Anchor" href="#8多线程"></a> 8.多线程</h4><p>1.GIL<br />全局解释器锁<br />python中一个线程对应c语言的一个线程<br />gil使得同一时刻只有一个线程运行在一个cpu上运行字节码<br />不能把多个线程映射到多个cpu上<br />gil会根据执行的字节码行数及时间片释放gil<br />遇见io操作也会主动释放(适合io频繁)</p><p>2.线程同步,通信<br /><strong>多线程实现</strong><br />使用线程传递函数<br />继承多线程类,实现run<br /><strong>线程通信</strong><br />共享变量:不好<br />Queue:还有其他线程安全的数据结构<br /><strong>线程同步</strong><br />Lock,RLock<br /><strong>Lock</strong>:获取两次就会死锁<br /><strong>RLock</strong>:允许多线程环境下多次acquire,但是release要一样的数量<br /><strong>condition</strong>:wait()和notify() 等待和唤醒<br />先等待才能唤醒<br />把waiter的锁放入一个双端队列<br />notify把队列弹一个出来释放<br />with condition 就是获取锁释放锁(默认RLock)<br />with之后才能wait和notify,wait把condition的锁释放掉<br />con’t wait on a un-acquire lock<br /><strong>Semaphore</strong>:用于控制进入数量的锁<br />threading.Semaphore(3)</p><p>3.线程池&amp;进程池<br />from concurrent import futures</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">executor = ThreadPoo1Executor(max_workers=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#通过submit函数提交执行的函数到线程池中,submit是立即返回</span></span><br><span class="line">task1 = executor. submit(get_htm1,(<span class="number">3</span>))</span><br><span class="line">task2 = executor. submit(get_htm1,(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># done用于判断是否完成</span></span><br><span class="line">task1.done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># result获取函数返回结果</span></span><br><span class="line">task1.result()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#要获取已经成功的task的返回</span></span><br><span class="line">urls = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">all_task = [executor. submit(get_html,(url)) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line"><span class="comment"># yield已经完成的线程</span></span><br><span class="line"><span class="keyword">for</span> future <span class="keyword">in</span> as_completed(all_task):</span><br><span class="line">    data = future.result()</span><br><span class="line">    <span class="built_in">print</span>( <span class="string">&quot;get ipage success&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过executor获取已经完成的task返回值,返回顺序一致</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> executor.<span class="built_in">map</span>(get_html, urls):</span><br><span class="line">    <span class="built_in">print</span>( <span class="string">&quot;get &#123;fpage&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阻塞主线程,等全部还是等一个</span></span><br><span class="line">wait()</span><br></pre></td></tr></table></figure><hr /><p>进程适合计算密集<br />线程适合io密集</p><p>父进程和子进程各有数据</p><p>子进程会把创建进程下面的代码单独运行一遍</p><p>ProcessPoolExecutor用的multiprocessing</p><p>不能用queue.Queue<br />不能用共享变量</p><p>from queue import Queue<br />from multiprocessing import Queue<br />from multiprocessing.Manager import Queue<br />#Manager 有很多数据结构<br />pipe只能用于两个进程<br />性能高于Queue</p><h4 id="9io复用"><a class="markdownIt-Anchor" href="#9io复用"></a> 9.IO复用</h4><p>并发<br />并发是指一个时间段内有几个程序在同一个cpu运行，但是任意时刻只有一个程序在cpu上运行<br />并行<br />并行是指任意时刻点上，有多个程序同时运行在多个cpu</p><p>同步<br />同步是指代码调用IO操作时必须等待IO操作完成才返<br />回的调用方式。<br />异步<br />异步是指代码调用IO操作时，不必等IO操作完成就返回的调用方式。</p><p>阻塞<br />阻塞是指调用函数时候当前线程被挂起。<br />非阻塞<br />非阻塞是指调用函数时候当前线程不会被挂起，而是立即返回。</p><h4 id="10回调协程"><a class="markdownIt-Anchor" href="#10回调协程"></a> 10.回调协程</h4><h4 id="11asynch-await"><a class="markdownIt-Anchor" href="#11asynch-await"></a> 11.asynch await</h4><h4 id="12事件循环"><a class="markdownIt-Anchor" href="#12事件循环"></a> 12.事件循环</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Python学习笔记" scheme="https://gladdduck.github.io/tags/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode75</title>
    <link href="https://gladdduck.github.io/2023/02/26/LeetCode75/"/>
    <id>https://gladdduck.github.io/2023/02/26/LeetCode75/</id>
    <published>2023-02-26T11:34:34.695Z</published>
    <updated>2023-02-25T03:47:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="leetcode75学习计划"><a class="markdownIt-Anchor" href="#leetcode75学习计划"></a> LeetCode75学习计划</h2><h3 id="第一天"><a class="markdownIt-Anchor" href="#第一天"></a> 第一天</h3><p><a href="https://leetcode.cn/problems/running-sum-of-1d-array/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">1480.一维数组的动态和</a></p><p>思路:前缀和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python的内置数据方法</span></span><br><span class="line"><span class="comment"># https://docs.python.org/3/library/itertools.html</span></span><br><span class="line"><span class="comment"># accumulate([1,2,3,4,5]) --&gt; 1 3 6 10 15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">runningSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(accumulate(nums))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/find-pivot-index/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">724.寻找数组的中心下标</a></p><p>思路: 先求前缀和,然后遍历下标,利用前缀和计算下标两边的和,左右两端的位置需要判断一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pivotIndex</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        pre_sum=<span class="built_in">list</span>(accumulate(nums))</span><br><span class="line">        length=<span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> pre_sum[length-<span class="number">1</span>]-pre_sum[<span class="number">0</span>]==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,length-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> pre_sum[index-<span class="number">1</span>]==pre_sum[length-<span class="number">1</span>]-pre_sum[index]:</span><br><span class="line">                <span class="keyword">return</span> index</span><br><span class="line">        <span class="comment"># 返回最左边下标,防止有x,x,x,x,..0,0,0,0的情况</span></span><br><span class="line">        <span class="keyword">if</span> pre_sum[length-<span class="number">2</span>]==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> length-<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="第二天"><a class="markdownIt-Anchor" href="#第二天"></a> 第二天</h3><p><a href="https://leetcode.cn/problems/isomorphic-strings/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">205. 同构字符串</a></p><p>思路:每个字符串对应位置的字母是一一对应的,用字典.<br />两个方向,一个是s对t的字母是一一对应,一个是t对s的字母是一一对应</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isIsomorphic1</span>(<span class="params">self, s: <span class="built_in">str</span>, t: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        dic=defaultdict(<span class="built_in">str</span>)</span><br><span class="line">        <span class="keyword">for</span> index,item <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):</span><br><span class="line">            <span class="comment"># 检查s对t</span></span><br><span class="line">            <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="comment"># 检擦t对s</span></span><br><span class="line">                <span class="keyword">if</span> t[index] <span class="keyword">not</span> <span class="keyword">in</span> dic.values():</span><br><span class="line">                    dic[item]=t[index]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> dic[item]!=t[index]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isIsomorphic</span>(<span class="params">self, s: <span class="built_in">str</span>, t: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">s,t</span>):</span><br><span class="line">            dic=defaultdict(<span class="built_in">str</span>)</span><br><span class="line">            <span class="keyword">for</span> index,item <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):</span><br><span class="line">                <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> dic:</span><br><span class="line">                    dic[item]=t[index]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> dic[item]!=t[index]:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> check(s,t) <span class="keyword">and</span> check(t,s)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/is-subsequence/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">392. 判断子序列</a></p><p>思路:判断子序列,两个字符串不同位置的比较,双指针,ab指针,如果对应字符一样,都前进,如果不一样,指向母字符串的前进</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isSubsequence</span>(<span class="params">self, s: <span class="built_in">str</span>, t: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        length=<span class="built_in">len</span>(s)</span><br><span class="line">        <span class="keyword">if</span> length==<span class="number">0</span>:<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        index=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> t:</span><br><span class="line">            <span class="keyword">if</span> item==s[index]:</span><br><span class="line">                index+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> index==length:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><blockquote><p>332周赛</p></blockquote><p><a href="https://leetcode.cn/problems/count-the-number-of-fair-pairs/">6355. 统计公平数对的数目</a><br />思路:对数组排序,对每一个数,用二分找到大小在lower和upper之间的下标,如果这个数也在下标中就-1,最后结果除2,(i,j)(j,i)都算了</p><p>bilibili:两个数的和,枚举一个数,用其他方法处理另一个数</p><p><a href="https://leetcode.cn/problems/substring-xor-queries/">6356. 子字符串异或查询</a><br />思路:对每一个查询,a^b=c =&gt; a=c^b,然后把a转换成二进制字符串,剩下的就是在字符串中找子字符串在起始位置</p><p>bilibili:预处理s中的二进制,把子字符串转换成数字存进dict,直接找a</p><p><a href="https://leetcode.cn/problems/subsequence-with-the-minimum-score/">6357. 最少得分子序列</a><br />没做出来思路:计算最长公共子序列,统计不在最长公共子序列中的下标,就是要删除的下标(可能错在需要找到最左边的最长子序列)</p><p>bilibili:<br />1.删除[left,right]中间的几个和删除全部是一样的<br />2.枚举s,把s从中间划分,前面匹配t的前部分,后面匹配t的后部分<br />3.中间就是可以删掉的部分,找到最小的<br />4.实现的时候,先从后往前匹配s和t(全部匹配),然后从前往后,找到相应的答案</p><h3 id="第三天"><a class="markdownIt-Anchor" href="#第三天"></a> 第三天</h3><p><a href="https://leetcode.cn/problems/merge-two-sorted-lists/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">21. 合并两个有序链表</a></p><p>思路:双指针比较交替,问题就是开头的细节,一种是用一个空链表头,一种就是先比较ab的大小直接赋值ab的头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeTwoLists</span>(<span class="params">self, a: <span class="type">Optional</span>[ListNode], b: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> a:<span class="keyword">return</span> b</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> b:<span class="keyword">return</span> a</span><br><span class="line">        <span class="comment"># 空表头</span></span><br><span class="line">        prehead=ListNode(<span class="number">0</span>)</span><br><span class="line">        pre=prehead</span><br><span class="line">        <span class="keyword">while</span> a <span class="keyword">and</span> b:</span><br><span class="line">            <span class="keyword">if</span> a.val&gt;b.val:</span><br><span class="line">                pre.<span class="built_in">next</span>=b</span><br><span class="line">                b=b.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pre.<span class="built_in">next</span>=a</span><br><span class="line">                a=a.<span class="built_in">next</span></span><br><span class="line">            pre=pre.<span class="built_in">next</span></span><br><span class="line">        pre.<span class="built_in">next</span>=a <span class="keyword">if</span> a <span class="keyword">else</span> b</span><br><span class="line">        <span class="keyword">return</span> prehead.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/reverse-linked-list/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">206. 反转链表</a></p><p>思路:反转链表需要标记连续的三个节点,a,b,c  把b指向a,然后a,b,c依次向后移动一个,注意边界情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseList</span>(<span class="params">self, a: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> a:<span class="keyword">return</span> a</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> a.<span class="built_in">next</span>:<span class="keyword">return</span> a </span><br><span class="line">        b=a.<span class="built_in">next</span></span><br><span class="line">        c=a.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        <span class="comment"># 这个地方不断掉会死循环</span></span><br><span class="line">        a.<span class="built_in">next</span>=<span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> b:</span><br><span class="line">            b.<span class="built_in">next</span>=a</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> c:<span class="keyword">break</span></span><br><span class="line">            a=b</span><br><span class="line">            b=c</span><br><span class="line">            c=c.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第四天"><a class="markdownIt-Anchor" href="#第四天"></a> 第四天</h3><p><a href="https://leetcode.cn/problems/middle-of-the-linked-list/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">876. 链表的中间结点</a></p><p>思路:把链表存成数组,找数组长度一半的节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">middleNode</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        nums=[]</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            nums.append(head)</span><br><span class="line">            head=head.<span class="built_in">next</span></span><br><span class="line">        length=<span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">return</span> nums[length//<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>其他解法:1.第一次计算长度,第二次找节点  2.快慢指针</p><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">142. 环形链表 II</a></p><p>自己错误思路:快慢指针,只能检查是否有环,找不到入口</p><p>思路:1.字典存已经走过的  2.快慢指针经过数学推导计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">detectCycle</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        nums=<span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            <span class="keyword">if</span> head <span class="keyword">in</span> nums.keys():</span><br><span class="line">                <span class="keyword">return</span> head</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nums[head]=<span class="number">1</span></span><br><span class="line">                head=head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><h3 id="第五天"><a class="markdownIt-Anchor" href="#第五天"></a> 第五天</h3><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">121. 买卖股票的最佳时机</a></p><p>思路:如果今天减去昨天的利润,加上之前的利润小于0,说明今天是巨亏的,不如之前的不买,买今天的,如果今天减去昨天的利润,加上之前的利润仍然大于0,记录一下,继续往后加,说不定会涨</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProfit</span>(<span class="params">self, prices: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line">        profit=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(prices)):</span><br><span class="line">            <span class="keyword">if</span> prices[index]-prices[index-<span class="number">1</span>]+profit&lt;<span class="number">0</span>:</span><br><span class="line">                profit=<span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                profit+=prices[index]-prices[index-<span class="number">1</span>]</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,profit)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/longest-palindrome/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">409. 最长回文串</a></p><p>思路:统计字符的数量,注意加上一个奇数就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        m=defaultdict(<span class="built_in">int</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> s:</span><br><span class="line">            m[item]+=<span class="number">1</span></span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line">        flag=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> m.items():</span><br><span class="line">            <span class="keyword">if</span> v&amp;<span class="number">1</span>:</span><br><span class="line">                 flag=<span class="number">1</span></span><br><span class="line">                 v-=<span class="number">1</span></span><br><span class="line">            ans+=v</span><br><span class="line">        <span class="keyword">return</span> ans+flag</span><br></pre></td></tr></table></figure><h3 id="第六天"><a class="markdownIt-Anchor" href="#第六天"></a> 第六天</h3><p><a href="https://leetcode.cn/problems/n-ary-tree-preorder-traversal/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">589. N 叉树的前序遍历</a></p><p>思路:二叉树的深搜,变成了多叉树的深搜</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">preorder</span>(<span class="params">self, a: <span class="string">&#x27;Node&#x27;</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        ans=[]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">root</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:<span class="keyword">return</span> ans</span><br><span class="line">            ans.append(root.val)</span><br><span class="line">            <span class="keyword">for</span> chi <span class="keyword">in</span> root.children:</span><br><span class="line">                dfs(chi)</span><br><span class="line">        dfs(a)</span><br><span class="line">        <span class="keyword">return</span> ans </span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">102. 二叉树的层序遍历</a></p><p>思路:广搜,用一个额外的层数变量标记当前节点在第几层</p><p>其他思路:记录当前栈内有几个节点,然后遍历完这些节点,这些节点之后的就是下一层的节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">levelOrder</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        ans=[]</span><br><span class="line">        deq=[]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:<span class="keyword">return</span> []</span><br><span class="line">        deq.insert(<span class="number">0</span>,(root,<span class="number">0</span>))</span><br><span class="line">        last=<span class="number">0</span></span><br><span class="line">        curlayer=[]</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(deq):</span><br><span class="line">            (temp,layer)=deq.pop()</span><br><span class="line">            <span class="keyword">if</span> layer!=last:</span><br><span class="line">                ans.append(curlayer)</span><br><span class="line">                last=layer</span><br><span class="line">                curlayer=[]</span><br><span class="line">            curlayer.append(temp.val)</span><br><span class="line">            <span class="keyword">if</span> temp.left:</span><br><span class="line">                deq.insert(<span class="number">0</span>,(temp.left,layer+<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">if</span> temp.right:</span><br><span class="line">                deq.insert(<span class="number">0</span>,(temp.right,layer+<span class="number">1</span>))</span><br><span class="line">        ans.append(curlayer)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="第七天"><a class="markdownIt-Anchor" href="#第七天"></a> 第七天</h3><p><a href="https://leetcode.cn/problems/binary-search/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">704. 二分查找</a></p><p>思路:正常二分,right要到能遍历到的边界</p><p><a href="https://leetcode.cn/problems/binary-search/solutions/8337/er-fen-cha-zhao-xiang-jie-by-labuladong/">二分的细节&amp;边界</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left,right=<span class="number">0</span>,<span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left&lt;=right:</span><br><span class="line">            mid=(left+right)&gt;&gt;<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid]&lt;target:</span><br><span class="line">                left=mid+<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[mid]&gt;target:</span><br><span class="line">                right=mid-<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span> <span class="keyword">if</span> nums[mid]!=target <span class="keyword">else</span> mid</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/first-bad-version/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">278. 第一个错误的版本</a></p><p>思路:二分查找的变换版,区别在于要记录mid量,纯二分是找到mid直接返回,这个找到的可能不是需要的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">firstBadVersion</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left,right=<span class="number">1</span>,n</span><br><span class="line">        ans=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left&lt;=right:</span><br><span class="line">            mid=(left+right)&gt;&gt;<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> isBadVersion(mid):</span><br><span class="line">                right=mid-<span class="number">1</span></span><br><span class="line">                ans=mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left=mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="第八天"><a class="markdownIt-Anchor" href="#第八天"></a> 第八天</h3><p><a href="https://leetcode.cn/problems/validate-binary-search-tree/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">98. 验证二叉搜索树</a></p><p>错误思路:不能判断当前节点之后,然后再去分别判断左右子树</p><p>正确×思路: 每棵左右子树节点的大小范围应该都是low-up,初始low=-inf,up=inf,左子树的范围是(low,root.val) 右子树是(root.val,up)  <strong>官方题解也是错的</strong></p><p>其他:二叉搜素树中序遍历一定是升序的</p><p><a href="https://www.bilibili.com/video/BV14G411P7C1/?vd_source=602787b9249cd70cfca4def5e041f060">树的几种遍历</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">firstBadVersion</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left,right=<span class="number">1</span>,n</span><br><span class="line">        ans=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left&lt;=right:</span><br><span class="line">            mid=(left+right)&gt;&gt;<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> isBadVersion(mid):</span><br><span class="line">                right=mid-<span class="number">1</span></span><br><span class="line">                ans=mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left=mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">235. 二叉搜索树的最近公共祖先</a></p><p>思路:1.寻找祖先路径,找到第一个不同的位置  2.一次遍历,如果都小就都找左边,如果都大就都找右边,如果有小有大就找到了分界点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lowestCommonAncestor</span>(<span class="params">self, r: <span class="string">&#x27;TreeNode&#x27;</span>, p: <span class="string">&#x27;TreeNode&#x27;</span>, q: <span class="string">&#x27;TreeNode&#x27;</span></span>) -&gt; <span class="string">&#x27;TreeNode&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> r.val&gt;p.val <span class="keyword">and</span> r.val&gt;q.val:</span><br><span class="line">                r=r.left</span><br><span class="line">            <span class="keyword">elif</span> r.val&lt;p.val <span class="keyword">and</span> r.val &lt; q.val:</span><br><span class="line">                r=r.right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure><h3 id="第九天"><a class="markdownIt-Anchor" href="#第九天"></a> 第九天</h3><p><a href="https://leetcode.cn/problems/flood-fill/description/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">733. 图像渲染</a></p><p>思路:广搜/深搜找同颜色的,上下左右判断边界,访问数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">floodFill</span>(<span class="params">self, image: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], sr: <span class="built_in">int</span>, sc: <span class="built_in">int</span>, color: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:       </span><br><span class="line">        n=<span class="built_in">len</span>(image) </span><br><span class="line">        m=<span class="built_in">len</span>(image[<span class="number">0</span>])</span><br><span class="line">        visited=[[<span class="number">0</span>]*m <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        dq=deque()</span><br><span class="line">        dq.append((sr,sc))</span><br><span class="line">        oldcolor=image[sr][sc]</span><br><span class="line">        <span class="keyword">while</span> dq:</span><br><span class="line">            x,y=dq.popleft()</span><br><span class="line">            image[x][y]=color</span><br><span class="line">            visited[x][y]=<span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> x_,y_ <span class="keyword">in</span> [(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">0</span>,-<span class="number">1</span>),(-<span class="number">1</span>,<span class="number">0</span>),(<span class="number">1</span>,<span class="number">0</span>)]:</span><br><span class="line">                <span class="keyword">if</span> x_+x&gt;=<span class="number">0</span> <span class="keyword">and</span> x_+x&lt;n <span class="keyword">and</span> y_+y&gt;=<span class="number">0</span> <span class="keyword">and</span> y_+y&lt;m:</span><br><span class="line">                    <span class="keyword">if</span> visited[x_+x][y_+y]:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">if</span> image[x_+x][y_+y]==oldcolor:</span><br><span class="line">                        dq.append((x_+x,y_+y))</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> image</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/number-of-islands/description/">200. 岛屿数量</a></p><p>思路:深搜/广搜,从某点开始把连在一起的都访问一次,记录一共从几个点开始,这些点都是不同的岛屿</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numIslands</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n=<span class="built_in">len</span>(grid) </span><br><span class="line">        m=<span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        visited=[[<span class="number">0</span> <span class="keyword">if</span> grid[i][j]==<span class="string">&#x27;1&#x27;</span> <span class="keyword">else</span> <span class="number">1</span>  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> visited[i][j]:</span><br><span class="line">                    ans+=<span class="number">1</span></span><br><span class="line">                    dq=deque()</span><br><span class="line">                    dq.append((i,j))</span><br><span class="line">                    <span class="keyword">while</span> dq:</span><br><span class="line">                        x,y=dq.popleft()</span><br><span class="line">                        visited[x][y]=<span class="number">1</span></span><br><span class="line">                        <span class="keyword">for</span> x_,y_ <span class="keyword">in</span> [(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">0</span>,-<span class="number">1</span>),(-<span class="number">1</span>,<span class="number">0</span>),(<span class="number">1</span>,<span class="number">0</span>)]:</span><br><span class="line">                            <span class="keyword">if</span> x_+x&gt;=<span class="number">0</span> <span class="keyword">and</span> x_+x&lt;n <span class="keyword">and</span> y_+y&gt;=<span class="number">0</span> <span class="keyword">and</span> y_+y&lt;m:</span><br><span class="line">                                <span class="keyword">if</span> <span class="keyword">not</span> visited[x_+x][y_+y]:</span><br><span class="line">                                    visited[x_+x][y_+y]=<span class="number">1</span></span><br><span class="line">                                    dq.append((x_+x,y_+y))</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><blockquote><p>333周赛</p></blockquote><p><a href="">6365. 将整数减少到零需要的最少操作数</a><br />思路1:刚开始以为要转成二进制的01传,看0多还是1多,如果0多直接返回1的数量,但是668错了<br />思路2:打表100000之内2的次方,然后二分查找n在那两个数中间,找距离近的这个数的插值,然后+1递归下去,54-&gt;64-54=10-&gt;10-8=2-&gt;0</p><p>bilibili:找到最低为的1,考虑这个1 是直接减掉还是加上同位置的1 ,枚举这两种可能.</p><p><code>判断一个数是不是2的幂:(x &amp; ( x-1 ))==0</code></p><p><code>找到最低位的1:lowbit: x &amp; -x</code></p><p><a href="">☆6364. 无平方子集计数</a></p><p>没思路:题型重灾区,应该是用dp做,但是毫无思路</p><p>bilibili:对不起,等我学有所成再来看,什么jb玩意那么难</p><p><a href="">6363. 找出对应 LCP 矩阵的字符串</a></p><p>没思路</p><h3 id="第十天"><a class="markdownIt-Anchor" href="#第十天"></a> 第十天</h3><p><a href="https://leetcode.cn/problems/fibonacci-number/description/">509. 斐波那契数</a></p><p>思路:.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.自顶向下,记忆化搜索</span></span><br><span class="line"><span class="comment"># 2.自底向上,dp数组</span></span><br><span class="line"><span class="comment"># 3.用a,b两个变量,空间复杂度降到O(1)</span></span><br><span class="line"><span class="comment"># 4.矩阵快速幂,时间复杂度降到O(logn)</span></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/climbing-stairs/description/">70. 爬楼梯</a></p><p>思路:.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 斐波那契数列模板题</span></span><br></pre></td></tr></table></figure><h3 id="第十一天"><a class="markdownIt-Anchor" href="#第十一天"></a> 第十一天</h3><p><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/description/">746. 使用最小花费爬楼梯</a></p><p>思路:爬到今天的费用只能有两个来源,前一个和前两个,但是顶楼数组里没有,所以追加一个0,第一层第二层的费用就是本身,第二层为什么不是min(第一层,第二层)呢,因为如果是从第一层上到的第二层,第二层还要继续向上上,那么还得加上第二层的费用,就变成了(第一层+第二层)的费用了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minCostClimbingStairs</span>(<span class="params">self, cost: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        cost.append(<span class="number">0</span>)</span><br><span class="line">        n=<span class="built_in">len</span>(cost)</span><br><span class="line">        <span class="comment"># dp=[99999]*(n)</span></span><br><span class="line">        a=cost[<span class="number">0</span>]</span><br><span class="line">        b=cost[<span class="number">1</span>]</span><br><span class="line">        c=b</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n):</span><br><span class="line">            c=<span class="built_in">min</span>(a,b)+cost[i]</span><br><span class="line">            a,b=b,c</span><br><span class="line">            <span class="comment"># dp[i]=min(dp[i-1],dp[i-2])+cost[i]</span></span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/unique-paths/description/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">62. 不同路径</a></p><p>思路:深搜和广搜的复杂度应该是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>,会超时,还是dp,当前位置只能从左边或者上边来到,就把左边和上边的方案数加起来就行,第一行第一列的方案数都是1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">uniquePaths</span>(<span class="params">self, m: <span class="built_in">int</span>, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        a=[<span class="number">1</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n) ]</span><br><span class="line">        b=[<span class="number">1</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n) ]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">                b[j]=a[j]+b[j-<span class="number">1</span>]</span><br><span class="line">            a=b[:]</span><br><span class="line">        <span class="keyword">return</span> b[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># dp=[[0 for j in range(n) ]  for i in range(m)]</span></span><br><span class="line">        <span class="comment"># for i in range(m):</span></span><br><span class="line">        <span class="comment">#     for j in range(n):</span></span><br><span class="line">        <span class="comment">#         if i==0 or j==0:</span></span><br><span class="line">        <span class="comment">#             dp[i][j]=1</span></span><br><span class="line">        <span class="comment">#         else:</span></span><br><span class="line">        <span class="comment">#             dp[i][j]=dp[i][j-1]+dp[i-1][j]</span></span><br><span class="line">        <span class="comment"># return dp[m-1][n-1]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># dq=deque([(0,0)])</span></span><br><span class="line">        <span class="comment"># ans=0</span></span><br><span class="line">        <span class="comment"># while dq:</span></span><br><span class="line">        <span class="comment">#     x,y=dq.pop()</span></span><br><span class="line">        <span class="comment">#     if x==m-1 and y==n-1:</span></span><br><span class="line">        <span class="comment">#         ans+=1</span></span><br><span class="line">        <span class="comment">#     for x_,y_ in  [(x+1,y),(x,y+1)]:</span></span><br><span class="line">        <span class="comment">#         if x_&gt;=0 and x_&lt;m and y_&gt;=0 and y_&lt;n:</span></span><br><span class="line">        <span class="comment">#             dq.append((x_,y_))</span></span><br><span class="line">        <span class="comment"># return ans </span></span><br></pre></td></tr></table></figure><h3 id="第十二天"><a class="markdownIt-Anchor" href="#第十二天"></a> 第十二天</h3><p><a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">438. 找到字符串中所有字母异位词</a></p><p>思路:双指针维护长度为第二个字符串的区间,对区间内的数字统计数量,数量一致答案加1,右移的时候,右侧字符加1,左侧字符减1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findAnagrams</span>(<span class="params">self, s: <span class="built_in">str</span>, p: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">val</span>(<span class="params">a,b</span>):</span><br><span class="line">            <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(a,b):</span><br><span class="line">                <span class="keyword">if</span> i!=j:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        pnums=[<span class="number">0</span>]*<span class="number">26</span></span><br><span class="line">        snums=[<span class="number">0</span>]*<span class="number">26</span></span><br><span class="line">        constant=<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> p:</span><br><span class="line">            pnums[<span class="built_in">ord</span>(item)-constant]+=<span class="number">1</span></span><br><span class="line">        left=right=<span class="number">0</span></span><br><span class="line">        lengths=<span class="built_in">len</span>(s)</span><br><span class="line">        lengthp=<span class="built_in">len</span>(p)</span><br><span class="line">        ans=[]</span><br><span class="line">        <span class="keyword">while</span> right&lt;lengths:</span><br><span class="line">            snums[<span class="built_in">ord</span>(s[right])-constant]+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> val(snums,pnums):</span><br><span class="line">                ans.append(left)</span><br><span class="line">            right+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> right&gt;=lengthp:</span><br><span class="line">                snums[<span class="built_in">ord</span>(s[left])-constant]-=<span class="number">1</span></span><br><span class="line">                left+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans </span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/longest-repeating-character-replacement/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">424. 替换后的最长重复字符</a></p><p>思路:没有思路,考虑到了应该是用双指针</p><p>题解:双指针加一个maxhistory记录最多的相同字符个数,如果当前区间长度大于了k+maxhistory,说明不可能变成一样的,左边右移1,否则说明当前区间不是最大长度,还可增加新元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">characterReplacement</span>(<span class="params">self, s: <span class="built_in">str</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        constant=<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        length=<span class="built_in">len</span>(s)</span><br><span class="line">        <span class="comment"># 左右指针</span></span><br><span class="line">        left=right=<span class="number">0</span></span><br><span class="line">        <span class="comment"># 用于记录left-right区间每个字母的个数</span></span><br><span class="line">        nums=[<span class="number">0</span>]*<span class="number">26</span></span><br><span class="line">        <span class="comment"># 用于记录区间内出现的 最多的相同字符的个数</span></span><br><span class="line">        historymax=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> right&lt;length:</span><br><span class="line">            <span class="comment"># 新加的字符个数加1</span></span><br><span class="line">            nums[<span class="built_in">ord</span>(s[right])-constant]+=<span class="number">1</span></span><br><span class="line">            <span class="comment"># 更新一下区间内最长的字符个数</span></span><br><span class="line">            historymax=<span class="built_in">max</span>(historymax,nums[<span class="built_in">ord</span>(s[right])-constant])</span><br><span class="line">            <span class="comment"># historymax+k 是目前可以达到的最长长度,已经包含了右节点了</span></span><br><span class="line">            <span class="comment"># 小于说明现在这个区间长度还小于最大长度</span></span><br><span class="line">            <span class="comment"># 大于说明把其它不是最多出现的字符替换以后，都不能填满这个滑动的窗口，说明此时 k 不够用</span></span><br><span class="line">            <span class="comment"># 这个时候须要考虑左边界向右移动</span></span><br><span class="line">            <span class="keyword">if</span> right-left+<span class="number">1</span>&gt;historymax+k:</span><br><span class="line">                nums[<span class="built_in">ord</span>(s[left])-constant]-=<span class="number">1</span></span><br><span class="line">                left+=<span class="number">1</span></span><br><span class="line">            right+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> right-left</span><br></pre></td></tr></table></figure><h3 id="第十三天"><a class="markdownIt-Anchor" href="#第十三天"></a> 第十三天</h3><p><a href="https://leetcode.cn/problems/two-sum/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">1. 两数之和</a></p><p>思路:数组排序,然后对每个数字,二分查找target减去她的值</p><p>题解:用字典存储每个target-num的值,如果当前数字在字典中存在,找到答案,否则把target减他存进去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="comment"># nums=[(i,n) for i,n in enumerate(nums)]</span></span><br><span class="line">        <span class="comment"># nums=sorted(nums,key=lambda x:x[1])</span></span><br><span class="line">        <span class="comment"># length=len(nums)</span></span><br><span class="line">        <span class="comment"># for i in range(length):</span></span><br><span class="line">        <span class="comment">#     ttt=target-nums[i][1]</span></span><br><span class="line">        <span class="comment">#     index=bisect_left(nums,ttt,key=lambda x:x[1])</span></span><br><span class="line">        <span class="comment">#     if index==i:continue</span></span><br><span class="line">        <span class="comment">#     if index&lt;0 or index&gt;=length:continue</span></span><br><span class="line">        <span class="comment">#     if nums[index][1]==ttt:</span></span><br><span class="line">        <span class="comment">#         return [nums[i][0],nums[index][0]]</span></span><br><span class="line">        hashtable = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> target - num <span class="keyword">in</span> hashtable:</span><br><span class="line">                <span class="keyword">return</span> [hashtable[target - num], i]</span><br><span class="line">            hashtable[nums[i]] = i</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/bulls-and-cows/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">299. 猜数字游戏</a></p><p>思路:A数字好统计,对于B数字,分别存A,B中数字出现的个数,加入对他们重新排序,一定是只能匹配个数少的,所以直接取每个数字二者中的最小值,求和就是B.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getHint</span>(<span class="params">self, secret: <span class="built_in">str</span>, guess: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        hasA=[<span class="number">0</span>]*<span class="number">10</span></span><br><span class="line">        hasB=[<span class="number">0</span>]*<span class="number">10</span></span><br><span class="line">        A=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(secret,guess):</span><br><span class="line">            <span class="keyword">if</span> i==j:</span><br><span class="line">                A+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hasA[<span class="built_in">int</span>(j)]+=<span class="number">1</span></span><br><span class="line">                hasB[<span class="built_in">int</span>(i)]+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        ans=<span class="built_in">sum</span>([<span class="built_in">min</span>(a,b) <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(hasA,hasB)])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;A&#125;</span>A<span class="subst">&#123;ans&#125;</span>B&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="第十四天"><a class="markdownIt-Anchor" href="#第十四天"></a> 第十四天</h3><p><a href="https://leetcode.cn/problems/backspace-string-compare/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">844. 比较含退格的字符串</a></p><p>思路:忘记用栈了，从后往前遍历数组，cnt记录当前#的数量，然后跳过cnt个字母。</p><p>题解:用栈，遇见#退一个字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backspaceCompare</span>(<span class="params">self, s: <span class="built_in">str</span>, t: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">a</span>):</span><br><span class="line">            length=<span class="built_in">len</span>(a)</span><br><span class="line">            ans=[]</span><br><span class="line">            cnt=<span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> a[i]==<span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">                    cnt+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> cnt==<span class="number">0</span>:</span><br><span class="line">                        ans.append(a[i])</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        cnt-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> ans</span><br><span class="line">        <span class="keyword">return</span> check(s)==check(t)</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/backspace-string-compare/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">394. 字符串解码</a></p><p>思路:栈操作，一个数组存数字，一个栈用来弹字符，遇见]一直弹，直到弹出[。然后复制数字数组的最后一个数字便，在加入栈中，数字的处理有一点点麻烦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decodeString</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        stack=[]</span><br><span class="line">        nums=[]</span><br><span class="line">        length=<span class="built_in">len</span>(s)</span><br><span class="line">        i=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;length:</span><br><span class="line">            <span class="keyword">if</span> s[i]==<span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">                temp=[]</span><br><span class="line">                <span class="keyword">while</span> stack[-<span class="number">1</span>]!=<span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">                    temp.append(stack.pop())</span><br><span class="line">                stack.pop()</span><br><span class="line">                temp=<span class="string">&quot;&quot;</span>.join(temp[::-<span class="number">1</span>])</span><br><span class="line">                stack.append(temp*nums[-<span class="number">1</span>])</span><br><span class="line">                nums.pop()</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> s[i].isnumeric():</span><br><span class="line">                n=<span class="number">0</span></span><br><span class="line">                <span class="keyword">while</span> i&lt;length  <span class="keyword">and</span> s[i].isnumeric():</span><br><span class="line">                    n*=<span class="number">10</span></span><br><span class="line">                    n+=<span class="built_in">int</span>(s[i])</span><br><span class="line">                    i+=<span class="number">1</span></span><br><span class="line">                nums.append(n)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(s[i])</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(stack)</span><br></pre></td></tr></table></figure><h3 id="第十五天"><a class="markdownIt-Anchor" href="#第十五天"></a> 第十五天</h3><p><a href="https://leetcode.cn/problems/last-stone-weight/description/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">1046. 最后一块石头的重量</a></p><p>思路:大项堆，但是python的heapq只能实现小项堆，大项堆的实现要加负号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lastStoneWeight</span>(<span class="params">self, x: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        x=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:-x,x))</span><br><span class="line">        <span class="comment"># 这一步的作用不是很明确</span></span><br><span class="line">        <span class="comment"># 注意heapify(包括heapq封装的其他操作)都不会更改数据结构(仍为list)，只会以堆的操作规范对其进行处理。</span></span><br><span class="line">        <span class="comment"># 虽然类型仍为list，但元素的顺序已经满足了堆的规范，所以从线性的角度看结果列表并非是有序的(是[1, 3, 7, 9, 5]而非[1, 3, 5, 7, 9])</span></span><br><span class="line">        heapq.heapify(x)</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(x)&gt;<span class="number">1</span>:</span><br><span class="line">            a=heapq.heappop(x)</span><br><span class="line">            b=heapq.heappop(x)</span><br><span class="line">            <span class="keyword">if</span> a!=b:</span><br><span class="line">                newstore=<span class="built_in">abs</span>(<span class="built_in">max</span>(a,b)-<span class="built_in">min</span>(a,b))</span><br><span class="line">                heapq.heappush(x,-newstore)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> -x[<span class="number">0</span>] <span class="keyword">if</span> <span class="built_in">len</span>(x) <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/top-k-frequent-words/?envType=study-plan&amp;id=leetcode_75_level_1&amp;plan=leetcode_75&amp;plan_progress=jr2hbvs">692. 前K个高频单词</a></p><p>思路:Counter统计单词数量，然后按照数量降序，字典序升序排列，返回k个</p><p>题解：优先队列，元组（单词，词频）</p><p>知识点：1.Counter的most_common()在计数相同的情况下是按出现顺序返回<br />2.python多关键字排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr=[(<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>),(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>),(<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>),(<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>)]</span><br><span class="line">arr.sort(key=<span class="keyword">lambda</span> s:(s[<span class="number">0</span>],-s[<span class="number">1</span>])) </span><br><span class="line"><span class="comment">#两个关键字排序,在需要倒序排列的关键字前加`-`号</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">topKFrequent</span>(<span class="params">self, words: <span class="type">List</span>[<span class="built_in">str</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        c = Counter(words).items()</span><br><span class="line">        c = <span class="built_in">sorted</span>(c,key=<span class="keyword">lambda</span> x:(-x[<span class="number">1</span>],x[<span class="number">0</span>]))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x[<span class="number">0</span>],c[:k]))</span><br><span class="line">        <span class="comment"># return sorted((cnt := Counter(words)).keys(), key=lambda key: (-cnt[key], key))[:k]</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;leetcode75学习计划&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode75学习计划&quot;&gt;&lt;/a&gt; LeetCode75学习计划&lt;/h2&gt;
&lt;h3 id=&quot;第一天&quot;&gt;&lt;a class=&quot;markdownIt-Ancho</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="算法刷题笔记" scheme="https://gladdduck.github.io/tags/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>git Time out error解决</title>
    <link href="https://gladdduck.github.io/2023/02/24/githuberror/"/>
    <id>https://gladdduck.github.io/2023/02/24/githuberror/</id>
    <published>2023-02-24T14:39:50.432Z</published>
    <updated>2023-02-21T11:00:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>错误信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/gladdduck/gladdduck.github.io.git/&#x27;</span>:</span><br><span class="line">Failed to connect to github.com port 443 after 21048 ms: Timed out</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">  at ChildProcess.&lt;anonymous&gt; (D:\BaiduSyncdisk\Blog\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (node:events:513:28)</span><br><span class="line">      at ChildProcess.cp.emit (D:\BaiduSyncdisk\Blog\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (node:internal/child_process:293:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something<span class="string">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span></span><br></pre></td></tr></table></figure><p>解决:</p><p>git中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line"> </span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><p>cmd 中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure><p>刷新 <code>dns</code>缓存</p><p>然后再执行相应命令.</p><p><img src="https://image.yayan.xyz/20230221185957.png" alt="" /></p><blockquote><p>成功</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;错误信息:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br</summary>
      
    
    
    
    <category term="杂七杂八配置" scheme="https://gladdduck.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="git Time out" scheme="https://gladdduck.github.io/tags/git-Time-out/"/>
    
    <category term="github Time out" scheme="https://gladdduck.github.io/tags/github-Time-out/"/>
    
  </entry>
  
  <entry>
    <title>python100天16-30</title>
    <link href="https://gladdduck.github.io/2023/02/18/python100%E5%A4%A916-30/"/>
    <id>https://gladdduck.github.io/2023/02/18/python100%E5%A4%A916-30/</id>
    <published>2023-02-18T08:22:29.557Z</published>
    <updated>2023-02-21T10:23:48.298Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 01-15python基础</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 16-20python进阶</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 21-30前端概述</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 31-35Linux</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 36-40MySQL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 41-55Django</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 56-60FaskAPI</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 61-65爬虫与并发编程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 66-80numpy&amp;pandas</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 81-90机器学习&amp;pytorch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 91-100项目</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="python100天学习16-20"><a class="markdownIt-Anchor" href="#python100天学习16-20"></a> Python100天学习16-20</h2><p><code>Python语言进阶</code></p><p><a href="https://github.com/jackfrued/Python-100-Days">资料连接</a></p><h3 id="重要知识点"><a class="markdownIt-Anchor" href="#重要知识点"></a> 重要知识点</h3><p>1.生成式,推导式</p><p>2.嵌套列表</p><p>3.heapq模块(堆排序)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">从列表中找出最大的或最小的N个元素</span></span><br><span class="line"><span class="string">堆结构(大根堆/小根堆)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">34</span>, <span class="number">25</span>, <span class="number">12</span>, <span class="number">99</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">58</span>, <span class="number">78</span>, <span class="number">88</span>, <span class="number">92</span>]</span><br><span class="line">list2 = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;IBM&#x27;</span>, <span class="string">&#x27;shares&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;price&#x27;</span>: <span class="number">91.1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;AAPL&#x27;</span>, <span class="string">&#x27;shares&#x27;</span>: <span class="number">50</span>, <span class="string">&#x27;price&#x27;</span>: <span class="number">543.22</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;FB&#x27;</span>, <span class="string">&#x27;shares&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;price&#x27;</span>: <span class="number">21.09</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;HPQ&#x27;</span>, <span class="string">&#x27;shares&#x27;</span>: <span class="number">35</span>, <span class="string">&#x27;price&#x27;</span>: <span class="number">31.75</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;YHOO&#x27;</span>, <span class="string">&#x27;shares&#x27;</span>: <span class="number">45</span>, <span class="string">&#x27;price&#x27;</span>: <span class="number">16.35</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ACME&#x27;</span>, <span class="string">&#x27;shares&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;price&#x27;</span>: <span class="number">115.65</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(heapq.nlargest(<span class="number">3</span>, list1))</span><br><span class="line"><span class="built_in">print</span>(heapq.nsmallest(<span class="number">3</span>, list1))</span><br><span class="line"><span class="built_in">print</span>(heapq.nlargest(<span class="number">2</span>, list2, key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;price&#x27;</span>]))</span><br><span class="line"><span class="built_in">print</span>(heapq.nlargest(<span class="number">2</span>, list2, key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;shares&#x27;</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.itertools模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">迭代工具模块</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 产生ABCD的全排列</span></span><br><span class="line">itertools.permutations(<span class="string">&#x27;ABCD&#x27;</span>)</span><br><span class="line"><span class="comment"># 产生ABCDE的五选三组合</span></span><br><span class="line">itertools.combinations(<span class="string">&#x27;ABCDE&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 产生ABCD和123的笛卡尔积</span></span><br><span class="line">itertools.product(<span class="string">&#x27;ABCD&#x27;</span>, <span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="comment"># 产生ABC的无限循环序列</span></span><br><span class="line">itertools.cycle((<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.collections模块</p><ul><li><code>namedtuple</code>：命令元组，它是一个类工厂，接受类型的名称和属性列表来创建一个类。</li><li><code>deque</code>：双端队列，是列表的替代实现。Python中的列表底层是基于数组来实现的，而deque底层是双向链表，因此当你需要在头尾添加和删除元素时，deque会表现出更好的性能，渐近时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</li><li><code>Counter</code>：<code>dict</code>的子类，键是元素，值是元素的计数，它的<code>most_common()</code>方法可以帮助我们获取出现频率最高的元素。</li><li><code>OrderedDict</code>：<code>dict</code>的子类，它记录了键值对插入的顺序，看起来既有字典的行为，也有链表的行为。</li><li><code>defaultdict</code>：类似于字典类型，但是可以通过默认的工厂函数来获得键对应的默认值，相比字典中的<code>setdefault()</code>方法，这种做法更加高效。</li></ul><h3 id="数据结构和算法"><a class="markdownIt-Anchor" href="#数据结构和算法"></a> 数据结构和算法</h3><p><code>选择排序</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">select_sort</span>(<span class="params">items, comp=<span class="keyword">lambda</span> x, y: x &lt; y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;简单选择排序&quot;&quot;&quot;</span></span><br><span class="line">    items = items[:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(items) - <span class="number">1</span>):</span><br><span class="line">        min_index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(items)):</span><br><span class="line">            <span class="keyword">if</span> comp(items[j], items[min_index]):</span><br><span class="line">                min_index = j</span><br><span class="line">        items[i], items[min_index] = items[min_index], items[i]</span><br><span class="line">    <span class="keyword">return</span> items</span><br></pre></td></tr></table></figure><p><code>冒泡排序</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">items, comp=<span class="keyword">lambda</span> x, y: x &gt; y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;冒泡排序&quot;&quot;&quot;</span></span><br><span class="line">    items = items[:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(items) - <span class="number">1</span>):</span><br><span class="line">        swapped = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(items) - <span class="number">1</span> - i):</span><br><span class="line">            <span class="keyword">if</span> comp(items[j], items[j + <span class="number">1</span>]):</span><br><span class="line">                items[j], items[j + <span class="number">1</span>] = items[j + <span class="number">1</span>], items[j]</span><br><span class="line">                swapped = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> swapped:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> items</span><br></pre></td></tr></table></figure><p><code>归并排序</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">items1, items2, comp=<span class="keyword">lambda</span> x, y: x &lt; y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;合并(将两个有序的列表合并成一个有序的列表)&quot;&quot;&quot;</span></span><br><span class="line">    items = []</span><br><span class="line">    index1, index2 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index1 &lt; <span class="built_in">len</span>(items1) <span class="keyword">and</span> index2 &lt; <span class="built_in">len</span>(items2):</span><br><span class="line">        <span class="keyword">if</span> comp(items1[index1], items2[index2]):</span><br><span class="line">            items.append(items1[index1])</span><br><span class="line">            index1 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            items.append(items2[index2])</span><br><span class="line">            index2 += <span class="number">1</span></span><br><span class="line">    items += items1[index1:]</span><br><span class="line">    items += items2[index2:]</span><br><span class="line">    <span class="keyword">return</span> items</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">items, comp=<span class="keyword">lambda</span> x, y: x &lt; y</span>):</span><br><span class="line">    <span class="keyword">return</span> _merge_sort(<span class="built_in">list</span>(items), comp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_merge_sort</span>(<span class="params">items, comp</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;归并排序&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(items) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> items</span><br><span class="line">    mid = <span class="built_in">len</span>(items) // <span class="number">2</span></span><br><span class="line">    left = _merge_sort(items[:mid], comp)</span><br><span class="line">    right = _merge_sort(items[mid:], comp)</span><br><span class="line">    <span class="keyword">return</span> merge(left, right, comp)</span><br></pre></td></tr></table></figure><p><code>快速排序</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">快速排序 - 选择枢轴对元素进行划分，左边都比枢轴小右边都比枢轴大</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">items, comp=<span class="keyword">lambda</span> x, y: x &lt;= y</span>):</span><br><span class="line">    items = <span class="built_in">list</span>(items)[:]</span><br><span class="line">    _quick_sort(items, <span class="number">0</span>, <span class="built_in">len</span>(items) - <span class="number">1</span>, comp)</span><br><span class="line">    <span class="keyword">return</span> items</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_quick_sort</span>(<span class="params">items, start, end, comp</span>):</span><br><span class="line">    <span class="keyword">if</span> start &lt; end:</span><br><span class="line">        pos = _partition(items, start, end, comp)</span><br><span class="line">        _quick_sort(items, start, pos - <span class="number">1</span>, comp)</span><br><span class="line">        _quick_sort(items, pos + <span class="number">1</span>, end, comp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_partition</span>(<span class="params">items, start, end, comp</span>):</span><br><span class="line">    pivot = items[end]</span><br><span class="line">    i = start - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(start, end):</span><br><span class="line">        <span class="keyword">if</span> comp(items[j], pivot):</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            items[i], items[j] = items[j], items[i]</span><br><span class="line">    items[i + <span class="number">1</span>], items[end] = items[end], items[i + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span></span><br></pre></td></tr></table></figure><p><code>选择排序</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">select_sort</span>(<span class="params">items, comp=<span class="keyword">lambda</span> x, y: x &lt; y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;简单选择排序&quot;&quot;&quot;</span></span><br><span class="line">    items = items[:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(items) - <span class="number">1</span>):</span><br><span class="line">        min_index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(items)):</span><br><span class="line">            <span class="keyword">if</span> comp(items[j], items[min_index]):</span><br><span class="line">                min_index = j</span><br><span class="line">        items[i], items[min_index] = items[min_index], items[i]</span><br><span class="line">    <span class="keyword">return</span> items</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>二分查找</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bin_search</span>(<span class="params">items, key</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;折半查找&quot;&quot;&quot;</span></span><br><span class="line">    start, end = <span class="number">0</span>, <span class="built_in">len</span>(items) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt;= end:</span><br><span class="line">        mid = (start + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> key &gt; items[mid]:</span><br><span class="line">            start = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> key &lt; items[mid]:</span><br><span class="line">            end = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><p><code>穷举</code><br /><code>贪心</code><br /><code>动态规划</code><br /><code>分治</code><br /><code>回溯</code></p><h3 id="函数的使用方式"><a class="markdownIt-Anchor" href="#函数的使用方式"></a> 函数的使用方式</h3><p><code>map``filter</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">items1 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span>, <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>))))</span><br><span class="line">items2 = [x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>位置参数、可变参数、关键字参数、命名关键字参数</code></p><p><code>Local &gt;&gt;&gt; Embedded &gt;&gt;&gt; Global &gt;&gt;&gt; Built-in</code></p><p><code>装饰器</code></p><h3 id="面向对象相关知识"><a class="markdownIt-Anchor" href="#面向对象相关知识"></a> 面向对象相关知识</h3><p>导致引用计数+1的情况：</p><ul><li>对象被创建，例如<code>a = 23</code></li><li>对象被引用，例如<code>b = a</code></li><li>对象被作为参数，传入到一个函数中，例如<code>f(a)</code></li><li>对象作为一个元素，存储在容器中，例如<code>list1 = [a, a]</code></li></ul><p>导致引用计数-1的情况：</p><ul><li>对象的别名被显式销毁，例如<code>del a</code></li><li>对象的别名被赋予新的对象，例如<code>a = 24</code></li><li>一个对象离开它的作用域，例如f函数执行完毕时，f函数中的局部变量（全局变量不会）</li><li>对象所在的容器被销毁，或从容器中删除对象</li></ul><p>引用计数可能会导致循环引用问题，而循环引用会导致内存泄露，如下面的代码所示。为了解决这个问题，Python中引入了“标记-清除”和“分代收集”。在创建一个对象的时候，对象被放在第一代中，如果在第一代的垃圾检查中对象存活了下来，该对象就会被放到第二代中，同理在第二代的垃圾检查中对象存活下来，该对象就会被放到第三代中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 循环引用会导致内存泄露 - Python除了引用技术还引入了标记清理和分代回收</span></span><br><span class="line"><span class="comment"># 在Python 3.6以前如果重写__del__魔术方法会导致循环引用处理失效</span></span><br><span class="line"><span class="comment"># 如果不想造成循环引用可以使用弱引用</span></span><br><span class="line">list1 = []</span><br><span class="line">list2 = [] </span><br><span class="line">list1.append(list2)</span><br><span class="line">list2.append(list1)</span><br></pre></td></tr></table></figure><p>以下情况会导致垃圾回收：</p><ul><li>调用<code>gc.collect()</code></li><li><code>gc</code>模块的计数器达到阀值</li><li>程序退出</li></ul><p><code>面向对象的设计原则</code></p><p><code>几种设计模式</code></p><h3 id="迭代器和生成器"><a class="markdownIt-Anchor" href="#迭代器和生成器"></a> 迭代器和生成器</h3><h3 id="并发编程"><a class="markdownIt-Anchor" href="#并发编程"></a> 并发编程</h3><blockquote><p>Python中有GIL来防止多个线程同时执行本地字节码，这个锁对于CPython是必须的，因为CPython的内存管理并不是线程安全的，因为GIL的存在多线程并不能发挥CPU的多核特性。</p></blockquote><h2 id="python100天学习21-30"><a class="markdownIt-Anchor" href="#python100天学习21-30"></a> Python100天学习21-30</h2><p><code>Web前端概述</code></p><p><a href="https://github.com/jackfrued/Python-100-Days">资料连接</a></p><h3 id="第二十一天-第三十天"><a class="markdownIt-Anchor" href="#第二十一天-第三十天"></a> 第二十一天-第三十天</h3><blockquote><p>HTML5 标签</p></blockquote><blockquote><p>CSS3语法</p></blockquote><blockquote><p>JavaScript语法</p></blockquote><blockquote><p>JQuery概述</p></blockquote><blockquote><p>Ajax</p></blockquote><blockquote><p>Vue、vue-cli：渐进式框架</p></blockquote><blockquote><p>Element：UI框架</p></blockquote><blockquote><p>Echarts：报表框架</p></blockquote><blockquote><p>Bulma:基于弹性盒子的CSS框架</p></blockquote><blockquote><p>Bootstrap:响应式布局框架</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Python学习笔记" scheme="https://gladdduck.github.io/tags/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>知识图谱表示学习综述</title>
    <link href="https://gladdduck.github.io/2022/12/02/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0%E7%BB%BC%E8%BF%B0,/"/>
    <id>https://gladdduck.github.io/2022/12/02/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0%E7%BB%BC%E8%BF%B0,/</id>
    <published>2022-12-02T02:19:08.766Z</published>
    <updated>2022-12-02T02:41:24.830Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeantenna.com/a/qAGLBODWDT">copy from </a></p><p>本文分享一篇知识图谱表示学习汇报ppt，将知识图谱表示学习方法粗略分为四大类，涉及将近30篇优秀论文，只简单介绍其核心思想，完整汇报ppt获取请关注公众号(AI机器学习与知识图谱)回复关键字：知识图谱表示学习</p><ol><li><p>翻译距离模型：包括TransH、TransR、TransD、TranSparse、TransM、MianfoldE、TransF、TransA、KG2E、TransG、UM、SE模型等；</p></li><li><p>语义匹配模型：包括RESCAL、DistMult、HoLE、ComplEx、ANALOGY、SNE、NTN、MLP、NAM模型等；</p></li><li><p>随机游走模型：包括DeepWalk、LINE、node2vec模型等；</p></li><li><p>子图汇聚模型：包括GCN、GAT、GraphSage模型等。</p></li></ol><h2 id="一-motivation"><a class="markdownIt-Anchor" href="#一-motivation"></a> 一、Motivation</h2><p>知识图谱是由实体（节点）和关系（不同类型的边）组成的多关系图，每条边连接头尾两个实体，通常用SPO三元组进行表示（subject,predicate, object），被称为一个事实。虽然知识图谱在表示结构化数据方面很有效，但这类三元组的潜在符号特性通常使得KGs很难操作。</p><p>因此知识图谱表示学习便成为了一个热门的研究方向，知识图谱嵌入的关键思想是将图谱中的实体entity和关系relation转化为连续的向量，在保留KG原有结构的同时使得操作方便。于是便可将entityembedding和relationembedding用到下游各种任务中，例如图谱补全，关系抽取，实体分类，实体链接及实体融合等</p><p>知识图谱嵌入技术经典三个步骤：</p><p>知识图谱嵌入技术经典三个步骤：</p><p>1、representing entities and relations</p><p>2、defininga scoring function</p><p>3、learning entity and relation representations（最大化所有观测事实的置信度plausibility）</p><p>根据scoring function区别分为distance-based scoring functions和similarity-based scoring functions</p><h2 id="二-翻译距离模型"><a class="markdownIt-Anchor" href="#二-翻译距离模型"></a> 二、翻译距离模型</h2><p>基础三大模型：TransE，TransH，TransR</p><p><img src="https://image.yayan.xyz/20221202102322.png" alt="" /></p><p>三大模型图</p><p><img src="https://image.yayan.xyz/20221202102505.png" alt="" /></p><p>后续改进模型</p><p><img src="https://image.yayan.xyz/20221202102553.png" alt="" /></p><p>后后续改进模型</p><p><img src="https://image.yayan.xyz/20221202102635.png" alt="" /></p><p>高斯嵌入</p><p><img src="https://image.yayan.xyz/20221202103008.png" alt="" /></p><p>小结：</p><p><img src="https://image.yayan.xyz/20221202102931.png" alt="" /></p><h2 id="三-语义匹配模型"><a class="markdownIt-Anchor" href="#三-语义匹配模型"></a> 三、语义匹配模型</h2><p>语义匹配基本模型：</p><p><img src="https://image.yayan.xyz/20221202103123.png" alt="" /></p><p>模型图</p><p><img src="https://image.yayan.xyz/20221202103139.png" alt="" /></p><p>看不懂的模型</p><p><img src="https://image.yayan.xyz/20221202103250.png" alt="" /></p><p>基于神经网络的匹配</p><p><img src="https://image.yayan.xyz/20221202103514.png" alt="" /></p><p>模型图</p><p><img src="https://image.yayan.xyz/20221202103523.png" alt="" /></p><p>小结<br /><img src="https://image.yayan.xyz/20221202103532.png" alt="" /></p><h2 id="四-基于随机游走的模型"><a class="markdownIt-Anchor" href="#四-基于随机游走的模型"></a> 四、基于随机游走的模型</h2><p>DeepWalk：</p><p><img src="https://image.yayan.xyz/20221202103603.png" alt="" /></p><p>Line：</p><p><img src="https://image.yayan.xyz/20221202103610.png" alt="" /></p><p><img src="https://image.yayan.xyz/20221202103627.png" alt="" /></p><p><img src="https://image.yayan.xyz/20221202103636.png" alt="" /></p><p>node2vec：</p><p><img src="https://image.yayan.xyz/20221202103644.png" alt="" /></p><h2 id="五-子图汇聚模型"><a class="markdownIt-Anchor" href="#五-子图汇聚模型"></a> 五、子图汇聚模型</h2><p>GCN图卷积：</p><p><img src="https://image.yayan.xyz/20221202103957.png" alt="" /></p><p><img src="https://image.yayan.xyz/20221202104006.png" alt="" /></p><p>GAT图注意力：</p><p><img src="https://image.yayan.xyz/20221202104029.png" alt="" /></p><p>GraphSage：</p><p><img src="https://image.yayan.xyz/20221202104041.png" alt="" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://codeantenna.com/a/qAGLBODWDT&quot;&gt;copy from &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文分享一篇知识图谱表示学习汇报ppt，将知识图谱表示学习方法粗略分为四大类，涉及将近30篇优秀论文，只简单介绍其核心思想，完整汇报pp</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="知识图谱表示" scheme="https://gladdduck.github.io/tags/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E8%A1%A8%E7%A4%BA/"/>
    
    <category term="综述" scheme="https://gladdduck.github.io/tags/%E7%BB%BC%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>快速傅里叶变换(FFT)求多项式乘法</title>
    <link href="https://gladdduck.github.io/2022/11/18/%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2(FFT)%E6%B1%82%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B9%98%E6%B3%95/"/>
    <id>https://gladdduck.github.io/2022/11/18/%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2(FFT)%E6%B1%82%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B9%98%E6%B3%95/</id>
    <published>2022-11-18T03:11:17.939Z</published>
    <updated>2022-11-19T04:43:35.159Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>推荐一篇写的很好的<a href="https://www.renrendoc.com/paper/201816620.html">课件</a></p><h2 id="多项式的表示与乘法"><a class="markdownIt-Anchor" href="#多项式的表示与乘法"></a> 多项式的表示与乘法</h2><ol><li>系数表示法<br />多项式<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><msup><mi>x</mi><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">A(x)=\sum_{i=0}^{n} a_ix^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.124374em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span>的系数表示就是<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><msup><mo stretchy="false">)</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">a=(a_0,a_1,...,a_n)^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span></li></ol><blockquote><p>如果用系数表示,多项式乘法的复杂度是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>,就是和平时手算过程一样</p></blockquote><ol start="2"><li>点值表示法<br />n+1个不同的点能唯一确定n次多项式系数</li></ol><p>对于多项式<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>B</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A(x),B(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>:</mo><mrow><mo fence="true">{</mo><mrow><mo fence="true">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>0</mn></msub><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mrow><mo fence="true">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mrow><mo fence="true">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mrow><mo fence="true">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>n</mi></msub><mo fence="true">)</mo></mrow><mo fence="true">}</mo></mrow><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">A(x):\left\{\left(x_{0}, y_{0}\right),\left(x_{1}, y_{1}\right),\left(x_{2}, y_{2}\right), \ldots,\left(x_{n}, y_{n}\right)\right\},</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">}</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>:</mo><mrow><mo fence="true">{</mo><mrow><mo fence="true">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><msubsup><mi>y</mi><mn>0</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mrow><mo fence="true">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msubsup><mi>y</mi><mn>1</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mrow><mo fence="true">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msubsup><mi>y</mi><mn>2</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mrow><mo fence="true">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo separator="true">,</mo><msubsup><mi>y</mi><mi>n</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo fence="true">)</mo></mrow><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">B(x):\left\{\left(x_{0}, y_{0}^{\prime}\right),\left(x_{1}, y_{1}^{\prime}\right),\left(x_{2}, y_{2}^{\prime}\right), \ldots,\left(x_{n}, y_{n}^{\prime}\right)\right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span></span></p><blockquote><p>设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>B</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C(x) = A(x) B(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>,因为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>的系数是2n,所以要在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext>和</mtext><mi>B</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A(x)和B(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord cjk_fallback">和</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>上取2n个不同的点才行,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>的点值表示为<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mrow><mo fence="true">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>0</mn></msub><msubsup><mi>y</mi><mn>0</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mrow><mo fence="true">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><msubsup><mi>y</mi><mn>1</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mrow><mo fence="true">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><msubsup><mi>y</mi><mn>2</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mrow><mo fence="true">(</mo><msub><mi>x</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub><mo separator="true">,</mo><msub><mi>y</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub><msubsup><mi>y</mi><mrow><mn>2</mn><mi>n</mi></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo fence="true">)</mo></mrow><mo fence="true">}</mo></mrow><annotation encoding="application/x-tex">\left\{\left(x_{0}, y_{0} y_{0}^{\prime}\right),\left(x_{1}, y_{1} y_{1}^{\prime}\right),\left(x_{2}, y_{2} y_{2}^{\prime}\right), \ldots,\left(x_{2 n}, y_{2 n} y_{2 n}^{\prime}\right)\right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span></span><br />点值表示的多项式乘法复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p></blockquote><h2 id="系数表示法与点值表示法的转换"><a class="markdownIt-Anchor" href="#系数表示法与点值表示法的转换"></a> 系数表示法与点值表示法的转换</h2><p><img src="https://image.yayan.xyz/20221119121436.png" alt="" /><br />系数到点(也叫求值):<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mi>a</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">Xa=y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><br />因为系数矩阵行列式不为0,所以可逆.<br />点到系数(也叫插值):<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>=</mo><msup><mi>X</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>y</mi></mrow><annotation encoding="application/x-tex">a=X^{-1}y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></p><h2 id="单位复数根"><a class="markdownIt-Anchor" href="#单位复数根"></a> 单位复数根</h2><p>n次单位复数根满足<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>w</mi><mi>n</mi></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">w^n=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>,n次单位复数根敲好有n个<br />复杂证明略过,n次单位根的所有根,作为计算点值的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span></p><h2 id="离散傅里叶变换"><a class="markdownIt-Anchor" href="#离散傅里叶变换"></a> 离散傅里叶变换</h2><p>对于  n  次多项式  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><msup><mi>x</mi><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">A(x)=\sum_{i=0}^{n} a_{i} x^{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.124374em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span></span> ,</p><p>其系数形式为  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>=</mo><msup><mrow><mo fence="true">(</mo><msub><mi>a</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo fence="true">)</mo></mrow><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">a=\left(a_{0}, a_{1}, \ldots, a_{n}\right)^{T}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.231231em;vertical-align:-0.25em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span></span> .</p><p>设 $ y_{k}=A\left(\omega_{n}<sup>{k}\right)=\sum_{i=0}</sup>{n} a_{i} \omega_{n+1}^{k i}, 0 \leq k \leq n, k \in N $,</p><p>则向量 $ y=\left(y_{0}, y_{1}, \ldots, y_{n}\right)^{T} $</p><p>就是系数向量 $ a=\left(a_{0}, a_{1}, \ldots, a_{n}\right)^{T} $ 的离散傅里叶变换.</p><p>但是离散傅里叶变换的复杂度仍是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><h2 id="快速傅里叶变换fft"><a class="markdownIt-Anchor" href="#快速傅里叶变换fft"></a> 快速傅里叶变换(FFT)</h2><p>FFT 将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>拆分为奇数下标与偶数下标的系数</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>A</mi><mrow><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>a</mi><mn>0</mn></msub><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><mi>x</mi><mo>+</mo><msub><mi>a</mi><mn>4</mn></msub><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><msup><mi>x</mi><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac></msup><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">A^{[0]}(x)=a_{0}+a_{2} x+a_{4} x^{2}+\cdots+a_{n-1} x^{\frac{n-1}{2}},</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mtight">0</span><span class="mclose mtight">]</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.964108em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1623510000000001em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9540200000000001em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142857em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>A</mi><mrow><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><msub><mi>a</mi><mn>3</mn></msub><mi>x</mi><mo>+</mo><msub><mi>a</mi><mn>5</mn></msub><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub><msup><mi>x</mi><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac></msup><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">A^{[1]}(x)=a_{1}+a_{3} x+a_{5} x^{2}+\cdots+a_{n} x^{\frac{n-1}{2}} .</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mtight">1</span><span class="mclose mtight">]</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.964108em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.10402em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9540200000000001em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142857em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mord">.</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>A</mi><mrow><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A^{[0]}(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mtight">0</span><span class="mclose mtight">]</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>  包含  A  所有偶数下标的系数, $ A^{[1]}(x)$  数下标的系数, 于是有:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>A</mi><mrow><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow></msup><mrow><mo fence="true">(</mo><msup><mi>x</mi><mn>2</mn></msup><mo fence="true">)</mo></mrow><mo>+</mo><mi>x</mi><msup><mi>A</mi><mrow><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msup><mrow><mo fence="true">(</mo><msup><mi>x</mi><mn>2</mn></msup><mo fence="true">)</mo></mrow><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">A(x)=A^{[0]}\left(x^{2}\right)+x A^{[1]}\left(x^{2}\right) .</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2380099999999998em;vertical-align:-0.35001em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mtight">0</span><span class="mclose mtight">]</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.2380099999999998em;vertical-align:-0.35001em;"></span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mtight">1</span><span class="mclose mtight">]</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span></span></span></span></p><p>所以, 求 $ A(x)$  在  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>ω</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>0</mn></msubsup><mo separator="true">,</mo><msubsup><mi>ω</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>1</mn></msubsup><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msubsup><mi>ω</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mi>n</mi></msubsup></mrow><annotation encoding="application/x-tex">\omega_{n+1}^{0}, \omega_{n+1}^{1}, \ldots, \omega_{n+1}^{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1205469999999997em;vertical-align:-0.30643899999999996em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999998em;"><span style="top:-2.451892em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30643899999999996em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999998em;"><span style="top:-2.451892em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30643899999999996em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6643919999999999em;"><span style="top:-2.451892em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30643899999999996em;"><span></span></span></span></span></span></span></span></span></span>  处的值的问题转化为:<br />a. 求次数为 $ \frac{n}{2}$  的多项式 $ A^{[0]}(x), A^{[1]}(x) $<br />在点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow><mo fence="true">(</mo><msubsup><mi>ω</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>0</mn></msubsup><mo fence="true">)</mo></mrow><mn>2</mn></msup><mo separator="true">,</mo><msup><mrow><mo fence="true">(</mo><msubsup><mi>ω</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>1</mn></msubsup><mo fence="true">)</mo></mrow><mn>2</mn></msup><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msup><mrow><mo fence="true">(</mo><msubsup><mi>ω</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo fence="true">)</mo></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\left(\omega_{n+1}^{0}\right)^{2},\left(\omega_{n+1}^{1}\right)^{2}, \ldots,\left(\omega_{n+1}^{n}\right)^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.404018em;vertical-align:-0.35001em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999998em;"><span style="top:-2.451892em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30643899999999996em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.054008em;"><span style="top:-3.3029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999998em;"><span style="top:-2.451892em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30643899999999996em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.054008em;"><span style="top:-3.3029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6643919999999999em;"><span style="top:-2.451892em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30643899999999996em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.054008em;"><span style="top:-3.3029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>  处的取值.</p><p>递归即可得到结果.</p><blockquote><p>复杂度<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn><mi>T</mi><mrow><mo fence="true">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo fence="true">)</mo></mrow><mo>+</mo><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)=2 T\left(\frac{n}{2}\right)+\Theta(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p></blockquote><p>然后进行点值乘法,得到点值的结果,再利用逆变换为系数表达.</p><h2 id="具体流程"><a class="markdownIt-Anchor" href="#具体流程"></a> 具体流程</h2><ol><li>加倍多项式次数<br />通过加入  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>  个系数为 0 的高阶项, 把多项式 $ A(x)  和  B(x)$  变为次数为  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">2 n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span></span></span></span>  的 多项式, 并构造其系数表达.</li><li>求值<br />通过应用 $ 2(n+1) $ 阶的 $FFT $计算出  $A(x)  和  B(x) $ 长度为 $ 2(n+1) $ 的点值表达. 这些点值表达中包含了两个多项式在 $ 2(n+1) $ 次单位根处的取值.</li><li>逐点相乘<br />把  $A(x)  的值与  B(x) $的值逐点相乘, 可以计算出  $C(x)=A(x) B(x) $ 的点值表 达, 这个表示中包含了 $ C(x)  在每个  2(n+1) $ 次单位根处的值.</li><li>揷值<br />通过对  $2(n+1) $ 个点值应用 FFT, 计算其逆 DFT, 就可以构造出多项式<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>的系数表达</li></ol><p>由于 $ 1 、 3 $ 的时间复杂度为 $ \Theta(n)$, $2 、 4 $ 的时间复杂度为  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Θ</mi><mrow><mo fence="true">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\Theta\left(n \log _{2} n\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span> ,<br />因此整个算法的时间复杂度为 $ \Theta\left(n \log _{2} n\right)$ .</p><h2 id="python-代码"><a class="markdownIt-Anchor" href="#python-代码"></a> python 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment"># 定义Π</span></span><br><span class="line">PI = <span class="number">3.1415926</span></span><br><span class="line"><span class="comment"># 定义复数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">complex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,real=<span class="number">0</span>,virtual=<span class="number">0</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.real=real</span><br><span class="line">        self.virtual=virtual</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;real:<span class="subst">&#123;self.real&#125;</span>  virtual:<span class="subst">&#123;self.virtual&#125;</span>\n&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 复数的乘法加法减法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex_mut</span>(<span class="params">a,b</span>):</span><br><span class="line">    ret=<span class="built_in">complex</span>()</span><br><span class="line">    ret.real = a.real * b.real - a.virtual * b.virtual</span><br><span class="line">    ret.virtual = a.real * b.virtual + a.virtual * b.real</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex_add</span>(<span class="params">a,b</span>):</span><br><span class="line">    ret=<span class="built_in">complex</span>()</span><br><span class="line">    ret.real = a.real + b.real</span><br><span class="line">    ret.virtual = a.virtual + b.virtual</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex_sub</span>(<span class="params">a,b</span>):</span><br><span class="line">    ret=<span class="built_in">complex</span>()</span><br><span class="line">    ret.real = a.real - b.real</span><br><span class="line">    ret.virtual = a.virtual - b.virtual</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 获取i次n复根</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_w</span>(<span class="params">n,k,inverse</span>):</span><br><span class="line">    w=<span class="built_in">complex</span>()</span><br><span class="line">    <span class="comment"># 根据欧拉函数获得w</span></span><br><span class="line">    accy=<span class="built_in">round</span>(PI*<span class="number">2</span>*k/n,<span class="number">6</span>)</span><br><span class="line">    <span class="comment"># 逆傅里叶变换sin前面要有-</span></span><br><span class="line">    <span class="keyword">if</span> inverse:</span><br><span class="line">        w.real=<span class="built_in">round</span>(math.cos(accy),<span class="number">6</span>)</span><br><span class="line">        w.virtual=<span class="built_in">round</span>(-math.sin(accy),<span class="number">6</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        w.real=<span class="built_in">round</span>(math.cos(accy),<span class="number">6</span>)</span><br><span class="line">        w.virtual=<span class="built_in">round</span>(math.sin(accy),<span class="number">6</span>)</span><br><span class="line">    <span class="keyword">return</span> w</span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速傅里叶变换</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">FFT</span>(<span class="params">coefficient,n,inverse</span>):</span><br><span class="line">    <span class="comment"># 如果n==1了直接返回系数</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> coefficient</span><br><span class="line">    <span class="comment"># 用于存放奇偶次项</span></span><br><span class="line">    odd,even=[],[]</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> index&amp;<span class="number">1</span>:</span><br><span class="line">            odd.append(coefficient[index])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            even.append(coefficient[index])</span><br><span class="line">    <span class="comment"># 对奇偶次项分别计算快速傅里叶变换</span></span><br><span class="line">    e_k=FFT(even,n//<span class="number">2</span>,inverse)</span><br><span class="line">    d_k=FFT(odd,n//<span class="number">2</span>,inverse)</span><br><span class="line">    <span class="comment"># 计算第k个点和第k+n//2个点的y坐标</span></span><br><span class="line">    y_k,y_k_2=[],[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n//<span class="number">2</span>):</span><br><span class="line">        w=get_w(n,i,inverse)</span><br><span class="line">        y_k.append(complex_add(e_k[i],complex_mut(w,d_k[i])))</span><br><span class="line">        y_k_2.append(complex_sub(e_k[i],complex_mut(w,d_k[i])))</span><br><span class="line">    <span class="comment"># 返回n个点的y坐标</span></span><br><span class="line">    <span class="keyword">return</span> y_k+y_k_2</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">polynomial_mul</span>(<span class="params">coefficient_a,coefficient_b</span>):</span><br><span class="line">    <span class="comment"># 本来是坐标代表高位</span></span><br><span class="line">    <span class="comment"># 现在反过来,左边代表地位,索引就是x的项数</span></span><br><span class="line">    coefficient_a=coefficient_a[::-<span class="number">1</span>]</span><br><span class="line">    coefficient_b=coefficient_b[::-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 计算乘积的最高次项是多少</span></span><br><span class="line">    length=<span class="built_in">len</span>(coefficient_a)-<span class="number">1</span>+<span class="built_in">len</span>(coefficient_b)-<span class="number">1</span></span><br><span class="line">    <span class="comment"># 取乘积的此项大的 2的n次方 方便后面FFT计算</span></span><br><span class="line">    digitnum = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> length&gt;<span class="number">0</span>:</span><br><span class="line">        length&gt;&gt;=<span class="number">1</span></span><br><span class="line">        digitnum+=<span class="number">1</span></span><br><span class="line">    length = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> digitnum&gt;<span class="number">0</span>:</span><br><span class="line">        length&lt;&lt;=<span class="number">1</span></span><br><span class="line">        digitnum-=<span class="number">1</span></span><br><span class="line">    <span class="comment"># 把系数变为复数,方便后面和n复根计算</span></span><br><span class="line">    a,b=[<span class="built_in">complex</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length+<span class="number">1</span>)],[<span class="built_in">complex</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> index,item <span class="keyword">in</span> <span class="built_in">enumerate</span>(coefficient_a):</span><br><span class="line">        a[index].real=item</span><br><span class="line">    <span class="keyword">for</span> index,item <span class="keyword">in</span> <span class="built_in">enumerate</span>(coefficient_b):</span><br><span class="line">        b[index].real=item</span><br><span class="line">    <span class="comment"># 对系数a,b进行快速傅里叶变换</span></span><br><span class="line">    FFT_a=FFT(a,length,inverse=<span class="literal">False</span>)</span><br><span class="line">    FFT_b=FFT(b,length,inverse=<span class="literal">False</span>)</span><br><span class="line">    c=[]</span><br><span class="line">    <span class="comment"># 对变换得到的y坐标进行点值乘法</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        c.append(complex_mut(FFT_a[index],FFT_b[index]))</span><br><span class="line">    <span class="comment"># 对c进行逆傅里叶变换</span></span><br><span class="line">    FFT_c=FFT(c,length,inverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 取c的实部才是结果</span></span><br><span class="line">    ans=[]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> FFT_c:</span><br><span class="line">        <span class="comment"># 控制精度,因为float计算会有误差</span></span><br><span class="line">        <span class="keyword">if</span> item.real/length&gt;<span class="number">0.05</span> <span class="keyword">or</span> item.real/length&lt;-<span class="number">0.05</span>:</span><br><span class="line">            <span class="comment"># 小数点后保留2位</span></span><br><span class="line">            <span class="comment"># 得到的结果还需要除以n</span></span><br><span class="line">            ans.append(<span class="built_in">round</span>(item.real/length,<span class="number">2</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ans.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"><span class="comment"># (x2+x+1)^2</span></span><br><span class="line"><span class="comment"># x4+x3+x2+x3+x2+x+x2+x+1</span></span><br><span class="line"><span class="comment"># x4+2*x3+3*x2+2*x+1</span></span><br><span class="line"><span class="comment"># 0 0 0 1 2 3 2 1</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 左边代表高次项,右边代表低次项</span></span><br><span class="line">    a=[<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">    b=[<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># O(nlogn)的多项式乘法</span></span><br><span class="line">    c=polynomial_mul(a,b)</span><br><span class="line">    <span class="comment"># 打印</span></span><br><span class="line">    astr=<span class="string">&#x27; + &#x27;</span>.join([<span class="string">f&#x27;<span class="subst">&#123;item&#125;</span>*x^<span class="subst">&#123;index&#125;</span> &#x27;</span> <span class="keyword">for</span> index,item <span class="keyword">in</span> <span class="built_in">enumerate</span>(a[::-<span class="number">1</span>])][::-<span class="number">1</span>])</span><br><span class="line">    bstr=<span class="string">&#x27; + &#x27;</span>.join([<span class="string">f&#x27;<span class="subst">&#123;item&#125;</span>*x^<span class="subst">&#123;index&#125;</span> &#x27;</span> <span class="keyword">for</span> index,item <span class="keyword">in</span> <span class="built_in">enumerate</span>(b[::-<span class="number">1</span>])][::-<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;    <span class="subst">&#123;astr&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;*   <span class="subst">&#123;bstr&#125;</span>&quot;</span>)</span><br><span class="line">    cstr=<span class="string">&#x27; + &#x27;</span>.join([<span class="string">f&#x27;<span class="subst">&#123;item&#125;</span>*x^<span class="subst">&#123;index&#125;</span> &#x27;</span> <span class="keyword">for</span> index,item <span class="keyword">in</span> <span class="built_in">enumerate</span>(c) <span class="keyword">if</span> item !=<span class="number">0</span>  ][::-<span class="number">1</span>]  )</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;=   <span class="subst">&#123;cstr&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="c代码"><a class="markdownIt-Anchor" href="#c代码"></a> C++代码</h2><p>来自<a href="https://zhuanlan.zhihu.com/p/411082641">知乎</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_complex</span>&#123;</span><br><span class="line">    <span class="type">double</span> x;</span><br><span class="line">    <span class="type">double</span> y;</span><br><span class="line">&#125;;<span class="comment">//手动封装的复数结构体，x为实部，y为虚部</span></span><br><span class="line">_complex a[<span class="number">4096</span>], b[<span class="number">4096</span>];<span class="comment">//用于存储两个多项式的系数</span></span><br><span class="line"><span class="type">bool</span> is_output[<span class="number">4096</span>];<span class="comment">//后面会用到的用于判断是否输出的一串变量</span></span><br><span class="line"><span class="function">_complex <span class="title">omega</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; n, <span class="type">const</span> <span class="type">int</span>&amp; k,<span class="type">bool</span> inverse)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_complex r;</span><br><span class="line"><span class="keyword">if</span> (!inverse)</span><br><span class="line">&#123;</span><br><span class="line">r.x = <span class="built_in">cos</span>(PI * <span class="number">2</span> * k / n);</span><br><span class="line">r.y = <span class="built_in">sin</span>(PI * <span class="number">2</span> * k / n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">r.x = <span class="built_in">cos</span>(PI * <span class="number">2</span> * k / n);</span><br><span class="line">r.y = -<span class="built_in">sin</span>(PI * <span class="number">2</span> * k / n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;<span class="comment">//用于插复根</span></span><br><span class="line"><span class="keyword">inline</span> _complex <span class="keyword">operator</span>*(_complex a, _complex b)</span><br><span class="line">&#123;</span><br><span class="line">_complex r;</span><br><span class="line">r.x = a.x * b.x - a.y * b.y;</span><br><span class="line">r.y = a.x * b.y + a.y * b.x;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> _complex <span class="keyword">operator</span>+(_complex a, _complex b)</span><br><span class="line">&#123;</span><br><span class="line">_complex r;</span><br><span class="line">r.x = a.x + b.x;</span><br><span class="line">r.y = a.y + b.y;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> _complex <span class="keyword">operator</span>-(_complex a, _complex b)</span><br><span class="line">&#123;</span><br><span class="line">_complex r;</span><br><span class="line">r.x = a.x - b.x;</span><br><span class="line">r.y = a.y - b.y;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为没有用到除法，这里我就没有重载除的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Real_DFT</span><span class="params">(_complex* a, <span class="type">bool</span> inverse, <span class="type">int</span> anum)</span><span class="comment">//这个inverse表示是否为反变换，false为否，true表示是</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (anum == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">vector&lt;_complex&gt; buf1, buf2;<span class="comment">//buf1和buf2为两个缓冲数组，用于暂存变换中各项系数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; anum ; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">buf2.<span class="built_in">push_back</span>(a[i]);<span class="comment">//奇数项</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">buf1.<span class="built_in">push_back</span>(a[i]);<span class="comment">//偶数项</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; anum / <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = buf1[i];</span><br><span class="line">a[i + anum / <span class="number">2</span>] = buf2[i];</span><br><span class="line">&#125;<span class="comment">//拆分排序后重新赋值回a，为下一步排序准备</span></span><br><span class="line"><span class="built_in">Real_DFT</span>(a, inverse, anum / <span class="number">2</span>);</span><br><span class="line"><span class="built_in">Real_DFT</span>(a + anum / <span class="number">2</span>, inverse, anum / <span class="number">2</span>);<span class="comment">//奇偶数项拆开后迭代继续拆分</span></span><br><span class="line"><span class="type">int</span> armlength = anum / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; armlength; i++)</span><br><span class="line">&#123;</span><br><span class="line">_complex t = <span class="built_in">omega</span>(anum, i, inverse);</span><br><span class="line">buf1[i] = a[i] + t * a[i + anum / <span class="number">2</span>];<span class="comment">//低次复根走这边插</span></span><br><span class="line">buf2[i] = a[i] - t * a[i + anum / <span class="number">2</span>];<span class="comment">//高次复根走这边插</span></span><br><span class="line">&#125;<span class="comment">//这里继续用到了buf数组只是为了暂存，没有别的意思</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; anum / <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = buf1[i];</span><br><span class="line">a[i + anum / <span class="number">2</span>] = buf2[i];</span><br><span class="line">&#125;<span class="comment">//重新赋值回去</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//inport data</span></span><br><span class="line"><span class="type">int</span> numa = <span class="number">0</span>, numb = <span class="number">0</span>;<span class="comment">//numa是a多项式的项数，numb同理</span></span><br><span class="line">cin &gt;&gt; numa;</span><br><span class="line"><span class="type">int</span> ptr0 = <span class="number">0</span>, maxa = <span class="number">0</span>, sum = <span class="number">0</span>, ptr1 = <span class="number">0</span>,maxb=<span class="number">0</span>;<span class="comment">//maxa存储a多项式中的最高次幂，maxb同理</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;numa; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">maxa = maxa &gt; id ? maxa : id;</span><br><span class="line">cin &gt;&gt; a[id].x;</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; numb;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numb; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">maxb = maxb &gt; id ? maxb : id;</span><br><span class="line">cin &gt;&gt; b[id].x;</span><br><span class="line">&#125;</span><br><span class="line">sum = maxa + maxb;</span><br><span class="line"><span class="comment">//decide complete num</span></span><br><span class="line"><span class="type">int</span> digitnum = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; sum &gt; <span class="number">0</span>; sum &gt;&gt;= <span class="number">1</span>, digitnum++);</span><br><span class="line">sum = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; digitnum &gt; <span class="number">0</span>; sum &lt;&lt;= <span class="number">1</span>, digitnum--);<span class="comment">//由于傅里叶变换要求插值数为2的整数次幂</span></span><br><span class="line"><span class="comment">//这里首先确定多项式相乘后最多的项数也就是sum然后找到第一个比sum大的2的整数次幂的数，将sum重置为这个2的整数次幂</span></span><br><span class="line"><span class="comment">//Fast Fourier Transform</span></span><br><span class="line"><span class="built_in">Real_DFT</span>(a, <span class="literal">false</span>, sum);</span><br><span class="line"><span class="built_in">Real_DFT</span>(b, <span class="literal">false</span>, sum);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sum; i++)</span><br><span class="line">a[i] = a[i] * b[i];<span class="comment">//这一步就是上文没有细讲的点值表达式相乘，还是挺好搞的</span></span><br><span class="line"><span class="built_in">Real_DFT</span>(a, <span class="literal">true</span>, sum);</span><br><span class="line"><span class="comment">//export data</span></span><br><span class="line"><span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= sum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i].x / sum &gt; <span class="number">0.05</span>||a[i].x/sum&lt;<span class="number">-0.05</span>)<span class="comment">//遍历得到的结果，如果这个数的绝对值大于0.05（题目要求的0.1精度，根据四舍五入原则判断），则准备输出</span></span><br><span class="line">&#123;</span><br><span class="line">num++;</span><br><span class="line">is_output[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout  &lt;&lt; num;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = sum; i &gt;=<span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(is_output[i]==<span class="number">1</span>)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; std::fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">1</span>) &lt;&lt; (a[i].x / sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输入</span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2.4</span> <span class="number">0</span> <span class="number">3.2</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">1.5</span> <span class="number">1</span> <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">3.6</span> <span class="number">2</span> <span class="number">6.0</span> <span class="number">1</span> <span class="number">1.6</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;推荐一篇写的很好的&lt;a href=&quot;https://www.renrendoc.com/paper/201816620.html&quot;&gt;课件&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;多项式的表示与乘法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot;</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="多项式乘法" scheme="https://gladdduck.github.io/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B9%98%E6%B3%95/"/>
    
    <category term="快速傅里叶变换" scheme="https://gladdduck.github.io/tags/%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/"/>
    
    <category term="FFT" scheme="https://gladdduck.github.io/tags/FFT/"/>
    
  </entry>
  
  <entry>
    <title>Linux的一些常用命令记录</title>
    <link href="https://gladdduck.github.io/2022/11/17/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://gladdduck.github.io/2022/11/17/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2022-11-17T09:35:08.623Z</published>
    <updated>2022-11-17T10:46:58.367Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看cpu型号</span></span><br><span class="line"><span class="built_in">cat</span> /proc/cpuinfo | grep <span class="string">&#x27;model name&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统</span></span><br><span class="line"><span class="built_in">uname</span> -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看显卡</span></span><br><span class="line">lshw -C display</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果显卡是Nvidia</span></span><br><span class="line">nvidia-smi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台运行程序</span></span><br><span class="line"><span class="built_in">nohup</span> ***** &amp; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有进程</span></span><br><span class="line">ps -aux</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="快捷命令" scheme="https://gladdduck.github.io/categories/%E5%BF%AB%E6%8D%B7%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="Linux快捷命令" scheme="https://gladdduck.github.io/tags/Linux%E5%BF%AB%E6%8D%B7%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>排序算法复杂度</title>
    <link href="https://gladdduck.github.io/2022/11/12/%E6%8E%92%E5%BA%8F%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>https://gladdduck.github.io/2022/11/12/%E6%8E%92%E5%BA%8F%E5%A4%8D%E6%9D%82%E5%BA%A6/</id>
    <published>2022-11-12T13:53:00.287Z</published>
    <updated>2022-11-15T12:59:44.578Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>算法</th><th>稳定性</th><th>空间复杂度</th><th>时间复杂度</th><th>分类</th></tr></thead><tbody><tr><td><em><strong>插入排序</strong></em></td><td>★稳定</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>$O(n^2) $</td><td>插入类</td></tr><tr><td>希尔排序</td><td>不稳定</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>$O(n<sup>{1.3}-n</sup>2) $</td><td>插入类</td></tr><tr><td><em><strong>冒泡排序</strong></em></td><td>★稳定</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td>交换类</td></tr><tr><td>快速排序</td><td>不稳定</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log_2(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>−</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlog_2(n)-n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td>交换类</td></tr><tr><td>选择排序</td><td>不稳定</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td>选择类</td></tr><tr><td>堆排序</td><td>不稳定</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlog_2(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></td><td>选择类</td></tr><tr><td>堆排序</td><td><strong>建堆</strong></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><strong>调整</strong></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log_2(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></td></tr><tr><td><em><strong>归并排序</strong></em></td><td>★稳定</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlog_2(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></td><td></td></tr><tr><td><em><strong>基数排序</strong></em></td><td>★稳定</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>d</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>r</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(d(n+r))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></td><td></td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">后面慢慢补充每个算法的代码</span><br><span class="line">顺便记一下:学校的考试真sb</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算法&lt;/th&gt;
&lt;th&gt;稳定性&lt;/th&gt;
&lt;th&gt;空间复杂度&lt;/th&gt;
&lt;th&gt;时间复杂度&lt;/th&gt;
&lt;th&gt;分类&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;&lt;strong&gt;插入排序&lt;/st</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="排序算法" scheme="https://gladdduck.github.io/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>详解PyTorch中加载数据的方法--Dataset、Dataloader、Sampler、collate-fn</title>
    <link href="https://gladdduck.github.io/2022/11/09/Pytorch%E6%95%B0%E6%8D%AE%E9%9B%86%E5%8A%A0%E8%BD%BD/"/>
    <id>https://gladdduck.github.io/2022/11/09/Pytorch%E6%95%B0%E6%8D%AE%E9%9B%86%E5%8A%A0%E8%BD%BD/</id>
    <published>2022-11-09T10:38:42.428Z</published>
    <updated>2022-11-09T11:28:39.538Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/1651ed9d48c9">转载</a><br /><a href="https://www.jianshu.com/nb/48831659">作者pytorch其他笔记</a></p><p>数据读取是所有训练模型任务中最基础最重要的一步，<code>PyTorch</code>为数据集的读取、加载和使用提供了很好的机制，使得数据加载的工作变得异常简单而且具有非常高的定制性。</p><h2 id="dataset-dataloader-sampler的关系"><a class="markdownIt-Anchor" href="#dataset-dataloader-sampler的关系"></a> Dataset、Dataloader、Sampler的关系</h2><p><code>PyTorch</code>中对于数据集的处理有三个非常重要的类：<code>Dataset</code>、<code>Dataloader</code>、<code>Sampler</code>，它们均是 <code>torch.utils.data </code>包下的模块（类）。它们的关系可以这样理解：</p><ul><li><code>Dataset</code>是数据集的类，主要用于定义数据集</li><li><code>Sampler</code>是采样器的类，用于定义从数据集中选出数据的规则，比如是随机取数据还是按照顺序取等等</li><li><code>Dataloader</code>是数据的加载类，它是对于 <code>Dataset</code>和 <code>Sampler</code>的进一步包装，即其实 <code>Dataset</code>和 <code>Sampler</code>会作为参数传递给 <code>Dataloader</code>，用于实际读取数据，可以理解为它是这个工作的真正实践者，而 <code>Dataset</code>和 <code>Sampler</code>则负责定义。我们训练、测试所获得的数据也是 <code>Dataloader</code>直接给我们的。</li></ul><p><strong>总的来说</strong>，Dataset定义了整个数据集，<code>Sampler</code>提供了取数据的机制，最后由 <code>Dataloader</code>取完成取数据的任务。</p><p>本篇以一个最简单的例子为例，比如有一个文件夹（<code>data-folder</code>）中存储训练的数据（一共30张图片：0.png 到 29.png），他们对应的标签被写在了一个 <code>labels.txt</code>文件中，第n行对应n-1.png的标签，是一个三分类问题，即0、1和2三种标签（虚构的数据集，不具有任何意义）。目录结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|--- Project</span><br><span class="line">   |--- main.py</span><br><span class="line">   |--- labels.txt</span><br><span class="line">   |--- data-folder</span><br><span class="line">      |--- 0.png</span><br><span class="line">      |--- 1.png</span><br><span class="line">      |--- ……</span><br><span class="line">      |--- 29.png</span><br></pre></td></tr></table></figure><h2 id="dataset"><a class="markdownIt-Anchor" href="#dataset"></a> Dataset</h2><p><code>Dataset</code> 位于 <code>torch.utils.data </code>下，我们通过定义继承自这个类的子类来自定义数据集。它有两个最重要的方法需要重写，实际上它们都是类的特殊方法：</p><ul><li><code>__getitem__(self, index)</code>：传入参数 <code>index</code>为下标，返回数据集中对应下标的数据组（数据和标签）</li><li><code>__len__(self)</code>：返回数据集的大小</li></ul><p>简单说，重写了这两个方法的继承自 <code>Dataset</code> 的类都可以作为数据集的定义类使用，即一个 <code>Dataset</code>类的必要结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dataset</span>(torch.utils.data.Dataset):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filepath=<span class="literal">None</span>,dataLen=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>如下就是我们的例子的加载实例，其中的 <code>image2tensor</code> 使用了 <code>torchvision.transforms</code> 完成了一个简单的从 <code>PIL.Image</code> 格式的图片到 <code>tensor</code> 的转换，可以先不必在意，后面会详细地讲到 <code>transforms</code> 这个超级重要的工具：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, images_folder_path, labels_file_path</span>):</span><br><span class="line">        self.images_folder_path = images_folder_path</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(labels_file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            self.labels = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, file.read().splitlines()))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, item</span>):</span><br><span class="line">        image = Image.<span class="built_in">open</span>(os.path.join(self.images_folder_path, <span class="string">&quot;&#123;&#125;.png&quot;</span>.<span class="built_in">format</span>(item)))</span><br><span class="line">        image = self.image2tensor(image)</span><br><span class="line">        label = self.labels[item]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (image, label)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.labels)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">image2tensor</span>(<span class="params">self, image</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        transform PIL.Image to tensor</span></span><br><span class="line"><span class="string">        :param image: image in PIL.Image format</span></span><br><span class="line"><span class="string">        :return: image in tensor format</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        transform = transforms.Compose([</span><br><span class="line">            transforms.ToTensor()</span><br><span class="line">        ])</span><br><span class="line">        image = image.convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> transform(image)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myDataset = MyDataset(<span class="string">&quot;./data-folder/&quot;</span>, <span class="string">&quot;./labels.txt&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="dataloader"><a class="markdownIt-Anchor" href="#dataloader"></a> Dataloader</h2><p><code>Dataloader</code>对 <code>Dataset</code>（和 <code>Sampler</code>等）打包，完成最后对数据的读取的执行工作，一般不需要自己定义或者重写一个 <code>Dataloader</code>的类（或子类），直接使用即可，通过传入参数定制 <code>Dataloader</code>，定制化的功能应该在 <code>Dataset</code>（和 <code>Sampler</code>等）中完成了。</p><p><code>Dataloader</code>的完整签名：<br /><a href="https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader">https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader</a></p><h3 id="dataloader的一些常用参数"><a class="markdownIt-Anchor" href="#dataloader的一些常用参数"></a> Dataloader的一些常用参数</h3><p><code>Dataloader</code>的一些重要的参数如下，除了第一个 <code>dataset</code>参数外，其他均为可选参数：</p><ul><li><code>dataset</code>（第一个参数，必须的参数）：一个 <code>Dataset</code>的实例，即传入的数据集（或者其他可迭代对象）</li><li><code>batch_size</code>：整数值，每个 <code>batch</code>的样本数量，即 <code>batch</code>大小，默认为1</li><li><code>shuffle：bool</code>值，如果设置为 <code>True</code>，则在每个 <code>epoch</code>开始的时候，会对数据集的数据进行重新排序，默认 <code>False</code></li><li><code>sampler</code>：传入一个自定义的 <code>Sampler</code>实例，定义从数据集中取样本的策略，<code>Sampler</code>每次返回一个索引，默认为 <code>None</code></li><li><code>batch_sampler</code>：也是传入一个自定义的 <code>Sampler</code>实例，但是与 <code>sampler</code>参数不同的是，它接收的 <code>Sampler</code>是一次返回一个 batch的索引，默认为 <code>None</code></li><li><code>num_workers</code>：整数值，定义有几个进程来处理数据。0意味着所有的数据都会被加载进主进程，默认0</li><li><code>collate_fn</code>：传入一个函数，它的作用是将一个 <code>batch</code>的样本打包成一个大的 <code>tensor</code>，<code>tensor</code>的第一维就是这些样本，如果没有特殊需求可以保持默认即可（后边会详细介绍）</li><li><code>pin_memory：bool</code>值，如果为 <code>True</code>，那么将加载的数据拷贝到 <code>CUDA</code>中的固定内存中。</li><li><code>drop_last：bool</code>值，如果为 <code>True</code>，则对最后的一个 <code>batch</code>来说，如果不足 <code>batch_size</code>个样本了就舍弃，如果为 <code>False</code>，也会继续正常执行，只是最后的一个 <code>batch</code>可能会小一点（剩多少算多少），默认 <code>False</code></li><li><code>timeout</code>：如果是正数，表明等待从加载一个 <code>batch</code>等待的时间，若超出设定的时间还没有加载完，就放弃这个 <code>batch</code>，如果是0，表示不设置限制时间。默认为0</li></ul><h3 id="dataloader参数之间的互斥"><a class="markdownIt-Anchor" href="#dataloader参数之间的互斥"></a> Dataloader参数之间的互斥</h3><p>值得注意的是，<code>Dataloader</code>的参数之间存在互斥的情况，主要针对自己定义的采样器：</p><ul><li><code>sampler</code>：如果自行指定了 <code>sampler</code>参数，则 <code>shuffle</code>必须保持默认值，即 <code>False</code></li><li><code>batch_sampler</code>：如果自行指定了 <code>batch_sampler</code>参数，则 <code>batch_size</code>、<code>shuffle</code>、<code>sampler</code>、<code>drop_last</code> 都必须保持默认值<br />如果没有指定自己是采样器，那么默认的情况下（即 <code>sampler</code>和 <code>batch_sampler</code>均为 <code>None</code>的情况下），<code>Dataloader</code>的采样策略是如何的呢：</li><li><code>sampler</code>：</li><li><ul><li><code>shuffle = True</code>：<code>sampler</code>采用 <code>RandomSampler</code>，即随机采样</li></ul></li><li><ul><li><code>shuffle = Flase</code>：<code>sampler</code>采用 <code>SequentialSampler</code>，即按照顺序采样</li></ul></li><li><code>batch_sampler</code>：采用 <code>BatchSampler</code>，即根据 <code>batch_size</code> 进行 <code>batch</code>采样</li><li></li></ul><p>上面提到的 <code>RandomSampler</code>、<code>SequentialSampler</code>和 <code>BatchSampler</code>都是 <code>PyTorch</code>自己实现的，且它们都是 <code>Sampler</code>的子类，后边会详述。</p><h3 id="dataloader的实例"><a class="markdownIt-Anchor" href="#dataloader的实例"></a> Dataloader的实例</h3><p>下面我们继续我们的例子，定义 <code>Dataloader</code>的实例，从我们定义的 <code>myDataset</code> 数据集中加载数据，每一个 <code>batch</code>大小为8。并且我们使用了一个循环来验证其工作的情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">myDataloader = DataLoader(myDataset, batch_size=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> myDataloader:</span><br><span class="line">        images, labels = data[<span class="number">0</span>], data[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">len</span>(images))</span><br><span class="line">        <span class="built_in">print</span>(labels)</span><br><span class="line">        <span class="comment"># train your module</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line">tensor([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="number">8</span></span><br><span class="line">tensor([<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>])</span><br><span class="line"><span class="number">8</span></span><br><span class="line">tensor([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line"><span class="number">6</span></span><br><span class="line">tensor([<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="number">8</span></span><br><span class="line">tensor([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="number">8</span></span><br><span class="line">tensor([<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>])</span><br><span class="line"><span class="number">8</span></span><br><span class="line">tensor([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line"><span class="number">6</span></span><br><span class="line">tensor([<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><h2 id="sampler"><a class="markdownIt-Anchor" href="#sampler"></a> Sampler</h2><p><code>Sampler</code>类是一个很抽象的父类，其主要用于设置从一个序列中返回样本的规则，即采样的规则。<code>Sampler</code>是一个可迭代对象，使用 <code>step</code>方法可以返回下一个迭代后的结果，因此其主要的类方法就是 <code>__iter__ </code>方法，定义了迭代后返回的内容。其父类的代码如下（<code>PyTorch 1.7</code>）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sampler</span>(<span class="type">Generic</span>[T_co]):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data_source: <span class="type">Optional</span>[Sized]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>) -&gt; Iterator[T_co]:</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br></pre></td></tr></table></figure><p>从上述代码可见，其实 <code>Sampler</code>父类并没有给出 <code>__iter__</code> 的具体定义，因此，如果我们要定义自己的采样器，就要编写继承自 <code>Sampler</code>的子类，并且重写 <code>__iter__ </code>方法给出迭代返回样本的逻辑。</p><p>但是，正如上文提到的，<code>Dataloader</code>中的 <code>sampler</code>和 <code>batch_sampler</code>参数默认情况下使用的那些采样器（<code>RandomSampler</code>、<code>SequentialSampler</code>和 <code>BatchSampler</code>）一样，<code>PyTorch</code>自己实现了很多 <code>Sampler</code>的子类，这些采样器其实可以完成大部分功能，所以本节主要关注一些 <code>Sampler</code>的子类以及他们的用法，而不过多地讨论如何自己实现一个 <code>Sampler</code>。</p><h3 id="sequentialsampler"><a class="markdownIt-Anchor" href="#sequentialsampler"></a> SequentialSampler</h3><p><code>SequentialSampler</code>就是一个按照顺序进行采样的采样器，接收一个数据集做参数（实际上任何可迭代对象都可），按照顺序对其进行采样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> SequentialSampler</span><br><span class="line"></span><br><span class="line">pseudo_dataset = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> SequentialSampler(pseudo_dataset):</span><br><span class="line">    <span class="built_in">print</span>(data, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> </span><br></pre></td></tr></table></figure><h3 id="randmsampler"><a class="markdownIt-Anchor" href="#randmsampler"></a> RandmSampler</h3><p><code>RandomSampler</code> 即一个随机采样器，返回随机采样的值，第一个参数依然是一个数据集（或可迭代对象）。还有一组参数如下：</p><ul><li><code>replacement：bool</code>值，默认是 <code>False</code>，设置为 <code>True</code>时表示可以采出重复的样本</li><li><code>num_samples</code>：只有在 <code>replacement</code>设置为 <code>True</code>的时候才能设置此参数，表示要采出样本的个数，默认为数据集的总长度。有时候由于 <code>replacement</code>置 <code>True</code>的原因导致重复数据被采样，导致有些数据被采不到，所以往往会设置一个比较大的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> RandomSampler</span><br><span class="line"></span><br><span class="line">pseudo_dataset = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">randomSampler1 = RandomSampler(pseudo_dataset)</span><br><span class="line">randomSampler2 = RandomSampler(pseudo_dataset, replacement=<span class="literal">True</span>, num_samples=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;for random sampler #1: &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> randomSampler1:</span><br><span class="line">    <span class="built_in">print</span>(data, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n\nfor random sampler #2: &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> randomSampler2:</span><br><span class="line">    <span class="built_in">print</span>(data, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> random sampler <span class="comment">#1: </span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">2</span> <span class="number">9</span> <span class="number">3</span> <span class="number">0</span> <span class="number">6</span> <span class="number">8</span> <span class="number">7</span> <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> random sampler <span class="comment">#2: </span></span><br><span class="line"><span class="number">4</span> <span class="number">9</span> <span class="number">0</span> <span class="number">6</span> <span class="number">9</span> <span class="number">3</span> <span class="number">1</span> <span class="number">6</span> <span class="number">1</span> <span class="number">8</span> <span class="number">5</span> <span class="number">0</span> <span class="number">2</span> <span class="number">7</span> <span class="number">2</span> <span class="number">8</span> <span class="number">6</span> <span class="number">4</span> <span class="number">0</span> <span class="number">6</span> </span><br></pre></td></tr></table></figure><h3 id="subsetrandomsampler"><a class="markdownIt-Anchor" href="#subsetrandomsampler"></a> SubsetRandomSampler</h3><p>SubsetRandomSampler 可以设置子集的随机采样，多用于将数据集分成多个集合，比如训练集和验证集的时候使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> SubsetRandomSampler</span><br><span class="line"></span><br><span class="line">pseudo_dataset = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">subRandomSampler1 = SubsetRandomSampler(pseudo_dataset[:<span class="number">7</span>])</span><br><span class="line">subRandomSampler2 = SubsetRandomSampler(pseudo_dataset[<span class="number">7</span>:])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;for subset random sampler #1: &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> subRandomSampler1:</span><br><span class="line">    <span class="built_in">print</span>(data, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n\nfor subset random sampler #2: &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> subRandomSampler2:</span><br><span class="line">    <span class="built_in">print</span>(data, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> subset random sampler <span class="comment">#1: </span></span><br><span class="line"><span class="number">0</span> <span class="number">4</span> <span class="number">6</span> <span class="number">5</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> subset random sampler <span class="comment">#2: </span></span><br><span class="line"><span class="number">7</span> <span class="number">8</span> <span class="number">9</span> </span><br></pre></td></tr></table></figure><h3 id="weightedrandomsampler"><a class="markdownIt-Anchor" href="#weightedrandomsampler"></a> WeightedRandomSampler</h3><p><code>WeightedRandomSampler</code>和 <code>RandomSampler</code>的参数一致，但是不在传入一个 <code>dataset</code>，第一个参数变成了 <code>weights</code>，只接收一个一定长度的 <code>list</code>作为 <code>weights</code> 参数，表示采样的权重，采样时会根据权重随机从 <code>list(range(len(weights)))</code> 中采样，即 <code>WeightedRandomSampler</code>并不需要传入样本集，而是只在一个根据 <code>weights</code>长度创建的数组中采样，所以采样的结果可能需要进一步处理才能使用。<code>weights</code>的所有元素之和不需要为1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> WeightedRandomSampler</span><br><span class="line"></span><br><span class="line">pseudo_dataset = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">weights = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">weightedRandomSampler = WeightedRandomSampler(weights, replacement=<span class="literal">True</span>, num_samples=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> weightedRandomSampler:</span><br><span class="line">    <span class="built_in">print</span>(data, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="number">7</span> <span class="number">8</span> <span class="number">7</span> <span class="number">7</span> <span class="number">9</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">5</span> <span class="number">5</span> <span class="number">9</span> <span class="number">9</span> <span class="number">6</span> <span class="number">5</span> <span class="number">8</span> <span class="number">9</span> <span class="number">6</span> <span class="number">5</span> </span><br></pre></td></tr></table></figure><h3 id="batchsampler"><a class="markdownIt-Anchor" href="#batchsampler"></a> BatchSampler</h3><p>以上的四个 <code>Sampler</code>在每次迭代都只返回一个索引，而 <code>BatchSampler</code>的作用是对上述这类返回一个索引的采样器进行包装，按照设定的 <code>batch_size</code>返回一组索引，因其他的参数和上述的有些不同：</p><ul><li><code>sampler</code>：一个 <code>Sampler</code>对象（或者一个可迭代对象）</li><li><code>batch_size</code>：batch的大小</li><li><code>drop_last</code>：是否丢弃最后一个可能不足 <code>batch_size</code>大小的数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> BatchSampler</span><br><span class="line">pseudo_dataset = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">batchSampler1 = BatchSampler(pseudo_dataset, batch_size=<span class="number">3</span>, drop_last=<span class="literal">False</span>)</span><br><span class="line">batchSampler2 = BatchSampler(pseudo_dataset, batch_size=<span class="number">3</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;for batch sampler #1: &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> batchSampler1:</span><br><span class="line">    <span class="built_in">print</span>(data, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n\nfor batch sampler #2: &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> batchSampler2:</span><br><span class="line">    <span class="built_in">print</span>(data, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> batch sampler <span class="comment">#1: </span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>] [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>] [<span class="number">9</span>] </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> batch sampler <span class="comment">#2: </span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>] [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>] </span><br></pre></td></tr></table></figure><h2 id="collate_fn"><a class="markdownIt-Anchor" href="#collate_fn"></a> collate_fn</h2><p><code>Dataloader</code>其实还有一个比较重要的参数是 <code>collate_fn</code>，它接收一个 <code>callable</code>对象，比如一个函数，它的作用是将每次迭代出来的数据打包成 <code>batch</code>。</p><p>举个例子，如果我们在 <code>Dataloader</code>中设置了 <code>batch_size</code>为8，实际上，从 <code>Dataloader</code>所读取的数据集Dataset中取出数据时得到的是单独的数据，比如我们的例子中，每次采样得到一个 <code>tuple：(image, label)</code>，因此 <code>collate_fn</code> 的作用就有了，它负责包装 <code>batch</code>，即每从数据集中抽出8个这样的 <code>tuple</code>，它负责把8个 <code>(image, label)</code>包装成一个 <code>list: [images, labels]</code>，这个 <code>list</code>有两个元素，每一个是一个 <code>tensor</code>，比如第一个元素，实际上是一个 <code>8×size(image)</code> 的tensor，即给原来的数据增加了一维，也就是最前边的 <code>batch</code>的维度，<code>labels</code>也同理。</p><p>有时候我们可能会需要实现自己的包装逻辑，所以需要自定义一个函数来完成定制化的如上的内容，只要将该函数名传递给 <code>collate_fn</code>参数即可。</p><h2 id="pytorch集成的数据集"><a class="markdownIt-Anchor" href="#pytorch集成的数据集"></a> PyTorch集成的数据集</h2><p>实际上，<code>PyTorch</code>提供了很多常用数据集的接口，如果使用这些数据集的话，可以直接使用对应的包加载，会方便很多，比如：</p><ul><li><code>torchvision.datasets</code> 就提供了很多视觉方向的数据集：<a href="https://pytorch.org/docs/stable/torchvision/datasets.html?highlight=torchvision%20datasets">https://pytorch.org/docs/stable/torchvision/datasets.html?highlight=torchvision datasets</a></li><li><code>torchtext</code> 则提供了很多文本处理方向的数据集</li><li><code>torchaudio</code> 提供了很多音频处理方向的数据集</li></ul><p>当然 <code>PyTorch</code>也可以配合其他包来获得数据以及对数据进行处理，比如：</p><ul><li>对于视觉方面，配合 <code>Pillow、OpenCV</code>等</li><li>对于音频处理方面，配合 <code>scipy、librosa</code>等</li><li>对于文本处理方面，配合 <code>Cython、NLTK、SpaCy</code>等</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/1651ed9d48c9&quot;&gt;转载&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.jianshu.com/nb/48831659&quot;&gt;作者pytorch其他笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;数据读取</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Dataset" scheme="https://gladdduck.github.io/tags/Dataset/"/>
    
    <category term="Dataloader" scheme="https://gladdduck.github.io/tags/Dataloader/"/>
    
    <category term="Sampler" scheme="https://gladdduck.github.io/tags/Sampler/"/>
    
    <category term="collate_fn" scheme="https://gladdduck.github.io/tags/collate-fn/"/>
    
  </entry>
  
  <entry>
    <title>Cypher学习笔记</title>
    <link href="https://gladdduck.github.io/2022/11/05/cypther/"/>
    <id>https://gladdduck.github.io/2022/11/05/cypther/</id>
    <published>2022-11-05T09:16:38.119Z</published>
    <updated>2022-11-05T09:19:43.134Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CQL:C-ypher Q-uery L-nguage</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 中文:http://neo4j.com.cn/public/cypher/default.html</span></span><br><span class="line"><span class="comment"># ★英文:https://neo4j.com/docs/cypher-manual/current/introduction/</span></span><br><span class="line"><span class="comment"># 中文:https://www.w3cschool.cn/neo4j/</span></span><br></pre></td></tr></table></figure><h1 id="表达式"><a class="markdownIt-Anchor" href="#表达式"></a> 表达式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (n:Person)</span><br><span class="line">RETURN</span><br><span class="line">CASE </span><br><span class="line">  WHEN n.born&gt;<span class="number">1980</span>  THEN <span class="number">1</span></span><br><span class="line">  WHEN n.born&lt;<span class="number">1980</span> THEN <span class="number">2</span></span><br><span class="line">  ELSE <span class="number">3</span></span><br><span class="line">END AS result</span><br><span class="line">limit <span class="number">5</span></span><br></pre></td></tr></table></figure><pre><code>[&#123;'result': 2&#125;, &#123;'result': 2&#125;, &#123;'result': 2&#125;, &#123;'result': 2&#125;, &#123;'result': 2&#125;]</code></pre><h3 id="list"><a class="markdownIt-Anchor" href="#list"></a> list</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">RETURN <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>)[<span class="number">0.</span>.-<span class="number">5</span>]</span><br><span class="line">//[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]左闭右开</span><br></pre></td></tr></table></figure><pre><code>[&#123;'range(0, 10)': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">RETURN [x IN <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>) WHERE x % <span class="number">2</span> = <span class="number">0</span> ] AS result</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">RETURN [x IN <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>) | x^<span class="number">3</span> ] AS result</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (a:Person &#123;name: <span class="string">&#x27;Keanu Reeves&#x27;</span>&#125;)</span><br><span class="line">RETURN [(a)--&gt;(b:Movie) WHERE b.title CONTAINS <span class="string">&#x27;Matrix&#x27;</span> | b.released] AS years</span><br></pre></td></tr></table></figure><pre><code>[&#123;'years': [1999, 2003, 2003]&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (a:Person &#123;name: <span class="string">&#x27;Keanu Reeves&#x27;</span>&#125;)</span><br><span class="line">WITH [(a)--&gt;(b:Movie) | b.released] AS years</span><br><span class="line">UNWIND years AS year</span><br><span class="line">WITH year ORDER BY year</span><br><span class="line">RETURN COLLECT(year) AS sorted_years</span><br></pre></td></tr></table></figure><pre><code>[&#123;'sorted_years': [1995, 1997, 1999, 2000, 2003, 2003, 2003]&#125;]</code></pre><h3 id="map"><a class="markdownIt-Anchor" href="#map"></a> map</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (actor:Person)-[:ACTED_IN]-&gt;(movie:Movie)</span><br><span class="line">WITH actor, count(movie) AS nbrOfMovies</span><br><span class="line">RETURN actor&#123;.name, nbrOfMovies&#125;</span><br><span class="line">limit <span class="number">5</span></span><br></pre></td></tr></table></figure><pre><code>[&#123;'actor': &#123;'nbrOfMovies': 1, 'name': 'Emil Eifrem'&#125;&#125;, &#123;'actor': &#123;'nbrOfMovies': 7, 'name': 'Keanu Reeves'&#125;&#125;, &#123;'actor': &#123;'nbrOfMovies': 3, 'name': 'Laurence Fishburne'&#125;&#125;, &#123;'actor': &#123;'nbrOfMovies': 5, 'name': 'Hugo Weaving'&#125;&#125;, &#123;'actor': &#123;'nbrOfMovies': 3, 'name': 'Carrie-Anne Moss'&#125;&#125;]</code></pre><h3 id="null"><a class="markdownIt-Anchor" href="#null"></a> null</h3><h1 id="基础语法"><a class="markdownIt-Anchor" href="#基础语法"></a> 基础语法</h1><p><a href="https://neo4j.com/docs/cypher-manual/current/clauses/">官网</a></p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>CREATE</td><td>创建节点\关系\属性</td></tr><tr><td>MATCH</td><td>检索节点\关系\属性</td></tr><tr><td>RETURN</td><td>返回查询结果</td></tr><tr><td>WHERE</td><td>提供过滤条件</td></tr><tr><td>DELETE</td><td>删除节点\关系</td></tr><tr><td>REMOVE</td><td>删除节点\关系的属性\标签</td></tr><tr><td>ORDER BY</td><td>排序检索数据</td></tr><tr><td>SET</td><td>添加或更新标签</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%load_ext icypher</span><br><span class="line">%cypher http://neo4j:<span class="number">111222</span>@localhost:<span class="number">7474</span>/db/data</span><br></pre></td></tr></table></figure><h2 id="create"><a class="markdownIt-Anchor" href="#create"></a> CREATE</h2><ul><li>创建没有属性的节点</li><li>使用属性创建节点</li><li>在没有属性的节点之间创建关系</li><li>使用属性创建节点之间的关系</li><li>为节点或关系创建单个或多个标签</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">CREATE (dept:Dept &#123; deptno:<span class="number">10</span>,dname:<span class="string">&#x27;Accounting&#x27;</span>,location:<span class="string">&#x27;苏州&#x27;</span>,isperson:true &#125;)</span><br><span class="line">//一个节点多个属性一个标签</span><br></pre></td></tr></table></figure><pre><code>[]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">create (m:MOVIE:Cinema:Film:Picture&#123;labels:true&#125;)</span><br><span class="line">//一个节点多个标签</span><br></pre></td></tr></table></figure><pre><code>[]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line"><span class="keyword">match</span> (n:MOVIE:Cinema)</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">//区分大小写</span><br></pre></td></tr></table></figure><pre><code>[&#123;'n': Node('Cinema', 'Film', 'MOVIE', 'Picture')&#125;, &#123;'n': Node('Cinema', 'Film', 'MOVIE', 'Picture', labels=True)&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配合json使用</span></span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#   &#x27;props&#x27; : [ &#123;</span></span><br><span class="line"><span class="comment">#     &#x27;name&#x27; : &#x27;Andy&#x27;,</span></span><br><span class="line"><span class="comment">#     &#x27;position&#x27; : &#x27;Developer&#x27;</span></span><br><span class="line"><span class="comment">#   &#125;, &#123;</span></span><br><span class="line"><span class="comment">#     &#x27;name&#x27; : &#x27;Michael&#x27;,</span></span><br><span class="line"><span class="comment">#     &#x27;position&#x27; : &#x27;Developer&#x27;</span></span><br><span class="line"><span class="comment">#   &#125; ]</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># UNWIND $props AS map</span></span><br><span class="line"><span class="comment"># CREATE (n)</span></span><br><span class="line"><span class="comment"># SET n = map</span></span><br></pre></td></tr></table></figure><h2 id="match"><a class="markdownIt-Anchor" href="#match"></a> MATCH</h2><ul><li>从数据库获取有关节点和属性的数据</li><li>从数据库获取有关节点，关系和属性的数据</li><li><strong>需要和别的语句搭配使用</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (p:Dept &#123;location:<span class="string">&#x27;苏州&#x27;</span>&#125;) RETURN p.location</span><br><span class="line">//这是注释 不能放上面</span><br></pre></td></tr></table></figure><pre><code>[&#123;'p.location': '苏州'&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (p:Dept)</span><br><span class="line">WHERE p.location = <span class="string">&#x27;苏州&#x27;</span></span><br><span class="line">RETURN p</span><br><span class="line">//等价上面的</span><br></pre></td></tr></table></figure><pre><code>[&#123;'p': Node('Dept', deptno=10, dname='Accounting', isperson=True, location='苏州')&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (director:Movie)--(movie)</span><br><span class="line">RETURN movie</span><br><span class="line">limit <span class="number">5</span></span><br><span class="line">//--表示关系 不考虑方向(--&gt;)和属性</span><br></pre></td></tr></table></figure><pre><code>[&#123;'movie': Node('Person', born=1978, name='Emil Eifrem')&#125;, &#123;'movie': Node('Person', born=1952, name='Joel Silver')&#125;, &#123;'movie': Node('Person', born=1965, name='Lana Wachowski')&#125;, &#123;'movie': Node('Person', born=1967, name='Lilly Wachowski')&#125;, &#123;'movie': Node('Person', born=1960, name='Hugo Weaving')&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (wallstreet &#123;title: <span class="string">&#x27;Joe Versus the Volcano&#x27;</span>&#125;)&lt;-[:ACTED_IN|DIRECTED]-(person)</span><br><span class="line">RETURN person.name</span><br><span class="line">limit <span class="number">5</span></span><br><span class="line">//查询多个关系</span><br><span class="line">//如果关系名字里面有空格 用反引号``</span><br><span class="line">//[:TYPE*minHops..maxHops] 代表关系的长度</span><br><span class="line">//shortestPath((martin)-[*.<span class="number">.15</span>]-(oliver)) 最短路径,最大长度为<span class="number">15</span></span><br></pre></td></tr></table></figure><pre><code>[&#123;'person.name': 'Meg Ryan'&#125;, &#123;'person.name': 'Tom Hanks'&#125;, &#123;'person.name': 'John Patrick Stanley'&#125;, &#123;'person.name': 'Nathan Lane'&#125;, &#123;'person.name': 'Meg Ryan'&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (charlie &#123;name: <span class="string">&#x27;Tom Hanks&#x27;</span>&#125;)-[:ACTED_IN]-&gt;(movie)&lt;-[:DIRECTED]-(director)</span><br><span class="line">RETURN movie.title, director.name</span><br><span class="line">limit <span class="number">5</span></span><br></pre></td></tr></table></figure><pre><code>[&#123;'movie.title': &quot;You've Got Mail&quot;, 'director.name': 'Nora Ephron'&#125;, &#123;'movie.title': 'Sleepless in Seattle', 'director.name': 'Nora Ephron'&#125;, &#123;'movie.title': 'Joe Versus the Volcano',  'director.name': 'John Patrick Stanley'&#125;, &#123;'movie.title': 'That Thing You Do', 'director.name': 'Tom Hanks'&#125;, &#123;'movie.title': 'Cloud Atlas', 'director.name': 'Tom Tykwer'&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># OPTIONAL MATCH </span></span><br><span class="line"><span class="comment"># using nulls for missing parts </span></span><br></pre></td></tr></table></figure><h2 id="return"><a class="markdownIt-Anchor" href="#return"></a> RETURN</h2><ul><li>检索节点的某些属性</li><li>检索节点的所有属性</li><li>检索节点和关联关系的某些属性</li><li>检索节点和关联关系的所有属性</li><li><strong>需要和别的语句搭配使用</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># return * return 所有出现过的变量</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (`This isn\<span class="string">&#x27;t a common variable`)</span></span><br><span class="line"><span class="string">WHERE `This isn\&#x27;t a common variable`.name = &#x27;</span>Kiefer Sutherland<span class="string">&#x27;</span></span><br><span class="line"><span class="string">RETURN `This isn\&#x27;t a common variable`.born  as othername</span></span><br><span class="line"><span class="string">//DISTINCT 返回不重复的值</span></span><br></pre></td></tr></table></figure><pre><code>[&#123;'othername': 1966&#125;, &#123;'othername': 1966&#125;]</code></pre><h2 id="creatematchreturn"><a class="markdownIt-Anchor" href="#creatematchreturn"></a> CREATE+MATCH+RETURN</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">CREATE (e:Customer&#123;<span class="built_in">id</span>:<span class="string">&#x27;1001&#x27;</span>,name:<span class="string">&#x27;Abc&#x27;</span>,dob:<span class="string">&#x27;01/10/1982&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><pre><code>[]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">CREATE (cc:CreditCard&#123;<span class="built_in">id</span>:<span class="string">&#x27;5001&#x27;</span>,number:<span class="string">&#x27;1234567890&#x27;</span>,cvv:<span class="string">&#x27;888&#x27;</span>,expiredate:<span class="string">&#x27;20/17&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><pre><code>[]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 使用现有节点创建没有属性的关系</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">%%cypher</span><br><span class="line"><span class="keyword">match</span> (e:Customer),(cc:CreditCard)</span><br><span class="line">create (e)-[r:DO_SHOPPING_WITH]-&gt;(cc)</span><br><span class="line">RETURN r</span><br><span class="line">//不加<span class="keyword">return</span> 也可以</span><br><span class="line">//只能创建有向关系,查询的时候可以查双向关系</span><br></pre></td></tr></table></figure><pre><code>[&#123;'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'))&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (e:Customer)-[r ]-&gt;(cc) </span><br><span class="line">RETURN r</span><br></pre></td></tr></table></figure><pre><code>[&#123;'r': second_relation(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'))&#125;, &#123;'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'))&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH whole=(e)-[r ]-&gt;(cc:Movie) </span><br><span class="line">RETURN whole</span><br><span class="line">limit <span class="number">5</span></span><br></pre></td></tr></table></figure><pre><code>[&#123;'whole': Path(Node('Person', born=1978, name='Emil Eifrem'), ACTED_IN(Node('Person', born=1978, name='Emil Eifrem'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))&#125;, &#123;'whole': Path(Node('Person', born=1952, name='Joel Silver'), PRODUCED(Node('Person', born=1952, name='Joel Silver'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))&#125;, &#123;'whole': Path(Node('Person', born=1965, name='Lana Wachowski'), DIRECTED(Node('Person', born=1965, name='Lana Wachowski'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))&#125;, &#123;'whole': Path(Node('Person', born=1967, name='Lilly Wachowski'), DIRECTED(Node('Person', born=1967, name='Lilly Wachowski'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))&#125;, &#123;'whole': Path(Node('Person', born=1960, name='Hugo Weaving'), ACTED_IN(Node('Person', born=1960, name='Hugo Weaving'), Node('Movie', released=1999, tagline='Welcome to the Real World', title='The Matrix')))&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 使用现有节点创建有属性的关系</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line"><span class="keyword">match</span> (e:Customer),(cc:CreditCard)</span><br><span class="line">create (e)-[r:DO_SHOPPING_WITH&#123;shopdata:<span class="string">&#x27;12/12/2014&#x27;</span>,price:<span class="number">5500</span>&#125;]-&gt;(cc)</span><br><span class="line">RETURN r</span><br></pre></td></tr></table></figure><pre><code>[&#123;'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'), price=5500, shopdata='12/12/2014')&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3.使用新节点创建有/无属性的关系</span></span><br><span class="line"><span class="comment"># 和1.2.的区别是 1.2.需要先match</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">create (fb1:FaceBookProfile)-[like:LIKES]-&gt;(fb2:FaceBookProfile)</span><br><span class="line">//创建了两个新节点喝一个新关系</span><br></pre></td></tr></table></figure><pre><code>[]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">create (video1:YoutubeVideo&#123;title:<span class="string">&#x27;Action Movie1&#x27;</span>,update_by:<span class="string">&#x27;Abc&#x27;</span>,uploaded_data:<span class="string">&#x27;10/10/2010&#x27;</span>&#125;)</span><br><span class="line">-[movie:ACTION_MOVIES&#123;rating:<span class="number">1</span>&#125;]-&gt;</span><br><span class="line">(video2:YoutubeVideo&#123;title:<span class="string">&#x27;Action Movie2&#x27;</span>,update_by:<span class="string">&#x27;Xyz&#x27;</span>,uploaded_data:<span class="string">&#x27;12/12/2012&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><pre><code>[]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line"><span class="keyword">match</span> (cust)-[r:DO_SHOPPING_WITH]-&gt;(cc)</span><br><span class="line"><span class="keyword">return</span> cust,r,cc</span><br></pre></td></tr></table></figure><pre><code>[&#123;'cust': Node('Customer', dob='01/10/1982', id='1001', name='Abc'),  'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')),  'cc': Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')&#125;, &#123;'cust': Node('Customer', dob='01/10/1982', id='1001', name='Abc'),  'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')),  'cc': Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')&#125;, &#123;'cust': Node('Customer', dob='01/10/1982', id='1001', name='Abc'),  'r': DO_SHOPPING_WITH(Node('Customer', dob='01/10/1982', id='1001', name='Abc'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'), price=5500, shopdata='12/12/2014'),  'cc': Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890')&#125;]</code></pre><h2 id="where"><a class="markdownIt-Anchor" href="#where"></a> WHERE</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WHERE &lt;condition&gt; &lt;boolean-operator&gt; &lt;condition&gt; </span><br><span class="line">&lt;condition&gt;:            &lt;property-name&gt; &lt;comparison-operator&gt; &lt;value&gt;  </span><br><span class="line">&lt;comparison-operator&gt;:  =/&lt;&gt;/&lt;/&gt;/&lt;=/&gt;=/=~(正则)</span><br><span class="line">&lt;boolean-operator&gt;:     AND/OR/NOT/XOR</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (emp:YoutubeVideo) </span><br><span class="line">WHERE emp.aaaaa = <span class="string">&#x27;Xyz&#x27;</span></span><br><span class="line">RETURN <span class="built_in">id</span>(emp)</span><br><span class="line">//没有的属性认为<span class="literal">False</span></span><br></pre></td></tr></table></figure><pre><code>[]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (emp:YoutubeVideo) </span><br><span class="line">WHERE emp.update_by = <span class="string">&#x27;Abc&#x27;</span> OR emp.update_by = <span class="string">&#x27;Xyz&#x27;</span></span><br><span class="line">RETURN <span class="built_in">id</span>(emp)</span><br><span class="line">//查询</span><br></pre></td></tr></table></figure><pre><code>[&#123;'id(emp)': 231&#125;, &#123;'id(emp)': 232&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line"><span class="keyword">match</span> (n:Dept),(c:CreditCard)</span><br><span class="line">where n.location=<span class="string">&#x27;苏州&#x27;</span> <span class="keyword">and</span> c.cvv=<span class="string">&#x27;888&#x27;</span></span><br><span class="line">create (n)-[r:no_relations&#123;prop:<span class="string">&#x27;随机创建的&#x27;</span>&#125;]-&gt;(c)</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">//创建 数字也要用<span class="string">&#x27;&#x27;</span>,直接<span class="number">888</span>查不到,创建的时候用<span class="string">&#x27;&#x27;</span>了</span><br></pre></td></tr></table></figure><pre><code>[&#123;'r': no_relations(Node('Dept', deptno=10, dname='Accounting', isperson=True, location='苏州'), Node('CreditCard', cvv='888', expiredate='20/17', id='5001', number='1234567890'), prop='随机创建的')&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (n:Person)</span><br><span class="line">WHERE n[<span class="string">&#x27;born&#x27;</span>] &gt; <span class="number">1980</span></span><br><span class="line">RETURN n.name, n.born</span><br><span class="line">limit <span class="number">5</span></span><br><span class="line">//n.name CONTAINS <span class="string">&#x27;ete&#x27;</span></span><br><span class="line">//n.name ENDS WITH <span class="string">&#x27;ter&#x27;</span></span><br><span class="line">//WHERE n.name STARTS WITH <span class="string">&#x27;Pet&#x27;</span></span><br></pre></td></tr></table></figure><pre><code>[&#123;'n.name': 'Jonathan Lipnicki', 'n.born': 1996&#125;, &#123;'n.name': 'Natalie Portman', 'n.born': 1981&#125;, &#123;'n.name': 'Emile Hirsch', 'n.born': 1985&#125;, &#123;'n.name': 'Rain', 'n.born': 1982&#125;, &#123;'n.name': 'Jonathan Lipnicki', 'n.born': 1996&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (n:Person)-[r]-&gt;()</span><br><span class="line">WHERE n.name=<span class="string">&#x27;Angela Scope&#x27;</span> AND <span class="built_in">type</span>(r) =~ <span class="string">&#x27;F.*&#x27;</span></span><br><span class="line">RETURN <span class="built_in">type</span>(r), r</span><br><span class="line">limit <span class="number">5</span></span><br><span class="line">//A开头的关系</span><br></pre></td></tr></table></figure><pre><code>[&#123;'type(r)': 'FOLLOWS',  'r': FOLLOWS(Node('Person', name='Angela Scope'), Node('Person', name='Jessica Thompson'))&#125;, &#123;'type(r)': 'FOLLOWS',  'r': FOLLOWS(Node('Person', name='Angela Scope'), Node('Person', name='Jessica Thompson'))&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (person:Person),(f:Person)</span><br><span class="line">WHERE EXISTS &#123;</span><br><span class="line">  MATCH (person)-[:FOLLOWS]-&gt;(f)</span><br><span class="line">  WHERE person.name = <span class="string">&#x27;Paul Blythe&#x27;</span> </span><br><span class="line">&#125;</span><br><span class="line">RETURN f.name AS name</span><br><span class="line">//嵌套查询 内层可用外层变量</span><br></pre></td></tr></table></figure><pre><code>[&#123;'name': 'Angela Scope'&#125;, &#123;'name': 'Angela Scope'&#125;]</code></pre><h2 id="delete"><a class="markdownIt-Anchor" href="#delete"></a> DELETE</h2><ul><li>删除节点</li><li>删除关系</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (e:Film) delete  e</span><br></pre></td></tr></table></figure><pre><code>[]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line"><span class="keyword">match</span> (n:Customer)-[r]-(c:CreditCard) delete n,c,r</span><br><span class="line">//删除节点时必要保证节点没有其他的关系相连</span><br></pre></td></tr></table></figure><pre><code>[]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (n:Movie)</span><br><span class="line">DETACH DELETE n</span><br><span class="line">//删除节点和相连的关系</span><br></pre></td></tr></table></figure><pre><code>[]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line"><span class="keyword">match</span> (n)-[r]-(c:Dept) <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure><pre><code>[]</code></pre><h2 id="removw"><a class="markdownIt-Anchor" href="#removw"></a> REMOVW</h2><ul><li>删除节点或关系的标签</li><li>删除节点或关系的属性</li><li>keys(n) 查看n的所有属性</li><li>labels(n) 查看n的所有标签</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">create (book:Book &#123;<span class="built_in">id</span>:<span class="number">122</span>,title:<span class="string">&#x27;Neo4j TUtorial&#x27;</span>,pages:<span class="number">333</span>,price:<span class="number">250</span>&#125;)</span><br><span class="line"><span class="keyword">return</span> book</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>[&#123;'book': Node('Book', id=122, pages=333, price=250, title='Neo4j TUtorial')&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line"><span class="keyword">match</span> (book:Book&#123;<span class="built_in">id</span>:<span class="number">122</span>&#125;)</span><br><span class="line">remove book.noattr</span><br><span class="line"><span class="keyword">return</span> book</span><br><span class="line">//没有这个属性也可以</span><br></pre></td></tr></table></figure><pre><code>[&#123;'book': Node('Book', id=122, pages=333, title='Neo4j TUtorial')&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line"><span class="keyword">match</span> (n:label1)</span><br><span class="line">remove n:label1</span><br><span class="line"><span class="keyword">return</span> n</span><br></pre></td></tr></table></figure><pre><code>[&#123;'n': Node('label2', 'label3', 'label4', labels=True)&#125;]</code></pre><h2 id="set"><a class="markdownIt-Anchor" href="#set"></a> SET</h2><ul><li>向现有节点或关系添加新属性</li><li>添加或更新属性值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line"><span class="keyword">match</span> (n:Dept)</span><br><span class="line"><span class="built_in">set</span> n.dname=<span class="string">&#x27;帅哥&#x27;</span> ,n.<span class="built_in">type</span>=<span class="string">&#x27;666&#x27;</span></span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">//有就修改 没有添加</span><br></pre></td></tr></table></figure><pre><code>[&#123;'n': Node('Dept', deptno=10, dname='帅哥', location='Hyderabad', type='666')&#125;, &#123;'n': Node('Dept', deptno=10, dname='帅哥', isperson=True, location='苏州', type='666')&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (book:Book&#123;&#125;) </span><br><span class="line">SET book+=&#123;title:<span class="string">&#x27;neo4j tutorial&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">return</span> book</span><br><span class="line">//book=&#123;offline:<span class="literal">True</span>&#125;会把原有是属性值全部删掉 book+=&#123;offline:<span class="literal">True</span>&#125; 不会删除原有属性 新增一个属性</span><br></pre></td></tr></table></figure><pre><code>[&#123;'book': Node('Book', offline=True, title='neo4j tutorial')&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (book:Book&#123;&#125;)  SET book:Knowledge RETURN book</span><br><span class="line">//新增一个标签</span><br></pre></td></tr></table></figure><pre><code>[&#123;'book': Node('Book', 'Knowledge', offline=True, title='neo4j tutorial')&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (book:Book&#123;&#125;) </span><br><span class="line">SET book.addtitle=book.title</span><br><span class="line">remove book.title</span><br><span class="line"><span class="keyword">return</span> book</span><br></pre></td></tr></table></figure><pre><code>[&#123;'book': Node('Book', 'Knowledge', addtitle='neo4j tutorial', offline=True)&#125;, &#123;'book': Node('Book')&#125;, &#123;'book': Node('Book', addtitle='neo4j start', offline=True)&#125;, &#123;'book': Node('Book', addtitle='neo4j end', offline=False)&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (n &#123;dname: <span class="string">&#x27;帅哥&#x27;</span>&#125;)</span><br><span class="line">SET (CASE WHEN n.<span class="built_in">type</span> = <span class="number">666</span> THEN n END).worksIn = <span class="string">&#x27;Malmo&#x27;</span></span><br><span class="line">RETURN n</span><br><span class="line">//只有n.<span class="built_in">type</span> = <span class="number">666</span> 才设置</span><br></pre></td></tr></table></figure><pre><code>[&#123;'n': Node('Dept', deptno=10, dname='帅哥', location='Hyderabad', type='666')&#125;, &#123;'n': Node('Dept', deptno=10, dname='帅哥', isperson=True, location='苏州', type='666')&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#   &#x27;props&#x27; : &#123;</span></span><br><span class="line"><span class="comment">#     &#x27;name&#x27; : &#x27;Andy&#x27;,</span></span><br><span class="line"><span class="comment">#     &#x27;position&#x27; : &#x27;Developer&#x27;</span></span><br><span class="line"><span class="comment">#   &#125;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># MATCH (n &#123;name: &#x27;Andy&#x27;&#125;)</span></span><br><span class="line"><span class="comment"># SET n = $props</span></span><br><span class="line"><span class="comment"># RETURN n.name, n.position, n.age, n.hungry</span></span><br></pre></td></tr></table></figure><h2 id="order-by"><a class="markdownIt-Anchor" href="#order-by"></a> ORDER BY</h2><ul><li>默认是升序排列 DESC改为降序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line"><span class="keyword">match</span> (movie:Movie)</span><br><span class="line"><span class="keyword">return</span> movie.released,movie.title</span><br><span class="line">order by movie.released DESC , movie.title</span><br><span class="line">limit <span class="number">15</span></span><br><span class="line">//多个属性排列</span><br></pre></td></tr></table></figure><pre><code>[&#123;'movie.released': None, 'movie.title': 'The Matrix'&#125;, &#123;'movie.released': None, 'movie.title': 'The Matrix'&#125;, &#123;'movie.released': None, 'movie.title': 'The Matrix Reloaded'&#125;, &#123;'movie.released': None, 'movie.title': 'The Matrix Reloaded'&#125;, &#123;'movie.released': None, 'movie.title': 'The Matrix Revolutions'&#125;, &#123;'movie.released': None, 'movie.title': 'The Matrix Revolutions'&#125;]</code></pre><h2 id="union-all"><a class="markdownIt-Anchor" href="#union-all"></a> UNION [ALL]</h2><ul><li>将两个不同的结果合并</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">create (n:CreditCard&#123;<span class="built_in">id</span>:<span class="number">1</span>,name:<span class="string">&#x27;ABX XYZ&#x27;</span>,number:<span class="string">&#x27;1234567890&#x27;</span>,cvv:<span class="number">1230</span>,valid_from:<span class="string">&#x27;6/14&#x27;</span>,valid_to:<span class="string">&#x27;6/24&#x27;</span>&#125;)</span><br><span class="line">,(n1:CreditCard&#123;<span class="built_in">id</span>:<span class="number">2</span>,name:<span class="string">&#x27;ABX1 XYZ1&#x27;</span>,number:<span class="string">&#x27;1234567891&#x27;</span>,cvv:<span class="number">1231</span>,valid_from:<span class="string">&#x27;6/141&#x27;</span>,valid_to:<span class="string">&#x27;6/241&#x27;</span>&#125;)</span><br><span class="line">,(n2:CreditCard&#123;<span class="built_in">id</span>:<span class="number">3</span>,name:<span class="string">&#x27;ABX2 XYZ2&#x27;</span>,number:<span class="string">&#x27;1234567892&#x27;</span>,cvv:<span class="number">1232</span>,valid_from:<span class="string">&#x27;6/142&#x27;</span>,valid_to:<span class="string">&#x27;6/242&#x27;</span>&#125;)</span><br><span class="line">,(n3:CreditCard&#123;<span class="built_in">id</span>:<span class="number">4</span>,name:<span class="string">&#x27;ABX3 XYZ3&#x27;</span>,number:<span class="string">&#x27;1234567893&#x27;</span>,cvv:<span class="number">1233</span>,valid_from:<span class="string">&#x27;6/143&#x27;</span>,valid_to:<span class="string">&#x27;6/243&#x27;</span>&#125;)</span><br><span class="line">,(n4:CreditCard&#123;<span class="built_in">id</span>:<span class="number">5</span>,name:<span class="string">&#x27;ABX XYZ&#x27;</span>,number:<span class="string">&#x27;1234567890&#x27;</span>,cvv:<span class="number">123</span>,valid_from:<span class="string">&#x27;6/14&#x27;</span>,valid_to:<span class="string">&#x27;6/24&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">create (n:DebitCard&#123;<span class="built_in">id</span>:<span class="number">1</span>,name:<span class="string">&#x27;ABX XYZ&#x27;</span>,number:<span class="string">&#x27;1234567890&#x27;</span>,cvv:<span class="number">1230</span>,valid_from:<span class="string">&#x27;6/14&#x27;</span>,valid_to:<span class="string">&#x27;6/24&#x27;</span>&#125;)</span><br><span class="line">,(n1:CreditCard&#123;<span class="built_in">id</span>:<span class="number">11</span>,name:<span class="string">&#x27;ABX1 XYZ1&#x27;</span>,number:<span class="string">&#x27;1234567891&#x27;</span>,cvv:<span class="number">1231</span>,valid_from:<span class="string">&#x27;6/141&#x27;</span>,valid_to:<span class="string">&#x27;6/241&#x27;</span>&#125;)</span><br><span class="line">,(n2:CreditCard&#123;<span class="built_in">id</span>:<span class="number">12</span>,name:<span class="string">&#x27;ABX2 XYZ2&#x27;</span>,number:<span class="string">&#x27;1234567892&#x27;</span>,cvv:<span class="number">1232</span>,valid_from:<span class="string">&#x27;6/142&#x27;</span>,valid_to:<span class="string">&#x27;6/242&#x27;</span>&#125;)</span><br><span class="line">,(n3:CreditCard&#123;<span class="built_in">id</span>:<span class="number">13</span>,name:<span class="string">&#x27;ABX3 XYZ3&#x27;</span>,number:<span class="string">&#x27;1234567893&#x27;</span>,cvv:<span class="number">1233</span>,valid_from:<span class="string">&#x27;6/143&#x27;</span>,valid_to:<span class="string">&#x27;6/243&#x27;</span>&#125;)</span><br><span class="line">,(n4:CreditCard&#123;<span class="built_in">id</span>:<span class="number">14</span>,name:<span class="string">&#x27;ABX XYZ&#x27;</span>,number:<span class="string">&#x27;1234567890&#x27;</span>,cvv:<span class="number">123</span>,valid_from:<span class="string">&#x27;6/14&#x27;</span>,valid_to:<span class="string">&#x27;6/24&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line"><span class="keyword">match</span> (cc:CreditCard) <span class="keyword">return</span> cc.<span class="built_in">id</span> <span class="keyword">as</span> <span class="built_in">id</span> ,cc.number <span class="keyword">as</span> number</span><br><span class="line">UNION </span><br><span class="line"><span class="keyword">match</span> (dc:DebitCard) <span class="keyword">return</span> dc.<span class="built_in">id</span>  <span class="keyword">as</span> <span class="built_in">id</span> ,dc.number <span class="keyword">as</span> number</span><br><span class="line">//自动去掉重复从行 不用<span class="keyword">as</span></span><br><span class="line">//这里既有信用卡式和借记卡具有相同的属性名：身份证和号码，但他们有不同的节点名称前缀。</span><br><span class="line">//这就是为什么UNION命令显示此错误消息。为了避免这种错误，Neo4j的CQL提供“AS”子句。</span><br></pre></td></tr></table></figure><pre><code>[&#123;'id': '5001', 'number': '1234567890'&#125;, &#123;'id': 1, 'number': '1234567890'&#125;, &#123;'id': 2, 'number': '1234567891'&#125;, &#123;'id': 3, 'number': '1234567892'&#125;, &#123;'id': 4, 'number': '1234567893'&#125;, &#123;'id': 5, 'number': '1234567890'&#125;, &#123;'id': 11, 'number': '1234567891'&#125;, &#123;'id': 12, 'number': '1234567892'&#125;, &#123;'id': 13, 'number': '1234567893'&#125;, &#123;'id': 14, 'number': '1234567890'&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line"><span class="keyword">match</span> (cc:CreditCard) <span class="keyword">return</span> cc.<span class="built_in">id</span> <span class="keyword">as</span> <span class="built_in">id</span> ,cc.number <span class="keyword">as</span> number</span><br><span class="line">UNION  ALL</span><br><span class="line"><span class="keyword">match</span> (dc:DebitCard) <span class="keyword">return</span> dc.<span class="built_in">id</span>  <span class="keyword">as</span> <span class="built_in">id</span> ,dc.number <span class="keyword">as</span> number</span><br><span class="line">//显示所有的行</span><br></pre></td></tr></table></figure><pre><code>[&#123;'id': '5001', 'number': '1234567890'&#125;, &#123;'id': 1, 'number': '1234567890'&#125;, &#123;'id': 2, 'number': '1234567891'&#125;, &#123;'id': 3, 'number': '1234567892'&#125;, &#123;'id': 4, 'number': '1234567893'&#125;, &#123;'id': 5, 'number': '1234567890'&#125;, &#123;'id': 11, 'number': '1234567891'&#125;, &#123;'id': 12, 'number': '1234567892'&#125;, &#123;'id': 13, 'number': '1234567893'&#125;, &#123;'id': 14, 'number': '1234567890'&#125;, &#123;'id': 1, 'number': '1234567890'&#125;]</code></pre><h2 id="limit-skip"><a class="markdownIt-Anchor" href="#limit-skip"></a> LIMIT &amp; SKIP</h2><ul><li>limit n 只取结果的前n行</li><li>skip n 跳过结果的前n行</li><li>可以放在一起用</li><li>limit/skip 1 + toInteger(3 * rand())</li></ul><h2 id="merge"><a class="markdownIt-Anchor" href="#merge"></a> MERGE</h2><ul><li>MERGE命令在图中搜索给定模式</li><li>如果存在，则返回结果</li><li>如果它不存在于图中，则它创建新的节点/关系并返回结果。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line"><span class="keyword">match</span> (gp:GoogleProfile&#123; Id: <span class="number">201402</span>,Name:<span class="string">&#x27;Nokia&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span>  <span class="built_in">id</span>(gp)</span><br></pre></td></tr></table></figure><pre><code>[]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MERGE (gp:GoogleProfile&#123; Id: <span class="number">201402</span>,Name:<span class="string">&#x27;Nokia&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">id</span>(gp)</span><br></pre></td></tr></table></figure><pre><code>[&#123;'id(gp)': 248&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">merge (gp:GoogleProfile&#123;Id:<span class="number">201402</span>,Name:<span class="string">&#x27;Nokia&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">id</span>(gp)</span><br></pre></td></tr></table></figure><pre><code>[&#123;'id(gp)': 248&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MERGE (keanu:Person &#123;name: <span class="string">&#x27;mergecreated&#x27;</span>&#125;)</span><br><span class="line">ON CREATE</span><br><span class="line">  SET keanu.created = timestamp()</span><br><span class="line">RETURN keanu.name, keanu.created</span><br><span class="line">//如果没有就会创建 并添加一个timestamp</span><br></pre></td></tr></table></figure><pre><code>[&#123;'keanu.name': 'mergecreated', 'keanu.created': 1667637911668&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MERGE (person:Person&#123;name: <span class="string">&#x27;mergecreatedfound&#x27;</span>&#125;)</span><br><span class="line">ON MATCH</span><br><span class="line">  SET person.found = true</span><br><span class="line">RETURN person.name, person.found</span><br><span class="line">limit <span class="number">5</span></span><br><span class="line">//如果找到了就添加  没找到就不添加found</span><br></pre></td></tr></table></figure><pre><code>[&#123;'person.name': 'mergecreatedfound', 'person.found': True&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MERGE (keanu:Person &#123;name: <span class="string">&#x27;Keanu Reeves&#x27;</span>&#125;)</span><br><span class="line">ON CREATE</span><br><span class="line">  SET keanu.created = timestamp()</span><br><span class="line">ON MATCH</span><br><span class="line">  SET keanu.lastSeen = timestamp()</span><br><span class="line">RETURN keanu.name, keanu.created, keanu.lastSeen</span><br><span class="line">//有就是lastSeen,没有就是created</span><br></pre></td></tr></table></figure><pre><code>[&#123;'keanu.name': 'Keanu Reeves',  'keanu.created': None,  'keanu.lastSeen': 1667638041825&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (person:Person)</span><br><span class="line">MERGE (city:City &#123;name: person.bornIn&#125;)</span><br><span class="line">MERGE (person)-[r:BORN_IN]-&gt;(city)</span><br><span class="line">RETURN person.name, person.bornIn, city</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CREATE CONSTRAINT ON (n:Person) ASSERT n.name IS UNIQUE;</span></span><br><span class="line"><span class="comment"># CREATE CONSTRAINT ON (n:Person) ASSERT n.role IS UNIQUE;</span></span><br><span class="line"><span class="comment"># For example, given two unique constraints on :Person(id) and :Person(ssn), </span></span><br><span class="line"><span class="comment"># a query such as MERGE (n:Person &#123;id: 12, ssn: 437&#125;) will fail, </span></span><br><span class="line"><span class="comment"># if there are two different nodes (one with id 12 and one with ssn 437) </span></span><br><span class="line"><span class="comment"># or if there is only one node with only one of the properties. </span></span><br><span class="line"><span class="comment"># In other words, there must be exactly one node that matches the pattern, or no matching nodes.</span></span><br></pre></td></tr></table></figure><h2 id="null值"><a class="markdownIt-Anchor" href="#null值"></a> NULL值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">create (n:Book)</span><br></pre></td></tr></table></figure><pre><code>[]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (e:Book) </span><br><span class="line">RETURN e.offline,e.title,e.sal</span><br><span class="line">// <span class="literal">None</span> 就是NULL</span><br></pre></td></tr></table></figure><pre><code>[&#123;'e.offline': True, 'e.title': 'neo4j tutorial', 'e.sal': None&#125;, &#123;'e.offline': None, 'e.title': None, 'e.sal': None&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line"><span class="keyword">match</span> (book:Book)</span><br><span class="line">where book.offline <span class="keyword">is</span> <span class="keyword">not</span> null</span><br><span class="line"><span class="keyword">return</span> book</span><br><span class="line">//where book.offline <span class="keyword">is</span> null</span><br></pre></td></tr></table></figure><pre><code>[&#123;'book': Node('Book', 'Knowledge', offline=True, title='neo4j tutorial')&#125;]</code></pre><h2 id="in"><a class="markdownIt-Anchor" href="#in"></a> IN</h2><ul><li>同 python IN</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (e:Book) </span><br><span class="line">WHERE e.offline IN [true]</span><br><span class="line">RETURN e</span><br></pre></td></tr></table></figure><pre><code>[&#123;'e': Node('Book', 'Knowledge', offline=True, title='neo4j tutorial')&#125;, &#123;'e': Node('Book', offline=True, title='neo4j start')&#125;]</code></pre><h1 id="cql函数"><a class="markdownIt-Anchor" href="#cql函数"></a> CQL函数</h1><p><a href="https://neo4j.com/docs/cypher-manual/current/clauses/listing-functions/">官网</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line"><span class="keyword">return</span> datetime()</span><br></pre></td></tr></table></figure><pre><code>[&#123;'datetime()': '2022-11-04T07:36:17.068Z'&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">SHOW FUNCTIONS <span class="keyword">yield</span> name,category,description</span><br><span class="line">limit <span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (a)-[movie:ACTED_IN]-&gt;(b) </span><br><span class="line">RETURN STARTNODE(movie),ENDNODE(movie)</span><br><span class="line">limit <span class="number">5</span></span><br></pre></td></tr></table></figure><pre><code>[&#123;'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),  'ENDNODE(movie)': Node('Movie', released=2003, title=&quot;Something's Gotta Give&quot;)&#125;, &#123;'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),  'ENDNODE(movie)': Node('Movie', released=2000, tagline='Pain heals, Chicks dig scars... Glory lasts forever', title='The Replacements')&#125;, &#123;'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),  'ENDNODE(movie)': Node('Movie', released=1995, tagline='The hottest data on earth. In the coolest head in town', title='Johnny Mnemonic')&#125;, &#123;'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),  'ENDNODE(movie)': Node('Movie', released=1997, tagline='Evil has its winning ways', title=&quot;The Devil's Advocate&quot;)&#125;, &#123;'STARTNODE(movie)': Node('Person', born=1964, name='Keanu Reeves'),  'ENDNODE(movie)': Node('Movie', released=2003, tagline='Everything that has a beginning has an end', title='The Matrix Revolutions')&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (a)-[movie:ACTED_IN]-&gt;(b) </span><br><span class="line">RETURN ID(movie),TYPE(movie)</span><br><span class="line">limit <span class="number">5</span></span><br><span class="line">//<span class="built_in">type</span> 只能看relation</span><br></pre></td></tr></table></figure><pre><code>[&#123;'ID(movie)': 221, 'TYPE(movie)': 'ACTED_IN'&#125;, &#123;'ID(movie)': 114, 'TYPE(movie)': 'ACTED_IN'&#125;, &#123;'ID(movie)': 132, 'TYPE(movie)': 'ACTED_IN'&#125;, &#123;'ID(movie)': 22, 'TYPE(movie)': 'ACTED_IN'&#125;, &#123;'ID(movie)': 15, 'TYPE(movie)': 'ACTED_IN'&#125;]</code></pre><h3 id="创建索引"><a class="markdownIt-Anchor" href="#创建索引"></a> 创建索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">CREATE INDEX ON :Movie (title)</span><br></pre></td></tr></table></figure><pre><code>[]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">DROP INDEX ON :Movie (title)</span><br></pre></td></tr></table></figure><pre><code>[]</code></pre><h3 id="创建约束"><a class="markdownIt-Anchor" href="#创建约束"></a> 创建约束</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (cc:CreditCard) </span><br><span class="line">RETURN cc.<span class="built_in">id</span>,cc.number,cc.name,cc.expiredate,cc.cvv</span><br><span class="line">limit <span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">CREATE CONSTRAINT ON (cc:CreditCard)</span><br><span class="line">ASSERT cc.<span class="built_in">id</span> IS UNIQUE</span><br><span class="line">//如果已经存在重复的就不能创建,把重复的删除</span><br></pre></td></tr></table></figure><pre><code>[]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">create (cc:CreditCard&#123;<span class="built_in">id</span>:<span class="number">666</span>&#125;)</span><br><span class="line">//Node(<span class="number">246</span>) already exists <span class="keyword">with</span> label `CreditCard` <span class="keyword">and</span> <span class="built_in">property</span> `<span class="built_in">id</span>` = <span class="number">14</span></span><br></pre></td></tr></table></figure><pre><code>[]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">DROP CONSTRAINT ON (cc:CreditCard)</span><br><span class="line">ASSERT cc.<span class="built_in">id</span> IS UNIQUE</span><br></pre></td></tr></table></figure><pre><code>[]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">create (cc:CreditCard&#123;<span class="built_in">id</span>:<span class="number">666</span>&#125;)</span><br></pre></td></tr></table></figure><pre><code>[]</code></pre><h1 id="补充"><a class="markdownIt-Anchor" href="#补充"></a> 补充</h1><h2 id="with"><a class="markdownIt-Anchor" href="#with"></a> WITH</h2><ul><li>allows query parts to be chained together</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (david &#123;name: <span class="string">&#x27;Jessica Thompson&#x27;</span>&#125;)--(otherPerson)--()</span><br><span class="line">WITH otherPerson, count(*) AS foaf</span><br><span class="line">WHERE foaf &gt; <span class="number">0</span></span><br><span class="line">RETURN otherPerson.name</span><br></pre></td></tr></table></figure><pre><code>[&#123;'otherPerson.name': 'Angela Scope'&#125;, &#123;'otherPerson.name': 'Angela Scope'&#125;]</code></pre><h2 id="unwind"><a class="markdownIt-Anchor" href="#unwind"></a> UNWIND</h2><ul><li>expands a list into a sequence of rows.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">UNWIND [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, null] AS x</span><br><span class="line">RETURN x, <span class="string">&#x27;val&#x27;</span> AS y</span><br></pre></td></tr></table></figure><pre><code>[&#123;'x': 1, 'y': 'val'&#125;, &#123;'x': 2, 'y': 'val'&#125;, &#123;'x': 3, 'y': 'val'&#125;, &#123;'x': None, 'y': 'val'&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">WITH [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>] AS coll</span><br><span class="line">UNWIND coll AS x</span><br><span class="line">WITH DISTINCT x</span><br><span class="line">RETURN collect(x) AS setOfVals</span><br><span class="line">//列表去重</span><br></pre></td></tr></table></figure><pre><code>[&#123;'setOfVals': [1, 2]&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">WITH</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>] AS a,</span><br><span class="line">  [<span class="number">3</span>, <span class="number">4</span>] AS b</span><br><span class="line">UNWIND (a + b) AS x</span><br><span class="line">RETURN x</span><br></pre></td></tr></table></figure><pre><code>[&#123;'x': 1&#125;, &#123;'x': 2&#125;, &#123;'x': 3&#125;, &#123;'x': 4&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">WITH [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>] AS nested</span><br><span class="line">UNWIND nested AS x</span><br><span class="line">UNWIND x AS y</span><br><span class="line">RETURN y</span><br><span class="line">//两重循环</span><br></pre></td></tr></table></figure><pre><code>[&#123;'y': 1&#125;, &#123;'y': 2&#125;, &#123;'y': 3&#125;, &#123;'y': 4&#125;, &#123;'y': 5&#125;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">WITH [] AS <span class="built_in">list</span></span><br><span class="line">UNWIND</span><br><span class="line">  CASE</span><br><span class="line">    WHEN <span class="built_in">list</span> = [] THEN [null]</span><br><span class="line">    ELSE <span class="built_in">list</span></span><br><span class="line">  END AS emptylist</span><br><span class="line">RETURN emptylist</span><br><span class="line">//避免列表为空</span><br></pre></td></tr></table></figure><pre><code>[&#123;'emptylist': None&#125;]</code></pre><h2 id="foreach"><a class="markdownIt-Anchor" href="#foreach"></a> FOREACH</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH p=(start)-[*]-&gt;(finish)</span><br><span class="line">WHERE start.name = <span class="string">&#x27;Tom Hanks&#x27;</span> AND finish.title starts <span class="keyword">with</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line">FOREACH (n IN nodes(p) | SET n.marked = true)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">MATCH (a &#123;name: <span class="string">&#x27;Tom Hanks&#x27;</span> &#125;)</span><br><span class="line">FOREACH (name IN [<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;Carl&#x27;</span>, <span class="string">&#x27;Bruce&#x27;</span>] |</span><br><span class="line">CREATE (a)-[:FRIEND]-&gt;(:Person &#123;name: name&#125;))</span><br></pre></td></tr></table></figure><pre><code>[]</code></pre><h2 id="call"><a class="markdownIt-Anchor" href="#call"></a> CALL</h2><ul><li>CALL {}</li><li>CALL procedure</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%%cypher</span><br><span class="line">UNWIND [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>] AS x</span><br><span class="line">CALL &#123;</span><br><span class="line">  WITH x</span><br><span class="line">  RETURN x * <span class="number">10</span> AS y</span><br><span class="line">&#125;</span><br><span class="line">RETURN x, y</span><br></pre></td></tr></table></figure><pre><code>[&#123;'x': 0, 'y': 0&#125;, &#123;'x': 1, 'y': 10&#125;, &#123;'x': 2, 'y': 20&#125;]</code></pre><p>LOAD　CSV</p><ul><li>LOAD CSV FROM ‘file:///artists.csv’ AS line -正常数据</li><li>USING PERIODIC COMMIT 1000 LOAD CSV FROM ‘file:///artists.csv’ AS line -大数据,1000提交一次事物</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SHOW PROCEDURES YIELD *.</span></span><br><span class="line"><span class="comment"># SHOW FUNCTIONS YIELD *.</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://gladdduck.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Cypher学习笔记" scheme="https://gladdduck.github.io/tags/Cypher%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Neo4j浏览器端快捷键</title>
    <link href="https://gladdduck.github.io/2022/11/04/Neo4j/"/>
    <id>https://gladdduck.github.io/2022/11/04/Neo4j/</id>
    <published>2022-11-04T09:24:08.889Z</published>
    <updated>2022-11-04T09:26:04.829Z</updated>
    
    <content type="html"><![CDATA[<p>1、 执行当前命令： ctrl+enter<br />2、 历史上一个命令：ctrl+向上箭头<br />3、 切换到多行编辑：shift+enter<br />4、 将焦点转移到编辑器： /<br />5、 切换到全屏编辑： esc</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、 执行当前命令： ctrl+enter&lt;br /&gt;
2、 历史上一个命令：ctrl+向上箭头&lt;br /&gt;
3、 切换到多行编辑：shift+enter&lt;br /&gt;
4、 将焦点转移到编辑器： /&lt;br /&gt;
5、 切换到全屏编辑： esc&lt;/p&gt;
</summary>
      
    
    
    
    <category term="快捷命令" scheme="https://gladdduck.github.io/categories/%E5%BF%AB%E6%8D%B7%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="Neo4j快捷命令" scheme="https://gladdduck.github.io/tags/Neo4j%E5%BF%AB%E6%8D%B7%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Neo4j&amp;JDK安装踩坑</title>
    <link href="https://gladdduck.github.io/2022/11/03/Neo4j%E5%AE%89%E8%A3%85/"/>
    <id>https://gladdduck.github.io/2022/11/03/Neo4j%E5%AE%89%E8%A3%85/</id>
    <published>2022-11-03T09:31:04.917Z</published>
    <updated>2022-11-03T10:35:37.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>最近要开始打工了<br />😟 😟 😟 😟<br />创建一个知识图谱(可视化)嵌入到一个系统里面,当作子系统.</p><p>期待的效果是<a href="https://baike.baidu.com/lemmagraph/graphview?lemmaId=56059649&amp;featureId=06a4e94ff6154c81ede88422&amp;classify=teleplay&amp;fromModule=lemma_graph-tree">百度百科影视图谱</a>,任务太艰巨了.<br />😔 😔 😔 😔<br />如果你看到了这篇博客,有好的解决方案都可以帮帮我.<br />😘 😘 😘 😘</p><h1 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h1><h2 id="踩坑"><a class="markdownIt-Anchor" href="#踩坑"></a> 踩坑</h2><p>😭😭😭😭</p><h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">想创建多个数据库用,刚开始默认有两个,一个neo4j,一个system.</span><br><span class="line">希望创建别的数据库.</span><br><span class="line">比如:</span><br></pre></td></tr></table></figure><p><img src="https://image.yayan.xyz/20221103175926.png" alt="" /></p><p>网上搜索了很多办法,最坑的一个:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建:create database name</span><br><span class="line">删除:drop database name</span><br></pre></td></tr></table></figure><p>看着挺好,试了很多遍报错</p><p><img src="https://image.yayan.xyz/20221103180045.png" alt="" /></p><p>看了<a href="https://neo4j.com/docs/cypher-manual/4.2/administration/databases/">文档</a>才知道,<strong>这是企业版专属命令,社区版用不了…</strong></p><h2 id=""><a class="markdownIt-Anchor" href="#"></a> <img src="https://image.yayan.xyz/20221103183512.png" alt="" /></h2><h3 id="解决"><a class="markdownIt-Anchor" href="#解决"></a> 解决:</h3><p><a href="https://neo4j.com/docs/operations-manual/4.3/manage-databases/configuration/">neo4j官网</a></p><p><strong>新建数据库</strong><br />在 <code>neo4j\conf\neo4j.conf</code>中,<br />找到 <code>dbms.default_database=defaultdatabase</code><br />修改后面的名字</p><blockquote><p>如果数据库不存在,就会创建一个新的<br />如果存在,启动之后就会设为默认的数据库</p></blockquote><p>但是有一个弊端:<br /><img src="https://image.yayan.xyz/20221103175926.png" alt="" /><br />这种方式还是切换不了数据库</p><p>cypher命令 <code>use databasename</code>也不能用</p><p>上面两种方法都会报错<br /><img src="https://image.yayan.xyz/20221103180846.png" alt="" /></p><p>因为<strong>社区版只能开启一个用户数据库…</strong><br /><img src="https://image.yayan.xyz/20221103183313.png" alt="" /><br />如果想切换数据库只能修改配置文件,然后重启(neo4j restart)或者开一个新的进程(neo4j start).</p><hr /><p><strong>删除数据库</strong></p><p>把 <code>neo4j\data\</code>文件夹下面的<br /><img src="https://image.yayan.xyz/20221103181021.png" alt="" /><br />对应的数据库名字删除,即可.</p><h2 id="配置前须知"><a class="markdownIt-Anchor" href="#配置前须知"></a> 配置前须知</h2><p>neo4j现在已经到5.x了,<br />neo4j 3.x版本需要jdk8<br />neo4j 4.x版本需要jdk11</p><p>安装之前需要把jdk安装好,我用的neo4j4.3.19,<br />jdk11.2</p><h2 id="jdk安装"><a class="markdownIt-Anchor" href="#jdk安装"></a> JDK安装</h2><p>jdk有很多资料,建议找一个时间最近的,不要找好几年前的.</p><ol><li>下载jdk安装包<br /><a href="https://www.oracle.com/java/technologies/downloads/">官网下载</a>需要注册,可以用<a href="https://repo.huaweicloud.com/java/jdk/">其他镜像</a></li><li>如果需要,更改路径,但是要记住<br /><img src="https://image.yayan.xyz/20221103174240.png" alt="" /><br />(没图了,网上找的图)</li><li>一路next之后,如果jdk目录里没有jre</li></ol><blockquote><p>命令:<br />bin\jlink.exe --module-path jmods --add-modules java desktop --output jre<br />就多了一个jre文件夹</p></blockquote><ol start="4"><li>配置环境变量<br /><img src="https://image.yayan.xyz/20221103174641.png" alt="" /></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%JAVA_HOME%\bin</span><br><span class="line">%JAVA_HOME%\jre\bin</span><br></pre></td></tr></table></figure><p><img src="https://image.yayan.xyz/20221103174753.png" alt="" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</span><br></pre></td></tr></table></figure><p><img src="https://image.yayan.xyz/20221103174829.png" alt="" /></p><p><a href="https://www.cnblogs.com/zll-wyf/p/15095664.html">解释每个变量的作用</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME</span><br><span class="line">    变量名：JAVA_HOME</span><br><span class="line">    变量值：C:\develop\Java\jdk1.8.0_191</span><br><span class="line">    用途：定义一个变量，供其他地方使用</span><br><span class="line"></span><br><span class="line">Path</span><br><span class="line">    变量名：Path</span><br><span class="line">    变量值：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</span><br><span class="line">    用途：让系统在任何路径下都可以识别java、javac、javap等命令</span><br><span class="line"></span><br><span class="line">CLASSPATH</span><br><span class="line">    变量名：CLASSPATH</span><br><span class="line">    变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</span><br><span class="line">    用途：告诉jvm要使用或执行的class放在什么路径上，便于JVM加载class文件，.;表示当前路径，tools.jar和dt.jar为类库路径</span><br><span class="line"></span><br><span class="line">CLASSPATH详解</span><br><span class="line">    - tools.jar</span><br><span class="line">    工具类库(编译和运行等)，它跟我们程序中用到的基础类库没有关系。我们注意到在Path中变量值bin目录下的各个exe工具的大小都很小，一般都在27KB左右，这是因为它们实际上仅仅相当于是一层代码的包装，这些工具的实现所要用到的类库都在tools.jar中，用压缩软件打开tools.jar，你会发现有很多文件是和bin目录下的exe工具相对性的。当然，如果tools.jar的功能只有这些的话，那么我们根本不用把它加入到CLASSPATH变量中，因为bin目录下的工具自己可以完成对这些类库的调用，因此tools.jar应该还有其他的功能。在里面还可以看到有Applet和RMI等相关的文件，因此tools.jar应该还是远程调用等必须的jar包。tools.jar的其他作用可以查看其他资料。</span><br><span class="line"></span><br><span class="line">    - dt.jar</span><br><span class="line">    运行环境类库，主要是Swing包，这一点通过用压缩软件打开dt.jar也可以看到。如果在开发时候没有用到Swing包，那么可以不用将dt.jar添加到CLASSPATH变量中。</span><br><span class="line">    CLASSPATH中的类库是由Application ClassLoader或者我们自定义的类加载器来加载的，这里当然不能包括基础类库，如果包括基础类库的话，并用两个不同的自定义类加载器去加载该基础类，那它得到的该基础类就不是唯一的了，这样便不能保证Java类的安全性。</span><br><span class="line"></span><br><span class="line">    - 基本类库和扩展类库rt.jar</span><br><span class="line">    基本类库是所有的 import java.* 开头的类，在 %JAVA_HOME%\jre\lib 目录下（如其中的 rt.jar、resource.jar ），类加载机制提到，该目录下的类会由 Bootstrap ClassLoader 自动加载，并通过亲委派模型保证了基础类库只会被Bootstrap ClassLoader加载，这也就保证了基础类的唯一性。</span><br><span class="line"></span><br><span class="line">    - 扩展类库是所有的 import javax.* 开头的类，在 %JAVA_HOME%\jre\lib\ext 目录下，该目录下的类是由Extension ClassLoader 自动加载，不需要我们指定。</span><br><span class="line"></span><br><span class="line">    - rt.jar 默认就在根ClassLoader的加载路径里面，放在CLASSPATH也是多此一举。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>验证</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmd里输入:</span><br><span class="line">java -version</span><br><span class="line">javac -version</span><br></pre></td></tr></table></figure><h2 id="neo4j安装"><a class="markdownIt-Anchor" href="#neo4j安装"></a> neo4j安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">neo4j有三个版本</span><br><span class="line">一个是社区版:和桌面版基本上没区别,桌面版就是一个应用程序,社区版需要用命令行启动</span><br><span class="line">一个是企业版:收费,没用过,功能很多,上面有体会</span><br><span class="line">一个是桌面版:有可以操作的页面,方便,但是会有点慢</span><br></pre></td></tr></table></figure><ol><li><a href="https://neo4j.com/download-center/">官网下载</a>,找对应的安装zip(社区版)</li><li>下载解压</li><li>配置环境变量<br /><img src="https://image.yayan.xyz/20221103175408.png" alt="" /><br /><img src="https://image.yayan.xyz/20221103175425.png" alt="" /></li><li>cmd中输入:neo4j start 就可以启动了,浏览器输入访问</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:7474/browser/</span><br></pre></td></tr></table></figure><ol start="5"><li>默认用户名密码都是<strong>neo4j</strong></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;最近要开始打工了&lt;br /&gt;
😟 😟 😟 😟&lt;br /&gt;
创建一个知识图谱(可视化)嵌入到一个系统里面,当作子系统.&lt;/p&gt;
&lt;p&gt;期待</summary>
      
    
    
    
    <category term="杂七杂八配置" scheme="https://gladdduck.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="neo4j安装" scheme="https://gladdduck.github.io/tags/neo4j%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>多个域名访问同一个服务器</title>
    <link href="https://gladdduck.github.io/2022/10/26/%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AA%E5%9F%9F%E5%90%8D/"/>
    <id>https://gladdduck.github.io/2022/10/26/%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AA%E5%9F%9F%E5%90%8D/</id>
    <published>2022-10-26T07:22:34.389Z</published>
    <updated>2022-10-26T07:41:55.193Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a class="markdownIt-Anchor" href="#需求"></a> 需求</h2><p>有时候服务器少，但是项目多，好几个项目部署到一个服务器上。<br />或者不同的项目有不同的端口。<br />但是只有一个域名，是不是只能用一个项目呢？</p><p>NONONO<br />🙅🙅🙅🙅🙅</p><p>比如<br />我有三个域名(A,B,C)(怎么把一个域名变成三个域名，在有办法)，三个项目在服务器上(a,b,c)</p><p>研究一下怎么把A-a，B-b，C-c</p><h2 id="首先把一个域名变成多个"><a class="markdownIt-Anchor" href="#首先把一个域名变成多个"></a> 首先，把一个域名变成多个</h2><p>比如，我在腾讯云上申请了一个<strong>yayan.xyz</strong>的域名(其他云没搞过，但是同理)。</p><ol><li>打开<a href="https://console.dnspod.cn/dns">腾讯云的控制台</a>，域名解析，点进要解析的域名</li></ol><p><img src="https://image.yayan.xyz/20221026152805.png" alt="" /></p><ol start="2"><li>讲解一下重要的字段</li></ol><p><img src="https://image.yayan.xyz/20221026152932.png" alt="" /></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">主机记录：就是我们想要的域名，比如主机记录填&quot;aaa&quot;,那么就有一个新的域名aaa.yayan.xyz</span><br><span class="line">记录类型:用的不多，选A就行，有CHAME(加速?)，TXT(验证?),NS(DNS)?</span><br><span class="line">记录值:如果是A就是自己域名绑定的ip，其他的要根据你干啥填</span><br><span class="line">TTL:路由跳转的最大跳数，不重要吧?</span><br></pre></td></tr></table></figure><ol start="3"><li>点击新增字段，输入自己想要的域名，确定之后，几分钟就行了<br /><img src="https://image.yayan.xyz/20221026153242.png" alt="" /></li></ol><h2 id="然后服务器配置"><a class="markdownIt-Anchor" href="#然后服务器配置"></a> 然后，服务器配置</h2><ol><li><p>服务器下个nginx(之前觉得麻烦，没想到这么好用)<br />这个网上很多，一个命令就行了，忘了是啥了，可以搜搜</p></li><li><p>修改nginx配置文件<br />我的是：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure><p><strong>vscode连接服务器的在前一篇</strong></p><ol start="3"><li>修改监听端口对应的域名<br />我用的http所以是80，<br />https应该是443</li></ol><blockquote><p>一个例子</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen80;</span><br><span class="line">listen [::]:80;</span><br><span class="line">server_name unsplash.yayan.xyz;</span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://服务器ip:6666;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">listen80;</span><br><span class="line">listen [::]:80;</span><br><span class="line">server_name www.yayan.xyz;</span><br><span class="line">location / &#123;</span><br><span class="line">root /anaconda/pythoncode/ChargingMonitor;</span><br><span class="line">index index.html index.php index.jsp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重启nginx服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><blockquote><p>现在：<br />访问unsplash.yayan.xyz 就会跳转到6666端口对应的服务，比如gradio或者flask搭的项目接口<br />访问<br />www.yayan.xyz 就会跳转到/anaconda/pythoncode/ChargingMonitor文件夹下对应的index.html或者其他</p></blockquote><p>💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪💪</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;需求&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#需求&quot;&gt;&lt;/a&gt; 需求&lt;/h2&gt;
&lt;p&gt;有时候服务器少，但是项目多，好几个项目部署到一个服务器上。&lt;br /&gt;
或者不同的项目有不同的端口。&lt;br /&gt;
但是只有一个域名，是不是只能用</summary>
      
    
    
    
    <category term="杂七杂八配置" scheme="https://gladdduck.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="多个域名访问同一个服务器" scheme="https://gladdduck.github.io/tags/%E5%A4%9A%E4%B8%AA%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E5%90%8C%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Vscode连接阿里云服务器</title>
    <link href="https://gladdduck.github.io/2022/10/26/Vscode%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    <id>https://gladdduck.github.io/2022/10/26/Vscode%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91/</id>
    <published>2022-10-26T06:43:08.377Z</published>
    <updated>2022-10-26T07:11:48.620Z</updated>
    
    <content type="html"><![CDATA[<p>有个阿里云ECS服务器，之前一直用宝塔面板连接，方便时方便，但是有时候太占内容了。<br />本来服务器就小，一个宝塔占的差不多了。<br />后期改成Vscode。<br />其他能远程连接的软件很多，但是vscode是个神器，很推荐。</p><h2 id="方法1密钥对"><a class="markdownIt-Anchor" href="#方法1密钥对"></a> 方法1：密钥对</h2><p>用密钥对个人觉得有点，类似<strong>hexo博客搭建里面连接github</strong>.</p><ol><li><p>在阿里云控制台，找到密钥对，点进去创建密钥对<br /><img src="https://image.yayan.xyz/20221026144912.png" alt="" /></p></li><li><p>创建一个新的，名字随便起</p></li></ol><p><img src="https://image.yayan.xyz/20221026145018.png" alt="" /></p><ol start="3"><li>绑定到实例中，然后重启<br /><img src="https://image.yayan.xyz/20221026145102.png" alt="" /></li></ol><p><strong>绑定完会自动下载一个.pem文件，尽量存到C:\user\username</strong>里面的一个问价夹</p><p>如果直接放桌面或者公共文件夹，后期会报一个too open的错误</p><ol start="4"><li>打开vscode，下载remote-ssh插件，打开ssh的配置文件</li></ol><p><img src="https://image.yayan.xyz/20221026145352.png" alt="" /><br />应该是<strong>C:\Users\username\.ssh\config</strong><br />在配置文件中添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host 起个名字</span><br><span class="line">  HostName 服务器的ip(192.168.1.1)</span><br><span class="line">  IdentityFile pem的路径\xxx.pem</span><br><span class="line">  User 用户名(root)</span><br></pre></td></tr></table></figure><p>或者点击”+“号，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i <span class="string">&quot;pem路径&quot;</span> root@服务器ip</span><br></pre></td></tr></table></figure><ol start="5"><li>配置完成，打开就行了,后面会选操作系统，选个continue，忘记要不要输密码了</li></ol><blockquote><p>目前单台云服务器只支持绑定单个密钥对。若您选择已经绑定过其他密钥对的云服务器，新绑定的密钥对将会覆盖以前绑定的密钥对。绑定/解绑密钥对需要在控制台重启ECS实例才能生效</p></blockquote><blockquote><p>太麻烦了，而且我自己用的时候很多次显示Permission denied (publickey).无解，<br />强烈推荐下面一种方式</p></blockquote><h2 id="方法2用户名密码连接"><a class="markdownIt-Anchor" href="#方法2用户名密码连接"></a> 方法2：用户名密码连接</h2><p>先贴一个<a href="https://help.aliyun.com/document_detail/71529.html">阿里云官网文档</a>，通过密码或密钥认证登录Linux实例-为Linux实例开启root用户远程登录</p><ol><li><p>先用VNC连接一下，修改配置文件<br /><img src="https://image.yayan.xyz/20221026150342.png" alt="" /><br />输入用户名密码。<br />如果密码忘了，在菜单栏的实例中，修改密码<br /><img src="https://image.yayan.xyz/20221026150532.png" alt="" /></p></li><li><p>终端中，输入</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line"><span class="comment"># 如果不是root，就输入</span></span><br><span class="line">sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><ol start="3"><li>往下翻，基本上在最后</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PermitRootLogin no修改为PermitRootLogin yes。</span></span><br><span class="line"><span class="comment"># PasswordAuthentication no修改为PasswordAuthentication yes。</span></span><br><span class="line"><span class="comment"># 修改方法：</span></span><br><span class="line"><span class="comment"># 1. 找到要修改的位置，点击&quot;i&quot;,就进入编辑模式了</span></span><br><span class="line"><span class="comment"># 2. 修改改完之后按Esc键，输入:wq保存修改。</span></span><br><span class="line"><span class="comment"># 如果不是root，输入:wq!保存</span></span><br></pre></td></tr></table></figure><ol start="4"><li>重启sshd服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><ol start="5"><li>在vscode的远程连接中，修改配置文件或者直接输入</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host 起个名字</span><br><span class="line">  HostName 服务器的ip(192.168.1.1)</span><br><span class="line">  User 用户名(root)</span><br><span class="line"><span class="comment"># 或者输入 ssh root@服务器ip</span></span><br></pre></td></tr></table></figure><p>输入实例密码就连接成功了！</p><p>👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有个阿里云ECS服务器，之前一直用宝塔面板连接，方便时方便，但是有时候太占内容了。&lt;br /&gt;
本来服务器就小，一个宝塔占的差不多了。&lt;br /&gt;
后期改成Vscode。&lt;br /&gt;
其他能远程连接的软件很多，但是vscode是个神器，很推荐。&lt;/p&gt;
&lt;h2 id=&quot;方法</summary>
      
    
    
    
    <category term="杂七杂八配置" scheme="https://gladdduck.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Vscode连接阿里云服务器" scheme="https://gladdduck.github.io/tags/Vscode%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>print(Hello gitalk)</title>
    <link href="https://gladdduck.github.io/2022/10/22/hello-gitalk/"/>
    <id>https://gladdduck.github.io/2022/10/22/hello-gitalk/</id>
    <published>2022-10-22T00:58:32.349Z</published>
    <updated>2022-10-22T02:40:50.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="github上配置"><a class="markdownIt-Anchor" href="#github上配置"></a> Github上配置</h1><ol><li>xxx.github.io仓库内，找到issues-labels</li></ol><p><img src="https://image.yayan.xyz/20221020124657.png" alt="" /><br />2. 新建一个label<br /><img src="https://image.yayan.xyz/20221020124810.png" alt="" /><br />名字一定是<strong>gitalk</strong><br />用来存放提交的评论</p><ol start="3"><li>新建一个application授权</li></ol><p>打开右上角头像，【Settings】-&gt;【Developer settings】-&gt;【OAuth Apps】-&gt;【New OAuth App】</p><p><img src="https://image.yayan.xyz/20221020125047.png" alt="" /><br />Homepage URL和Authorization callback URL<br />一定是<strong><a href="http://xxxx.github.io">xxxx.github.io</a></strong> ,其他的随便填。</p><p>复制下来生成的Client ID和Client　secrets<br /><img src="https://image.yayan.xyz/20221020125332.png" alt="" /></p><h1 id="主题中配置"><a class="markdownIt-Anchor" href="#主题中配置"></a> 主题中配置</h1><ol><li>配置文件_config.yml中的设置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">comment:</span><br><span class="line">    <span class="built_in">type</span>: gitalk  <span class="comment"># 启用哪种评论系统</span></span><br><span class="line">    gitalk:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span> 开启gitalk评论，不需要配置</span><br><span class="line">    owner: github用户名</span><br><span class="line">    admin: github用户名</span><br><span class="line">    repo: 博客的仓库名称(注意不是地址)</span><br><span class="line">    ClientID: 上面生成的Client ID</span><br><span class="line">    ClientSecret: 上面生成的Client Secret</span><br><span class="line">    labels: <span class="string">&#x27;gitalk&#x27;</span> github issue 对应的issue标签（上面新建的）</span><br><span class="line">    distractionFreeMode: <span class="literal">true</span>  无干扰模式，不需要更改</span><br><span class="line">    language: zh-CN</span><br><span class="line">    <span class="comment"># proxy 如果设置之后gitalk加载不出来就设置，具体错误是什么忘记了</span></span><br><span class="line">    proxy: <span class="string">&#x27;https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>其他配置文件</li></ol><p>在 【theme】-&gt;【pure】-&gt;【layout】-&gt;【_partial】-&gt;【post】文件夹中，新建gitalk.ejs</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://unpkg.com/gitalk@latest/dist/gitalk.css&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/gitalk@latest/dist/gitalk.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://priesttomb.github.io/js/md5.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">new</span> <span class="title class_">Gitalk</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">clientID</span>: <span class="string">&#x27;上述&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">clientSecret</span>: <span class="string">&#x27;上述&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">repo</span>: <span class="string">&#x27;xxxx.github.io&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">owner</span>: <span class="string">&#x27;xxxx&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">admin</span>: <span class="string">&#x27;xxxx&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">id</span>: <span class="title function_">md5</span>(location.<span class="property">pathname</span>),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">distractionFreeMode</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">enable</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;).<span class="title function_">render</span>(<span class="string">&#x27;gitalk-container&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在 【theme】-&gt;【pure】-&gt;【layout】-&gt;【_partial】下的article.ejs新增以下：(我报错enable是undefined，我直接把这个去掉了没想到也行)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.gitalk.enable)&#123; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;gitalk-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&lt;%- include post/gitalk.ejs %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>运行</li></ol><p>现在运行hexo s应该就可以了<br />第一次登陆需要授权，后续就不需要了<br />可能会出现443或者128错误，就配置上面的proxy</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;github上配置&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#github上配置&quot;&gt;&lt;/a&gt; Github上配置&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;xxx.github.io仓库内，找到issues-labels&lt;/li&gt;
&lt;/ol&gt;
&lt;</summary>
      
    
    
    
    <category term="hexo博客配置" scheme="https://gladdduck.github.io/categories/hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="hexo博客配置gitalk" scheme="https://gladdduck.github.io/tags/hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AEgitalk/"/>
    
  </entry>
  
</feed>
